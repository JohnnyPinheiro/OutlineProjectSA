;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_109;
  highp mat3 tmpvar_110;
  tmpvar_110[0] = _Object2World[0].xyz;
  tmpvar_110[1] = _Object2World[1].xyz;
  tmpvar_110[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize((tmpvar_110 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_112 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_113;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.x;
  tmpvar_114.y = worldBinormal_4.x;
  tmpvar_114.z = worldNormal_6.x;
  tmpvar_114.w = tmpvar_105.x;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.y;
  tmpvar_115.y = worldBinormal_4.y;
  tmpvar_115.z = worldNormal_6.y;
  tmpvar_115.w = tmpvar_105.y;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.z;
  tmpvar_116.y = worldBinormal_4.z;
  tmpvar_116.z = worldNormal_6.z;
  tmpvar_116.w = tmpvar_105.z;
  lowp vec4 tmpvar_117;
  tmpvar_117.w = 1.0;
  tmpvar_117.xyz = worldNormal_6;
  mediump vec4 normal_118;
  normal_118 = tmpvar_117;
  mediump vec3 x2_119;
  mediump vec4 tmpvar_120;
  tmpvar_120 = (normal_118.xyzz * normal_118.yzzx);
  x2_119.x = dot (unity_SHBr, tmpvar_120);
  x2_119.y = dot (unity_SHBg, tmpvar_120);
  x2_119.z = dot (unity_SHBb, tmpvar_120);
  highp vec3 lightColor0_121;
  lightColor0_121 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_122;
  lightColor1_122 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_123;
  lightColor2_123 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_124;
  lightColor3_124 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_125;
  lightAttenSq_125 = unity_4LightAtten0;
  highp vec3 normal_126;
  normal_126 = worldNormal_6;
  highp vec3 col_127;
  highp vec4 ndotl_128;
  highp vec4 lengthSq_129;
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosX0 - tmpvar_105.x);
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosY0 - tmpvar_105.y);
  highp vec4 tmpvar_132;
  tmpvar_132 = (unity_4LightPosZ0 - tmpvar_105.z);
  lengthSq_129 = (tmpvar_130 * tmpvar_130);
  lengthSq_129 = (lengthSq_129 + (tmpvar_131 * tmpvar_131));
  lengthSq_129 = (lengthSq_129 + (tmpvar_132 * tmpvar_132));
  ndotl_128 = (tmpvar_130 * normal_126.x);
  ndotl_128 = (ndotl_128 + (tmpvar_131 * normal_126.y));
  ndotl_128 = (ndotl_128 + (tmpvar_132 * normal_126.z));
  highp vec4 tmpvar_133;
  tmpvar_133 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_128 * inversesqrt(lengthSq_129)));
  ndotl_128 = tmpvar_133;
  highp vec4 tmpvar_134;
  tmpvar_134 = (tmpvar_133 * (1.0/((1.0 + 
    (lengthSq_129 * lightAttenSq_125)
  ))));
  col_127 = (lightColor0_121 * tmpvar_134.x);
  col_127 = (col_127 + (lightColor1_122 * tmpvar_134.y));
  col_127 = (col_127 + (lightColor2_123 * tmpvar_134.z));
  col_127 = (col_127 + (lightColor3_124 * tmpvar_134.w));
  tmpvar_8 = ((x2_119 + (unity_SHC.xyz * 
    ((normal_118.x * normal_118.x) - (normal_118.y * normal_118.y))
  )) + col_127);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_114;
  xlv_TEXCOORD1 = tmpvar_115;
  xlv_TEXCOORD2 = tmpvar_116;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_100;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 22885
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22886
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 22887
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 22888
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 22889
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 22890
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 22891
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 22892
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 22893
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 22894
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 22895
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 22896
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22897
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 22898
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 22899
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 22900
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 22901
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 22902
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 22903
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 22904
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 22905
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 22906
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 22907
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 22908
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 22909
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 22910
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 22911
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 22912
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 22913
        //FRC
        t34.x = fract(t34.x);
        //Instruction 22914
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 22915
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 22916
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 22917
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 22918
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 22919
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 22920
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 22921
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 22922
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 22923
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 22924
        //IF
        if(tb51){
            //Instruction 22925
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 22926
            //FRC
            t5 = fract(t5);
            //Instruction 22927
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22928
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 22929
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 22930
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 22931
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 22932
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 22933
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22934
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 22935
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22936
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 22937
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22938
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 22939
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 22940
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 22941
            //SQRT
            t52 = sqrt(t52);
            //Instruction 22942
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 22943
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 22944
            //MUL
            t54 = t54 * t55;
            //Instruction 22945
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 22946
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 22947
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 22948
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 22949
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 22950
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 22951
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 22952
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 22953
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 22954
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 22955
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 22956
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 22957
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 22958
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 22959
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 22960
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 22961
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 22962
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 22963
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 22964
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 22965
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 22966
            //SQRT
            t54 = sqrt(t54);
            //Instruction 22967
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 22968
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 22969
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 22970
            //MUL
            t6.x = t54 * t55;
            //Instruction 22971
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 22972
            //LT
            tb20 = t20<(-t20);
            //Instruction 22973
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 22974
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 22975
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 22976
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 22977
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 22978
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22979
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 22980
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22981
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 22982
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22983
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 22984
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 22985
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 22986
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 22987
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 22988
            //LOG
            t51 = log2(t51);
            //Instruction 22989
            //MUL
            t51 = t51 * t7.y;
            //Instruction 22990
            //EXP
            t51 = exp2(t51);
            //Instruction 22991
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 22992
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 22993
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 22994
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 22995
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 22996
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 22997
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 22998
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 22999
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 23000
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 23001
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 23002
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 23003
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 23004
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 23005
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 23006
            //MOV
            t11.z = t12.x;
            //Instruction 23007
            //MOV
            t11.w = t10.x;
            //Instruction 23008
            //MOV
            t13.z = t9.y;
            //Instruction 23009
            //MOV
            t13.w = t14.y;
            //Instruction 23010
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 23011
            //MOV
            t14.w = t13.y;
            //Instruction 23012
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 23013
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 23014
            //MOV
            t10.w = t11.y;
            //Instruction 23015
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 23016
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 23017
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 23018
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 23019
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 23020
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 23021
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 23022
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 23023
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 23024
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 23025
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 23026
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 23027
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 23028
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 23029
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 23030
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 23031
        //ELSE
        } else {
            //Instruction 23032
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 23033
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 23034
        //ENDIF
        }
        //Instruction 23035
    //ELSE
    } else {
        //Instruction 23036
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 23037
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 23038
    //ENDIF
    }
    //Instruction 23039
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 23040
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 23041
    //IF
    if(tb52){
        //Instruction 23042
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 23043
        //IF
        if(tb52){
            //Instruction 23044
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23045
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 23046
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 23047
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 23048
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 23049
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 23050
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23051
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 23052
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23053
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 23054
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 23055
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 23056
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23057
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23058
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 23059
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23060
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23061
            //FRC
            t2 = fract(t2);
            //Instruction 23062
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23063
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 23064
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23065
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23066
            //ADD
            t2 = t2 + t2;
            //Instruction 23067
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 23068
            //LT
            tb54 = t7.w<0.0;
            //Instruction 23069
            //MOV
            t7.y = (-t7.w);
            //Instruction 23070
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 23071
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 23072
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 23073
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 23074
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 23075
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 23076
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 23077
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23078
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23079
            //MUL
            t56 = t2.x * t56;
            //Instruction 23080
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 23081
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23082
            //MUL
            t54 = t54 * t55;
            //Instruction 23083
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 23084
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 23085
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23086
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23087
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23088
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 23089
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 23090
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23091
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 23092
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23093
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 23094
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 23095
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 23096
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 23097
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23098
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 23099
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 23100
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 23101
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23102
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 23103
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 23104
        //ELSE
        } else {
            //Instruction 23105
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23106
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23107
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23108
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 23109
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23110
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23111
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23112
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 23113
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 23114
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23115
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 23116
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23117
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 23118
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23119
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23120
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 23121
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 23122
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23123
            //MOV
            t2.y = (-t2.w);
            //Instruction 23124
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23125
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23126
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 23127
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 23128
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 23129
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 23130
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23131
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23132
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23133
            //MUL
            t54 = t54 * t6.x;
            //Instruction 23134
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 23135
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 23136
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 23137
        //ENDIF
        }
        //Instruction 23138
    //ENDIF
    }
    //Instruction 23139
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 23140
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23141
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23142
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 23143
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 23144
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 23145
    //NE
    tb54 = t52!=0.0;
    //Instruction 23146
    //LOG
    t55 = log2(t52);
    //Instruction 23147
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 23148
    //EXP
    t55 = exp2(t55);
    //Instruction 23149
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 23150
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23151
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23152
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 23153
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 23154
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23155
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 23156
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23157
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 23158
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 23159
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 23160
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23161
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 23162
    //MUL
    t52 = t52 * t54;
    //Instruction 23163
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 23164
    //MOV
    t5.y = t4.y;
    //Instruction 23165
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 23166
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 23167
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 23168
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 23169
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 23170
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 23171
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 23172
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 23173
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 23174
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 23175
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 23176
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 23177
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 23178
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 23179
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 23180
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 23181
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 23182
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 23183
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23184
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 23185
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 23186
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 23187
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 23188
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 23189
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 23190
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 23191
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 23192
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 23193
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 23194
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 23195
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 23196
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 23197
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 23198
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 23199
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 23200
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 23201
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 23202
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 23203
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 23204
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 23205
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 23206
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 23207
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 23208
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 23209
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 23210
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 23211
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 23212
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 23213
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 23214
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 23215
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 23216
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 23217
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 23218
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 23219
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 23220
    //ADD
    t7 = (-t3.zzzz) + unity_4LightPosY0;
    //Instruction 23221
    //ADD
    t8 = (-t3.wwww) + unity_4LightPosZ0;
    //Instruction 23222
    //MUL
    t9 = t7 * t7;
    //Instruction 23223
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 23224
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 23225
    //MUL
    t7 = t0.yyyy * t7;
    //Instruction 23226
    //MAD
    t2 = t2 * t0.xxxx + t7;
    //Instruction 23227
    //MAD
    t2 = t8 * t0.wwww + t2;
    //Instruction 23228
    //RSQ
    t7 = inversesqrt(t9);
    //Instruction 23229
    //MUL
    t2 = t2 * t7;
    //Instruction 23230
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 23231
    //MAD
    t7 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 23232
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 23233
    //MUL
    t2 = t2 * t7;
    //Instruction 23234
    //MUL
    t7.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 23235
    //MAD
    t7.xyz = unity_LightColor[0].xyz * t2.xxx + t7.xyz;
    //Instruction 23236
    //MAD
    t7.xyz = unity_LightColor[2].xyz * t2.zzz + t7.xyz;
    //Instruction 23237
    //MAD
    t7.xyz = unity_LightColor[3].xyz * t2.www + t7.xyz;
    //Instruction 23238
    //ADD
    t7.xyz = t7.xyz + t16_16.xyz;
    //Instruction 23239
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 23240
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 23241
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 23242
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 23243
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 23244
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 23245
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 23246
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 23247
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 23248
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 23249
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 23250
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 23251
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 23252
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23253
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 23254
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 23255
    //MOV
    vs_TEXCOORD6.xyz = t7.xyz;
    //Instruction 23256
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 22845
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 22846
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 22847
    //MOV
    t1.x = t16_0.x;
    //Instruction 22848
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 22849
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 22850
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 22851
    //LT
    tb1 = t16_1<0.0;
    //Instruction 22852
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22853
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 22854
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 22855
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 22856
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22857
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 22858
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 22859
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 22860
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 22861
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 22862
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 22863
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 22864
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 22865
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 22866
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 22867
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 22868
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 22869
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 22870
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 22871
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 22872
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 22873
    //MOV
    t0.w = 1.0;
    //Instruction 22874
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 22875
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 22876
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 22877
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22878
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 22879
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 22880
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 22881
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 22882
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 22883
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22884
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_20 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_19;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (FinalPosition_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_18.zxy) - (tmpvar_33.zxy * vRotatedWindVector_18.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_18, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_16 = vDirection_27;
    FinalPosition_19 = vPos_26;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_19;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_19 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_17 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_19 = vPos_67;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 hPos_100;
  hPos_100 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_101;
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (hPos_100 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = hPos_100.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  screenPos_101 = tmpvar_105;
  screenPos_101.xy = (screenPos_101.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.x;
  tmpvar_115.y = worldBinormal_4.x;
  tmpvar_115.z = worldNormal_6.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.y;
  tmpvar_116.y = worldBinormal_4.y;
  tmpvar_116.z = worldNormal_6.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_5.z;
  tmpvar_117.y = worldBinormal_4.z;
  tmpvar_117.z = worldNormal_6.z;
  tmpvar_117.w = tmpvar_106.z;
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_6;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  highp vec3 lightColor0_122;
  lightColor0_122 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_123;
  lightColor1_123 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_124;
  lightColor2_124 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_125;
  lightColor3_125 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_126;
  lightAttenSq_126 = unity_4LightAtten0;
  highp vec3 normal_127;
  normal_127 = worldNormal_6;
  highp vec3 col_128;
  highp vec4 ndotl_129;
  highp vec4 lengthSq_130;
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosX0 - tmpvar_106.x);
  highp vec4 tmpvar_132;
  tmpvar_132 = (unity_4LightPosY0 - tmpvar_106.y);
  highp vec4 tmpvar_133;
  tmpvar_133 = (unity_4LightPosZ0 - tmpvar_106.z);
  lengthSq_130 = (tmpvar_131 * tmpvar_131);
  lengthSq_130 = (lengthSq_130 + (tmpvar_132 * tmpvar_132));
  lengthSq_130 = (lengthSq_130 + (tmpvar_133 * tmpvar_133));
  ndotl_129 = (tmpvar_131 * normal_127.x);
  ndotl_129 = (ndotl_129 + (tmpvar_132 * normal_127.y));
  ndotl_129 = (ndotl_129 + (tmpvar_133 * normal_127.z));
  highp vec4 tmpvar_134;
  tmpvar_134 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_129 * inversesqrt(lengthSq_130)));
  ndotl_129 = tmpvar_134;
  highp vec4 tmpvar_135;
  tmpvar_135 = (tmpvar_134 * (1.0/((1.0 + 
    (lengthSq_130 * lightAttenSq_126)
  ))));
  col_128 = (lightColor0_122 * tmpvar_135.x);
  col_128 = (col_128 + (lightColor1_123 * tmpvar_135.y));
  col_128 = (col_128 + (lightColor2_124 * tmpvar_135.z));
  col_128 = (col_128 + (lightColor3_125 * tmpvar_135.w));
  tmpvar_8 = ((x2_120 + (unity_SHC.xyz * 
    ((normal_119.x * normal_119.x) - (normal_119.y * normal_119.y))
  )) + col_128);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = screenPos_101;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_109;
  highp mat3 tmpvar_110;
  tmpvar_110[0] = _Object2World[0].xyz;
  tmpvar_110[1] = _Object2World[1].xyz;
  tmpvar_110[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize((tmpvar_110 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_112 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_113;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.x;
  tmpvar_114.y = worldBinormal_4.x;
  tmpvar_114.z = worldNormal_6.x;
  tmpvar_114.w = tmpvar_105.x;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.y;
  tmpvar_115.y = worldBinormal_4.y;
  tmpvar_115.z = worldNormal_6.y;
  tmpvar_115.w = tmpvar_105.y;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.z;
  tmpvar_116.y = worldBinormal_4.z;
  tmpvar_116.z = worldNormal_6.z;
  tmpvar_116.w = tmpvar_105.z;
  lowp vec4 tmpvar_117;
  tmpvar_117.w = 1.0;
  tmpvar_117.xyz = worldNormal_6;
  mediump vec4 normal_118;
  normal_118 = tmpvar_117;
  mediump vec3 x2_119;
  mediump vec4 tmpvar_120;
  tmpvar_120 = (normal_118.xyzz * normal_118.yzzx);
  x2_119.x = dot (unity_SHBr, tmpvar_120);
  x2_119.y = dot (unity_SHBg, tmpvar_120);
  x2_119.z = dot (unity_SHBb, tmpvar_120);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_114;
  xlv_TEXCOORD1 = tmpvar_115;
  xlv_TEXCOORD2 = tmpvar_116;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_100;
  xlv_TEXCOORD6 = (x2_119 + (unity_SHC.xyz * (
    (normal_118.x * normal_118.x)
   - 
    (normal_118.y * normal_118.y)
  )));
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 23301
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23302
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23303
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 23304
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23305
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 23306
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 23307
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 23308
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 23309
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23310
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 23311
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 23312
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23313
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23314
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23315
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 23316
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 23317
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 23318
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 23319
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 23320
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 23321
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 23322
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 23323
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 23324
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 23325
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 23326
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 23327
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 23328
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 23329
        //FRC
        t34.x = fract(t34.x);
        //Instruction 23330
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 23331
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 23332
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 23333
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 23334
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 23335
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 23336
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 23337
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 23338
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 23339
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 23340
        //IF
        if(tb51){
            //Instruction 23341
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 23342
            //FRC
            t5 = fract(t5);
            //Instruction 23343
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23344
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 23345
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 23346
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 23347
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 23348
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 23349
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 23350
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 23351
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23352
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 23353
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23354
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 23355
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 23356
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 23357
            //SQRT
            t52 = sqrt(t52);
            //Instruction 23358
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 23359
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 23360
            //MUL
            t54 = t54 * t55;
            //Instruction 23361
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 23362
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 23363
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 23364
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 23365
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 23366
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 23367
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 23368
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 23369
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 23370
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 23371
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 23372
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 23373
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 23374
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 23375
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 23376
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 23377
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 23378
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 23379
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 23380
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 23381
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 23382
            //SQRT
            t54 = sqrt(t54);
            //Instruction 23383
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 23384
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 23385
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 23386
            //MUL
            t6.x = t54 * t55;
            //Instruction 23387
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 23388
            //LT
            tb20 = t20<(-t20);
            //Instruction 23389
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 23390
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 23391
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 23392
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 23393
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 23394
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 23395
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 23396
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23397
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 23398
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23399
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 23400
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 23401
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 23402
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 23403
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 23404
            //LOG
            t51 = log2(t51);
            //Instruction 23405
            //MUL
            t51 = t51 * t7.y;
            //Instruction 23406
            //EXP
            t51 = exp2(t51);
            //Instruction 23407
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 23408
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 23409
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 23410
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 23411
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 23412
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 23413
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 23414
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 23415
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 23416
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 23417
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 23418
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 23419
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 23420
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 23421
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 23422
            //MOV
            t11.z = t12.x;
            //Instruction 23423
            //MOV
            t11.w = t10.x;
            //Instruction 23424
            //MOV
            t13.z = t9.y;
            //Instruction 23425
            //MOV
            t13.w = t14.y;
            //Instruction 23426
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 23427
            //MOV
            t14.w = t13.y;
            //Instruction 23428
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 23429
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 23430
            //MOV
            t10.w = t11.y;
            //Instruction 23431
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 23432
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 23433
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 23434
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 23435
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 23436
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 23437
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 23438
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 23439
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 23440
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 23441
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 23442
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 23443
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 23444
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 23445
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 23446
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 23447
        //ELSE
        } else {
            //Instruction 23448
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 23449
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 23450
        //ENDIF
        }
        //Instruction 23451
    //ELSE
    } else {
        //Instruction 23452
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 23453
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 23454
    //ENDIF
    }
    //Instruction 23455
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 23456
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 23457
    //IF
    if(tb52){
        //Instruction 23458
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 23459
        //IF
        if(tb52){
            //Instruction 23460
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23461
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 23462
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 23463
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 23464
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 23465
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 23466
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23467
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 23468
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23469
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 23470
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 23471
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 23472
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23473
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23474
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 23475
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23476
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23477
            //FRC
            t2 = fract(t2);
            //Instruction 23478
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23479
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 23480
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23481
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23482
            //ADD
            t2 = t2 + t2;
            //Instruction 23483
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 23484
            //LT
            tb54 = t7.w<0.0;
            //Instruction 23485
            //MOV
            t7.y = (-t7.w);
            //Instruction 23486
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 23487
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 23488
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 23489
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 23490
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 23491
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 23492
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 23493
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23494
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23495
            //MUL
            t56 = t2.x * t56;
            //Instruction 23496
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 23497
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23498
            //MUL
            t54 = t54 * t55;
            //Instruction 23499
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 23500
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 23501
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23502
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23503
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23504
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 23505
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 23506
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23507
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 23508
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23509
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 23510
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 23511
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 23512
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 23513
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23514
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 23515
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 23516
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 23517
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23518
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 23519
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 23520
        //ELSE
        } else {
            //Instruction 23521
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23522
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23523
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23524
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 23525
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23526
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23527
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23528
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 23529
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 23530
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23531
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 23532
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23533
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 23534
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23535
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23536
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 23537
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 23538
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23539
            //MOV
            t2.y = (-t2.w);
            //Instruction 23540
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23541
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23542
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 23543
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 23544
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 23545
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 23546
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23547
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23548
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23549
            //MUL
            t54 = t54 * t6.x;
            //Instruction 23550
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 23551
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 23552
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 23553
        //ENDIF
        }
        //Instruction 23554
    //ENDIF
    }
    //Instruction 23555
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 23556
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23557
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23558
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 23559
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 23560
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 23561
    //NE
    tb54 = t52!=0.0;
    //Instruction 23562
    //LOG
    t55 = log2(t52);
    //Instruction 23563
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 23564
    //EXP
    t55 = exp2(t55);
    //Instruction 23565
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 23566
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23567
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23568
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 23569
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 23570
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23571
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 23572
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23573
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 23574
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 23575
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 23576
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23577
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 23578
    //MUL
    t52 = t52 * t54;
    //Instruction 23579
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 23580
    //MOV
    t5.y = t4.y;
    //Instruction 23581
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 23582
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 23583
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 23584
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 23585
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 23586
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 23587
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 23588
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 23589
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 23590
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 23591
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 23592
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 23593
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 23594
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 23595
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 23596
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 23597
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 23598
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 23599
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23600
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 23601
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 23602
    //MAD
    t5.xyz = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 23603
    //MAD
    t5.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 23604
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 23605
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 23606
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 23607
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 23608
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 23609
    //MOV
    t6.zw = _World2Object[2].yy;
    //Instruction 23610
    //MUL
    t6 = t34.yyyy * t6;
    //Instruction 23611
    //MAD
    t0 = t2 * t34.xxxx + t6;
    //Instruction 23612
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 23613
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 23614
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 23615
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 23616
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 23617
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 23618
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 23619
    //MUL
    t6.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 23620
    //MAD
    t6.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t6.xyz;
    //Instruction 23621
    //MAD
    t6.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t6.xyz;
    //Instruction 23622
    //DP3
    t52 = dot(t6.xyz, t6.xyz);
    //Instruction 23623
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 23624
    //MUL
    t6.xyz = vec3(t52) * t6.xyz;
    //Instruction 23625
    //MUL
    t10_15.xyz = t0.wxy * t6.xyz;
    //Instruction 23626
    //MAD
    t10_15.xyz = t0.ywx * t6.yzx + (-t10_15.xyz);
    //Instruction 23627
    //MUL
    t7.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 23628
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 23629
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 23630
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 23631
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 23632
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 23633
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 23634
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 23635
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 23636
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 23637
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 23638
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 23639
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 23640
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 23641
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 23642
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 23643
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 23644
    //MOV
    vs_TEXCOORD0.y = t7.x;
    //Instruction 23645
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 23646
    //MOV
    vs_TEXCOORD0.w = t5.x;
    //Instruction 23647
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 23648
    //MOV
    vs_TEXCOORD1.y = t7.y;
    //Instruction 23649
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 23650
    //MOV
    vs_TEXCOORD1.w = t5.y;
    //Instruction 23651
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 23652
    //MOV
    vs_TEXCOORD2.y = t7.z;
    //Instruction 23653
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 23654
    //MOV
    vs_TEXCOORD2.w = t5.z;
    //Instruction 23655
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 23656
    //MOV
    vs_TEXCOORD7 = t2;
    //Instruction 23657
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23658
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 23659
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 23660
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 23257
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 23258
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 23259
    //MOV
    t1.x = t16_0.x;
    //Instruction 23260
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 23261
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 23262
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 23263
    //LT
    tb1 = t16_1<0.0;
    //Instruction 23264
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 23265
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 23266
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 23267
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 23268
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 23269
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 23270
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 23271
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 23272
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 23273
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 23274
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 23275
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 23276
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 23277
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 23278
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 23279
    //SAMPLE_C_LZ
    vec3 txVec52 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec52, 0.0);
    //Instruction 23280
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 23281
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 23282
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 23283
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 23284
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 23285
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 23286
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 23287
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 23288
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 23289
    //MOV
    t0.w = 1.0;
    //Instruction 23290
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 23291
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 23292
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 23293
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23294
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 23295
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 23296
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 23297
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 23298
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 23299
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23300
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_20 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_19;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (FinalPosition_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_18.zxy) - (tmpvar_33.zxy * vRotatedWindVector_18.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_18, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_16 = vDirection_27;
    FinalPosition_19 = vPos_26;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_19;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_19 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_17 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_19 = vPos_67;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 hPos_100;
  hPos_100 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_101;
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (hPos_100 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = hPos_100.zw;
  highp vec3 tmpvar_105;
  tmpvar_105 = o_102.xyw;
  screenPos_101 = tmpvar_105;
  screenPos_101.xy = (screenPos_101.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_106;
  tmpvar_106 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize(((
    (v_107.xyz * tmpvar_16.x)
   + 
    (v_108.xyz * tmpvar_16.y)
  ) + (v_109.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_110;
  highp mat3 tmpvar_111;
  tmpvar_111[0] = _Object2World[0].xyz;
  tmpvar_111[1] = _Object2World[1].xyz;
  tmpvar_111[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_112;
  tmpvar_112 = normalize((tmpvar_111 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_112;
  lowp vec3 tmpvar_113;
  tmpvar_113 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_114;
  tmpvar_114 = (tmpvar_113 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.x;
  tmpvar_115.y = worldBinormal_4.x;
  tmpvar_115.z = worldNormal_6.x;
  tmpvar_115.w = tmpvar_106.x;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.y;
  tmpvar_116.y = worldBinormal_4.y;
  tmpvar_116.z = worldNormal_6.y;
  tmpvar_116.w = tmpvar_106.y;
  highp vec4 tmpvar_117;
  tmpvar_117.x = worldTangent_5.z;
  tmpvar_117.y = worldBinormal_4.z;
  tmpvar_117.z = worldNormal_6.z;
  tmpvar_117.w = tmpvar_106.z;
  lowp vec4 tmpvar_118;
  tmpvar_118.w = 1.0;
  tmpvar_118.xyz = worldNormal_6;
  mediump vec4 normal_119;
  normal_119 = tmpvar_118;
  mediump vec3 x2_120;
  mediump vec4 tmpvar_121;
  tmpvar_121 = (normal_119.xyzz * normal_119.yzzx);
  x2_120.x = dot (unity_SHBr, tmpvar_121);
  x2_120.y = dot (unity_SHBg, tmpvar_121);
  x2_120.z = dot (unity_SHBb, tmpvar_121);
  highp vec3 lightColor0_122;
  lightColor0_122 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_123;
  lightColor1_123 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_124;
  lightColor2_124 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_125;
  lightColor3_125 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_126;
  lightAttenSq_126 = unity_4LightAtten0;
  highp vec3 normal_127;
  normal_127 = worldNormal_6;
  highp vec3 col_128;
  highp vec4 ndotl_129;
  highp vec4 lengthSq_130;
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosX0 - tmpvar_106.x);
  highp vec4 tmpvar_132;
  tmpvar_132 = (unity_4LightPosY0 - tmpvar_106.y);
  highp vec4 tmpvar_133;
  tmpvar_133 = (unity_4LightPosZ0 - tmpvar_106.z);
  lengthSq_130 = (tmpvar_131 * tmpvar_131);
  lengthSq_130 = (lengthSq_130 + (tmpvar_132 * tmpvar_132));
  lengthSq_130 = (lengthSq_130 + (tmpvar_133 * tmpvar_133));
  ndotl_129 = (tmpvar_131 * normal_127.x);
  ndotl_129 = (ndotl_129 + (tmpvar_132 * normal_127.y));
  ndotl_129 = (ndotl_129 + (tmpvar_133 * normal_127.z));
  highp vec4 tmpvar_134;
  tmpvar_134 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_129 * inversesqrt(lengthSq_130)));
  ndotl_129 = tmpvar_134;
  highp vec4 tmpvar_135;
  tmpvar_135 = (tmpvar_134 * (1.0/((1.0 + 
    (lengthSq_130 * lightAttenSq_126)
  ))));
  col_128 = (lightColor0_122 * tmpvar_135.x);
  col_128 = (col_128 + (lightColor1_123 * tmpvar_135.y));
  col_128 = (col_128 + (lightColor2_124 * tmpvar_135.z));
  col_128 = (col_128 + (lightColor3_125 * tmpvar_135.w));
  tmpvar_8 = ((x2_120 + (unity_SHC.xyz * 
    ((normal_119.x * normal_119.x) - (normal_119.y * normal_119.y))
  )) + col_128);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_115;
  xlv_TEXCOORD1 = tmpvar_116;
  xlv_TEXCOORD2 = tmpvar_117;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = screenPos_101;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 22271
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22272
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 22273
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 22274
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 22275
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 22276
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 22277
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 22278
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 22279
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 22280
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 22281
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 22282
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22283
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 22284
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 22285
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 22286
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 22287
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 22288
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 22289
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 22290
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 22291
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 22292
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 22293
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 22294
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 22295
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 22296
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 22297
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 22298
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 22299
        //FRC
        t34.x = fract(t34.x);
        //Instruction 22300
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 22301
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 22302
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 22303
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 22304
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 22305
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 22306
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 22307
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 22308
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 22309
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 22310
        //IF
        if(tb51){
            //Instruction 22311
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 22312
            //FRC
            t5 = fract(t5);
            //Instruction 22313
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22314
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 22315
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 22316
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 22317
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 22318
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 22319
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22320
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 22321
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22322
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 22323
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22324
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 22325
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 22326
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 22327
            //SQRT
            t52 = sqrt(t52);
            //Instruction 22328
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 22329
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 22330
            //MUL
            t54 = t54 * t55;
            //Instruction 22331
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 22332
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 22333
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 22334
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 22335
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 22336
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 22337
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 22338
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 22339
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 22340
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 22341
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 22342
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 22343
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 22344
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 22345
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 22346
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 22347
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 22348
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 22349
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 22350
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 22351
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 22352
            //SQRT
            t54 = sqrt(t54);
            //Instruction 22353
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 22354
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 22355
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 22356
            //MUL
            t6.x = t54 * t55;
            //Instruction 22357
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 22358
            //LT
            tb20 = t20<(-t20);
            //Instruction 22359
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 22360
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 22361
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 22362
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 22363
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 22364
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22365
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 22366
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22367
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 22368
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22369
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 22370
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 22371
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 22372
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 22373
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 22374
            //LOG
            t51 = log2(t51);
            //Instruction 22375
            //MUL
            t51 = t51 * t7.y;
            //Instruction 22376
            //EXP
            t51 = exp2(t51);
            //Instruction 22377
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 22378
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 22379
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 22380
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 22381
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 22382
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 22383
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 22384
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 22385
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 22386
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 22387
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 22388
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 22389
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 22390
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 22391
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 22392
            //MOV
            t11.z = t12.x;
            //Instruction 22393
            //MOV
            t11.w = t10.x;
            //Instruction 22394
            //MOV
            t13.z = t9.y;
            //Instruction 22395
            //MOV
            t13.w = t14.y;
            //Instruction 22396
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 22397
            //MOV
            t14.w = t13.y;
            //Instruction 22398
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 22399
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 22400
            //MOV
            t10.w = t11.y;
            //Instruction 22401
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 22402
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 22403
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 22404
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 22405
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 22406
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 22407
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 22408
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 22409
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 22410
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 22411
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 22412
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 22413
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 22414
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 22415
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 22416
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 22417
        //ELSE
        } else {
            //Instruction 22418
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 22419
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 22420
        //ENDIF
        }
        //Instruction 22421
    //ELSE
    } else {
        //Instruction 22422
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 22423
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 22424
    //ENDIF
    }
    //Instruction 22425
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 22426
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 22427
    //IF
    if(tb52){
        //Instruction 22428
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 22429
        //IF
        if(tb52){
            //Instruction 22430
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22431
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 22432
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 22433
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 22434
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 22435
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 22436
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22437
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22438
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22439
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 22440
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 22441
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 22442
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22443
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 22444
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 22445
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 22446
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22447
            //FRC
            t2 = fract(t2);
            //Instruction 22448
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22449
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 22450
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22451
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22452
            //ADD
            t2 = t2 + t2;
            //Instruction 22453
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 22454
            //LT
            tb54 = t7.w<0.0;
            //Instruction 22455
            //MOV
            t7.y = (-t7.w);
            //Instruction 22456
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 22457
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 22458
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 22459
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 22460
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 22461
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 22462
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 22463
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22464
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22465
            //MUL
            t56 = t2.x * t56;
            //Instruction 22466
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 22467
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22468
            //MUL
            t54 = t54 * t55;
            //Instruction 22469
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 22470
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22471
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22472
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22473
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22474
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 22475
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 22476
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22477
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 22478
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22479
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 22480
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 22481
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 22482
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 22483
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22484
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 22485
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 22486
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 22487
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22488
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 22489
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 22490
        //ELSE
        } else {
            //Instruction 22491
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22492
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22493
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22494
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 22495
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 22496
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 22497
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22498
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 22499
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 22500
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22501
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22502
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22503
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 22504
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22505
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22506
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 22507
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 22508
            //LT
            tb0 = t2.w<0.0;
            //Instruction 22509
            //MOV
            t2.y = (-t2.w);
            //Instruction 22510
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 22511
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 22512
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 22513
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 22514
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 22515
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 22516
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 22517
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22518
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22519
            //MUL
            t54 = t54 * t6.x;
            //Instruction 22520
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 22521
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 22522
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22523
        //ENDIF
        }
        //Instruction 22524
    //ENDIF
    }
    //Instruction 22525
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 22526
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 22527
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22528
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 22529
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 22530
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 22531
    //NE
    tb54 = t52!=0.0;
    //Instruction 22532
    //LOG
    t55 = log2(t52);
    //Instruction 22533
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 22534
    //EXP
    t55 = exp2(t55);
    //Instruction 22535
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 22536
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22537
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22538
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 22539
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 22540
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22541
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 22542
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22543
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 22544
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 22545
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 22546
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22547
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 22548
    //MUL
    t52 = t52 * t54;
    //Instruction 22549
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 22550
    //MOV
    t5.y = t4.y;
    //Instruction 22551
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 22552
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 22553
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 22554
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 22555
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 22556
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 22557
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 22558
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 22559
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 22560
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 22561
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 22562
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 22563
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 22564
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 22565
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 22566
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 22567
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 22568
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 22569
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 22570
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 22571
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 22572
    //MAD
    t5.xyz = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 22573
    //MAD
    t5.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 22574
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 22575
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 22576
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 22577
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 22578
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 22579
    //MOV
    t6.zw = _World2Object[2].yy;
    //Instruction 22580
    //MUL
    t6 = t34.yyyy * t6;
    //Instruction 22581
    //MAD
    t0 = t2 * t34.xxxx + t6;
    //Instruction 22582
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 22583
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 22584
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 22585
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 22586
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 22587
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 22588
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 22589
    //MUL
    t6.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 22590
    //MAD
    t6.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t6.xyz;
    //Instruction 22591
    //MAD
    t6.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t6.xyz;
    //Instruction 22592
    //DP3
    t52 = dot(t6.xyz, t6.xyz);
    //Instruction 22593
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 22594
    //MUL
    t6.xyz = vec3(t52) * t6.xyz;
    //Instruction 22595
    //MUL
    t10_15.xyz = t0.wxy * t6.xyz;
    //Instruction 22596
    //MAD
    t10_15.xyz = t0.ywx * t6.yzx + (-t10_15.xyz);
    //Instruction 22597
    //MUL
    t7.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 22598
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 22599
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 22600
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 22601
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 22602
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 22603
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 22604
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 22605
    //ADD
    t2 = (-t5.xxxx) + unity_4LightPosX0;
    //Instruction 22606
    //ADD
    t8 = (-t5.yyyy) + unity_4LightPosY0;
    //Instruction 22607
    //ADD
    t9 = (-t5.zzzz) + unity_4LightPosZ0;
    //Instruction 22608
    //MUL
    t10 = t8 * t8;
    //Instruction 22609
    //MAD
    t10 = t2 * t2 + t10;
    //Instruction 22610
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 22611
    //MUL
    t8 = t0.yyyy * t8;
    //Instruction 22612
    //MAD
    t2 = t2 * t0.xxxx + t8;
    //Instruction 22613
    //MAD
    t2 = t9 * t0.wwww + t2;
    //Instruction 22614
    //RSQ
    t8 = inversesqrt(t10);
    //Instruction 22615
    //MUL
    t2 = t2 * t8;
    //Instruction 22616
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 22617
    //MAD
    t8 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 22618
    //DIV
    t8 = vec4(1.0, 1.0, 1.0, 1.0) / t8;
    //Instruction 22619
    //MUL
    t2 = t2 * t8;
    //Instruction 22620
    //MUL
    t8.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 22621
    //MAD
    t8.xyz = unity_LightColor[0].xyz * t2.xxx + t8.xyz;
    //Instruction 22622
    //MAD
    t8.xyz = unity_LightColor[2].xyz * t2.zzz + t8.xyz;
    //Instruction 22623
    //MAD
    t8.xyz = unity_LightColor[3].xyz * t2.www + t8.xyz;
    //Instruction 22624
    //ADD
    t8.xyz = t8.xyz + t16_16.xyz;
    //Instruction 22625
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 22626
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 22627
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 22628
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 22629
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 22630
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 22631
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 22632
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 22633
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 22634
    //MOV
    vs_TEXCOORD0.y = t7.x;
    //Instruction 22635
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 22636
    //MOV
    vs_TEXCOORD0.w = t5.x;
    //Instruction 22637
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 22638
    //MOV
    vs_TEXCOORD1.y = t7.y;
    //Instruction 22639
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 22640
    //MOV
    vs_TEXCOORD1.w = t5.y;
    //Instruction 22641
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 22642
    //MOV
    vs_TEXCOORD2.y = t7.z;
    //Instruction 22643
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 22644
    //MOV
    vs_TEXCOORD2.w = t5.z;
    //Instruction 22645
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 22646
    //MOV
    vs_TEXCOORD7 = t2;
    //Instruction 22647
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 22648
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 22649
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 22650
    //MOV
    vs_TEXCOORD6.xyz = t8.xyz;
    //Instruction 22651
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 22227
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 22228
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 22229
    //MOV
    t1.x = t16_0.x;
    //Instruction 22230
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 22231
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 22232
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 22233
    //LT
    tb1 = t16_1<0.0;
    //Instruction 22234
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22235
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 22236
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 22237
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 22238
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22239
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 22240
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 22241
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 22242
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 22243
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 22244
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 22245
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 22246
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 22247
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 22248
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 22249
    //SAMPLE_C_LZ
    vec3 txVec60 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec60, 0.0);
    //Instruction 22250
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 22251
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 22252
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 22253
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 22254
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 22255
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 22256
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 22257
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 22258
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 22259
    //MOV
    t0.w = 1.0;
    //Instruction 22260
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 22261
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 22262
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 22263
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22264
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 22265
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 22266
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 22267
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 22268
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 22269
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22270
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  ZWrite Off
  Cull [_Cull]
  Blend One One
  GpuProgramID 69452
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(tmpvar_14)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 22919
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22920
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 22921
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 22922
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22923
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 22924
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 22925
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 22926
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 22927
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 22928
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 22929
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 22930
    //IF
    if(tb19){
        //Instruction 22931
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 22932
        //IF
        if(tb19){
            //Instruction 22933
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22934
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 22935
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 22936
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 22937
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 22938
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 22939
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22940
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 22941
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22942
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 22943
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 22944
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 22945
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 22946
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22947
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 22948
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 22949
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 22950
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22951
            //FRC
            t0 = fract(t0);
            //Instruction 22952
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22953
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 22954
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22955
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22956
            //ADD
            t0 = t0 + t0;
            //Instruction 22957
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 22958
            //LT
            tb20 = t4.w<0.0;
            //Instruction 22959
            //MOV
            t4.y = (-t4.w);
            //Instruction 22960
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 22961
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 22962
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 22963
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 22964
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 22965
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 22966
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 22967
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22968
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22969
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 22970
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 22971
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22972
            //MUL
            t20 = t20 * t21;
            //Instruction 22973
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 22974
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 22975
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22976
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22977
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22978
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 22979
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 22980
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22981
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 22982
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22983
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 22984
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 22985
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 22986
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 22987
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22988
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 22989
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 22990
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 22991
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22992
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 22993
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 22994
        //ELSE
        } else {
            //Instruction 22995
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22996
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 22997
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22998
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 22999
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23000
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23001
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 23002
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23003
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 23004
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 23005
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23006
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23007
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23008
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 23009
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23010
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23011
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 23012
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 23013
            //LT
            tb19 = t0.w<0.0;
            //Instruction 23014
            //MOV
            t0.y = (-t0.w);
            //Instruction 23015
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 23016
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 23017
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 23018
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 23019
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 23020
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 23021
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 23022
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23023
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23024
            //MUL
            t21 = t21 * t4.x;
            //Instruction 23025
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 23026
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 23027
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23028
        //ENDIF
        }
        //Instruction 23029
    //ELSE
    } else {
        //Instruction 23030
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 23031
    //ENDIF
    }
    //Instruction 23032
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 23033
    //SQRT
    t19 = sqrt(t19);
    //Instruction 23034
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23035
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 23036
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 23037
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 23038
    //NE
    tb3 = t20!=0.0;
    //Instruction 23039
    //LOG
    t9 = log2(t20);
    //Instruction 23040
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 23041
    //EXP
    t9 = exp2(t9);
    //Instruction 23042
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 23043
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23044
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23045
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 23046
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 23047
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23048
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 23049
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23050
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 23051
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 23052
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 23053
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23054
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 23055
    //MUL
    t20 = t20 * t3.x;
    //Instruction 23056
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 23057
    //MOV
    t3.y = t2.y;
    //Instruction 23058
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 23059
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 23060
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 23061
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 23062
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 23063
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 23064
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 23065
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 23066
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 23067
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 23068
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 23069
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 23070
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 23071
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 23072
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 23073
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 23074
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 23075
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 23076
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 23077
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 23078
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 23079
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 23080
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 23081
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 23082
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 23083
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 23084
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 23085
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 23086
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 23087
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23088
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 23089
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 23090
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 22899
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 22900
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 22901
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 22902
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 22903
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 22904
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 22905
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 22906
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 22907
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 22908
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 22909
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 22910
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 22911
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 22912
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 22913
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 22914
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 22915
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 22916
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 22917
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22918
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 23100
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23101
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 23102
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 23103
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23104
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 23105
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 23106
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 23107
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 23108
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 23109
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 23110
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 23111
    //IF
    if(tb19){
        //Instruction 23112
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 23113
        //IF
        if(tb19){
            //Instruction 23114
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23115
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 23116
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 23117
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 23118
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 23119
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23120
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23121
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23122
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23123
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23124
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23125
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23126
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 23127
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23128
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 23129
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 23130
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 23131
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23132
            //FRC
            t0 = fract(t0);
            //Instruction 23133
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23134
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 23135
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23136
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23137
            //ADD
            t0 = t0 + t0;
            //Instruction 23138
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 23139
            //LT
            tb20 = t4.w<0.0;
            //Instruction 23140
            //MOV
            t4.y = (-t4.w);
            //Instruction 23141
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 23142
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 23143
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 23144
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 23145
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 23146
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 23147
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 23148
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23149
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23150
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 23151
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 23152
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23153
            //MUL
            t20 = t20 * t21;
            //Instruction 23154
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 23155
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23156
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23157
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23158
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23159
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 23160
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 23161
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23162
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 23163
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23164
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 23165
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 23166
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 23167
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 23168
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23169
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 23170
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 23171
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 23172
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23173
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23174
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 23175
        //ELSE
        } else {
            //Instruction 23176
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23177
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23178
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23179
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23180
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23181
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23182
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 23183
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23184
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 23185
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 23186
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23187
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23188
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23189
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 23190
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23191
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23192
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 23193
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 23194
            //LT
            tb19 = t0.w<0.0;
            //Instruction 23195
            //MOV
            t0.y = (-t0.w);
            //Instruction 23196
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 23197
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 23198
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 23199
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 23200
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 23201
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 23202
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 23203
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23204
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23205
            //MUL
            t21 = t21 * t4.x;
            //Instruction 23206
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 23207
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 23208
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23209
        //ENDIF
        }
        //Instruction 23210
    //ELSE
    } else {
        //Instruction 23211
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 23212
    //ENDIF
    }
    //Instruction 23213
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 23214
    //SQRT
    t19 = sqrt(t19);
    //Instruction 23215
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23216
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 23217
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 23218
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 23219
    //NE
    tb3 = t20!=0.0;
    //Instruction 23220
    //LOG
    t9 = log2(t20);
    //Instruction 23221
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 23222
    //EXP
    t9 = exp2(t9);
    //Instruction 23223
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 23224
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23225
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23226
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 23227
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 23228
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23229
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 23230
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23231
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 23232
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 23233
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 23234
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23235
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 23236
    //MUL
    t20 = t20 * t3.x;
    //Instruction 23237
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 23238
    //MOV
    t3.y = t2.y;
    //Instruction 23239
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 23240
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 23241
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 23242
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 23243
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 23244
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 23245
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 23246
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 23247
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 23248
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 23249
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 23250
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 23251
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 23252
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 23253
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 23254
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 23255
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 23256
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 23257
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 23258
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 23259
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 23260
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 23261
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 23262
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 23263
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 23264
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 23265
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 23266
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 23267
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 23268
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23269
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 23270
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 23271
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_7;
void main()
{
    //Instruction 23091
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23092
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23093
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 23094
    //DP3
    t16_7 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23095
    //MAX
    t16_7 = max(t16_7, 0.0);
    //Instruction 23096
    //MUL
    t16_1.xyz = vec3(t16_7) * t16_1.xyz;
    //Instruction 23097
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 23098
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23099
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lightCoord_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  mediump vec2 P_17;
  P_17 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp vec3 LightCoord_18;
  LightCoord_18 = lightCoord_5.xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (LightCoord_18, LightCoord_18);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(tmpvar_19));
  mediump float tmpvar_21;
  tmpvar_21 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_16.w) * tmpvar_20.w);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_10 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_11;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 23688
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23689
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 23690
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 23691
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23692
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 23693
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 23694
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 23695
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 23696
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 23697
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 23698
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 23699
    //IF
    if(tb19){
        //Instruction 23700
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 23701
        //IF
        if(tb19){
            //Instruction 23702
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23703
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 23704
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 23705
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 23706
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 23707
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23708
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23709
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23710
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23711
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23712
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23713
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23714
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 23715
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23716
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 23717
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 23718
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 23719
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23720
            //FRC
            t0 = fract(t0);
            //Instruction 23721
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23722
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 23723
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23724
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23725
            //ADD
            t0 = t0 + t0;
            //Instruction 23726
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 23727
            //LT
            tb20 = t4.w<0.0;
            //Instruction 23728
            //MOV
            t4.y = (-t4.w);
            //Instruction 23729
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 23730
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 23731
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 23732
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 23733
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 23734
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 23735
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 23736
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23737
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23738
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 23739
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 23740
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23741
            //MUL
            t20 = t20 * t21;
            //Instruction 23742
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 23743
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23744
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23745
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23746
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23747
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 23748
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 23749
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23750
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 23751
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23752
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 23753
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 23754
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 23755
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 23756
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23757
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 23758
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 23759
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 23760
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23761
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23762
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 23763
        //ELSE
        } else {
            //Instruction 23764
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23765
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23766
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23767
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23768
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23769
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23770
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 23771
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23772
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 23773
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 23774
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23775
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23776
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23777
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 23778
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23779
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23780
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 23781
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 23782
            //LT
            tb19 = t0.w<0.0;
            //Instruction 23783
            //MOV
            t0.y = (-t0.w);
            //Instruction 23784
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 23785
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 23786
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 23787
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 23788
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 23789
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 23790
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 23791
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23792
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23793
            //MUL
            t21 = t21 * t4.x;
            //Instruction 23794
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 23795
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 23796
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23797
        //ENDIF
        }
        //Instruction 23798
    //ELSE
    } else {
        //Instruction 23799
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 23800
    //ENDIF
    }
    //Instruction 23801
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 23802
    //SQRT
    t19 = sqrt(t19);
    //Instruction 23803
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23804
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 23805
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 23806
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 23807
    //NE
    tb3 = t20!=0.0;
    //Instruction 23808
    //LOG
    t9 = log2(t20);
    //Instruction 23809
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 23810
    //EXP
    t9 = exp2(t9);
    //Instruction 23811
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 23812
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23813
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23814
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 23815
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 23816
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23817
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 23818
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23819
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 23820
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 23821
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 23822
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23823
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 23824
    //MUL
    t20 = t20 * t3.x;
    //Instruction 23825
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 23826
    //MOV
    t3.y = t2.y;
    //Instruction 23827
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 23828
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 23829
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 23830
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 23831
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 23832
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 23833
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 23834
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 23835
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 23836
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 23837
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 23838
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 23839
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 23840
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 23841
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 23842
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 23843
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 23844
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 23845
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 23846
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 23847
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 23848
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 23849
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 23850
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 23851
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 23852
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 23853
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 23854
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 23855
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 23856
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23857
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 23858
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 23859
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
highp float t14;
void main()
{
    //Instruction 23661
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 23662
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 23663
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 23664
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 23665
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 23666
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 23667
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 23668
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 23669
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 23670
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 23671
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 23672
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 23673
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 23674
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 23675
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23676
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23677
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 23678
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 23679
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 23680
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 23681
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 23682
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 23683
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 23684
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 23685
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 23686
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23687
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(tmpvar_14)).w * textureCube (_LightTexture0, tmpvar_13).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 23882
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23883
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 23884
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 23885
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23886
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 23887
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 23888
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 23889
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 23890
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 23891
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 23892
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 23893
    //IF
    if(tb19){
        //Instruction 23894
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 23895
        //IF
        if(tb19){
            //Instruction 23896
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23897
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 23898
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 23899
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 23900
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 23901
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23902
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23903
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23904
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23905
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23906
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23907
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23908
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 23909
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23910
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 23911
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 23912
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 23913
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23914
            //FRC
            t0 = fract(t0);
            //Instruction 23915
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23916
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 23917
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23918
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23919
            //ADD
            t0 = t0 + t0;
            //Instruction 23920
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 23921
            //LT
            tb20 = t4.w<0.0;
            //Instruction 23922
            //MOV
            t4.y = (-t4.w);
            //Instruction 23923
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 23924
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 23925
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 23926
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 23927
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 23928
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 23929
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 23930
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23931
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23932
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 23933
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 23934
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23935
            //MUL
            t20 = t20 * t21;
            //Instruction 23936
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 23937
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23938
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23939
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23940
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23941
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 23942
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 23943
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23944
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 23945
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23946
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 23947
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 23948
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 23949
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 23950
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23951
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 23952
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 23953
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 23954
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23955
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23956
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 23957
        //ELSE
        } else {
            //Instruction 23958
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23959
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23960
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23961
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23962
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23963
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23964
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 23965
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23966
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 23967
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 23968
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23969
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23970
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23971
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 23972
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23973
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23974
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 23975
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 23976
            //LT
            tb19 = t0.w<0.0;
            //Instruction 23977
            //MOV
            t0.y = (-t0.w);
            //Instruction 23978
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 23979
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 23980
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 23981
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 23982
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 23983
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 23984
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 23985
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23986
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23987
            //MUL
            t21 = t21 * t4.x;
            //Instruction 23988
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 23989
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 23990
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23991
        //ENDIF
        }
        //Instruction 23992
    //ELSE
    } else {
        //Instruction 23993
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 23994
    //ENDIF
    }
    //Instruction 23995
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 23996
    //SQRT
    t19 = sqrt(t19);
    //Instruction 23997
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23998
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 23999
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 24000
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 24001
    //NE
    tb3 = t20!=0.0;
    //Instruction 24002
    //LOG
    t9 = log2(t20);
    //Instruction 24003
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 24004
    //EXP
    t9 = exp2(t9);
    //Instruction 24005
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 24006
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24007
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24008
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 24009
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 24010
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24011
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 24012
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24013
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 24014
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 24015
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 24016
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24017
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 24018
    //MUL
    t20 = t20 * t3.x;
    //Instruction 24019
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 24020
    //MOV
    t3.y = t2.y;
    //Instruction 24021
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 24022
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 24023
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 24024
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 24025
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 24026
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 24027
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 24028
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 24029
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 24030
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 24031
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 24032
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 24033
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 24034
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 24035
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 24036
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 24037
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 24038
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 24039
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 24040
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 24041
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 24042
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 24043
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 24044
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 24045
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 24046
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24047
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24048
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24049
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 24050
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24051
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 24052
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 24053
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 23860
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 23861
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 23862
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 23863
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 23864
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 23865
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 23866
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 23867
    //MUL
    t16_1 = t10_4 * t10_1.x;
    //Instruction 23868
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 23869
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23870
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23871
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 23872
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 23873
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 23874
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 23875
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 23876
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 23877
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 23878
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 23879
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 23880
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23881
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xy;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, tmpvar_13).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_14);
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 24069
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24070
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 24071
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 24072
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24073
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 24074
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 24075
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 24076
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24077
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 24078
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 24079
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 24080
    //IF
    if(tb19){
        //Instruction 24081
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 24082
        //IF
        if(tb19){
            //Instruction 24083
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24084
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 24085
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 24086
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 24087
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 24088
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24089
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24090
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24091
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24092
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24093
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24094
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24095
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 24096
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24097
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 24098
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 24099
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 24100
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24101
            //FRC
            t0 = fract(t0);
            //Instruction 24102
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24103
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 24104
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24105
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24106
            //ADD
            t0 = t0 + t0;
            //Instruction 24107
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 24108
            //LT
            tb20 = t4.w<0.0;
            //Instruction 24109
            //MOV
            t4.y = (-t4.w);
            //Instruction 24110
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 24111
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 24112
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 24113
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 24114
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 24115
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 24116
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 24117
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24118
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24119
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 24120
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 24121
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24122
            //MUL
            t20 = t20 * t21;
            //Instruction 24123
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 24124
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24125
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24126
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24127
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24128
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 24129
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 24130
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24131
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 24132
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24133
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 24134
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 24135
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 24136
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 24137
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24138
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 24139
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 24140
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 24141
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24142
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24143
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 24144
        //ELSE
        } else {
            //Instruction 24145
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24146
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24147
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24148
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24149
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24150
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24151
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 24152
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24153
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 24154
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 24155
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24156
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24157
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24158
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 24159
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24160
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24161
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 24162
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 24163
            //LT
            tb19 = t0.w<0.0;
            //Instruction 24164
            //MOV
            t0.y = (-t0.w);
            //Instruction 24165
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 24166
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 24167
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 24168
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 24169
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 24170
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 24171
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 24172
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24173
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24174
            //MUL
            t21 = t21 * t4.x;
            //Instruction 24175
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 24176
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24177
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24178
        //ENDIF
        }
        //Instruction 24179
    //ELSE
    } else {
        //Instruction 24180
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 24181
    //ENDIF
    }
    //Instruction 24182
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 24183
    //SQRT
    t19 = sqrt(t19);
    //Instruction 24184
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24185
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 24186
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 24187
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 24188
    //NE
    tb3 = t20!=0.0;
    //Instruction 24189
    //LOG
    t9 = log2(t20);
    //Instruction 24190
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 24191
    //EXP
    t9 = exp2(t9);
    //Instruction 24192
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 24193
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24194
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24195
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 24196
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 24197
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24198
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 24199
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24200
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 24201
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 24202
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 24203
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24204
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 24205
    //MUL
    t20 = t20 * t3.x;
    //Instruction 24206
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 24207
    //MOV
    t3.y = t2.y;
    //Instruction 24208
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 24209
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 24210
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 24211
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 24212
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 24213
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 24214
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 24215
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 24216
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 24217
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 24218
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 24219
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 24220
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 24221
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 24222
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 24223
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 24224
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 24225
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 24226
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 24227
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 24228
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 24229
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 24230
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 24231
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 24232
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 24233
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24234
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24235
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24236
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 24237
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24238
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 24239
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 24240
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
void main()
{
    //Instruction 24054
    //MUL
    t16_0.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 24055
    //MAD
    t16_0.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_0.xy;
    //Instruction 24056
    //MAD
    t16_0.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_0.xy;
    //Instruction 24057
    //ADD
    t16_0.xy = t16_0.xy + _LightMatrix0[3].xy;
    //Instruction 24058
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 24059
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 24060
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24061
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24062
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 24063
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 24064
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 24065
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 24066
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24067
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24068
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 22681
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22682
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 22683
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 22684
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 22685
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 22686
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 22687
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 22688
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 22689
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 22690
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 22691
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 22692
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22693
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 22694
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 22695
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 22696
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 22697
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 22698
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 22699
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 22700
    //IF
    if(tb22){
        //Instruction 22701
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 22702
        //IF
        if(tb22){
            //Instruction 22703
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22704
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 22705
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 22706
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 22707
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 22708
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 22709
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22710
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22711
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22712
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22713
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 22714
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 22715
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22716
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 22717
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 22718
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 22719
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22720
            //FRC
            t2 = fract(t2);
            //Instruction 22721
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22722
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 22723
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22724
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22725
            //ADD
            t2 = t2 + t2;
            //Instruction 22726
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 22727
            //LT
            tb24 = t5.w<0.0;
            //Instruction 22728
            //MOV
            t5.y = (-t5.w);
            //Instruction 22729
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 22730
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 22731
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 22732
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 22733
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 22734
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 22735
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 22736
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22737
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22738
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 22739
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 22740
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22741
            //MUL
            t24 = t24 * t25;
            //Instruction 22742
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 22743
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 22744
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22745
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22746
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22747
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 22748
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 22749
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22750
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 22751
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22752
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 22753
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 22754
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 22755
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 22756
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22757
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 22758
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 22759
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 22760
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22761
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 22762
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 22763
        //ELSE
        } else {
            //Instruction 22764
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22765
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22766
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22767
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22768
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 22769
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 22770
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22771
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 22772
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 22773
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22774
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22775
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22776
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 22777
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22778
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22779
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 22780
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 22781
            //LT
            tb0 = t2.w<0.0;
            //Instruction 22782
            //MOV
            t2.y = (-t2.w);
            //Instruction 22783
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 22784
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 22785
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 22786
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 22787
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 22788
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 22789
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 22790
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22791
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22792
            //MUL
            t24 = t24 * t5.x;
            //Instruction 22793
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 22794
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 22795
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 22796
        //ENDIF
        }
        //Instruction 22797
    //ELSE
    } else {
        //Instruction 22798
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 22799
    //ENDIF
    }
    //Instruction 22800
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 22801
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 22802
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22803
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 22804
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 22805
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 22806
    //NE
    tb24 = t22!=0.0;
    //Instruction 22807
    //LOG
    t4.x = log2(t22);
    //Instruction 22808
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 22809
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 22810
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 22811
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22812
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22813
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 22814
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 22815
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22816
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 22817
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22818
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 22819
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 22820
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 22821
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22822
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 22823
    //MUL
    t22 = t22 * t24;
    //Instruction 22824
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 22825
    //MOV
    t4.y = t3.y;
    //Instruction 22826
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 22827
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 22828
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 22829
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 22830
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 22831
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 22832
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 22833
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 22834
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 22835
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 22836
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 22837
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 22838
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 22839
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 22840
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 22841
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 22842
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 22843
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 22844
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 22845
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 22846
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 22847
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 22848
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 22849
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 22850
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 22851
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 22852
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 22853
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 22854
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 22855
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 22856
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 22857
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 22858
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t9;
mediump float t16_10;
void main()
{
    //Instruction 22652
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 22653
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 22654
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 22655
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 22656
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 22657
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 22658
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 22659
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 22660
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 22661
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 22662
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 22663
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 22664
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 22665
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 22666
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 22667
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 22668
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 22669
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 22670
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 22671
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 22672
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 22673
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 22674
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 22675
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 22676
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 22677
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 22678
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 22679
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22680
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 22877
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22878
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 22879
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 22880
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 22881
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 22882
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 22883
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 22884
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 22885
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 22886
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 22887
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 22888
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22889
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 22890
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 22891
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 22892
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 22893
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 22894
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 22895
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 22896
    //IF
    if(tb22){
        //Instruction 22897
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 22898
        //IF
        if(tb22){
            //Instruction 22899
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22900
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 22901
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 22902
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 22903
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 22904
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 22905
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22906
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22907
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22908
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22909
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 22910
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 22911
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22912
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 22913
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 22914
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 22915
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22916
            //FRC
            t2 = fract(t2);
            //Instruction 22917
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22918
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 22919
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22920
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22921
            //ADD
            t2 = t2 + t2;
            //Instruction 22922
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 22923
            //LT
            tb24 = t5.w<0.0;
            //Instruction 22924
            //MOV
            t5.y = (-t5.w);
            //Instruction 22925
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 22926
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 22927
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 22928
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 22929
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 22930
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 22931
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 22932
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22933
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22934
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 22935
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 22936
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22937
            //MUL
            t24 = t24 * t25;
            //Instruction 22938
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 22939
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 22940
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22941
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22942
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22943
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 22944
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 22945
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22946
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 22947
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22948
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 22949
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 22950
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 22951
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 22952
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22953
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 22954
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 22955
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 22956
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22957
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 22958
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 22959
        //ELSE
        } else {
            //Instruction 22960
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22961
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22962
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22963
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22964
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 22965
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 22966
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22967
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 22968
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 22969
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22970
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22971
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22972
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 22973
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22974
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22975
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 22976
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 22977
            //LT
            tb0 = t2.w<0.0;
            //Instruction 22978
            //MOV
            t2.y = (-t2.w);
            //Instruction 22979
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 22980
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 22981
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 22982
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 22983
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 22984
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 22985
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 22986
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22987
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22988
            //MUL
            t24 = t24 * t5.x;
            //Instruction 22989
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 22990
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 22991
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 22992
        //ENDIF
        }
        //Instruction 22993
    //ELSE
    } else {
        //Instruction 22994
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 22995
    //ENDIF
    }
    //Instruction 22996
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 22997
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 22998
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22999
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 23000
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 23001
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 23002
    //NE
    tb24 = t22!=0.0;
    //Instruction 23003
    //LOG
    t4.x = log2(t22);
    //Instruction 23004
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23005
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23006
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 23007
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23008
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23009
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23010
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23011
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23012
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23013
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23014
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23015
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23016
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 23017
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23018
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 23019
    //MUL
    t22 = t22 * t24;
    //Instruction 23020
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 23021
    //MOV
    t4.y = t3.y;
    //Instruction 23022
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 23023
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 23024
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 23025
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23026
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 23027
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23028
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23029
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23030
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23031
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23032
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23033
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23034
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23035
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 23036
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 23037
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 23038
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 23039
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 23040
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 23041
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23042
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23043
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 23044
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 23045
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 23046
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23047
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 23048
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 23049
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 23050
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 23051
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23052
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23053
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 23054
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_10;
void main()
{
    //Instruction 22859
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 22860
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 22861
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 22862
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 22863
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 22864
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 22865
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 22866
    //DIV
    t16_10 = t16_2 / t16_10;
    //Instruction 22867
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 22868
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 22869
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 22870
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 22871
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22872
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 22873
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 22874
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 22875
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22876
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_5.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 24277
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24278
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24279
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 24280
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24281
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 24282
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 24283
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 24284
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 24285
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24286
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24287
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 24288
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24289
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24290
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24291
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 24292
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24293
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 24294
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 24295
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 24296
    //IF
    if(tb22){
        //Instruction 24297
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 24298
        //IF
        if(tb22){
            //Instruction 24299
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24300
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24301
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24302
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 24303
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 24304
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24305
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24306
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24307
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24308
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24309
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 24310
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 24311
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24312
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24313
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 24314
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24315
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24316
            //FRC
            t2 = fract(t2);
            //Instruction 24317
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24318
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24319
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24320
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24321
            //ADD
            t2 = t2 + t2;
            //Instruction 24322
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24323
            //LT
            tb24 = t5.w<0.0;
            //Instruction 24324
            //MOV
            t5.y = (-t5.w);
            //Instruction 24325
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24326
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 24327
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 24328
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 24329
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 24330
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 24331
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 24332
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24333
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24334
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24335
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 24336
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24337
            //MUL
            t24 = t24 * t25;
            //Instruction 24338
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 24339
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24340
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24341
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24342
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24343
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24344
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24345
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24346
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24347
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24348
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24349
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24350
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24351
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 24352
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24353
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 24354
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 24355
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24356
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24357
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24358
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24359
        //ELSE
        } else {
            //Instruction 24360
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24361
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24362
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24363
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24364
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24365
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24366
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24367
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24368
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24369
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24370
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24371
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24372
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24373
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24374
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24375
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24376
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24377
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24378
            //MOV
            t2.y = (-t2.w);
            //Instruction 24379
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24380
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24381
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24382
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24383
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 24384
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 24385
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24386
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24387
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24388
            //MUL
            t24 = t24 * t5.x;
            //Instruction 24389
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 24390
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24391
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24392
        //ENDIF
        }
        //Instruction 24393
    //ELSE
    } else {
        //Instruction 24394
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24395
    //ENDIF
    }
    //Instruction 24396
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24397
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24398
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24399
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 24400
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 24401
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 24402
    //NE
    tb24 = t22!=0.0;
    //Instruction 24403
    //LOG
    t4.x = log2(t22);
    //Instruction 24404
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24405
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24406
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 24407
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24408
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24409
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24410
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24411
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24412
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24413
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24414
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24415
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24416
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 24417
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24418
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 24419
    //MUL
    t22 = t22 * t24;
    //Instruction 24420
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 24421
    //MOV
    t4.y = t3.y;
    //Instruction 24422
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 24423
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24424
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 24425
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24426
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 24427
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24428
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24429
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24430
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24431
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24432
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24433
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24434
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24435
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 24436
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 24437
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 24438
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 24439
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 24440
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 24441
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24442
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24443
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 24444
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 24445
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 24446
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24447
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 24448
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 24449
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 24450
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 24451
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24452
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24453
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 24454
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
mediump float t16_13;
highp float t14;
void main()
{
    //Instruction 24241
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 24242
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 24243
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 24244
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 24245
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 24246
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 24247
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 24248
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 24249
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 24250
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 24251
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 24252
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 24253
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 24254
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 24255
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24256
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 24257
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 24258
    //MAX
    t16_12 = max(t16_1.z, t16_1.y);
    //Instruction 24259
    //MAX
    t16_12 = max(t16_12, t16_1.x);
    //Instruction 24260
    //MAX
    t16_13 = max(t10_2.z, t10_2.y);
    //Instruction 24261
    //MAX
    t16_13 = max(t16_13, t10_2.x);
    //Instruction 24262
    //DIV
    t16_12 = t16_13 / t16_12;
    //Instruction 24263
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 24264
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 24265
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24266
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 24267
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24268
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 24269
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 24270
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 24271
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 24272
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 24273
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 24274
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24275
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24276
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 23303
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23304
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23305
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 23306
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23307
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 23308
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 23309
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 23310
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 23311
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23312
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 23313
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 23314
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23315
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23316
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23317
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 23318
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 23319
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 23320
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 23321
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 23322
    //IF
    if(tb22){
        //Instruction 23323
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 23324
        //IF
        if(tb22){
            //Instruction 23325
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23326
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 23327
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 23328
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 23329
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 23330
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 23331
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23332
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23333
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23334
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23335
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 23336
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 23337
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23338
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23339
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 23340
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23341
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23342
            //FRC
            t2 = fract(t2);
            //Instruction 23343
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23344
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 23345
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23346
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23347
            //ADD
            t2 = t2 + t2;
            //Instruction 23348
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 23349
            //LT
            tb24 = t5.w<0.0;
            //Instruction 23350
            //MOV
            t5.y = (-t5.w);
            //Instruction 23351
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 23352
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 23353
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 23354
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 23355
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 23356
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 23357
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 23358
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23359
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23360
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 23361
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 23362
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23363
            //MUL
            t24 = t24 * t25;
            //Instruction 23364
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 23365
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23366
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23367
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23368
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23369
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 23370
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 23371
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23372
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 23373
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23374
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 23375
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 23376
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 23377
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 23378
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23379
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 23380
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 23381
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 23382
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23383
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 23384
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 23385
        //ELSE
        } else {
            //Instruction 23386
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23387
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23388
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23389
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23390
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23391
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23392
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23393
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 23394
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 23395
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23396
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23397
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23398
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 23399
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23400
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23401
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 23402
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 23403
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23404
            //MOV
            t2.y = (-t2.w);
            //Instruction 23405
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23406
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23407
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 23408
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 23409
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 23410
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 23411
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23412
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23413
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23414
            //MUL
            t24 = t24 * t5.x;
            //Instruction 23415
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 23416
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 23417
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23418
        //ENDIF
        }
        //Instruction 23419
    //ELSE
    } else {
        //Instruction 23420
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 23421
    //ENDIF
    }
    //Instruction 23422
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 23423
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23424
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23425
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 23426
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 23427
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 23428
    //NE
    tb24 = t22!=0.0;
    //Instruction 23429
    //LOG
    t4.x = log2(t22);
    //Instruction 23430
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23431
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23432
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 23433
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23434
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23435
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23436
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23437
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23438
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23439
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23440
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23441
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23442
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 23443
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23444
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 23445
    //MUL
    t22 = t22 * t24;
    //Instruction 23446
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 23447
    //MOV
    t4.y = t3.y;
    //Instruction 23448
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 23449
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 23450
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 23451
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23452
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 23453
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23454
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23455
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23456
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23457
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23458
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23459
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23460
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23461
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 23462
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 23463
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 23464
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 23465
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 23466
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 23467
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23468
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23469
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 23470
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 23471
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 23472
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23473
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 23474
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 23475
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 23476
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 23477
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23478
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23479
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 23480
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp float t10_3;
highp float t9;
mediump float t16_10;
void main()
{
    //Instruction 23272
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23273
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 23274
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 23275
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 23276
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 23277
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 23278
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 23279
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 23280
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 23281
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 23282
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23283
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 23284
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 23285
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 23286
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 23287
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 23288
    //SAMPLE
    t10_3 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 23289
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 23290
    //MUL
    t16_0 = t10_3 * t10_0.x;
    //Instruction 23291
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 23292
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 23293
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 23294
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 23295
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 23296
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 23297
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 23298
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 23299
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 23300
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 23301
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23302
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 23079
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23080
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23081
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 23082
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23083
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 23084
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 23085
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 23086
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 23087
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23088
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 23089
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 23090
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23091
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23092
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23093
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 23094
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 23095
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 23096
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 23097
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 23098
    //IF
    if(tb22){
        //Instruction 23099
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 23100
        //IF
        if(tb22){
            //Instruction 23101
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23102
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 23103
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 23104
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 23105
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 23106
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 23107
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23108
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23109
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23110
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23111
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 23112
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 23113
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23114
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23115
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 23116
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23117
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23118
            //FRC
            t2 = fract(t2);
            //Instruction 23119
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23120
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 23121
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23122
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23123
            //ADD
            t2 = t2 + t2;
            //Instruction 23124
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 23125
            //LT
            tb24 = t5.w<0.0;
            //Instruction 23126
            //MOV
            t5.y = (-t5.w);
            //Instruction 23127
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 23128
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 23129
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 23130
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 23131
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 23132
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 23133
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 23134
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23135
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23136
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 23137
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 23138
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23139
            //MUL
            t24 = t24 * t25;
            //Instruction 23140
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 23141
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23142
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23143
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23144
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23145
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 23146
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 23147
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23148
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 23149
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23150
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 23151
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 23152
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 23153
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 23154
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23155
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 23156
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 23157
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 23158
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23159
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 23160
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 23161
        //ELSE
        } else {
            //Instruction 23162
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23163
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23164
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23165
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23166
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23167
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23168
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23169
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 23170
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 23171
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23172
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23173
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23174
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 23175
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23176
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23177
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 23178
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 23179
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23180
            //MOV
            t2.y = (-t2.w);
            //Instruction 23181
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23182
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23183
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 23184
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 23185
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 23186
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 23187
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23188
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23189
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23190
            //MUL
            t24 = t24 * t5.x;
            //Instruction 23191
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 23192
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 23193
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23194
        //ENDIF
        }
        //Instruction 23195
    //ELSE
    } else {
        //Instruction 23196
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 23197
    //ENDIF
    }
    //Instruction 23198
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 23199
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23200
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23201
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 23202
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 23203
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 23204
    //NE
    tb24 = t22!=0.0;
    //Instruction 23205
    //LOG
    t4.x = log2(t22);
    //Instruction 23206
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23207
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23208
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 23209
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23210
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23211
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23212
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23213
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23214
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23215
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23216
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23217
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23218
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 23219
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23220
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 23221
    //MUL
    t22 = t22 * t24;
    //Instruction 23222
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 23223
    //MOV
    t4.y = t3.y;
    //Instruction 23224
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 23225
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 23226
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 23227
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23228
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 23229
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23230
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23231
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23232
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23233
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23234
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23235
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23236
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23237
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 23238
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 23239
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 23240
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 23241
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 23242
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 23243
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23244
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23245
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 23246
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 23247
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 23248
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23249
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 23250
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 23251
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 23252
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 23253
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23254
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23255
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 23256
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 23055
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23056
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 23057
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 23058
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 23059
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 23060
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 23061
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 23062
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 23063
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 23064
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 23065
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23066
    //MUL
    t16_2.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 23067
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_2.xy;
    //Instruction 23068
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_2.xy;
    //Instruction 23069
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 23070
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 23071
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 23072
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 23073
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23074
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 23075
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 23076
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 23077
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23078
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 24489
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24490
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24491
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 24492
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24493
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 24494
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 24495
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 24496
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 24497
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24498
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24499
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 24500
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24501
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24502
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24503
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 24504
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24505
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 24506
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 24507
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 24508
    //IF
    if(tb25){
        //Instruction 24509
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 24510
        //IF
        if(tb25){
            //Instruction 24511
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24512
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24513
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24514
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 24515
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 24516
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24517
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24518
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24519
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24520
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24521
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 24522
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 24523
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24524
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24525
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 24526
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24527
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24528
            //FRC
            t2 = fract(t2);
            //Instruction 24529
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24530
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24531
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24532
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24533
            //ADD
            t2 = t2 + t2;
            //Instruction 24534
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24535
            //LT
            tb27 = t5.w<0.0;
            //Instruction 24536
            //MOV
            t5.y = (-t5.w);
            //Instruction 24537
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24538
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 24539
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 24540
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 24541
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 24542
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 24543
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 24544
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24545
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24546
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24547
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 24548
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24549
            //MUL
            t27 = t27 * t28;
            //Instruction 24550
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 24551
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24552
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24553
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24554
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24555
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24556
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24557
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24558
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24559
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24560
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24561
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24562
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24563
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 24564
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24565
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 24566
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 24567
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24568
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24569
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24570
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24571
        //ELSE
        } else {
            //Instruction 24572
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24573
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24574
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24575
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24576
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24577
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24578
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24579
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24580
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24581
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24582
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24583
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24584
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24585
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24586
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24587
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24588
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24589
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24590
            //MOV
            t2.y = (-t2.w);
            //Instruction 24591
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24592
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24593
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24594
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24595
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 24596
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 24597
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24598
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24599
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24600
            //MUL
            t27 = t27 * t5.x;
            //Instruction 24601
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 24602
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24603
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24604
        //ENDIF
        }
        //Instruction 24605
    //ELSE
    } else {
        //Instruction 24606
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24607
    //ENDIF
    }
    //Instruction 24608
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24609
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24610
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24611
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 24612
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 24613
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 24614
    //NE
    tb27 = t25!=0.0;
    //Instruction 24615
    //LOG
    t4.x = log2(t25);
    //Instruction 24616
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24617
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24618
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 24619
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24620
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24621
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24622
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24623
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24624
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24625
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24626
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24627
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24628
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 24629
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24630
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 24631
    //MUL
    t25 = t25 * t27;
    //Instruction 24632
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 24633
    //MOV
    t4.y = t3.y;
    //Instruction 24634
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 24635
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24636
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 24637
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24638
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 24639
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24640
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24641
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24642
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24643
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24644
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24645
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24646
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24647
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 24648
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 24649
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 24650
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 24651
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 24652
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 24653
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24654
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24655
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 24656
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 24657
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 24658
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24659
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 24660
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24661
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 24662
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 24663
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 24664
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 24665
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 24666
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24667
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 24668
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 24669
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 24670
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 24671
    //MOV
    t5.x = t3.z;
    //Instruction 24672
    //MOV
    t5.y = t4.x;
    //Instruction 24673
    //MOV
    t5.z = t0.x;
    //Instruction 24674
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 24675
    //MOV
    t5.x = t3.x;
    //Instruction 24676
    //MOV
    t5.y = t4.y;
    //Instruction 24677
    //MOV
    t5.z = t0.y;
    //Instruction 24678
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 24679
    //MOV
    t0.x = t3.y;
    //Instruction 24680
    //MOV
    t0.y = t4.z;
    //Instruction 24681
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 24682
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 24683
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24684
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 24685
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_19;
void main()
{
    //Instruction 24455
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 24456
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 24457
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 24458
    //MAX
    t16_19 = max(t16_1.z, t16_1.y);
    //Instruction 24459
    //MAX
    t16_19 = max(t16_19, t16_1.x);
    //Instruction 24460
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 24461
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 24462
    //DIV
    t16_19 = t16_2.x / t16_19;
    //Instruction 24463
    //MAD
    t16_0 = t16_19 * 0.500000 + 0.500000;
    //Instruction 24464
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 24465
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 24466
    //MUL
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 24467
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    //Instruction 24468
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    //Instruction 24469
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 24470
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 24471
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 24472
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 24473
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 24474
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24475
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 24476
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 24477
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 24478
    //SAMPLE
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 24479
    //MAD
    t10_4.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 24480
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 24481
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 24482
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 24483
    //DP3
    t16_19 = dot(t10_5.xyz, t0.xyz);
    //Instruction 24484
    //MAX
    t16_19 = max(t16_19, 0.0);
    //Instruction 24485
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 24486
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 24487
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24488
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 23504
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23505
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23506
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 23507
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23508
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 23509
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 23510
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 23511
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 23512
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23513
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 23514
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 23515
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23516
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23517
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23518
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 23519
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23520
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 23521
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 23522
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 23523
    //IF
    if(tb25){
        //Instruction 23524
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 23525
        //IF
        if(tb25){
            //Instruction 23526
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23527
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 23528
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 23529
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 23530
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 23531
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23532
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23533
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23534
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23535
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23536
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 23537
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 23538
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23539
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23540
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 23541
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23542
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23543
            //FRC
            t2 = fract(t2);
            //Instruction 23544
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23545
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 23546
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23547
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23548
            //ADD
            t2 = t2 + t2;
            //Instruction 23549
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 23550
            //LT
            tb27 = t5.w<0.0;
            //Instruction 23551
            //MOV
            t5.y = (-t5.w);
            //Instruction 23552
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 23553
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 23554
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 23555
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 23556
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 23557
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 23558
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 23559
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23560
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23561
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 23562
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 23563
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23564
            //MUL
            t27 = t27 * t28;
            //Instruction 23565
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 23566
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23567
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23568
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23569
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23570
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 23571
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 23572
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23573
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 23574
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23575
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 23576
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 23577
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 23578
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 23579
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23580
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 23581
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 23582
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 23583
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23584
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23585
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 23586
        //ELSE
        } else {
            //Instruction 23587
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23588
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23589
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23590
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23591
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23592
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23593
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23594
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 23595
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 23596
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23597
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23598
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23599
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 23600
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23601
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23602
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 23603
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 23604
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23605
            //MOV
            t2.y = (-t2.w);
            //Instruction 23606
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23607
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23608
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 23609
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 23610
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 23611
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 23612
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23613
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23614
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23615
            //MUL
            t27 = t27 * t5.x;
            //Instruction 23616
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 23617
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 23618
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23619
        //ENDIF
        }
        //Instruction 23620
    //ELSE
    } else {
        //Instruction 23621
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 23622
    //ENDIF
    }
    //Instruction 23623
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 23624
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23625
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23626
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 23627
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 23628
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 23629
    //NE
    tb27 = t25!=0.0;
    //Instruction 23630
    //LOG
    t4.x = log2(t25);
    //Instruction 23631
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23632
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23633
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 23634
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23635
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23636
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23637
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23638
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23639
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23640
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23641
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23642
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23643
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 23644
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23645
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 23646
    //MUL
    t25 = t25 * t27;
    //Instruction 23647
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 23648
    //MOV
    t4.y = t3.y;
    //Instruction 23649
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 23650
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23651
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 23652
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23653
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 23654
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23655
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23656
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23657
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23658
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23659
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23660
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23661
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23662
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 23663
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 23664
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 23665
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 23666
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 23667
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 23668
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23669
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23670
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 23671
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 23672
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 23673
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23674
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 23675
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23676
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 23677
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 23678
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 23679
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 23680
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 23681
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23682
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 23683
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 23684
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 23685
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 23686
    //MOV
    t5.x = t3.z;
    //Instruction 23687
    //MOV
    t5.y = t4.x;
    //Instruction 23688
    //MOV
    t5.z = t0.x;
    //Instruction 23689
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 23690
    //MOV
    t5.x = t3.x;
    //Instruction 23691
    //MOV
    t5.y = t4.y;
    //Instruction 23692
    //MOV
    t5.z = t0.y;
    //Instruction 23693
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 23694
    //MOV
    t0.x = t3.y;
    //Instruction 23695
    //MOV
    t0.y = t4.z;
    //Instruction 23696
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 23697
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 23698
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23699
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 23700
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    //Instruction 23481
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 23482
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 23483
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 23484
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 23485
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 23486
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 23487
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 23488
    //DIV
    t16_16 = t16_2 / t16_16;
    //Instruction 23489
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 23490
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 23491
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 23492
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 23493
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 23494
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 23495
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 23496
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 23497
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 23498
    //DP3
    t16_16 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23499
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 23500
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 23501
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 23502
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23503
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_6 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_6.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_5 = tmpvar_24;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 23298
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23299
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23300
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 23301
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23302
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 23303
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 23304
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 23305
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 23306
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23307
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 23308
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 23309
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23310
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23311
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23312
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 23313
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23314
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 23315
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 23316
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 23317
    //IF
    if(tb25){
        //Instruction 23318
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 23319
        //IF
        if(tb25){
            //Instruction 23320
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23321
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 23322
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 23323
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 23324
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 23325
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23326
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23327
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23328
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23329
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23330
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 23331
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 23332
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23333
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23334
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 23335
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23336
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23337
            //FRC
            t2 = fract(t2);
            //Instruction 23338
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23339
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 23340
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23341
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23342
            //ADD
            t2 = t2 + t2;
            //Instruction 23343
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 23344
            //LT
            tb27 = t5.w<0.0;
            //Instruction 23345
            //MOV
            t5.y = (-t5.w);
            //Instruction 23346
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 23347
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 23348
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 23349
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 23350
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 23351
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 23352
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 23353
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23354
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23355
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 23356
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 23357
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23358
            //MUL
            t27 = t27 * t28;
            //Instruction 23359
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 23360
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23361
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23362
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23363
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23364
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 23365
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 23366
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23367
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 23368
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23369
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 23370
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 23371
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 23372
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 23373
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23374
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 23375
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 23376
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 23377
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23378
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23379
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 23380
        //ELSE
        } else {
            //Instruction 23381
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23382
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23383
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23384
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23385
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23386
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23387
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23388
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 23389
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 23390
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23391
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23392
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23393
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 23394
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23395
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23396
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 23397
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 23398
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23399
            //MOV
            t2.y = (-t2.w);
            //Instruction 23400
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23401
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23402
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 23403
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 23404
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 23405
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 23406
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23407
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23408
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23409
            //MUL
            t27 = t27 * t5.x;
            //Instruction 23410
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 23411
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 23412
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23413
        //ENDIF
        }
        //Instruction 23414
    //ELSE
    } else {
        //Instruction 23415
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 23416
    //ENDIF
    }
    //Instruction 23417
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 23418
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23419
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23420
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 23421
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 23422
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 23423
    //NE
    tb27 = t25!=0.0;
    //Instruction 23424
    //LOG
    t4.x = log2(t25);
    //Instruction 23425
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23426
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23427
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 23428
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23429
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23430
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23431
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23432
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23433
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23434
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23435
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23436
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23437
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 23438
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23439
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 23440
    //MUL
    t25 = t25 * t27;
    //Instruction 23441
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 23442
    //MOV
    t4.y = t3.y;
    //Instruction 23443
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 23444
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23445
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 23446
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23447
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 23448
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23449
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23450
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23451
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23452
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23453
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23454
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23455
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23456
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 23457
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 23458
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 23459
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 23460
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 23461
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 23462
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23463
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23464
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 23465
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 23466
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 23467
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23468
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 23469
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23470
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 23471
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 23472
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 23473
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 23474
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 23475
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23476
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 23477
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 23478
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 23479
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 23480
    //MOV
    t5.x = t3.z;
    //Instruction 23481
    //MOV
    t5.y = t4.x;
    //Instruction 23482
    //MOV
    t5.z = t0.x;
    //Instruction 23483
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 23484
    //MOV
    t5.x = t3.x;
    //Instruction 23485
    //MOV
    t5.y = t4.y;
    //Instruction 23486
    //MOV
    t5.z = t0.y;
    //Instruction 23487
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 23488
    //MOV
    t0.x = t3.y;
    //Instruction 23489
    //MOV
    t0.y = t4.z;
    //Instruction 23490
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 23491
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 23492
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23493
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 23494
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
mediump float t16_2;
lowp vec3 t10_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
bool tb8;
mediump float t16_14;
lowp float t10_14;
mediump float t16_18;
mediump float t16_19;
highp float t20;
void main()
{
    //Instruction 23257
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 23258
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 23259
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 23260
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 23261
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 23262
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 23263
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 23264
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 23265
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 23266
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 23267
    //MOVC
    t10_3.x = (tb8) ? 1.0 : 0.0;
    //Instruction 23268
    //MUL
    t10_3.x = t10_2.x * t10_3.x;
    //Instruction 23269
    //MUL
    t10_3.x = t10_14 * t10_3.x;
    //Instruction 23270
    //MUL
    t16_0.xyz = t10_3.xxx * _LightColor0.xyz;
    //Instruction 23271
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 23272
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 23273
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 23274
    //MAX
    t16_18 = max(t16_1.z, t16_1.y);
    //Instruction 23275
    //MAX
    t16_18 = max(t16_18, t16_1.x);
    //Instruction 23276
    //MAX
    t16_19 = max(t10_2.z, t10_2.y);
    //Instruction 23277
    //MAX
    t16_19 = max(t16_19, t10_2.x);
    //Instruction 23278
    //DIV
    t16_18 = t16_19 / t16_18;
    //Instruction 23279
    //MAD
    t16_2 = t16_18 * 0.500000 + 0.500000;
    //Instruction 23280
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 23281
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 23282
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 23283
    //ADD
    t2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 23284
    //DP3
    t20 = dot(t2.xyz, t2.xyz);
    //Instruction 23285
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 23286
    //MUL
    t2.xyz = vec3(t20) * t2.xyz;
    //Instruction 23287
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 23288
    //MAD
    t10_3.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 23289
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 23290
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 23291
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 23292
    //DP3
    t16_18 = dot(t10_5.xyz, t2.xyz);
    //Instruction 23293
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 23294
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 23295
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 23296
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23297
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 23531
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23532
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23533
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 23534
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23535
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 23536
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 23537
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 23538
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 23539
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23540
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 23541
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 23542
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23543
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23544
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23545
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 23546
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23547
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 23548
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 23549
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 23550
    //IF
    if(tb25){
        //Instruction 23551
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 23552
        //IF
        if(tb25){
            //Instruction 23553
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23554
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 23555
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 23556
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 23557
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 23558
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23559
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23560
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23561
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23562
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23563
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 23564
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 23565
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23566
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23567
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 23568
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23569
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23570
            //FRC
            t2 = fract(t2);
            //Instruction 23571
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23572
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 23573
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23574
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23575
            //ADD
            t2 = t2 + t2;
            //Instruction 23576
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 23577
            //LT
            tb27 = t5.w<0.0;
            //Instruction 23578
            //MOV
            t5.y = (-t5.w);
            //Instruction 23579
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 23580
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 23581
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 23582
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 23583
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 23584
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 23585
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 23586
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23587
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23588
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 23589
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 23590
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23591
            //MUL
            t27 = t27 * t28;
            //Instruction 23592
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 23593
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23594
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23595
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23596
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23597
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 23598
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 23599
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23600
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 23601
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23602
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 23603
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 23604
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 23605
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 23606
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23607
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 23608
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 23609
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 23610
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23611
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23612
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 23613
        //ELSE
        } else {
            //Instruction 23614
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23615
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23616
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23617
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23618
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23619
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23620
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23621
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 23622
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 23623
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23624
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23625
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23626
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 23627
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23628
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23629
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 23630
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 23631
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23632
            //MOV
            t2.y = (-t2.w);
            //Instruction 23633
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23634
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23635
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 23636
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 23637
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 23638
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 23639
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23640
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23641
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23642
            //MUL
            t27 = t27 * t5.x;
            //Instruction 23643
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 23644
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 23645
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23646
        //ENDIF
        }
        //Instruction 23647
    //ELSE
    } else {
        //Instruction 23648
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 23649
    //ENDIF
    }
    //Instruction 23650
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 23651
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23652
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23653
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 23654
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 23655
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 23656
    //NE
    tb27 = t25!=0.0;
    //Instruction 23657
    //LOG
    t4.x = log2(t25);
    //Instruction 23658
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23659
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23660
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 23661
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23662
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23663
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23664
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23665
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23666
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23667
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23668
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23669
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23670
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 23671
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23672
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 23673
    //MUL
    t25 = t25 * t27;
    //Instruction 23674
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 23675
    //MOV
    t4.y = t3.y;
    //Instruction 23676
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 23677
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23678
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 23679
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23680
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 23681
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23682
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23683
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23684
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23685
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23686
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23687
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23688
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23689
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 23690
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 23691
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 23692
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 23693
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 23694
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 23695
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23696
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23697
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 23698
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 23699
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 23700
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23701
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 23702
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23703
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 23704
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 23705
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 23706
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 23707
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 23708
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23709
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 23710
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 23711
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 23712
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 23713
    //MOV
    t5.x = t3.z;
    //Instruction 23714
    //MOV
    t5.y = t4.x;
    //Instruction 23715
    //MOV
    t5.z = t0.x;
    //Instruction 23716
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 23717
    //MOV
    t5.x = t3.x;
    //Instruction 23718
    //MOV
    t5.y = t4.y;
    //Instruction 23719
    //MOV
    t5.z = t0.y;
    //Instruction 23720
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 23721
    //MOV
    t0.x = t3.y;
    //Instruction 23722
    //MOV
    t0.y = t4.z;
    //Instruction 23723
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 23724
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 23725
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23726
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 23727
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_19;
void main()
{
    //Instruction 23495
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 23496
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 23497
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 23498
    //MAX
    t16_19 = max(t16_1.z, t16_1.y);
    //Instruction 23499
    //MAX
    t16_19 = max(t16_19, t16_1.x);
    //Instruction 23500
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 23501
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 23502
    //DIV
    t16_19 = t16_2.x / t16_19;
    //Instruction 23503
    //MAD
    t16_0 = t16_19 * 0.500000 + 0.500000;
    //Instruction 23504
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 23505
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 23506
    //MUL
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 23507
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    //Instruction 23508
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    //Instruction 23509
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 23510
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 23511
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 23512
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 23513
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 23514
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 23515
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 23516
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 23517
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 23518
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 23519
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 23520
    //SAMPLE
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 23521
    //MAD
    t10_4.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 23522
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 23523
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 23524
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 23525
    //DP3
    t16_19 = dot(t10_5.xyz, t0.xyz);
    //Instruction 23526
    //MAX
    t16_19 = max(t16_19, 0.0);
    //Instruction 23527
    //MUL
    t16_1.xyz = vec3(t16_19) * t16_1.xyz;
    //Instruction 23528
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 23529
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23530
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_56;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = _Object2World[0].xyz;
  tmpvar_57[1] = _Object2World[1].xyz;
  tmpvar_57[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize((tmpvar_57 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61.x = worldTangent_4.x;
  tmpvar_61.y = worldBinormal_3.x;
  tmpvar_61.z = worldNormal_5.x;
  lowp vec3 tmpvar_62;
  tmpvar_62.x = worldTangent_4.y;
  tmpvar_62.y = worldBinormal_3.y;
  tmpvar_62.z = worldNormal_5.y;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.z;
  tmpvar_63.y = worldBinormal_3.z;
  tmpvar_63.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_61;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_63;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_14);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_14);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_14);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 23730
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23731
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 23732
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 23733
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 23734
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 23735
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 23736
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 23737
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 23738
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 23739
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 23740
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 23741
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23742
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 23743
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 23744
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 23745
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23746
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 23747
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 23748
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 23749
    //IF
    if(tb25){
        //Instruction 23750
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 23751
        //IF
        if(tb25){
            //Instruction 23752
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23753
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 23754
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 23755
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 23756
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 23757
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23758
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23759
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23760
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23761
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23762
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 23763
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 23764
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23765
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 23766
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 23767
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 23768
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23769
            //FRC
            t2 = fract(t2);
            //Instruction 23770
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23771
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 23772
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23773
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23774
            //ADD
            t2 = t2 + t2;
            //Instruction 23775
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 23776
            //LT
            tb27 = t5.w<0.0;
            //Instruction 23777
            //MOV
            t5.y = (-t5.w);
            //Instruction 23778
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 23779
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 23780
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 23781
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 23782
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 23783
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 23784
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 23785
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23786
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23787
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 23788
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 23789
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23790
            //MUL
            t27 = t27 * t28;
            //Instruction 23791
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 23792
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23793
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23794
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23795
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23796
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 23797
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 23798
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23799
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 23800
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23801
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 23802
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 23803
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 23804
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 23805
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23806
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 23807
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 23808
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 23809
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23810
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 23811
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 23812
        //ELSE
        } else {
            //Instruction 23813
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23814
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23815
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23816
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 23817
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 23818
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 23819
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23820
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 23821
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 23822
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23823
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 23824
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23825
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 23826
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23827
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23828
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 23829
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 23830
            //LT
            tb0 = t2.w<0.0;
            //Instruction 23831
            //MOV
            t2.y = (-t2.w);
            //Instruction 23832
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 23833
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 23834
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 23835
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 23836
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 23837
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 23838
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 23839
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23840
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23841
            //MUL
            t27 = t27 * t5.x;
            //Instruction 23842
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 23843
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 23844
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23845
        //ENDIF
        }
        //Instruction 23846
    //ELSE
    } else {
        //Instruction 23847
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 23848
    //ENDIF
    }
    //Instruction 23849
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 23850
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 23851
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23852
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 23853
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 23854
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 23855
    //NE
    tb27 = t25!=0.0;
    //Instruction 23856
    //LOG
    t4.x = log2(t25);
    //Instruction 23857
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 23858
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 23859
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 23860
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23861
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23862
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 23863
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 23864
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23865
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 23866
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23867
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 23868
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 23869
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 23870
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23871
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 23872
    //MUL
    t25 = t25 * t27;
    //Instruction 23873
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 23874
    //MOV
    t4.y = t3.y;
    //Instruction 23875
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 23876
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 23877
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 23878
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 23879
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 23880
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 23881
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 23882
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 23883
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 23884
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 23885
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 23886
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 23887
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 23888
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 23889
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 23890
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 23891
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 23892
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 23893
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 23894
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 23895
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 23896
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 23897
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 23898
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 23899
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 23900
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 23901
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23902
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 23903
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 23904
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 23905
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 23906
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 23907
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 23908
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 23909
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 23910
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 23911
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 23912
    //MOV
    t5.x = t3.z;
    //Instruction 23913
    //MOV
    t5.y = t4.x;
    //Instruction 23914
    //MOV
    t5.z = t0.x;
    //Instruction 23915
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 23916
    //MOV
    t5.x = t3.x;
    //Instruction 23917
    //MOV
    t5.y = t4.y;
    //Instruction 23918
    //MOV
    t5.z = t0.y;
    //Instruction 23919
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 23920
    //MOV
    t0.x = t3.y;
    //Instruction 23921
    //MOV
    t0.y = t4.z;
    //Instruction 23922
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 23923
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 23924
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 23925
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 23926
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_16;
void main()
{
    //Instruction 23701
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 23702
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 23703
    //MAD
    t16_1.xyz = vs_TEXCOORD5.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 23704
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 23705
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 23706
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 23707
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 23708
    //DIV
    t16_16 = t16_2.x / t16_16;
    //Instruction 23709
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 23710
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 23711
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD4.xyz;
    //Instruction 23712
    //MUL
    t16_2.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 23713
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_2.xy;
    //Instruction 23714
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_2.xy;
    //Instruction 23715
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 23716
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 23717
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 23718
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 23719
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 23720
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 23721
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 23722
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 23723
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 23724
    //DP3
    t16_16 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23725
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 23726
    //MUL
    t16_1.xyz = vec3(t16_16) * t16_1.xyz;
    //Instruction 23727
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 23728
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23729
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 24710
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24711
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 24712
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 24713
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24714
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 24715
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 24716
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 24717
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24718
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 24719
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 24720
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 24721
    //IF
    if(tb19){
        //Instruction 24722
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 24723
        //IF
        if(tb19){
            //Instruction 24724
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24725
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 24726
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 24727
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 24728
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 24729
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24730
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24731
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24732
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24733
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24734
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24735
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24736
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 24737
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24738
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 24739
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 24740
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 24741
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24742
            //FRC
            t0 = fract(t0);
            //Instruction 24743
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24744
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 24745
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24746
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24747
            //ADD
            t0 = t0 + t0;
            //Instruction 24748
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 24749
            //LT
            tb20 = t4.w<0.0;
            //Instruction 24750
            //MOV
            t4.y = (-t4.w);
            //Instruction 24751
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 24752
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 24753
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 24754
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 24755
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 24756
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 24757
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 24758
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24759
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24760
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 24761
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 24762
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24763
            //MUL
            t20 = t20 * t21;
            //Instruction 24764
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 24765
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24766
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24767
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24768
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24769
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 24770
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 24771
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24772
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 24773
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24774
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 24775
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 24776
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 24777
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 24778
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24779
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 24780
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 24781
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 24782
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24783
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24784
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 24785
        //ELSE
        } else {
            //Instruction 24786
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24787
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24788
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24789
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24790
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24791
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24792
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 24793
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24794
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 24795
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 24796
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24797
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24798
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24799
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 24800
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24801
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24802
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 24803
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 24804
            //LT
            tb19 = t0.w<0.0;
            //Instruction 24805
            //MOV
            t0.y = (-t0.w);
            //Instruction 24806
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 24807
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 24808
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 24809
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 24810
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 24811
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 24812
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 24813
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24814
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24815
            //MUL
            t21 = t21 * t4.x;
            //Instruction 24816
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 24817
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24818
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24819
        //ENDIF
        }
        //Instruction 24820
    //ELSE
    } else {
        //Instruction 24821
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 24822
    //ENDIF
    }
    //Instruction 24823
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 24824
    //SQRT
    t19 = sqrt(t19);
    //Instruction 24825
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24826
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 24827
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 24828
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 24829
    //NE
    tb3 = t20!=0.0;
    //Instruction 24830
    //LOG
    t9 = log2(t20);
    //Instruction 24831
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 24832
    //EXP
    t9 = exp2(t9);
    //Instruction 24833
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 24834
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24835
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24836
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 24837
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 24838
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24839
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 24840
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24841
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 24842
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 24843
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 24844
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24845
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 24846
    //MUL
    t20 = t20 * t3.x;
    //Instruction 24847
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 24848
    //MOV
    t3.y = t2.y;
    //Instruction 24849
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 24850
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 24851
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 24852
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 24853
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 24854
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 24855
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 24856
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 24857
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 24858
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 24859
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 24860
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 24861
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 24862
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 24863
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 24864
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 24865
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 24866
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 24867
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 24868
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 24869
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 24870
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 24871
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 24872
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 24873
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 24874
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24875
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24876
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24877
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 24878
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24879
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 24880
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 24881
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 24882
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 24883
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 24884
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 24686
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 24687
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 24688
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 24689
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 24690
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 24691
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 24692
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 24693
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 24694
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24695
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 24696
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24697
    //MAD
    t16_3.xyz = vec3(t16_12) * t16_3.xyz + t10_2.xyz;
    //Instruction 24698
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24699
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24700
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24701
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 24702
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24703
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 24704
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 24705
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 24706
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 24707
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24708
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24709
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 23741
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23742
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 23743
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 23744
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23745
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 23746
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 23747
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 23748
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 23749
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 23750
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 23751
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 23752
    //IF
    if(tb19){
        //Instruction 23753
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 23754
        //IF
        if(tb19){
            //Instruction 23755
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23756
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 23757
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 23758
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 23759
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 23760
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23761
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23762
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23763
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23764
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23765
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23766
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23767
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 23768
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23769
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 23770
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 23771
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 23772
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23773
            //FRC
            t0 = fract(t0);
            //Instruction 23774
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23775
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 23776
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23777
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23778
            //ADD
            t0 = t0 + t0;
            //Instruction 23779
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 23780
            //LT
            tb20 = t4.w<0.0;
            //Instruction 23781
            //MOV
            t4.y = (-t4.w);
            //Instruction 23782
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 23783
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 23784
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 23785
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 23786
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 23787
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 23788
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 23789
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23790
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23791
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 23792
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 23793
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23794
            //MUL
            t20 = t20 * t21;
            //Instruction 23795
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 23796
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23797
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23798
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23799
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23800
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 23801
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 23802
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23803
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 23804
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23805
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 23806
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 23807
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 23808
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 23809
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 23810
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 23811
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 23812
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 23813
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 23814
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23815
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 23816
        //ELSE
        } else {
            //Instruction 23817
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23818
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23819
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23820
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23821
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23822
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23823
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 23824
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23825
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 23826
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 23827
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 23828
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 23829
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23830
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 23831
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 23832
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 23833
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 23834
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 23835
            //LT
            tb19 = t0.w<0.0;
            //Instruction 23836
            //MOV
            t0.y = (-t0.w);
            //Instruction 23837
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 23838
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 23839
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 23840
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 23841
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 23842
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 23843
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 23844
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23845
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23846
            //MUL
            t21 = t21 * t4.x;
            //Instruction 23847
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 23848
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 23849
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23850
        //ENDIF
        }
        //Instruction 23851
    //ELSE
    } else {
        //Instruction 23852
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 23853
    //ENDIF
    }
    //Instruction 23854
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 23855
    //SQRT
    t19 = sqrt(t19);
    //Instruction 23856
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 23857
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 23858
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 23859
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 23860
    //NE
    tb3 = t20!=0.0;
    //Instruction 23861
    //LOG
    t9 = log2(t20);
    //Instruction 23862
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 23863
    //EXP
    t9 = exp2(t9);
    //Instruction 23864
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 23865
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 23866
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 23867
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 23868
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 23869
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 23870
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 23871
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 23872
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 23873
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 23874
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 23875
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 23876
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 23877
    //MUL
    t20 = t20 * t3.x;
    //Instruction 23878
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 23879
    //MOV
    t3.y = t2.y;
    //Instruction 23880
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 23881
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 23882
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 23883
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 23884
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 23885
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 23886
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 23887
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 23888
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 23889
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 23890
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 23891
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 23892
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 23893
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 23894
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 23895
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 23896
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 23897
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 23898
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 23899
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 23900
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 23901
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 23902
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 23903
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 23904
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 23905
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 23906
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 23907
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 23908
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 23909
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 23910
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 23911
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 23912
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 23913
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 23914
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 23915
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_9;
void main()
{
    //Instruction 23728
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 23729
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23730
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 23731
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 23732
    //MAD
    t16_0.xyz = t16_0.xxx * t16_3.xyz + t10_2.xyz;
    //Instruction 23733
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23734
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 23735
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23736
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 23737
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 23738
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 23739
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23740
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_5.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 23958
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23959
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 23960
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 23961
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23962
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 23963
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 23964
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 23965
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 23966
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 23967
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 23968
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 23969
    //IF
    if(tb19){
        //Instruction 23970
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 23971
        //IF
        if(tb19){
            //Instruction 23972
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23973
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 23974
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 23975
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 23976
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 23977
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23978
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23979
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23980
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23981
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23982
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23983
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23984
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 23985
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23986
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 23987
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 23988
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 23989
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23990
            //FRC
            t0 = fract(t0);
            //Instruction 23991
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23992
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 23993
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23994
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23995
            //ADD
            t0 = t0 + t0;
            //Instruction 23996
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 23997
            //LT
            tb20 = t4.w<0.0;
            //Instruction 23998
            //MOV
            t4.y = (-t4.w);
            //Instruction 23999
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 24000
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 24001
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 24002
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 24003
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 24004
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 24005
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 24006
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24007
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24008
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 24009
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 24010
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24011
            //MUL
            t20 = t20 * t21;
            //Instruction 24012
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 24013
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24014
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24015
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24016
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24017
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 24018
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 24019
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24020
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 24021
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24022
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 24023
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 24024
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 24025
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 24026
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24027
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 24028
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 24029
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 24030
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24031
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24032
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 24033
        //ELSE
        } else {
            //Instruction 24034
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24035
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24036
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24037
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24038
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24039
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24040
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 24041
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24042
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 24043
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 24044
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24045
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24046
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24047
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 24048
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24049
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24050
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 24051
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 24052
            //LT
            tb19 = t0.w<0.0;
            //Instruction 24053
            //MOV
            t0.y = (-t0.w);
            //Instruction 24054
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 24055
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 24056
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 24057
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 24058
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 24059
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 24060
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 24061
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24062
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24063
            //MUL
            t21 = t21 * t4.x;
            //Instruction 24064
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 24065
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24066
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24067
        //ENDIF
        }
        //Instruction 24068
    //ELSE
    } else {
        //Instruction 24069
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 24070
    //ENDIF
    }
    //Instruction 24071
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 24072
    //SQRT
    t19 = sqrt(t19);
    //Instruction 24073
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24074
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 24075
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 24076
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 24077
    //NE
    tb3 = t20!=0.0;
    //Instruction 24078
    //LOG
    t9 = log2(t20);
    //Instruction 24079
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 24080
    //EXP
    t9 = exp2(t9);
    //Instruction 24081
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 24082
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24083
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24084
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 24085
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 24086
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24087
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 24088
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24089
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 24090
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 24091
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 24092
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24093
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 24094
    //MUL
    t20 = t20 * t3.x;
    //Instruction 24095
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 24096
    //MOV
    t3.y = t2.y;
    //Instruction 24097
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 24098
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 24099
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 24100
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 24101
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 24102
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 24103
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 24104
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 24105
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 24106
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 24107
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 24108
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 24109
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 24110
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 24111
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 24112
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 24113
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 24114
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 24115
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 24116
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 24117
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 24118
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 24119
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 24120
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 24121
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 24122
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24123
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24124
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24125
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 24126
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24127
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 24128
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 24129
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 24130
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 24131
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 24132
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec3 t10_2;
lowp float t10_3;
lowp vec3 t10_4;
bool tb7;
mediump float t16_12;
lowp float t10_12;
mediump float t16_15;
highp float t17;
void main()
{
    //Instruction 23927
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 23928
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 23929
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 23930
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 23931
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 23932
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 23933
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 23934
    //LT
    tb7 = 0.0<t16_0.z;
    //Instruction 23935
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 23936
    //SAMPLE
    t10_12 = texture(_LightTextureB0, vec2(t16_12)).w;
    //Instruction 23937
    //MOVC
    t10_3 = (tb7) ? 1.0 : 0.0;
    //Instruction 23938
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 23939
    //MUL
    t10_3 = t10_12 * t10_3;
    //Instruction 23940
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 23941
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 23942
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23943
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 23944
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_4.xyz);
    //Instruction 23945
    //MAD
    t16_1.xyz = vec3(t16_15) * t16_1.xyz + t10_4.xyz;
    //Instruction 23946
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23947
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 23948
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 23949
    //DP3
    t17 = dot(t2.xyz, t2.xyz);
    //Instruction 23950
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 23951
    //MUL
    t2.xyz = vec3(t17) * t2.xyz;
    //Instruction 23952
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 23953
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 23954
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 23955
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 23956
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23957
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 24911
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24912
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 24913
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 24914
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24915
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 24916
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 24917
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 24918
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24919
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 24920
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 24921
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 24922
    //IF
    if(tb19){
        //Instruction 24923
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 24924
        //IF
        if(tb19){
            //Instruction 24925
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24926
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 24927
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 24928
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 24929
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 24930
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24931
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24932
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24933
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24934
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24935
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24936
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24937
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 24938
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24939
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 24940
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 24941
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 24942
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24943
            //FRC
            t0 = fract(t0);
            //Instruction 24944
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24945
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 24946
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24947
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24948
            //ADD
            t0 = t0 + t0;
            //Instruction 24949
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 24950
            //LT
            tb20 = t4.w<0.0;
            //Instruction 24951
            //MOV
            t4.y = (-t4.w);
            //Instruction 24952
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 24953
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 24954
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 24955
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 24956
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 24957
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 24958
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 24959
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24960
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24961
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 24962
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 24963
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24964
            //MUL
            t20 = t20 * t21;
            //Instruction 24965
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 24966
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24967
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24968
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24969
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24970
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 24971
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 24972
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24973
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 24974
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24975
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 24976
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 24977
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 24978
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 24979
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24980
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 24981
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 24982
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 24983
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24984
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24985
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 24986
        //ELSE
        } else {
            //Instruction 24987
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24988
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24989
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24990
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24991
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24992
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24993
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 24994
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24995
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 24996
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 24997
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24998
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24999
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25000
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 25001
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25002
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25003
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 25004
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 25005
            //LT
            tb19 = t0.w<0.0;
            //Instruction 25006
            //MOV
            t0.y = (-t0.w);
            //Instruction 25007
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 25008
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 25009
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 25010
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 25011
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 25012
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 25013
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 25014
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25015
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25016
            //MUL
            t21 = t21 * t4.x;
            //Instruction 25017
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 25018
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25019
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25020
        //ENDIF
        }
        //Instruction 25021
    //ELSE
    } else {
        //Instruction 25022
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 25023
    //ENDIF
    }
    //Instruction 25024
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 25025
    //SQRT
    t19 = sqrt(t19);
    //Instruction 25026
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25027
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 25028
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 25029
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 25030
    //NE
    tb3 = t20!=0.0;
    //Instruction 25031
    //LOG
    t9 = log2(t20);
    //Instruction 25032
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 25033
    //EXP
    t9 = exp2(t9);
    //Instruction 25034
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 25035
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25036
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25037
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 25038
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 25039
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25040
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 25041
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25042
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 25043
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 25044
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 25045
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25046
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 25047
    //MUL
    t20 = t20 * t3.x;
    //Instruction 25048
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 25049
    //MOV
    t3.y = t2.y;
    //Instruction 25050
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 25051
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 25052
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 25053
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 25054
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 25055
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 25056
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 25057
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 25058
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 25059
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 25060
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 25061
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 25062
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 25063
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 25064
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 25065
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 25066
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 25067
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 25068
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 25069
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 25070
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 25071
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 25072
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 25073
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 25074
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 25075
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 25076
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25077
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 25078
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 25079
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25080
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 25081
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 25082
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 25083
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 25084
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 25085
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp float t10_5;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 24885
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 24886
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 24887
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 24888
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 24889
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 24890
    //SAMPLE
    t10_5 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 24891
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 24892
    //MUL
    t16_1 = t10_5 * t10_1.x;
    //Instruction 24893
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 24894
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 24895
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24896
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 24897
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24898
    //MAD
    t16_3.xyz = vec3(t16_12) * t16_3.xyz + t10_2.xyz;
    //Instruction 24899
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24900
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24901
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24902
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 24903
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24904
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 24905
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 24906
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 24907
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 24908
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24909
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24910
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 23935
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 23936
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 23937
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 23938
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 23939
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 23940
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 23941
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 23942
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 23943
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 23944
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 23945
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 23946
    //IF
    if(tb19){
        //Instruction 23947
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 23948
        //IF
        if(tb19){
            //Instruction 23949
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 23950
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 23951
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 23952
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 23953
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 23954
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 23955
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 23956
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 23957
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 23958
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 23959
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 23960
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 23961
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 23962
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 23963
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 23964
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 23965
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 23966
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 23967
            //FRC
            t0 = fract(t0);
            //Instruction 23968
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 23969
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 23970
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 23971
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 23972
            //ADD
            t0 = t0 + t0;
            //Instruction 23973
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 23974
            //LT
            tb20 = t4.w<0.0;
            //Instruction 23975
            //MOV
            t4.y = (-t4.w);
            //Instruction 23976
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 23977
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 23978
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 23979
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 23980
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 23981
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 23982
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 23983
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 23984
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 23985
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 23986
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 23987
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 23988
            //MUL
            t20 = t20 * t21;
            //Instruction 23989
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 23990
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 23991
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23992
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 23993
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 23994
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 23995
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 23996
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 23997
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 23998
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 23999
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 24000
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 24001
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 24002
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 24003
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24004
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 24005
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 24006
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 24007
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24008
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 24009
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 24010
        //ELSE
        } else {
            //Instruction 24011
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24012
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24013
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24014
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24015
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24016
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24017
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 24018
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24019
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 24020
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 24021
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24022
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24023
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24024
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 24025
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24026
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24027
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 24028
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 24029
            //LT
            tb19 = t0.w<0.0;
            //Instruction 24030
            //MOV
            t0.y = (-t0.w);
            //Instruction 24031
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 24032
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 24033
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 24034
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 24035
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 24036
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 24037
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 24038
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24039
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24040
            //MUL
            t21 = t21 * t4.x;
            //Instruction 24041
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 24042
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24043
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24044
        //ENDIF
        }
        //Instruction 24045
    //ELSE
    } else {
        //Instruction 24046
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 24047
    //ENDIF
    }
    //Instruction 24048
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 24049
    //SQRT
    t19 = sqrt(t19);
    //Instruction 24050
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24051
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 24052
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 24053
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 24054
    //NE
    tb3 = t20!=0.0;
    //Instruction 24055
    //LOG
    t9 = log2(t20);
    //Instruction 24056
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 24057
    //EXP
    t9 = exp2(t9);
    //Instruction 24058
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 24059
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24060
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24061
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 24062
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 24063
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24064
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 24065
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24066
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 24067
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 24068
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 24069
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24070
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 24071
    //MUL
    t20 = t20 * t3.x;
    //Instruction 24072
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 24073
    //MOV
    t3.y = t2.y;
    //Instruction 24074
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 24075
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 24076
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 24077
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 24078
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 24079
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 24080
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 24081
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 24082
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 24083
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 24084
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 24085
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 24086
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 24087
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 24088
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 24089
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 24090
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 24091
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 24092
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 24093
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 24094
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 24095
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 24096
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 24097
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 24098
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 24099
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24100
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24101
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24102
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 24103
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24104
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 24105
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 24106
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 24107
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 24108
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 24109
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 23916
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 23917
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 23918
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 23919
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 23920
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 23921
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 23922
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 23923
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 23924
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 23925
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 23926
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 23927
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 23928
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 23929
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 23930
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 23931
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 23932
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 23933
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 23934
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 24166
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24167
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24168
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 24169
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24170
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 24171
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 24172
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 24173
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 24174
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24175
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24176
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 24177
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24178
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24179
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24180
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 24181
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24182
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 24183
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 24184
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 24185
    //IF
    if(tb22){
        //Instruction 24186
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 24187
        //IF
        if(tb22){
            //Instruction 24188
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24189
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24190
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24191
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 24192
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 24193
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24194
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24195
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24196
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24197
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24198
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 24199
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 24200
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24201
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24202
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 24203
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24204
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24205
            //FRC
            t2 = fract(t2);
            //Instruction 24206
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24207
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24208
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24209
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24210
            //ADD
            t2 = t2 + t2;
            //Instruction 24211
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24212
            //LT
            tb24 = t5.w<0.0;
            //Instruction 24213
            //MOV
            t5.y = (-t5.w);
            //Instruction 24214
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24215
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 24216
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 24217
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 24218
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 24219
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 24220
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 24221
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24222
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24223
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24224
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 24225
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24226
            //MUL
            t24 = t24 * t25;
            //Instruction 24227
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 24228
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24229
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24230
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24231
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24232
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24233
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24234
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24235
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24236
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24237
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24238
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24239
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24240
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 24241
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24242
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 24243
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 24244
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24245
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24246
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24247
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24248
        //ELSE
        } else {
            //Instruction 24249
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24250
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24251
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24252
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24253
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24254
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24255
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24256
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24257
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24258
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24259
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24260
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24261
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24262
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24263
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24264
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24265
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24266
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24267
            //MOV
            t2.y = (-t2.w);
            //Instruction 24268
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24269
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24270
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24271
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24272
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 24273
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 24274
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24275
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24276
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24277
            //MUL
            t24 = t24 * t5.x;
            //Instruction 24278
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 24279
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24280
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24281
        //ENDIF
        }
        //Instruction 24282
    //ELSE
    } else {
        //Instruction 24283
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24284
    //ENDIF
    }
    //Instruction 24285
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24286
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24287
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24288
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 24289
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 24290
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 24291
    //NE
    tb24 = t22!=0.0;
    //Instruction 24292
    //LOG
    t4.x = log2(t22);
    //Instruction 24293
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24294
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24295
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 24296
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24297
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24298
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24299
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24300
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24301
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24302
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24303
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24304
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24305
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 24306
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24307
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 24308
    //MUL
    t22 = t22 * t24;
    //Instruction 24309
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 24310
    //MOV
    t4.y = t3.y;
    //Instruction 24311
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 24312
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24313
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 24314
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24315
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 24316
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24317
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24318
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24319
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24320
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24321
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24322
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24323
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24324
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 24325
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 24326
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 24327
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 24328
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 24329
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 24330
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24331
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24332
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 24333
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 24334
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 24335
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24336
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 24337
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 24338
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 24339
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 24340
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24341
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24342
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 24343
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 24344
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 24345
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 24346
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 24133
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24134
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24135
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 24136
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24137
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 24138
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 24139
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 24140
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24141
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24142
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24143
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24144
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 24145
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 24146
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24147
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24148
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 24149
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 24150
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 24151
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 24152
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 24153
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 24154
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 24155
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24156
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24157
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 24158
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24159
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 24160
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 24161
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 24162
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 24163
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24164
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24165
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
