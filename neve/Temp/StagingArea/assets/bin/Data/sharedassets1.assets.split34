tiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 44844
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44845
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 44846
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 44847
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 44848
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 44849
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 44850
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 44851
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 44852
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 44853
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 44854
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 44855
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44856
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 44857
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 44858
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 44859
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44860
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 44861
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 44862
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 44863
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 44864
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 44865
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 44866
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 44867
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 44868
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 44869
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 44870
    //FRC
    t30 = fract(t30);
    //Instruction 44871
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 44872
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 44873
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 44874
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 44875
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 44876
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 44877
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 44878
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 44879
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 44880
    //IF
    if(tb30){
        //Instruction 44881
        //IF
        if(tb28){
            //Instruction 44882
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44883
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 44884
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 44885
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 44886
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 44887
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44888
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44889
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44890
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44891
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44892
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 44893
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 44894
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44895
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44896
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 44897
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44898
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44899
            //FRC
            t2 = fract(t2);
            //Instruction 44900
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44901
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 44902
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44903
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44904
            //ADD
            t2 = t2 + t2;
            //Instruction 44905
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 44906
            //LT
            tb30 = t6.w<0.0;
            //Instruction 44907
            //MOV
            t6.y = (-t6.w);
            //Instruction 44908
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 44909
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 44910
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 44911
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 44912
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 44913
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 44914
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 44915
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44916
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44917
            //MUL
            t32 = t2.x * t32;
            //Instruction 44918
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 44919
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44920
            //MUL
            t30 = t30 * t31;
            //Instruction 44921
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 44922
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44923
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44924
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44925
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44926
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44927
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 44928
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44929
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 44930
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44931
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 44932
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 44933
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 44934
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 44935
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44936
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 44937
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 44938
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 44939
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44940
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44941
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 44942
        //ELSE
        } else {
            //Instruction 44943
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44944
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44945
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44946
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44947
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44948
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44949
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44950
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 44951
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 44952
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44953
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44954
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44955
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 44956
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44957
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44958
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 44959
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 44960
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44961
            //MOV
            t2.y = (-t2.w);
            //Instruction 44962
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44963
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44964
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 44965
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 44966
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 44967
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 44968
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44969
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44970
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44971
            //MUL
            t30 = t30 * t5.x;
            //Instruction 44972
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 44973
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 44974
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44975
        //ENDIF
        }
        //Instruction 44976
    //ENDIF
    }
    //Instruction 44977
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 44978
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44979
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44980
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 44981
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 44982
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 44983
    //NE
    tb30 = t28!=0.0;
    //Instruction 44984
    //LOG
    t4.x = log2(t28);
    //Instruction 44985
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 44986
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 44987
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 44988
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44989
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44990
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 44991
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 44992
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44993
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 44994
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44995
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 44996
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 44997
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 44998
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44999
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45000
    //MUL
    t28 = t28 * t30;
    //Instruction 45001
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45002
    //MOV
    t4.y = t3.y;
    //Instruction 45003
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45004
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45005
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45006
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45007
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45008
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45009
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45010
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45011
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45012
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45013
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 45014
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45015
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45016
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 45017
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 45018
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 45019
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 45020
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45021
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45022
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45023
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 45024
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 45025
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 45026
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 45027
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 45028
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 45029
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 45030
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 45031
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45032
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45033
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45034
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45035
    //MOV
    t0.w = 1.0;
    //Instruction 45036
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45037
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45038
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45039
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 45040
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 45041
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 45042
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 45043
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45044
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45045
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45046
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45047
    //MOV
    gl_Position = t2;
    //Instruction 45048
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45049
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45050
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45051
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 45052
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45053
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 45054
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 44821
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44822
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44823
    //LT
    tb12 = t10_1<0.0;
    //Instruction 44824
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 44825
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 44826
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 44827
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 44828
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 44829
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 44830
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 44831
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 44832
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 44833
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 44834
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44835
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44836
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44837
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44838
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 44839
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 44840
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44841
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44842
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44843
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43932
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43933
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43934
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43935
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43936
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43937
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43938
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43939
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43940
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43941
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43942
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43943
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43944
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43945
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43946
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43947
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43948
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43949
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43950
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43951
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43952
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 43953
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 43954
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 43955
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 43956
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 43957
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 43958
    //FRC
    t30 = fract(t30);
    //Instruction 43959
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 43960
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 43961
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 43962
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 43963
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 43964
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 43965
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 43966
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 43967
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 43968
    //IF
    if(tb30){
        //Instruction 43969
        //IF
        if(tb28){
            //Instruction 43970
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43971
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43972
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43973
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43974
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43975
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43976
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43977
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43978
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43979
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43980
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43981
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43982
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43983
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43984
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43985
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43986
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43987
            //FRC
            t2 = fract(t2);
            //Instruction 43988
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43989
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43990
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43991
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43992
            //ADD
            t2 = t2 + t2;
            //Instruction 43993
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43994
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43995
            //MOV
            t6.y = (-t6.w);
            //Instruction 43996
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43997
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43998
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43999
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 44000
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 44001
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 44002
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 44003
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44004
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44005
            //MUL
            t32 = t2.x * t32;
            //Instruction 44006
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 44007
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44008
            //MUL
            t30 = t30 * t31;
            //Instruction 44009
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 44010
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44011
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44012
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44013
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44014
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44015
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 44016
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44017
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 44018
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44019
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 44020
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 44021
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 44022
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 44023
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44024
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 44025
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 44026
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 44027
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44028
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44029
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 44030
        //ELSE
        } else {
            //Instruction 44031
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44032
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44033
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44034
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44035
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44036
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44037
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44038
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 44039
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 44040
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44041
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44042
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44043
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 44044
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44045
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44046
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 44047
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 44048
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44049
            //MOV
            t2.y = (-t2.w);
            //Instruction 44050
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44051
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44052
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 44053
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 44054
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 44055
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 44056
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44057
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44058
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44059
            //MUL
            t30 = t30 * t5.x;
            //Instruction 44060
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 44061
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 44062
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44063
        //ENDIF
        }
        //Instruction 44064
    //ENDIF
    }
    //Instruction 44065
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 44066
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44067
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44068
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 44069
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 44070
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 44071
    //NE
    tb30 = t28!=0.0;
    //Instruction 44072
    //LOG
    t4.x = log2(t28);
    //Instruction 44073
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 44074
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 44075
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 44076
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44077
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44078
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 44079
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 44080
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44081
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 44082
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44083
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 44084
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 44085
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 44086
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44087
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 44088
    //MUL
    t28 = t28 * t30;
    //Instruction 44089
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 44090
    //MOV
    t4.y = t3.y;
    //Instruction 44091
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 44092
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44093
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 44094
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 44095
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 44096
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 44097
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 44098
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 44099
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 44100
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 44101
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 44102
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 44103
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 44104
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 44105
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 44106
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 44107
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 44108
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 44109
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 44110
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 44111
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 44112
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 44113
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 44114
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 44115
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 44116
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 44117
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 44118
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 44119
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 44120
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 44121
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 44122
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 44123
    //MOV
    t0.w = 1.0;
    //Instruction 44124
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 44125
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 44126
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 44127
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 44128
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 44129
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 44130
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 44131
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 44132
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 44133
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 44134
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 44135
    //MOV
    gl_Position = t2;
    //Instruction 44136
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44137
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 44138
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 44139
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 44140
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44141
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 44142
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 43910
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 43911
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 43912
    //LT
    tb12 = t10_1<0.0;
    //Instruction 43913
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 43914
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 43915
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 43916
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 43917
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 43918
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 43919
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 43920
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 43921
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 43922
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 43923
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43924
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43925
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43926
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43927
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 43928
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 43929
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 43930
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43931
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  mediump vec3 tmpvar_107;
  mediump vec4 normal_108;
  normal_108 = tmpvar_106;
  mediump vec3 x2_109;
  mediump vec3 x1_110;
  x1_110.x = dot (unity_SHAr, normal_108);
  x1_110.y = dot (unity_SHAg, normal_108);
  x1_110.z = dot (unity_SHAb, normal_108);
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_111);
  x2_109.y = dot (unity_SHBg, tmpvar_111);
  x2_109.z = dot (unity_SHBb, tmpvar_111);
  tmpvar_107 = ((x2_109 + (unity_SHC.xyz * 
    ((normal_108.x * normal_108.x) - (normal_108.y * normal_108.y))
  )) + x1_110);
  tmpvar_9 = tmpvar_107;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_100;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    //Instruction 44365
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44366
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 44367
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 44368
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44369
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 44370
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 44371
    //DP3
    t33 = dot(t2.xyz, t2.xyz);
    //Instruction 44372
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 44373
    //MUL
    t2.xyz = vec3(t33) * t2.xyz;
    //Instruction 44374
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 44375
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 44376
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 44377
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 44378
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 44379
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 44380
    //LT
    tb33 = t16_0<5.000000;
    //Instruction 44381
    //AND
    ti17 = int(uint(tb33) & uint(tb1.y));
    //Instruction 44382
    //IF
    if((uint(ti17))!=uint(0u)){
        //Instruction 44383
        //ADD
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 44384
        //EQ
        tb33 = t16_0==4.000000;
        //Instruction 44385
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 44386
        //MOVC
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 44387
        //ADD
        t17.x = t17.x + t4.x;
        //Instruction 44388
        //ADD
        t17.x = t17.x + 0.500000;
        //Instruction 44389
        //FRC
        t17.x = fract(t17.x);
        //Instruction 44390
        //MAD
        t17.x = t17.x * 2.000000 + -1.0;
        //Instruction 44391
        //MUL
        t50 = abs(t17.x) * abs(t17.x);
        //Instruction 44392
        //MAD
        t17.x = -abs(t17.x) * 2.000000 + 3.000000;
        //Instruction 44393
        //MAD
        t17.x = t50 * t17.x + -0.500000;
        //Instruction 44394
        //DP2
        t17.x = dot(t17.xx, t4.yy);
        //Instruction 44395
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 44396
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 44397
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 44398
        //MUL
        t4.xyz = t17.xxx * t4.xyz;
        //Instruction 44399
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 44400
        //IF
        if(tb33){
            //Instruction 44401
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 44402
            //FRC
            t4 = fract(t4);
            //Instruction 44403
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44404
            //MOVC
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 44405
            //MOVC
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 44406
            //MUL
            t50 = t4.w * 3.000000;
            //Instruction 44407
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 44408
            //MAD
            t6.x = t5.x * 0.750000 + (-t50);
            //Instruction 44409
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44410
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 44411
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44412
            //MUL
            t38.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 44413
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44414
            //MAD
            t6.xy = t38.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 44415
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 44416
            //DP3
            t50 = dot(t3.xyz, t3.xyz);
            //Instruction 44417
            //SQRT
            t50 = sqrt(t50);
            //Instruction 44418
            //MAD
            t51 = t6.x * t6.x + t6.y;
            //Instruction 44419
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 44420
            //MUL
            t51 = t51 * t5.x;
            //Instruction 44421
            //SINCOS
            t5.x = sin(t51);
            t7.x = cos(t51);
            //Instruction 44422
            //ADD
            t51 = (-t7.x) + 1.0;
            //Instruction 44423
            //MUL
            t8 = t4.xxxy * vec4(t51);
            //Instruction 44424
            //MUL
            t23.xyz = t4.zxy * t5.xxx;
            //Instruction 44425
            //MAD
            t9.xy = t8.zy * t4.zy + t23.zx;
            //Instruction 44426
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 44427
            //MAD
            t9.z = t8.w * t4.z + (-t23.y);
            //Instruction 44428
            //MAD
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            //Instruction 44429
            //MAD
            t11.z = t8.w * t4.z + t23.y;
            //Instruction 44430
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 44431
            //MAD
            t11.w = t5.x * t51 + t7.x;
            //Instruction 44432
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 44433
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 44434
            //DP3
            t18.x = dot(t2.xyz, t4.xyz);
            //Instruction 44435
            //MAX
            t18.x = max(t18.x, -1.0);
            //Instruction 44436
            //MIN
            t18.x = min(t18.x, 1.0);
            //Instruction 44437
            //ADD
            t7.w = t18.x + t7.y;
            //Instruction 44438
            //DP3
            t51 = dot(t7.xzw, t7.xzw);
            //Instruction 44439
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 44440
            //MUL
            t4.xyz = vec3(t51) * t7.zxw;
            //Instruction 44441
            //ADD
            t51 = -abs(t18.x) + 1.0;
            //Instruction 44442
            //SQRT
            t51 = sqrt(t51);
            //Instruction 44443
            //MAD
            t5.x = abs(t18.x) * -0.018729 + 0.074261;
            //Instruction 44444
            //MAD
            t5.x = t5.x * abs(t18.x) + -0.212114;
            //Instruction 44445
            //MAD
            t5.x = t5.x * abs(t18.x) + 1.570729;
            //Instruction 44446
            //MUL
            t37 = t51 * t5.x;
            //Instruction 44447
            //MAD
            t37 = t37 * -2.000000 + 3.141593;
            //Instruction 44448
            //LT
            tb18 = t18.x<(-t18.x);
            //Instruction 44449
            //AND
            t18.x = tb18 ? t37 : float(0.0);
            //Instruction 44450
            //MAD
            t18.x = t5.x * t51 + t18.x;
            //Instruction 44451
            //MAD
            t51 = (-t6.y) * t6.y + t6.x;
            //Instruction 44452
            //MAD
            t6.x = t4.w * 3.000000 + t17.z;
            //Instruction 44453
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 44454
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44455
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 44456
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44457
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 44458
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44459
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 44460
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 44461
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 44462
            //MAD
            t49 = t49 * t5.x + 1.0;
            //Instruction 44463
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 44464
            //LOG
            t49 = log2(t49);
            //Instruction 44465
            //MUL
            t33 = t49 * t17.y;
            //Instruction 44466
            //EXP
            t33 = exp2(t33);
            //Instruction 44467
            //MUL
            t49 = t5.y * t51;
            //Instruction 44468
            //MAD
            t49 = t18.x * t5.w + t49;
            //Instruction 44469
            //MAD
            t17.x = t17.x * t33 + t49;
            //Instruction 44470
            //MUL
            t17.x = t17.x * in_TEXCOORD2.x;
            //Instruction 44471
            //SINCOS
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            //Instruction 44472
            //ADD
            t17.x = (-t6.x) + 1.0;
            //Instruction 44473
            //MUL
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            //Instruction 44474
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 44475
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 44476
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 44477
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 44478
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 44479
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 44480
            //MUL
            t33 = t4.x * t4.x;
            //Instruction 44481
            //MAD
            t8.w = t33 * t17.x + t6.x;
            //Instruction 44482
            //MOV
            t10.z = t11.x;
            //Instruction 44483
            //MOV
            t10.w = t9.x;
            //Instruction 44484
            //MOV
            t12.z = t8.y;
            //Instruction 44485
            //MOV
            t12.w = t13.y;
            //Instruction 44486
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 44487
            //MOV
            t13.w = t12.y;
            //Instruction 44488
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 44489
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 44490
            //MOV
            t9.w = t10.y;
            //Instruction 44491
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 44492
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 44493
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 44494
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 44495
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 44496
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 44497
            //DP3
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 44498
            //DP3
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 44499
            //DP3
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 44500
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 44501
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 44502
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 44503
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 44504
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 44505
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 44506
            //MUL
            t3.xyz = vec3(t50) * t4.xyz;
            //Instruction 44507
        //ELSE
        } else {
            //Instruction 44508
            //MOV
            t17.xyz = in_NORMAL0.xyz;
            //Instruction 44509
        //ENDIF
        }
        //Instruction 44510
    //ELSE
    } else {
        //Instruction 44511
        //MOV
        t17.xyz = in_NORMAL0.xyz;
        //Instruction 44512
    //ENDIF
    }
    //Instruction 44513
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 44514
    //GE
    tb18 = t16_0>=3.000000;
    //Instruction 44515
    //IF
    if(tb18){
        //Instruction 44516
        //EQ
        tb18 = t16_0==5.000000;
        //Instruction 44517
        //IF
        if(tb18){
            //Instruction 44518
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44519
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 44520
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 44521
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 44522
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 44523
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 44524
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44525
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44526
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44527
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44528
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44529
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 44530
            //ADD
            t0.x = t18.x + in_TEXCOORD0.w;
            //Instruction 44531
            //MAD
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44532
            //MUL
            t50 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 44533
            //MUL
            t0.z = t50 * 0.500000;
            //Instruction 44534
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 44535
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44536
            //FRC
            t0 = fract(t0);
            //Instruction 44537
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44538
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 44539
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44540
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44541
            //ADD
            t0 = t0 + t0;
            //Instruction 44542
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 44543
            //LT
            tb50 = t6.w<0.0;
            //Instruction 44544
            //MOV
            t6.y = (-t6.w);
            //Instruction 44545
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 44546
            //MOVC
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            //Instruction 44547
            //MAD
            t50 = (-t0.y) * t0.z + t6.x;
            //Instruction 44548
            //MAD
            t50 = t6.y * t50 + t6.w;
            //Instruction 44549
            //ADD
            t51 = (-t50) + t6.x;
            //Instruction 44550
            //MAD
            t50 = t6.y * t51 + t50;
            //Instruction 44551
            //MUL
            t50 = t50 * _ST_WindBranchTwitch.x;
            //Instruction 44552
            //ADD
            t51 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44553
            //ADD
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44554
            //MUL
            t52 = t0.x * t52;
            //Instruction 44555
            //MAD
            t50 = t50 * t51 + t52;
            //Instruction 44556
            //MAD
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44557
            //MUL
            t50 = t50 * t51;
            //Instruction 44558
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 44559
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44560
            //MAD
            t6.x = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44561
            //MUL
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44562
            //MAD
            t6.y = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44563
            //ADD
            t18.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44564
            //FRC
            t18.xz = fract(t18.xz);
            //Instruction 44565
            //MAD
            t18.xz = t18.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44566
            //MUL
            t6.xy = abs(t18.xz) * abs(t18.xz);
            //Instruction 44567
            //MAD
            t18.xz = -abs(t18.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44568
            //MAD
            t18.xz = t6.xy * t18.xz + vec2(-0.500000, -0.500000);
            //Instruction 44569
            //ADD
            t18.xz = t18.xz + t18.xz;
            //Instruction 44570
            //MUL
            t18.xz = t18.xz * t18.xz;
            //Instruction 44571
            //MUL
            t18.x = t18.x * t18.z;
            //Instruction 44572
            //MAD
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44573
            //MUL
            t50 = t0.w * _ST_WindVector.w;
            //Instruction 44574
            //MAD
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            //Instruction 44575
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 44576
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44577
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 44578
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 44579
        //ELSE
        } else {
            //Instruction 44580
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44581
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44582
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44583
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44584
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44585
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 44586
            //ADD
            t5.x = t18.x + in_TEXCOORD0.w;
            //Instruction 44587
            //MAD
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44588
            //MUL
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 44589
            //MUL
            t5.z = t18.x * 0.500000;
            //Instruction 44590
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44591
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44592
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44593
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 44594
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44595
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44596
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 44597
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 44598
            //LT
            tb18 = t0.w<0.0;
            //Instruction 44599
            //MOV
            t0.y = (-t0.w);
            //Instruction 44600
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 44601
            //MOVC
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            //Instruction 44602
            //MAD
            t51 = (-t5.y) * t5.z + t18.x;
            //Instruction 44603
            //MAD
            t51 = t18.z * t51 + t0.w;
            //Instruction 44604
            //ADD
            t18.x = t18.x + (-t51);
            //Instruction 44605
            //MAD
            t18.x = t18.z * t18.x + t51;
            //Instruction 44606
            //MUL
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            //Instruction 44607
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44608
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44609
            //MUL
            t51 = t51 * t5.x;
            //Instruction 44610
            //MAD
            t18.x = t18.x * t50 + t51;
            //Instruction 44611
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 44612
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44613
        //ENDIF
        }
        //Instruction 44614
    //ENDIF
    }
    //Instruction 44615
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 44616
    //SQRT
    t18.x = sqrt(t18.x);
    //Instruction 44617
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44618
    //MAD
    t50 = (-t50) * 0.250000 + t3.y;
    //Instruction 44619
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 44620
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 44621
    //NE
    tb51 = t50!=0.0;
    //Instruction 44622
    //LOG
    t4.x = log2(t50);
    //Instruction 44623
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 44624
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 44625
    //MOVC
    t50 = (tb51) ? t4.x : t50;
    //Instruction 44626
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44627
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44628
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 44629
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 44630
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44631
    //MUL
    t36.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 44632
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44633
    //MAD
    t4.xy = t36.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 44634
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 44635
    //MAD
    t51 = t4.y * t4.y + t4.x;
    //Instruction 44636
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44637
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    //Instruction 44638
    //MUL
    t50 = t50 * t51;
    //Instruction 44639
    //MAD
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    //Instruction 44640
    //MOV
    t4.y = t3.y;
    //Instruction 44641
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 44642
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 44643
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 44644
    //MUL
    t2.xyz = t18.xxx * t2.xzw;
    //Instruction 44645
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 44646
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 44647
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 44648
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 44649
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 44650
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 44651
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 44652
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 44653
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 44654
    //MUL
    t2.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 44655
    //MUL
    t1.x = t0.y * _ProjectionParams.x;
    //Instruction 44656
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 44657
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 44658
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 44659
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 44660
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 44661
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 44662
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 44663
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 44664
    //MUL
    t3.xyz = t17.yyy * t3.xyz;
    //Instruction 44665
    //MAD
    t1.xyz = t2.xyz * t17.xxx + t3.xyz;
    //Instruction 44666
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 44667
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 44668
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 44669
    //MAD
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    //Instruction 44670
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 44671
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 44672
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 44673
    //MOV
    t1.w = 1.0;
    //Instruction 44674
    //DP4
    t16_14.x = dot(unity_SHAr, t1);
    //Instruction 44675
    //DP4
    t16_14.y = dot(unity_SHAg, t1);
    //Instruction 44676
    //DP4
    t16_14.z = dot(unity_SHAb, t1);
    //Instruction 44677
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 44678
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 44679
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 44680
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 44681
    //MUL
    t16_62 = t1.y * t1.y;
    //Instruction 44682
    //MAD
    t16_62 = t1.x * t1.x + (-t16_62);
    //Instruction 44683
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    //Instruction 44684
    //ADD
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    //Instruction 44685
    //MOV
    gl_Position = t0;
    //Instruction 44686
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44687
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 44688
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 44689
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 44690
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44691
    //MOV
    vs_TEXCOORD5.xyz = t16_14.xyz;
    //Instruction 44692
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 44351
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44352
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44353
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44354
    //LT
    tb0 = t10_1<0.0;
    //Instruction 44355
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 44356
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44357
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44358
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44359
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 44360
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 44361
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44362
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44363
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44364
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  mediump vec3 tmpvar_107;
  mediump vec4 normal_108;
  normal_108 = tmpvar_106;
  mediump vec3 x2_109;
  mediump vec3 x1_110;
  x1_110.x = dot (unity_SHAr, normal_108);
  x1_110.y = dot (unity_SHAg, normal_108);
  x1_110.z = dot (unity_SHAb, normal_108);
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_111);
  x2_109.y = dot (unity_SHBg, tmpvar_111);
  x2_109.z = dot (unity_SHBb, tmpvar_111);
  tmpvar_107 = ((x2_109 + (unity_SHC.xyz * 
    ((normal_108.x * normal_108.x) - (normal_108.y * normal_108.y))
  )) + x1_110);
  tmpvar_9 = tmpvar_107;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_100;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    //Instruction 45068
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45069
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 45070
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 45071
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45072
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 45073
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 45074
    //DP3
    t33 = dot(t2.xyz, t2.xyz);
    //Instruction 45075
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 45076
    //MUL
    t2.xyz = vec3(t33) * t2.xyz;
    //Instruction 45077
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 45078
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 45079
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 45080
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 45081
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 45082
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 45083
    //LT
    tb33 = t16_0<5.000000;
    //Instruction 45084
    //AND
    ti17 = int(uint(tb33) & uint(tb1.y));
    //Instruction 45085
    //IF
    if((uint(ti17))!=uint(0u)){
        //Instruction 45086
        //ADD
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 45087
        //EQ
        tb33 = t16_0==4.000000;
        //Instruction 45088
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 45089
        //MOVC
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 45090
        //ADD
        t17.x = t17.x + t4.x;
        //Instruction 45091
        //ADD
        t17.x = t17.x + 0.500000;
        //Instruction 45092
        //FRC
        t17.x = fract(t17.x);
        //Instruction 45093
        //MAD
        t17.x = t17.x * 2.000000 + -1.0;
        //Instruction 45094
        //MUL
        t50 = abs(t17.x) * abs(t17.x);
        //Instruction 45095
        //MAD
        t17.x = -abs(t17.x) * 2.000000 + 3.000000;
        //Instruction 45096
        //MAD
        t17.x = t50 * t17.x + -0.500000;
        //Instruction 45097
        //DP2
        t17.x = dot(t17.xx, t4.yy);
        //Instruction 45098
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 45099
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 45100
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 45101
        //MUL
        t4.xyz = t17.xxx * t4.xyz;
        //Instruction 45102
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 45103
        //IF
        if(tb33){
            //Instruction 45104
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 45105
            //FRC
            t4 = fract(t4);
            //Instruction 45106
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45107
            //MOVC
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 45108
            //MOVC
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 45109
            //MUL
            t50 = t4.w * 3.000000;
            //Instruction 45110
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 45111
            //MAD
            t6.x = t5.x * 0.750000 + (-t50);
            //Instruction 45112
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 45113
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 45114
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45115
            //MUL
            t38.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 45116
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45117
            //MAD
            t6.xy = t38.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 45118
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 45119
            //DP3
            t50 = dot(t3.xyz, t3.xyz);
            //Instruction 45120
            //SQRT
            t50 = sqrt(t50);
            //Instruction 45121
            //MAD
            t51 = t6.x * t6.x + t6.y;
            //Instruction 45122
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 45123
            //MUL
            t51 = t51 * t5.x;
            //Instruction 45124
            //SINCOS
            t5.x = sin(t51);
            t7.x = cos(t51);
            //Instruction 45125
            //ADD
            t51 = (-t7.x) + 1.0;
            //Instruction 45126
            //MUL
            t8 = t4.xxxy * vec4(t51);
            //Instruction 45127
            //MUL
            t23.xyz = t4.zxy * t5.xxx;
            //Instruction 45128
            //MAD
            t9.xy = t8.zy * t4.zy + t23.zx;
            //Instruction 45129
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 45130
            //MAD
            t9.z = t8.w * t4.z + (-t23.y);
            //Instruction 45131
            //MAD
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            //Instruction 45132
            //MAD
            t11.z = t8.w * t4.z + t23.y;
            //Instruction 45133
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 45134
            //MAD
            t11.w = t5.x * t51 + t7.x;
            //Instruction 45135
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 45136
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 45137
            //DP3
            t18.x = dot(t2.xyz, t4.xyz);
            //Instruction 45138
            //MAX
            t18.x = max(t18.x, -1.0);
            //Instruction 45139
            //MIN
            t18.x = min(t18.x, 1.0);
            //Instruction 45140
            //ADD
            t7.w = t18.x + t7.y;
            //Instruction 45141
            //DP3
            t51 = dot(t7.xzw, t7.xzw);
            //Instruction 45142
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 45143
            //MUL
            t4.xyz = vec3(t51) * t7.zxw;
            //Instruction 45144
            //ADD
            t51 = -abs(t18.x) + 1.0;
            //Instruction 45145
            //SQRT
            t51 = sqrt(t51);
            //Instruction 45146
            //MAD
            t5.x = abs(t18.x) * -0.018729 + 0.074261;
            //Instruction 45147
            //MAD
            t5.x = t5.x * abs(t18.x) + -0.212114;
            //Instruction 45148
            //MAD
            t5.x = t5.x * abs(t18.x) + 1.570729;
            //Instruction 45149
            //MUL
            t37 = t51 * t5.x;
            //Instruction 45150
            //MAD
            t37 = t37 * -2.000000 + 3.141593;
            //Instruction 45151
            //LT
            tb18 = t18.x<(-t18.x);
            //Instruction 45152
            //AND
            t18.x = tb18 ? t37 : float(0.0);
            //Instruction 45153
            //MAD
            t18.x = t5.x * t51 + t18.x;
            //Instruction 45154
            //MAD
            t51 = (-t6.y) * t6.y + t6.x;
            //Instruction 45155
            //MAD
            t6.x = t4.w * 3.000000 + t17.z;
            //Instruction 45156
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 45157
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 45158
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 45159
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45160
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 45161
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45162
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 45163
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 45164
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 45165
            //MAD
            t49 = t49 * t5.x + 1.0;
            //Instruction 45166
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 45167
            //LOG
            t49 = log2(t49);
            //Instruction 45168
            //MUL
            t33 = t49 * t17.y;
            //Instruction 45169
            //EXP
            t33 = exp2(t33);
            //Instruction 45170
            //MUL
            t49 = t5.y * t51;
            //Instruction 45171
            //MAD
            t49 = t18.x * t5.w + t49;
            //Instruction 45172
            //MAD
            t17.x = t17.x * t33 + t49;
            //Instruction 45173
            //MUL
            t17.x = t17.x * in_TEXCOORD2.x;
            //Instruction 45174
            //SINCOS
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            //Instruction 45175
            //ADD
            t17.x = (-t6.x) + 1.0;
            //Instruction 45176
            //MUL
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            //Instruction 45177
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 45178
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 45179
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 45180
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 45181
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 45182
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 45183
            //MUL
            t33 = t4.x * t4.x;
            //Instruction 45184
            //MAD
            t8.w = t33 * t17.x + t6.x;
            //Instruction 45185
            //MOV
            t10.z = t11.x;
            //Instruction 45186
            //MOV
            t10.w = t9.x;
            //Instruction 45187
            //MOV
            t12.z = t8.y;
            //Instruction 45188
            //MOV
            t12.w = t13.y;
            //Instruction 45189
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 45190
            //MOV
            t13.w = t12.y;
            //Instruction 45191
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 45192
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 45193
            //MOV
            t9.w = t10.y;
            //Instruction 45194
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 45195
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 45196
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 45197
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 45198
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 45199
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 45200
            //DP3
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 45201
            //DP3
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 45202
            //DP3
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 45203
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 45204
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 45205
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 45206
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 45207
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 45208
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 45209
            //MUL
            t3.xyz = vec3(t50) * t4.xyz;
            //Instruction 45210
        //ELSE
        } else {
            //Instruction 45211
            //MOV
            t17.xyz = in_NORMAL0.xyz;
            //Instruction 45212
        //ENDIF
        }
        //Instruction 45213
    //ELSE
    } else {
        //Instruction 45214
        //MOV
        t17.xyz = in_NORMAL0.xyz;
        //Instruction 45215
    //ENDIF
    }
    //Instruction 45216
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 45217
    //GE
    tb18 = t16_0>=3.000000;
    //Instruction 45218
    //IF
    if(tb18){
        //Instruction 45219
        //EQ
        tb18 = t16_0==5.000000;
        //Instruction 45220
        //IF
        if(tb18){
            //Instruction 45221
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45222
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 45223
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 45224
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 45225
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 45226
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 45227
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45228
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45229
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45230
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 45231
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45232
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 45233
            //ADD
            t0.x = t18.x + in_TEXCOORD0.w;
            //Instruction 45234
            //MAD
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45235
            //MUL
            t50 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 45236
            //MUL
            t0.z = t50 * 0.500000;
            //Instruction 45237
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 45238
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45239
            //FRC
            t0 = fract(t0);
            //Instruction 45240
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45241
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 45242
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45243
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45244
            //ADD
            t0 = t0 + t0;
            //Instruction 45245
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 45246
            //LT
            tb50 = t6.w<0.0;
            //Instruction 45247
            //MOV
            t6.y = (-t6.w);
            //Instruction 45248
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 45249
            //MOVC
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            //Instruction 45250
            //MAD
            t50 = (-t0.y) * t0.z + t6.x;
            //Instruction 45251
            //MAD
            t50 = t6.y * t50 + t6.w;
            //Instruction 45252
            //ADD
            t51 = (-t50) + t6.x;
            //Instruction 45253
            //MAD
            t50 = t6.y * t51 + t50;
            //Instruction 45254
            //MUL
            t50 = t50 * _ST_WindBranchTwitch.x;
            //Instruction 45255
            //ADD
            t51 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45256
            //ADD
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45257
            //MUL
            t52 = t0.x * t52;
            //Instruction 45258
            //MAD
            t50 = t50 * t51 + t52;
            //Instruction 45259
            //MAD
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45260
            //MUL
            t50 = t50 * t51;
            //Instruction 45261
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 45262
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 45263
            //MAD
            t6.x = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45264
            //MUL
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45265
            //MAD
            t6.y = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45266
            //ADD
            t18.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 45267
            //FRC
            t18.xz = fract(t18.xz);
            //Instruction 45268
            //MAD
            t18.xz = t18.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45269
            //MUL
            t6.xy = abs(t18.xz) * abs(t18.xz);
            //Instruction 45270
            //MAD
            t18.xz = -abs(t18.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45271
            //MAD
            t18.xz = t6.xy * t18.xz + vec2(-0.500000, -0.500000);
            //Instruction 45272
            //ADD
            t18.xz = t18.xz + t18.xz;
            //Instruction 45273
            //MUL
            t18.xz = t18.xz * t18.xz;
            //Instruction 45274
            //MUL
            t18.x = t18.x * t18.z;
            //Instruction 45275
            //MAD
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45276
            //MUL
            t50 = t0.w * _ST_WindVector.w;
            //Instruction 45277
            //MAD
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            //Instruction 45278
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 45279
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45280
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 45281
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 45282
        //ELSE
        } else {
            //Instruction 45283
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45284
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45285
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45286
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45287
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45288
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 45289
            //ADD
            t5.x = t18.x + in_TEXCOORD0.w;
            //Instruction 45290
            //MAD
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45291
            //MUL
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45292
            //MUL
            t5.z = t18.x * 0.500000;
            //Instruction 45293
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45294
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45295
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45296
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45297
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45298
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45299
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45300
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 45301
            //LT
            tb18 = t0.w<0.0;
            //Instruction 45302
            //MOV
            t0.y = (-t0.w);
            //Instruction 45303
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 45304
            //MOVC
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            //Instruction 45305
            //MAD
            t51 = (-t5.y) * t5.z + t18.x;
            //Instruction 45306
            //MAD
            t51 = t18.z * t51 + t0.w;
            //Instruction 45307
            //ADD
            t18.x = t18.x + (-t51);
            //Instruction 45308
            //MAD
            t18.x = t18.z * t18.x + t51;
            //Instruction 45309
            //MUL
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            //Instruction 45310
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45311
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45312
            //MUL
            t51 = t51 * t5.x;
            //Instruction 45313
            //MAD
            t18.x = t18.x * t50 + t51;
            //Instruction 45314
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 45315
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 45316
        //ENDIF
        }
        //Instruction 45317
    //ENDIF
    }
    //Instruction 45318
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45319
    //SQRT
    t18.x = sqrt(t18.x);
    //Instruction 45320
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45321
    //MAD
    t50 = (-t50) * 0.250000 + t3.y;
    //Instruction 45322
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 45323
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 45324
    //NE
    tb51 = t50!=0.0;
    //Instruction 45325
    //LOG
    t4.x = log2(t50);
    //Instruction 45326
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45327
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45328
    //MOVC
    t50 = (tb51) ? t4.x : t50;
    //Instruction 45329
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45330
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45331
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45332
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45333
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45334
    //MUL
    t36.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45335
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45336
    //MAD
    t4.xy = t36.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45337
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45338
    //MAD
    t51 = t4.y * t4.y + t4.x;
    //Instruction 45339
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45340
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    //Instruction 45341
    //MUL
    t50 = t50 * t51;
    //Instruction 45342
    //MAD
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    //Instruction 45343
    //MOV
    t4.y = t3.y;
    //Instruction 45344
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 45345
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 45346
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 45347
    //MUL
    t2.xyz = t18.xxx * t2.xzw;
    //Instruction 45348
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 45349
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 45350
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 45351
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 45352
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 45353
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 45354
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 45355
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 45356
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 45357
    //MUL
    t2.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 45358
    //MUL
    t1.x = t0.y * _ProjectionParams.x;
    //Instruction 45359
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 45360
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 45361
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 45362
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 45363
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 45364
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 45365
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 45366
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 45367
    //MUL
    t3.xyz = t17.yyy * t3.xyz;
    //Instruction 45368
    //MAD
    t1.xyz = t2.xyz * t17.xxx + t3.xyz;
    //Instruction 45369
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 45370
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 45371
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 45372
    //MAD
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    //Instruction 45373
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 45374
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 45375
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 45376
    //MOV
    t1.w = 1.0;
    //Instruction 45377
    //DP4
    t16_14.x = dot(unity_SHAr, t1);
    //Instruction 45378
    //DP4
    t16_14.y = dot(unity_SHAg, t1);
    //Instruction 45379
    //DP4
    t16_14.z = dot(unity_SHAb, t1);
    //Instruction 45380
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 45381
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 45382
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 45383
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 45384
    //MUL
    t16_62 = t1.y * t1.y;
    //Instruction 45385
    //MAD
    t16_62 = t1.x * t1.x + (-t16_62);
    //Instruction 45386
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    //Instruction 45387
    //ADD
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    //Instruction 45388
    //MOV
    gl_Position = t0;
    //Instruction 45389
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45390
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 45391
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 45392
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 45393
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45394
    //MOV
    vs_TEXCOORD5.xyz = t16_14.xyz;
    //Instruction 45395
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 45055
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 45056
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 45057
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45058
    //LT
    tb0 = t10_1<0.0;
    //Instruction 45059
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 45060
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 45061
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 45062
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45063
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 45064
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 45065
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 45066
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45067
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 44166
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44167
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 44168
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 44169
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 44170
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 44171
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 44172
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 44173
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 44174
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 44175
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 44176
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 44177
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44178
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 44179
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 44180
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 44181
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 44182
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 44183
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 44184
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 44185
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 44186
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 44187
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 44188
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 44189
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 44190
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 44191
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 44192
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 44193
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 44194
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 44195
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 44196
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 44197
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 44198
        //FRC
        t34.x = fract(t34.x);
        //Instruction 44199
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 44200
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 44201
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 44202
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 44203
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 44204
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 44205
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 44206
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 44207
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 44208
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 44209
        //IF
        if(tb51){
            //Instruction 44210
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 44211
            //FRC
            t5 = fract(t5);
            //Instruction 44212
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44213
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 44214
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 44215
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 44216
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 44217
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 44218
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 44219
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 44220
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44221
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 44222
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44223
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 44224
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 44225
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 44226
            //SQRT
            t52 = sqrt(t52);
            //Instruction 44227
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 44228
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 44229
            //MUL
            t54 = t54 * t55;
            //Instruction 44230
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 44231
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 44232
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 44233
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 44234
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 44235
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 44236
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 44237
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 44238
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 44239
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 44240
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 44241
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 44242
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 44243
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 44244
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 44245
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 44246
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 44247
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 44248
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 44249
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 44250
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 44251
            //SQRT
            t54 = sqrt(t54);
            //Instruction 44252
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 44253
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 44254
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 44255
            //MUL
            t6.x = t54 * t55;
            //Instruction 44256
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 44257
            //LT
            tb20 = t20<(-t20);
            //Instruction 44258
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 44259
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 44260
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 44261
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 44262
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 44263
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 44264
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 44265
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44266
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 44267
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44268
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 44269
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 44270
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 44271
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 44272
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 44273
            //LOG
            t51 = log2(t51);
            //Instruction 44274
            //MUL
            t51 = t51 * t7.y;
            //Instruction 44275
            //EXP
            t51 = exp2(t51);
            //Instruction 44276
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 44277
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 44278
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 44279
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 44280
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 44281
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 44282
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 44283
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 44284
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 44285
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 44286
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 44287
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 44288
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 44289
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 44290
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 44291
            //MOV
            t11.z = t12.x;
            //Instruction 44292
            //MOV
            t11.w = t10.x;
            //Instruction 44293
            //MOV
            t13.z = t9.y;
            //Instruction 44294
            //MOV
            t13.w = t14.y;
            //Instruction 44295
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 44296
            //MOV
            t14.w = t13.y;
            //Instruction 44297
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 44298
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 44299
            //MOV
            t10.w = t11.y;
            //Instruction 44300
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 44301
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 44302
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 44303
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 44304
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 44305
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 44306
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 44307
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 44308
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 44309
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 44310
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 44311
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 44312
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 44313
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 44314
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 44315
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 44316
        //ELSE
        } else {
            //Instruction 44317
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 44318
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 44319
        //ENDIF
        }
        //Instruction 44320
    //ELSE
    } else {
        //Instruction 44321
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 44322
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 44323
    //ENDIF
    }
    //Instruction 44324
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 44325
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 44326
    //IF
    if(tb52){
        //Instruction 44327
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 44328
        //IF
        if(tb52){
            //Instruction 44329
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44330
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 44331
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 44332
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 44333
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 44334
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 44335
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44336
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 44337
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44338
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 44339
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 44340
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 44341
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44342
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44343
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 44344
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44345
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44346
            //FRC
            t2 = fract(t2);
            //Instruction 44347
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44348
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 44349
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44350
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44351
            //ADD
            t2 = t2 + t2;
            //Instruction 44352
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 44353
            //LT
            tb54 = t7.w<0.0;
            //Instruction 44354
            //MOV
            t7.y = (-t7.w);
            //Instruction 44355
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 44356
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 44357
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 44358
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 44359
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 44360
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 44361
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 44362
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44363
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44364
            //MUL
            t56 = t2.x * t56;
            //Instruction 44365
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 44366
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44367
            //MUL
            t54 = t54 * t55;
            //Instruction 44368
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 44369
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 44370
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44371
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44372
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44373
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 44374
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 44375
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44376
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 44377
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44378
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 44379
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 44380
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 44381
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 44382
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44383
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 44384
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 44385
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 44386
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44387
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 44388
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 44389
        //ELSE
        } else {
            //Instruction 44390
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44391
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44392
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44393
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44394
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44395
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44396
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44397
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 44398
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 44399
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44400
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 44401
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44402
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 44403
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44404
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44405
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 44406
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 44407
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44408
            //MOV
            t2.y = (-t2.w);
            //Instruction 44409
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44410
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44411
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 44412
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 44413
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 44414
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 44415
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44416
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44417
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44418
            //MUL
            t54 = t54 * t6.x;
            //Instruction 44419
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 44420
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 44421
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 44422
        //ENDIF
        }
        //Instruction 44423
    //ENDIF
    }
    //Instruction 44424
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 44425
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44426
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44427
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 44428
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 44429
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 44430
    //NE
    tb54 = t52!=0.0;
    //Instruction 44431
    //LOG
    t55 = log2(t52);
    //Instruction 44432
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 44433
    //EXP
    t55 = exp2(t55);
    //Instruction 44434
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 44435
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44436
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44437
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 44438
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 44439
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44440
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 44441
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44442
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 44443
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 44444
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 44445
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44446
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 44447
    //MUL
    t52 = t52 * t54;
    //Instruction 44448
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 44449
    //MOV
    t5.y = t4.y;
    //Instruction 44450
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 44451
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 44452
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 44453
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 44454
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 44455
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 44456
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 44457
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 44458
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 44459
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 44460
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 44461
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 44462
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 44463
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 44464
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 44465
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 44466
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 44467
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 44468
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 44469
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 44470
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 44471
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 44472
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 44473
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 44474
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 44475
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 44476
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 44477
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 44478
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 44479
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 44480
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 44481
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 44482
    //MOV
    t0.w = 1.0;
    //Instruction 44483
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 44484
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 44485
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 44486
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 44487
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 44488
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 44489
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 44490
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 44491
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 44492
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 44493
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 44494
    //MOV
    gl_Position = t2;
    //Instruction 44495
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44496
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 44497
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 44498
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 44499
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44500
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 44501
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 44143
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44144
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44145
    //LT
    tb12 = t10_1<0.0;
    //Instruction 44146
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 44147
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 44148
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 44149
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 44150
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 44151
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 44152
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 44153
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 44154
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 44155
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 44156
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44157
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44158
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44159
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44160
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 44161
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 44162
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44163
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44164
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44165
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 44524
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44525
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 44526
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 44527
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 44528
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 44529
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 44530
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 44531
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 44532
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 44533
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 44534
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 44535
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44536
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 44537
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 44538
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 44539
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 44540
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 44541
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 44542
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 44543
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 44544
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 44545
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 44546
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 44547
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 44548
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 44549
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 44550
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 44551
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 44552
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 44553
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 44554
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 44555
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 44556
        //FRC
        t34.x = fract(t34.x);
        //Instruction 44557
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 44558
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 44559
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 44560
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 44561
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 44562
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 44563
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 44564
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 44565
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 44566
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 44567
        //IF
        if(tb51){
            //Instruction 44568
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 44569
            //FRC
            t5 = fract(t5);
            //Instruction 44570
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44571
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 44572
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 44573
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 44574
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 44575
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 44576
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 44577
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 44578
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44579
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 44580
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44581
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 44582
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 44583
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 44584
            //SQRT
            t52 = sqrt(t52);
            //Instruction 44585
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 44586
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 44587
            //MUL
            t54 = t54 * t55;
            //Instruction 44588
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 44589
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 44590
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 44591
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 44592
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 44593
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 44594
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 44595
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 44596
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 44597
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 44598
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 44599
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 44600
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 44601
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 44602
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 44603
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 44604
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 44605
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 44606
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 44607
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 44608
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 44609
            //SQRT
            t54 = sqrt(t54);
            //Instruction 44610
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 44611
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 44612
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 44613
            //MUL
            t6.x = t54 * t55;
            //Instruction 44614
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 44615
            //LT
            tb20 = t20<(-t20);
            //Instruction 44616
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 44617
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 44618
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 44619
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 44620
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 44621
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 44622
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 44623
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44624
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 44625
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44626
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 44627
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 44628
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 44629
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 44630
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 44631
            //LOG
            t51 = log2(t51);
            //Instruction 44632
            //MUL
            t51 = t51 * t7.y;
            //Instruction 44633
            //EXP
            t51 = exp2(t51);
            //Instruction 44634
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 44635
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 44636
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 44637
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 44638
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 44639
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 44640
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 44641
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 44642
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 44643
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 44644
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 44645
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 44646
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 44647
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 44648
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 44649
            //MOV
            t11.z = t12.x;
            //Instruction 44650
            //MOV
            t11.w = t10.x;
            //Instruction 44651
            //MOV
            t13.z = t9.y;
            //Instruction 44652
            //MOV
            t13.w = t14.y;
            //Instruction 44653
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 44654
            //MOV
            t14.w = t13.y;
            //Instruction 44655
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 44656
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 44657
            //MOV
            t10.w = t11.y;
            //Instruction 44658
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 44659
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 44660
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 44661
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 44662
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 44663
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 44664
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 44665
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 44666
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 44667
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 44668
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 44669
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 44670
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 44671
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 44672
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 44673
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 44674
        //ELSE
        } else {
            //Instruction 44675
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 44676
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 44677
        //ENDIF
        }
        //Instruction 44678
    //ELSE
    } else {
        //Instruction 44679
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 44680
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 44681
    //ENDIF
    }
    //Instruction 44682
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 44683
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 44684
    //IF
    if(tb52){
        //Instruction 44685
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 44686
        //IF
        if(tb52){
            //Instruction 44687
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44688
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 44689
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 44690
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 44691
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 44692
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 44693
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44694
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 44695
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44696
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 44697
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 44698
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 44699
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44700
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44701
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 44702
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44703
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44704
            //FRC
            t2 = fract(t2);
            //Instruction 44705
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44706
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 44707
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44708
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44709
            //ADD
            t2 = t2 + t2;
            //Instruction 44710
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 44711
            //LT
            tb54 = t7.w<0.0;
            //Instruction 44712
            //MOV
            t7.y = (-t7.w);
            //Instruction 44713
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 44714
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 44715
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 44716
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 44717
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 44718
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 44719
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 44720
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44721
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44722
            //MUL
            t56 = t2.x * t56;
            //Instruction 44723
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 44724
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44725
            //MUL
            t54 = t54 * t55;
            //Instruction 44726
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 44727
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 44728
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44729
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44730
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44731
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 44732
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 44733
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44734
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 44735
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44736
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 44737
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 44738
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 44739
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 44740
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44741
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 44742
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 44743
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 44744
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44745
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 44746
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 44747
        //ELSE
        } else {
            //Instruction 44748
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44749
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44750
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44751
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44752
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44753
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44754
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44755
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 44756
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 44757
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44758
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 44759
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44760
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 44761
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44762
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44763
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 44764
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 44765
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44766
            //MOV
            t2.y = (-t2.w);
            //Instruction 44767
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44768
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44769
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 44770
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 44771
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 44772
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 44773
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44774
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44775
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44776
            //MUL
            t54 = t54 * t6.x;
            //Instruction 44777
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 44778
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 44779
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 44780
        //ENDIF
        }
        //Instruction 44781
    //ENDIF
    }
    //Instruction 44782
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 44783
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44784
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44785
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 44786
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 44787
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 44788
    //NE
    tb54 = t52!=0.0;
    //Instruction 44789
    //LOG
    t55 = log2(t52);
    //Instruction 44790
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 44791
    //EXP
    t55 = exp2(t55);
    //Instruction 44792
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 44793
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44794
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44795
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 44796
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 44797
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44798
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 44799
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44800
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 44801
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 44802
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 44803
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44804
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 44805
    //MUL
    t52 = t52 * t54;
    //Instruction 44806
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 44807
    //MOV
    t5.y = t4.y;
    //Instruction 44808
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 44809
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 44810
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 44811
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 44812
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 44813
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 44814
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 44815
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 44816
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 44817
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 44818
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 44819
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 44820
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 44821
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 44822
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 44823
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 44824
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 44825
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 44826
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 44827
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 44828
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 44829
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 44830
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 44831
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 44832
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 44833
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 44834
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 44835
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 44836
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 44837
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 44838
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 44839
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 44840
    //MOV
    t0.w = 1.0;
    //Instruction 44841
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 44842
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 44843
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 44844
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 44845
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 44846
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 44847
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 44848
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 44849
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 44850
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 44851
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 44852
    //MOV
    gl_Position = t2;
    //Instruction 44853
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44854
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 44855
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 44856
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 44857
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44858
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 44859
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 44502
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44503
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44504
    //LT
    tb12 = t10_1<0.0;
    //Instruction 44505
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 44506
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 44507
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 44508
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 44509
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 44510
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 44511
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 44512
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 44513
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 44514
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 44515
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44516
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44517
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44518
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44519
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 44520
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44521
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44522
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44523
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 45419
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45420
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45421
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 45422
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45423
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 45424
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 45425
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 45426
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 45427
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45428
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45429
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 45430
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45431
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45432
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45433
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 45434
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 45435
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 45436
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 45437
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 45438
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 45439
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 45440
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 45441
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 45442
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 45443
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 45444
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 45445
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 45446
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 45447
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 45448
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 45449
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 45450
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 45451
        //FRC
        t34.x = fract(t34.x);
        //Instruction 45452
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 45453
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 45454
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 45455
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 45456
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 45457
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 45458
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 45459
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 45460
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 45461
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 45462
        //IF
        if(tb51){
            //Instruction 45463
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 45464
            //FRC
            t5 = fract(t5);
            //Instruction 45465
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45466
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 45467
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 45468
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 45469
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 45470
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 45471
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 45472
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 45473
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45474
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 45475
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45476
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 45477
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 45478
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 45479
            //SQRT
            t52 = sqrt(t52);
            //Instruction 45480
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 45481
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 45482
            //MUL
            t54 = t54 * t55;
            //Instruction 45483
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 45484
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 45485
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 45486
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 45487
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 45488
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 45489
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 45490
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 45491
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 45492
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 45493
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 45494
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 45495
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 45496
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 45497
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 45498
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 45499
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 45500
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 45501
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 45502
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 45503
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 45504
            //SQRT
            t54 = sqrt(t54);
            //Instruction 45505
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 45506
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 45507
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 45508
            //MUL
            t6.x = t54 * t55;
            //Instruction 45509
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 45510
            //LT
            tb20 = t20<(-t20);
            //Instruction 45511
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 45512
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 45513
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 45514
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 45515
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 45516
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 45517
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 45518
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45519
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 45520
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45521
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 45522
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 45523
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 45524
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 45525
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 45526
            //LOG
            t51 = log2(t51);
            //Instruction 45527
            //MUL
            t51 = t51 * t7.y;
            //Instruction 45528
            //EXP
            t51 = exp2(t51);
            //Instruction 45529
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 45530
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 45531
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 45532
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 45533
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 45534
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 45535
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 45536
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 45537
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 45538
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 45539
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 45540
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 45541
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 45542
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 45543
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 45544
            //MOV
            t11.z = t12.x;
            //Instruction 45545
            //MOV
            t11.w = t10.x;
            //Instruction 45546
            //MOV
            t13.z = t9.y;
            //Instruction 45547
            //MOV
            t13.w = t14.y;
            //Instruction 45548
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 45549
            //MOV
            t14.w = t13.y;
            //Instruction 45550
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 45551
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 45552
            //MOV
            t10.w = t11.y;
            //Instruction 45553
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 45554
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 45555
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 45556
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 45557
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 45558
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 45559
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 45560
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 45561
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 45562
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 45563
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 45564
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 45565
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 45566
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 45567
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 45568
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 45569
        //ELSE
        } else {
            //Instruction 45570
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 45571
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 45572
        //ENDIF
        }
        //Instruction 45573
    //ELSE
    } else {
        //Instruction 45574
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 45575
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 45576
    //ENDIF
    }
    //Instruction 45577
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 45578
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 45579
    //IF
    if(tb52){
        //Instruction 45580
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 45581
        //IF
        if(tb52){
            //Instruction 45582
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45583
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 45584
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 45585
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 45586
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 45587
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 45588
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45589
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 45590
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45591
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 45592
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 45593
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 45594
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45595
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45596
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 45597
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45598
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45599
            //FRC
            t2 = fract(t2);
            //Instruction 45600
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45601
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 45602
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45603
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45604
            //ADD
            t2 = t2 + t2;
            //Instruction 45605
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 45606
            //LT
            tb54 = t7.w<0.0;
            //Instruction 45607
            //MOV
            t7.y = (-t7.w);
            //Instruction 45608
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 45609
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 45610
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 45611
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 45612
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 45613
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 45614
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 45615
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45616
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45617
            //MUL
            t56 = t2.x * t56;
            //Instruction 45618
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 45619
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45620
            //MUL
            t54 = t54 * t55;
            //Instruction 45621
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 45622
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 45623
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45624
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45625
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45626
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 45627
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 45628
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45629
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 45630
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45631
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 45632
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 45633
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 45634
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 45635
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45636
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 45637
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 45638
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 45639
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45640
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 45641
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 45642
        //ELSE
        } else {
            //Instruction 45643
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45644
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45645
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45646
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 45647
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45648
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45649
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45650
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 45651
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 45652
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45653
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 45654
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45655
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 45656
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45657
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45658
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 45659
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 45660
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45661
            //MOV
            t2.y = (-t2.w);
            //Instruction 45662
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45663
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45664
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 45665
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 45666
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 45667
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 45668
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45669
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45670
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45671
            //MUL
            t54 = t54 * t6.x;
            //Instruction 45672
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 45673
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 45674
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 45675
        //ENDIF
        }
        //Instruction 45676
    //ENDIF
    }
    //Instruction 45677
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 45678
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45679
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45680
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 45681
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 45682
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 45683
    //NE
    tb54 = t52!=0.0;
    //Instruction 45684
    //LOG
    t55 = log2(t52);
    //Instruction 45685
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 45686
    //EXP
    t55 = exp2(t55);
    //Instruction 45687
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 45688
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45689
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45690
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 45691
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 45692
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45693
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 45694
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45695
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 45696
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 45697
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 45698
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45699
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 45700
    //MUL
    t52 = t52 * t54;
    //Instruction 45701
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 45702
    //MOV
    t5.y = t4.y;
    //Instruction 45703
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 45704
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 45705
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 45706
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 45707
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 45708
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 45709
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 45710
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 45711
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45712
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 45713
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 45714
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 45715
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 45716
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 45717
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 45718
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 45719
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 45720
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 45721
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 45722
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 45723
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 45724
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 45725
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 45726
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 45727
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 45728
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45729
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45730
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45731
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 45732
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 45733
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 45734
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 45735
    //MOV
    t0.w = 1.0;
    //Instruction 45736
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 45737
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 45738
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 45739
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 45740
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 45741
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 45742
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 45743
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 45744
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 45745
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 45746
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 45747
    //MOV
    gl_Position = t2;
    //Instruction 45748
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45749
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45750
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45751
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 45752
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45753
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 45754
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 45396
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 45397
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 45398
    //LT
    tb12 = t10_1<0.0;
    //Instruction 45399
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 45400
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 45401
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 45402
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 45403
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 45404
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 45405
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 45406
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 45407
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 45408
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 45409
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45410
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 45411
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 45412
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45413
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 45414
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 45415
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 45416
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 45417
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45418
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  highp vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  tmpvar_6 = (glstate_matrix_mvp * tmpvar_15);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_6 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_6.zw;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_16.x)
   + 
    (v_106.xyz * tmpvar_16.y)
  ) + (v_107.xyz * tmpvar_16.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_9 = tmpvar_109;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = o_102;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 44715
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44716
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 44717
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 44718
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 44719
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 44720
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 44721
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 44722
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 44723
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 44724
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 44725
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 44726
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44727
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 44728
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 44729
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 44730
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 44731
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 44732
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 44733
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 44734
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 44735
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 44736
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 44737
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 44738
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 44739
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 44740
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 44741
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 44742
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 44743
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 44744
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 44745
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 44746
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 44747
        //FRC
        t34.x = fract(t34.x);
        //Instruction 44748
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 44749
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 44750
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 44751
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 44752
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 44753
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 44754
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 44755
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 44756
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 44757
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 44758
        //IF
        if(tb51){
            //Instruction 44759
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 44760
            //FRC
            t5 = fract(t5);
            //Instruction 44761
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44762
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 44763
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 44764
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 44765
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 44766
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 44767
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 44768
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 44769
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44770
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 44771
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44772
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 44773
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 44774
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 44775
            //SQRT
            t52 = sqrt(t52);
            //Instruction 44776
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 44777
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 44778
            //MUL
            t54 = t54 * t55;
            //Instruction 44779
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 44780
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 44781
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 44782
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 44783
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 44784
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 44785
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 44786
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 44787
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 44788
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 44789
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 44790
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 44791
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 44792
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 44793
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 44794
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 44795
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 44796
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 44797
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 44798
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 44799
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 44800
            //SQRT
            t54 = sqrt(t54);
            //Instruction 44801
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 44802
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 44803
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 44804
            //MUL
            t6.x = t54 * t55;
            //Instruction 44805
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 44806
            //LT
            tb20 = t20<(-t20);
            //Instruction 44807
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 44808
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 44809
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 44810
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 44811
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 44812
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 44813
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 44814
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44815
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 44816
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44817
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 44818
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 44819
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 44820
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 44821
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 44822
            //LOG
            t51 = log2(t51);
            //Instruction 44823
            //MUL
            t51 = t51 * t7.y;
            //Instruction 44824
            //EXP
            t51 = exp2(t51);
            //Instruction 44825
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 44826
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 44827
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 44828
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 44829
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 44830
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 44831
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 44832
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 44833
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 44834
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 44835
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 44836
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 44837
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 44838
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 44839
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 44840
            //MOV
            t11.z = t12.x;
            //Instruction 44841
            //MOV
            t11.w = t10.x;
            //Instruction 44842
            //MOV
            t13.z = t9.y;
            //Instruction 44843
            //MOV
            t13.w = t14.y;
            //Instruction 44844
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 44845
            //MOV
            t14.w = t13.y;
            //Instruction 44846
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 44847
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 44848
            //MOV
            t10.w = t11.y;
            //Instruction 44849
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 44850
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 44851
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 44852
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 44853
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 44854
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 44855
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 44856
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 44857
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 44858
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 44859
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 44860
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 44861
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 44862
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 44863
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 44864
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 44865
        //ELSE
        } else {
            //Instruction 44866
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 44867
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 44868
        //ENDIF
        }
        //Instruction 44869
    //ELSE
    } else {
        //Instruction 44870
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 44871
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 44872
    //ENDIF
    }
    //Instruction 44873
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 44874
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 44875
    //IF
    if(tb52){
        //Instruction 44876
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 44877
        //IF
        if(tb52){
            //Instruction 44878
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44879
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 44880
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 44881
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 44882
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 44883
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 44884
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44885
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 44886
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44887
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 44888
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 44889
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 44890
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44891
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44892
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 44893
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44894
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44895
            //FRC
            t2 = fract(t2);
            //Instruction 44896
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44897
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 44898
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44899
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44900
            //ADD
            t2 = t2 + t2;
            //Instruction 44901
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 44902
            //LT
            tb54 = t7.w<0.0;
            //Instruction 44903
            //MOV
            t7.y = (-t7.w);
            //Instruction 44904
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 44905
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 44906
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 44907
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 44908
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 44909
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 44910
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 44911
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44912
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44913
            //MUL
            t56 = t2.x * t56;
            //Instruction 44914
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 44915
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44916
            //MUL
            t54 = t54 * t55;
            //Instruction 44917
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 44918
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 44919
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44920
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44921
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44922
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 44923
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 44924
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44925
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 44926
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44927
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 44928
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 44929
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 44930
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 44931
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44932
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 44933
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 44934
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 44935
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44936
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 44937
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 44938
        //ELSE
        } else {
            //Instruction 44939
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44940
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44941
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44942
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44943
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44944
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44945
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44946
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 44947
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 44948
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44949
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 44950
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44951
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 44952
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44953
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44954
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 44955
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 44956
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44957
            //MOV
            t2.y = (-t2.w);
            //Instruction 44958
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44959
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44960
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 44961
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 44962
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 44963
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 44964
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44965
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44966
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44967
            //MUL
            t54 = t54 * t6.x;
            //Instruction 44968
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 44969
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 44970
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 44971
        //ENDIF
        }
        //Instruction 44972
    //ENDIF
    }
    //Instruction 44973
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 44974
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44975
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44976
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 44977
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 44978
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 44979
    //NE
    tb54 = t52!=0.0;
    //Instruction 44980
    //LOG
    t55 = log2(t52);
    //Instruction 44981
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 44982
    //EXP
    t55 = exp2(t55);
    //Instruction 44983
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 44984
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44985
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44986
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 44987
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 44988
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44989
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 44990
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44991
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 44992
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 44993
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 44994
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44995
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 44996
    //MUL
    t52 = t52 * t54;
    //Instruction 44997
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 44998
    //MOV
    t5.y = t4.y;
    //Instruction 44999
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 45000
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 45001
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 45002
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 45003
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 45004
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 45005
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 45006
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 45007
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45008
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 45009
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 45010
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 45011
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 45012
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 45013
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 45014
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 45015
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 45016
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 45017
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 45018
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 45019
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 45020
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 45021
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 45022
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 45023
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 45024
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45025
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45026
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45027
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 45028
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 45029
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 45030
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 45031
    //MOV
    t0.w = 1.0;
    //Instruction 45032
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 45033
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 45034
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 45035
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 45036
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 45037
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 45038
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 45039
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 45040
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 45041
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 45042
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 45043
    //MOV
    gl_Position = t2;
    //Instruction 45044
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45045
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45046
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45047
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 45048
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45049
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 45050
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 44693
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44694
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44695
    //LT
    tb12 = t10_1<0.0;
    //Instruction 44696
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 44697
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 44698
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 44699
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 44700
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 44701
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 44702
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 44703
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 44704
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 44705
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 44706
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44707
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44708
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44709
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44710
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 44711
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44712
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44713
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44714
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_6 = tmpvar_64;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_52;
  xlv_TEXCOORD4 = o_57;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 44879
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44880
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 44881
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 44882
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44883
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 44884
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 44885
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 44886
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 44887
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 44888
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 44889
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 44890
    //IF
    if(tb25){
        //Instruction 44891
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 44892
        //IF
        if(tb25){
            //Instruction 44893
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44894
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 44895
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 44896
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 44897
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 44898
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 44899
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44900
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 44901
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44902
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 44903
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44904
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44905
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 44906
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44907
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 44908
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 44909
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 44910
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44911
            //FRC
            t0 = fract(t0);
            //Instruction 44912
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44913
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 44914
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44915
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44916
            //ADD
            t0 = t0 + t0;
            //Instruction 44917
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 44918
            //LT
            tb26 = t4.w<0.0;
            //Instruction 44919
            //MOV
            t4.y = (-t4.w);
            //Instruction 44920
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 44921
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 44922
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 44923
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 44924
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 44925
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 44926
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 44927
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44928
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44929
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 44930
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 44931
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44932
            //MUL
            t26 = t26 * t27;
            //Instruction 44933
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 44934
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 44935
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44936
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44937
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44938
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 44939
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 44940
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44941
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 44942
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44943
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 44944
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 44945
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 44946
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 44947
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44948
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 44949
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 44950
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 44951
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44952
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 44953
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 44954
        //ELSE
        } else {
            //Instruction 44955
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44956
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 44957
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44958
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 44959
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44960
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44961
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 44962
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44963
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 44964
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 44965
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44966
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44967
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44968
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 44969
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44970
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44971
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 44972
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 44973
            //LT
            tb25 = t0.w<0.0;
            //Instruction 44974
            //MOV
            t0.y = (-t0.w);
            //Instruction 44975
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 44976
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 44977
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 44978
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 44979
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 44980
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 44981
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 44982
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44983
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44984
            //MUL
            t27 = t27 * t4.x;
            //Instruction 44985
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 44986
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44987
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 44988
        //ENDIF
        }
        //Instruction 44989
    //ELSE
    } else {
        //Instruction 44990
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 44991
    //ENDIF
    }
    //Instruction 44992
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 44993
    //SQRT
    t25 = sqrt(t25);
    //Instruction 44994
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44995
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 44996
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 44997
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 44998
    //NE
    tb3 = t26!=0.0;
    //Instruction 44999
    //LOG
    t11 = log2(t26);
    //Instruction 45000
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 45001
    //EXP
    t11 = exp2(t11);
    //Instruction 45002
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 45003
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45004
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45005
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 45006
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 45007
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45008
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 45009
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45010
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 45011
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 45012
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 45013
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45014
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 45015
    //MUL
    t26 = t26 * t3.x;
    //Instruction 45016
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 45017
    //MOV
    t3.y = t2.y;
    //Instruction 45018
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 45019
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 45020
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 45021
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 45022
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 45023
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45024
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 45025
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 45026
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 45027
    //MOV
    t3.xz = vec2(0.500000, 0.500000);
    //Instruction 45028
    //MOV
    t3.y = _ProjectionParams.x;
    //Instruction 45029
    //MUL
    t0.xyz = t2.xyz * t3.xyz;
    //Instruction 45030
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45031
    //ADD
    t4.xy = t0.zz + t0.xw;
    //Instruction 45032
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 45033
    //MUL
    t2.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 45034
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 45035
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 45036
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 45037
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 45038
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 45039
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 45040
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 45041
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 45042
    //MUL
    t1.xyz = t3.xyz * t0.xyw;
    //Instruction 45043
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 45044
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 45045
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 45046
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 45047
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 45048
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 45049
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 45050
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 45051
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 45052
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 45053
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 45054
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 45055
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 45056
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 45057
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 45058
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 45059
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 45060
    //MOV
    t1.w = 1.0;
    //Instruction 45061
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 45062
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 45063
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 45064
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 45065
    //DP4
    t16_7.x = dot(unity_SHBr, t16_3);
    //Instruction 45066
    //DP4
    t16_7.y = dot(unity_SHBg, t16_3);
    //Instruction 45067
    //DP4
    t16_7.z = dot(unity_SHBb, t16_3);
    //Instruction 45068
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 45069
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 45070
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 45071
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 45072
    //MOV
    gl_Position = t0;
    //Instruction 45073
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45074
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 45075
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 45076
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 45077
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 45078
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45079
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 45080
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 44860
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 44861
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 44862
    //MOV
    t1.x = t16_0.x;
    //Instruction 44863
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 44864
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 44865
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 44866
    //LT
    tb1 = t16_1<0.0;
    //Instruction 44867
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 44868
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 44869
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 44870
    //MAX
    t16_0.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44871
    //LOG
    t16_0.xyz = log2(t16_0.xyz);
    //Instruction 44872
    //ADD
    t1.xyz = (-t16_0.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 44873
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 44874
    //MUL
    t16_0.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44875
    //MUL
    t16_0.xyz = t1.xyz * t16_0.xyz;
    //Instruction 44876
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 44877
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44878
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_6 = tmpvar_64;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_52;
  xlv_TEXCOORD4 = o_57;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 45773
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45774
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 45775
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 45776
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45777
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 45778
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 45779
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 45780
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 45781
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 45782
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 45783
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 45784
    //IF
    if(tb25){
        //Instruction 45785
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 45786
        //IF
        if(tb25){
            //Instruction 45787
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45788
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 45789
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 45790
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 45791
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 45792
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 45793
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45794
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 45795
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45796
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 45797
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45798
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 45799
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 45800
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45801
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 45802
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 45803
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 45804
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45805
            //FRC
            t0 = fract(t0);
            //Instruction 45806
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45807
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 45808
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45809
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45810
            //ADD
            t0 = t0 + t0;
            //Instruction 45811
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 45812
            //LT
            tb26 = t4.w<0.0;
            //Instruction 45813
            //MOV
            t4.y = (-t4.w);
            //Instruction 45814
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 45815
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 45816
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 45817
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 45818
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 45819
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 45820
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 45821
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45822
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45823
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 45824
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 45825
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45826
            //MUL
            t26 = t26 * t27;
            //Instruction 45827
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 45828
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45829
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45830
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45831
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45832
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 45833
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 45834
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45835
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 45836
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45837
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 45838
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 45839
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 45840
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 45841
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45842
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 45843
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 45844
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 45845
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45846
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 45847
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 45848
        //ELSE
        } else {
            //Instruction 45849
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45850
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 45851
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45852
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 45853
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45854
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 45855
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 45856
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45857
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 45858
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 45859
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45860
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45861
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45862
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 45863
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45864
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45865
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 45866
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 45867
            //LT
            tb25 = t0.w<0.0;
            //Instruction 45868
            //MOV
            t0.y = (-t0.w);
            //Instruction 45869
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 45870
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 45871
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 45872
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 45873
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 45874
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 45875
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 45876
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45877
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45878
            //MUL
            t27 = t27 * t4.x;
            //Instruction 45879
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 45880
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 45881
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45882
        //ENDIF
        }
        //Instruction 45883
    //ELSE
    } else {
        //Instruction 45884
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 45885
    //ENDIF
    }
    //Instruction 45886
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 45887
    //SQRT
    t25 = sqrt(t25);
    //Instruction 45888
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45889
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 45890
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 45891
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 45892
    //NE
    tb3 = t26!=0.0;
    //Instruction 45893
    //LOG
    t11 = log2(t26);
    //Instruction 45894
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 45895
    //EXP
    t11 = exp2(t11);
    //Instruction 45896
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 45897
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45898
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45899
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 45900
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 45901
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45902
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 45903
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45904
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 45905
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 45906
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 45907
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45908
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 45909
    //MUL
    t26 = t26 * t3.x;
    //Instruction 45910
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 45911
    //MOV
    t3.y = t2.y;
    //Instruction 45912
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 45913
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 45914
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 45915
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 45916
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 45917
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45918
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 45919
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 45920
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 45921
    //MOV
    t3.xz = vec2(0.500000, 0.500000);
    //Instruction 45922
    //MOV
    t3.y = _ProjectionParams.x;
    //Instruction 45923
    //MUL
    t0.xyz = t2.xyz * t3.xyz;
    //Instruction 45924
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45925
    //ADD
    t4.xy = t0.zz + t0.xw;
    //Instruction 45926
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 45927
    //MUL
    t2.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 45928
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 45929
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 45930
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 45931
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 45932
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 45933
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 45934
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 45935
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 45936
    //MUL
    t1.xyz = t3.xyz * t0.xyw;
    //Instruction 45937
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 45938
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 45939
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 45940
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 45941
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 45942
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 45943
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 45944
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 45945
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 45946
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 45947
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 45948
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 45949
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 45950
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 45951
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 45952
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 45953
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 45954
    //MOV
    t1.w = 1.0;
    //Instruction 45955
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 45956
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 45957
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 45958
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 45959
    //DP4
    t16_7.x = dot(unity_SHBr, t16_3);
    //Instruction 45960
    //DP4
    t16_7.y = dot(unity_SHBg, t16_3);
    //Instruction 45961
    //DP4
    t16_7.z = dot(unity_SHBb, t16_3);
    //Instruction 45962
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 45963
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 45964
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 45965
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 45966
    //MOV
    gl_Position = t0;
    //Instruction 45967
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45968
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 45969
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 45970
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 45971
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 45972
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45973
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 45974
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 45755
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 45756
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 45757
    //MOV
    t1.x = t16_0.x;
    //Instruction 45758
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 45759
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45760
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45761
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45762
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45763
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 45764
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45765
    //MAX
    t16_0.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45766
    //ADD
    t1.xyz = t16_0.xyz + vs_TEXCOORD6.xyz;
    //Instruction 45767
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45768
    //MUL
    t16_0.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45769
    //MUL
    t16_0.xyz = t1.xyz * t16_0.xyz;
    //Instruction 45770
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45771
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45772
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_6 = tmpvar_66;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_54;
  xlv_TEXCOORD4 = o_59;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 45079
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45080
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45081
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 45082
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45083
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 45084
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 45085
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 45086
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 45087
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45088
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45089
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 45090
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45091
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45092
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45093
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45094
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45095
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 45096
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 45097
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 45098
    //IF
    if(tb28){
        //Instruction 45099
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 45100
        //IF
        if(tb28){
            //Instruction 45101
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45102
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45103
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45104
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 45105
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 45106
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45107
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45108
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45109
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45110
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45111
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 45112
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 45113
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45114
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45115
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 45116
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45117
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45118
            //FRC
            t2 = fract(t2);
            //Instruction 45119
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45120
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 45121
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45122
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45123
            //ADD
            t2 = t2 + t2;
            //Instruction 45124
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 45125
            //LT
            tb30 = t5.w<0.0;
            //Instruction 45126
            //MOV
            t5.y = (-t5.w);
            //Instruction 45127
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45128
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 45129
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 45130
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 45131
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 45132
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 45133
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 45134
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45135
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45136
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 45137
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 45138
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45139
            //MUL
            t30 = t30 * t31;
            //Instruction 45140
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 45141
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45142
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45143
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45144
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45145
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45146
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45147
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45148
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45149
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45150
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45151
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45152
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45153
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 45154
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45155
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 45156
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 45157
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45158
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45159
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45160
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45161
        //ELSE
        } else {
            //Instruction 45162
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45163
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45164
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45165
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45166
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45167
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45168
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45169
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45170
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 45171
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45172
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45173
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45174
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45175
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45176
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45177
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45178
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 45179
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45180
            //MOV
            t2.y = (-t2.w);
            //Instruction 45181
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45182
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45183
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 45184
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 45185
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 45186
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 45187
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45188
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45189
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45190
            //MUL
            t30 = t30 * t5.x;
            //Instruction 45191
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 45192
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 45193
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45194
        //ENDIF
        }
        //Instruction 45195
    //ELSE
    } else {
        //Instruction 45196
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 45197
    //ENDIF
    }
    //Instruction 45198
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 45199
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45200
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45201
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 45202
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 45203
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 45204
    //NE
    tb30 = t28!=0.0;
    //Instruction 45205
    //LOG
    t4.x = log2(t28);
    //Instruction 45206
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45207
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45208
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 45209
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45210
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45211
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45212
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45213
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45214
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45215
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45216
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45217
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45218
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 45219
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45220
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45221
    //MUL
    t28 = t28 * t30;
    //Instruction 45222
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45223
    //MOV
    t4.y = t3.y;
    //Instruction 45224
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45225
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45226
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45227
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45228
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45229
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45230
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 45231
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 45232
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 45233
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 45234
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 45235
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 45236
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 45237
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 45238
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 45239
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 45240
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45241
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45242
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45243
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45244
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45245
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 45246
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45247
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45248
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 45249
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45250
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 45251
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45252
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45253
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45254
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 45255
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 45256
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 45257
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 45258
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 45259
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45260
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45261
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45262
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45263
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45264
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45265
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45266
    //MOV
    t0.w = 1.0;
    //Instruction 45267
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45268
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45269
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45270
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 45271
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 45272
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 45273
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 45274
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45275
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45276
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45277
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45278
    //MOV
    gl_Position = t2;
    //Instruction 45279
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45280
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45281
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45282
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 45283
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 45284
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45285
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 45286
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 45051
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 45052
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 45053
    //MOV
    t1.x = t16_0.x;
    //Instruction 45054
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 45055
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45056
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45057
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45058
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45059
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45060
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 45061
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 45062
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 45063
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 45064
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 45065
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 45066
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 45067
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 45068
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45069
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45070
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 45071
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45072
    //MAX
    t16_2.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45073
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 45074
    //ADD
    t1.xyz = (-t16_2.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 45075
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45076
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45077
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45078
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_6 = tmpvar_66;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_54;
  xlv_TEXCOORD4 = o_59;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_15.w;
  light_3.xyz = (tmpvar_15.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 45108
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45109
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45110
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 45111
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45112
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 45113
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 45114
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 45115
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 45116
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45117
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45118
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 45119
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45120
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45121
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45122
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45123
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45124
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 45125
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 45126
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 45127
    //IF
    if(tb28){
        //Instruction 45128
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 45129
        //IF
        if(tb28){
            //Instruction 45130
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45131
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45132
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45133
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 45134
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 45135
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45136
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45137
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45138
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45139
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45140
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 45141
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 45142
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45143
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45144
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 45145
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45146
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45147
            //FRC
            t2 = fract(t2);
            //Instruction 45148
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45149
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 45150
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45151
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45152
            //ADD
            t2 = t2 + t2;
            //Instruction 45153
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 45154
            //LT
            tb30 = t5.w<0.0;
            //Instruction 45155
            //MOV
            t5.y = (-t5.w);
            //Instruction 45156
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45157
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 45158
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 45159
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 45160
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 45161
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 45162
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 45163
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45164
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45165
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 45166
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 45167
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45168
            //MUL
            t30 = t30 * t31;
            //Instruction 45169
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 45170
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45171
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45172
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45173
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45174
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45175
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45176
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45177
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45178
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45179
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45180
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45181
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45182
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 45183
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45184
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 45185
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 45186
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45187
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45188
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45189
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45190
        //ELSE
        } else {
            //Instruction 45191
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45192
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45193
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45194
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45195
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45196
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45197
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45198
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45199
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 45200
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45201
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45202
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45203
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45204
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45205
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45206
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45207
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 45208
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45209
            //MOV
            t2.y = (-t2.w);
            //Instruction 45210
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45211
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45212
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 45213
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 45214
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 45215
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 45216
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45217
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45218
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45219
            //MUL
            t30 = t30 * t5.x;
            //Instruction 45220
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 45221
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 45222
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45223
        //ENDIF
        }
        //Instruction 45224
    //ELSE
    } else {
        //Instruction 45225
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 45226
    //ENDIF
    }
    //Instruction 45227
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 45228
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45229
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45230
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 45231
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 45232
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 45233
    //NE
    tb30 = t28!=0.0;
    //Instruction 45234
    //LOG
    t4.x = log2(t28);
    //Instruction 45235
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45236
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45237
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 45238
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45239
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45240
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45241
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45242
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45243
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45244
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45245
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45246
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45247
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 45248
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45249
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45250
    //MUL
    t28 = t28 * t30;
    //Instruction 45251
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45252
    //MOV
    t4.y = t3.y;
    //Instruction 45253
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45254
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45255
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45256
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45257
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45258
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45259
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 45260
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 45261
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 45262
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 45263
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 45264
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 45265
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 45266
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 45267
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 45268
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 45269
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45270
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45271
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45272
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45273
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45274
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 45275
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45276
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45277
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 45278
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45279
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 45280
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45281
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45282
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45283
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 45284
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 45285
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 45286
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 45287
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 45288
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45289
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45290
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45291
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45292
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45293
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45294
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45295
    //MOV
    t0.w = 1.0;
    //Instruction 45296
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45297
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45298
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45299
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 45300
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 45301
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 45302
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 45303
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45304
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45305
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45306
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45307
    //MOV
    gl_Position = t2;
    //Instruction 45308
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45309
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45310
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45311
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 45312
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 45313
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45314
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 45315
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 45081
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 45082
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 45083
    //MOV
    t1.x = t16_0.x;
    //Instruction 45084
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 45085
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45086
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45087
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45088
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45089
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45090
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 45091
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 45092
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 45093
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 45094
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 45095
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 45096
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 45097
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 45098
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45099
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45100
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 45101
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45102
    //MAX
    t16_2.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45103
    //ADD
    t1.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 45104
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45105
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45106
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45107
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_6 = tmpvar_66;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_54;
  xlv_TEXCOORD4 = o_59;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 46003
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46004
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46005
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 46006
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46007
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 46008
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 46009
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 46010
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 46011
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46012
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46013
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 46014
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46015
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46016
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46017
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46018
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46019
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 46020
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 46021
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 46022
    //IF
    if(tb28){
        //Instruction 46023
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 46024
        //IF
        if(tb28){
            //Instruction 46025
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46026
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 46027
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 46028
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 46029
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 46030
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 46031
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46032
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46033
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46034
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46035
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 46036
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 46037
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46038
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46039
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 46040
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46041
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46042
            //FRC
            t2 = fract(t2);
            //Instruction 46043
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46044
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 46045
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46046
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46047
            //ADD
            t2 = t2 + t2;
            //Instruction 46048
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 46049
            //LT
            tb30 = t5.w<0.0;
            //Instruction 46050
            //MOV
            t5.y = (-t5.w);
            //Instruction 46051
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 46052
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 46053
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 46054
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 46055
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 46056
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 46057
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 46058
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46059
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46060
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 46061
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 46062
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46063
            //MUL
            t30 = t30 * t31;
            //Instruction 46064
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 46065
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 46066
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46067
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46068
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46069
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 46070
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 46071
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46072
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 46073
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46074
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 46075
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 46076
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 46077
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 46078
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46079
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 46080
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 46081
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 46082
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46083
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 46084
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 46085
        //ELSE
        } else {
            //Instruction 46086
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46087
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46088
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46089
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46090
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46091
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46092
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46093
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 46094
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 46095
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46096
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46097
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46098
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 46099
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46100
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46101
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 46102
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 46103
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46104
            //MOV
            t2.y = (-t2.w);
            //Instruction 46105
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46106
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46107
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 46108
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 46109
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 46110
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 46111
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46112
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46113
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46114
            //MUL
            t30 = t30 * t5.x;
            //Instruction 46115
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 46116
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 46117
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 46118
        //ENDIF
        }
        //Instruction 46119
    //ELSE
    } else {
        //Instruction 46120
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 46121
    //ENDIF
    }
    //Instruction 46122
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 46123
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46124
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46125
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 46126
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 46127
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 46128
    //NE
    tb30 = t28!=0.0;
    //Instruction 46129
    //LOG
    t4.x = log2(t28);
    //Instruction 46130
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 46131
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 46132
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 46133
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46134
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46135
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 46136
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 46137
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46138
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 46139
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46140
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 46141
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 46142
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 46143
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46144
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 46145
    //MUL
    t28 = t28 * t30;
    //Instruction 46146
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 46147
    //MOV
    t4.y = t3.y;
    //Instruction 46148
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 46149
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46150
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 46151
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 46152
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 46153
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46154
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 46155
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 46156
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 46157
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 46158
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 46159
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 46160
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46161
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 46162
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 46163
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 46164
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 46165
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 46166
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 46167
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46168
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 46169
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 46170
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 46171
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 46172
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 46173
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46174
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 46175
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 46176
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 46177
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 46178
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 46179
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 46180
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 46181
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 46182
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 46183
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 46184
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 46185
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 46186
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 46187
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 46188
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 46189
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 46190
    //MOV
    t0.w = 1.0;
    //Instruction 46191
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 46192
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 46193
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 46194
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 46195
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 46196
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 46197
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 46198
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 46199
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 46200
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 46201
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 46202
    //MOV
    gl_Position = t2;
    //Instruction 46203
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46204
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46205
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46206
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 46207
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 46208
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46209
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 46210
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 45975
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 45976
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 45977
    //MOV
    t1.x = t16_0.x;
    //Instruction 45978
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 45979
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45980
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45981
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45982
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45983
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45984
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 45985
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 45986
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 45987
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 45988
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 45989
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 45990
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 45991
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 45992
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45993
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45994
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 45995
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45996
    //MAX
    t16_2.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45997
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 45998
    //ADD
    t1.xyz = (-t16_2.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 45999
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 46000
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 46001
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46002
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_6 = tmpvar_66;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = screenPos_54;
  xlv_TEXCOORD4 = o_59;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_13 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_15.w;
  light_3.xyz = (tmpvar_15.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 45314
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45315
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45316
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 45317
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45318
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 45319
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 45320
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 45321
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 45322
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45323
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45324
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 45325
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45326
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45327
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45328
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45329
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45330
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 45331
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 45332
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 45333
    //IF
    if(tb28){
        //Instruction 45334
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 45335
        //IF
        if(tb28){
            //Instruction 45336
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45337
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45338
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45339
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 45340
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 45341
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45342
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45343
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45344
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45345
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45346
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 45347
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 45348
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45349
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45350
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 45351
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45352
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45353
            //FRC
            t2 = fract(t2);
            //Instruction 45354
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45355
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 45356
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45357
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45358
            //ADD
            t2 = t2 + t2;
            //Instruction 45359
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 45360
            //LT
            tb30 = t5.w<0.0;
            //Instruction 45361
            //MOV
            t5.y = (-t5.w);
            //Instruction 45362
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45363
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 45364
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 45365
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 45366
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 45367
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 45368
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 45369
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45370
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45371
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 45372
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 45373
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45374
            //MUL
            t30 = t30 * t31;
            //Instruction 45375
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 45376
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45377
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45378
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45379
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45380
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45381
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45382
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45383
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45384
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45385
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45386
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45387
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45388
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 45389
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45390
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 45391
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 45392
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45393
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45394
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45395
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45396
        //ELSE
        } else {
            //Instruction 45397
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45398
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45399
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45400
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45401
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45402
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45403
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45404
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45405
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 45406
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45407
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45408
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45409
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45410
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45411
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45412
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45413
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 45414
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45415
            //MOV
            t2.y = (-t2.w);
            //Instruction 45416
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45417
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45418
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 45419
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 45420
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 45421
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 45422
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45423
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45424
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45425
            //MUL
            t30 = t30 * t5.x;
            //Instruction 45426
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 45427
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 45428
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45429
        //ENDIF
        }
        //Instruction 45430
    //ELSE
    } else {
        //Instruction 45431
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 45432
    //ENDIF
    }
    //Instruction 45433
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 45434
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45435
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45436
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 45437
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 45438
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 45439
    //NE
    tb30 = t28!=0.0;
    //Instruction 45440
    //LOG
    t4.x = log2(t28);
    //Instruction 45441
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45442
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45443
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 45444
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45445
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45446
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45447
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45448
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45449
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45450
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45451
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45452
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45453
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 45454
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45455
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45456
    //MUL
    t28 = t28 * t30;
    //Instruction 45457
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45458
    //MOV
    t4.y = t3.y;
    //Instruction 45459
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45460
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45461
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45462
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45463
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45464
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45465
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 45466
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 45467
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 45468
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 45469
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 45470
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 45471
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 45472
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 45473
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 45474
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 45475
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45476
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45477
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45478
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45479
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45480
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 45481
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45482
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45483
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 45484
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45485
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 45486
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45487
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45488
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45489
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 45490
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 45491
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 45492
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 45493
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 45494
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45495
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45496
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45497
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45498
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45499
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45500
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45501
    //MOV
    t0.w = 1.0;
    //Instruction 45502
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45503
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45504
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45505
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 45506
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 45507
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 45508
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 45509
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45510
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45511
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45512
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45513
    //MOV
    gl_Position = t2;
    //Instruction 45514
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45515
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45516
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45517
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 45518
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 45519
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45520
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 45521
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 45287
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 45288
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 45289
    //MOV
    t1.x = t16_0.x;
    //Instruction 45290
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 45291
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45292
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45293
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45294
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45295
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45296
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 45297
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 45298
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 45299
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 45300
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 45301
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 45302
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 45303
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 45304
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45305
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45306
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 45307
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45308
    //MAX
    t16_2.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45309
    //ADD
    t1.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 45310
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45311
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45312
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45313
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_6 = tmpvar_66;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = o_59;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_7 = tmpvar_13;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
  light_3 = tmpvar_14;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD7);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 45339
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45340
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 45341
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 45342
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45343
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 45344
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 45345
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 45346
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 45347
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 45348
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 45349
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 45350
    //IF
    if(tb25){
        //Instruction 45351
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 45352
        //IF
        if(tb25){
            //Instruction 45353
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45354
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 45355
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 45356
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 45357
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 45358
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 45359
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45360
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 45361
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45362
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 45363
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45364
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 45365
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 45366
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45367
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 45368
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 45369
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 45370
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45371
            //FRC
            t0 = fract(t0);
            //Instruction 45372
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45373
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 45374
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45375
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45376
            //ADD
            t0 = t0 + t0;
            //Instruction 45377
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 45378
            //LT
            tb26 = t4.w<0.0;
            //Instruction 45379
            //MOV
            t4.y = (-t4.w);
            //Instruction 45380
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 45381
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 45382
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 45383
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 45384
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 45385
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 45386
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 45387
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45388
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45389
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 45390
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 45391
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45392
            //MUL
            t26 = t26 * t27;
            //Instruction 45393
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 45394
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45395
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45396
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45397
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45398
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 45399
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 45400
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45401
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 45402
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45403
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 45404
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 45405
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 45406
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 45407
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45408
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 45409
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 45410
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 45411
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45412
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 45413
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 45414
        //ELSE
        } else {
            //Instruction 45415
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45416
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 45417
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45418
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 45419
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45420
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 45421
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 45422
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45423
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 45424
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 45425
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45426
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45427
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45428
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 45429
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45430
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45431
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 45432
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 45433
            //LT
            tb25 = t0.w<0.0;
            //Instruction 45434
            //MOV
            t0.y = (-t0.w);
            //Instruction 45435
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 45436
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 45437
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 45438
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 45439
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 45440
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 45441
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 45442
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45443
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45444
            //MUL
            t27 = t27 * t4.x;
            //Instruction 45445
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 45446
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 45447
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45448
        //ENDIF
        }
        //Instruction 45449
    //ELSE
    } else {
        //Instruction 45450
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 45451
    //ENDIF
    }
    //Instruction 45452
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 45453
    //SQRT
    t25 = sqrt(t25);
    //Instruction 45454
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45455
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 45456
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 45457
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 45458
    //NE
    tb3 = t26!=0.0;
    //Instruction 45459
    //LOG
    t11 = log2(t26);
    //Instruction 45460
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 45461
    //EXP
    t11 = exp2(t11);
    //Instruction 45462
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 45463
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45464
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45465
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 45466
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 45467
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45468
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 45469
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45470
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 45471
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 45472
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 45473
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45474
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 45475
    //MUL
    t26 = t26 * t3.x;
    //Instruction 45476
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 45477
    //MOV
    t3.y = t2.y;
    //Instruction 45478
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 45479
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 45480
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 45481
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 45482
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 45483
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45484
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 45485
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 45486
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 45487
    //MOV
    t3.xz = vec2(0.500000, 0.500000);
    //Instruction 45488
    //MOV
    t3.y = _ProjectionParams.x;
    //Instruction 45489
    //MUL
    t0.xyz = t2.xyz * t3.xyz;
    //Instruction 45490
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45491
    //ADD
    t4.xy = t0.zz + t0.xw;
    //Instruction 45492
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 45493
    //MUL
    t2.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 45494
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 45495
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 45496
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 45497
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 45498
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 45499
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 45500
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 45501
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 45502
    //MUL
    t1.xyz = t3.xyz * t0.xyw;
    //Instruction 45503
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 45504
    //ADD
    vs_TEXCOORD5.xy = t1.zz + t1.xw;
    //Instruction 45505
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 45506
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 45507
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 45508
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 45509
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 45510
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 45511
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 45512
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 45513
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 45514
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 45515
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 45516
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 45517
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 45518
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 45519
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 45520
    //MOV
    t1.w = 1.0;
    //Instruction 45521
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 45522
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 45523
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 45524
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 45525
    //DP4
    t16_7.x = dot(unity_SHBr, t16_3);
    //Instruction 45526
    //DP4
    t16_7.y = dot(unity_SHBg, t16_3);
    //Instruction 45527
    //DP4
    t16_7.z = dot(unity_SHBb, t16_3);
    //Instruction 45528
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 45529
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 45530
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 45531
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 45532
    //MOV
    gl_Position = t0;
    //Instruction 45533
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45534
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 45535
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 45536
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 45537
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 45538
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 45539
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 45540
    //MOV
    vs_TEXCOORD5.zw = t0.zw;
    //Instruction 45541
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45542
    //MOV
    vs_TEXCOORD7.xyz = t16_6.xyz;
    //Instruction 45543
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
void main()
{
    //Instruction 45316
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 45317
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 45318
    //MOV
    t1.x = t16_0.x;
    //Instruction 45319
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 45320
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45321
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45322
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45323
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45324
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 45325
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45326
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 45327
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 45328
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 45329
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45330
    //DIV
    t1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 45331
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45332
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45333
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 45334
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD7.xyz;
    //Instruction 45335
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45336
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45337
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45338
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_6 = tmpvar_66;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = o_59;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_7 = tmpvar_13;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
  light_3 = tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_15.w;
  light_3.xyz = (tmpvar_15.xyz + xlv_TEXCOORD7);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 46233
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46234
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 46235
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 46236
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46237
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 46238
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 46239
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 46240
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 46241
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 46242
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 46243
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 46244
    //IF
    if(tb25){
        //Instruction 46245
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 46246
        //IF
        if(tb25){
            //Instruction 46247
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46248
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 46249
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 46250
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 46251
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 46252
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 46253
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46254
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 46255
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46256
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 46257
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 46258
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 46259
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 46260
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46261
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 46262
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 46263
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 46264
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46265
            //FRC
            t0 = fract(t0);
            //Instruction 46266
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46267
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 46268
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46269
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46270
            //ADD
            t0 = t0 + t0;
            //Instruction 46271
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 46272
            //LT
            tb26 = t4.w<0.0;
            //Instruction 46273
            //MOV
            t4.y = (-t4.w);
            //Instruction 46274
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 46275
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 46276
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 46277
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 46278
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 46279
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 46280
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 46281
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46282
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46283
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 46284
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 46285
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46286
            //MUL
            t26 = t26 * t27;
            //Instruction 46287
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 46288
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 46289
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46290
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46291
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46292
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 46293
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 46294
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46295
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 46296
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46297
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 46298
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 46299
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 46300
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 46301
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46302
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 46303
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 46304
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 46305
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46306
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 46307
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 46308
        //ELSE
        } else {
            //Instruction 46309
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46310
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 46311
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46312
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 46313
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 46314
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 46315
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 46316
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46317
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 46318
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 46319
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46320
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46321
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46322
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 46323
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46324
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46325
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 46326
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 46327
            //LT
            tb25 = t0.w<0.0;
            //Instruction 46328
            //MOV
            t0.y = (-t0.w);
            //Instruction 46329
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 46330
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 46331
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 46332
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 46333
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 46334
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 46335
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 46336
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46337
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46338
            //MUL
            t27 = t27 * t4.x;
            //Instruction 46339
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 46340
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 46341
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 46342
        //ENDIF
        }
        //Instruction 46343
    //ELSE
    } else {
        //Instruction 46344
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 46345
    //ENDIF
    }
    //Instruction 46346
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 46347
    //SQRT
    t25 = sqrt(t25);
    //Instruction 46348
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46349
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 46350
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 46351
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 46352
    //NE
    tb3 = t26!=0.0;
    //Instruction 46353
    //LOG
    t11 = log2(t26);
    //Instruction 46354
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 46355
    //EXP
    t11 = exp2(t11);
    //Instruction 46356
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 46357
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46358
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46359
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 46360
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 46361
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46362
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 46363
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46364
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 46365
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 46366
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 46367
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46368
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 46369
    //MUL
    t26 = t26 * t3.x;
    //Instruction 46370
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 46371
    //MOV
    t3.y = t2.y;
    //Instruction 46372
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 46373
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 46374
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 46375
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 46376
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 46377
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46378
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 46379
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 46380
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 46381
    //MOV
    t3.xz = vec2(0.500000, 0.500000);
    //Instruction 46382
    //MOV
    t3.y = _ProjectionParams.x;
    //Instruction 46383
    //MUL
    t0.xyz = t2.xyz * t3.xyz;
    //Instruction 46384
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46385
    //ADD
    t4.xy = t0.zz + t0.xw;
    //Instruction 46386
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 46387
    //MUL
    t2.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 46388
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 46389
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 46390
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 46391
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 46392
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 46393
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 46394
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 46395
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 46396
    //MUL
    t1.xyz = t3.xyz * t0.xyw;
    //Instruction 46397
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 46398
    //ADD
    vs_TEXCOORD5.xy = t1.zz + t1.xw;
    //Instruction 46399
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 46400
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 46401
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 46402
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 46403
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 46404
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 46405
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 46406
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 46407
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 46408
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 46409
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 46410
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 46411
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 46412
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 46413
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 46414
    //MOV
    t1.w = 1.0;
    //Instruction 46415
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 46416
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 46417
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 46418
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 46419
    //DP4
    t16_7.x = dot(unity_SHBr, t16_3);
    //Instruction 46420
    //DP4
    t16_7.y = dot(unity_SHBg, t16_3);
    //Instruction 46421
    //DP4
    t16_7.z = dot(unity_SHBb, t16_3);
    //Instruction 46422
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 46423
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 46424
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 46425
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 46426
    //MOV
    gl_Position = t0;
    //Instruction 46427
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46428
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 46429
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 46430
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 46431
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 46432
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 46433
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 46434
    //MOV
    vs_TEXCOORD5.zw = t0.zw;
    //Instruction 46435
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46436
    //MOV
    vs_TEXCOORD7.xyz = t16_6.xyz;
    //Instruction 46437
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
void main()
{
    //Instruction 46211
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 46212
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 46213
    //MOV
    t1.x = t16_0.x;
    //Instruction 46214
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 46215
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46216
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46217
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46218
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46219
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 46220
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 46221
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 46222
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 46223
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 46224
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46225
    //DIV
    t1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 46226
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46227
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46228
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 46229
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 46230
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 46231
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46232
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec3 x1_71;
  x1_71.x = dot (unity_SHAr, normal_69);
  x1_71.y = dot (unity_SHAg, normal_69);
  x1_71.z = dot (unity_SHAb, normal_69);
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_72);
  x2_70.y = dot (unity_SHBg, tmpvar_72);
  x2_70.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_68 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + x1_71);
  tmpvar_6 = tmpvar_68;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_56;
  xlv_TEXCOORD5 = o_61;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  mediump vec2 projUV_10;
  mediump vec2 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_10.x = tmpvar_11.x;
  projUV_10.y = ((fract(tmpvar_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_10).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_13;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_14;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_15 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
  light_3 = tmpvar_16;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD7);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 45554
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45555
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45556
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 45557
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45558
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 45559
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 45560
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 45561
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 45562
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45563
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45564
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 45565
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45566
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45567
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45568
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45569
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45570
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 45571
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 45572
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 45573
    //IF
    if(tb28){
        //Instruction 45574
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 45575
        //IF
        if(tb28){
            //Instruction 45576
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45577
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45578
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45579
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 45580
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 45581
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45582
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45583
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45584
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45585
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45586
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 45587
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 45588
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45589
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45590
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 45591
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45592
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45593
            //FRC
            t2 = fract(t2);
            //Instruction 45594
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45595
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 45596
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45597
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45598
            //ADD
            t2 = t2 + t2;
            //Instruction 45599
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 45600
            //LT
            tb30 = t5.w<0.0;
            //Instruction 45601
            //MOV
            t5.y = (-t5.w);
            //Instruction 45602
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45603
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 45604
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 45605
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 45606
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 45607
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 45608
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 45609
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45610
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45611
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 45612
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 45613
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45614
            //MUL
            t30 = t30 * t31;
            //Instruction 45615
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 45616
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45617
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45618
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45619
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45620
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45621
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45622
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45623
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45624
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45625
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45626
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45627
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45628
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 45629
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45630
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 45631
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 45632
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45633
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45634
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45635
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45636
        //ELSE
        } else {
            //Instruction 45637
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45638
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45639
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45640
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45641
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45642
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45643
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45644
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45645
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 45646
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45647
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45648
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45649
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45650
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45651
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45652
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45653
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 45654
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45655
            //MOV
            t2.y = (-t2.w);
            //Instruction 45656
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45657
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45658
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 45659
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 45660
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 45661
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 45662
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45663
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45664
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45665
            //MUL
            t30 = t30 * t5.x;
            //Instruction 45666
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 45667
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 45668
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45669
        //ENDIF
        }
        //Instruction 45670
    //ELSE
    } else {
        //Instruction 45671
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 45672
    //ENDIF
    }
    //Instruction 45673
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 45674
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45675
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45676
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 45677
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 45678
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 45679
    //NE
    tb30 = t28!=0.0;
    //Instruction 45680
    //LOG
    t4.x = log2(t28);
    //Instruction 45681
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45682
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45683
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 45684
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45685
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45686
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45687
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45688
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45689
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45690
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45691
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45692
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45693
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 45694
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45695
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45696
    //MUL
    t28 = t28 * t30;
    //Instruction 45697
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45698
    //MOV
    t4.y = t3.y;
    //Instruction 45699
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45700
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45701
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45702
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45703
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45704
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45705
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 45706
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 45707
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 45708
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 45709
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 45710
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 45711
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 45712
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 45713
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 45714
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 45715
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45716
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45717
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45718
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45719
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45720
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 45721
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45722
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45723
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 45724
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45725
    //ADD
    vs_TEXCOORD5.xy = t0.zz + t0.xw;
    //Instruction 45726
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45727
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45728
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45729
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 45730
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 45731
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 45732
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 45733
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 45734
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45735
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45736
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45737
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45738
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45739
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45740
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45741
    //MOV
    t0.w = 1.0;
    //Instruction 45742
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45743
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45744
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45745
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 45746
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 45747
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 45748
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 45749
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45750
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45751
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45752
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45753
    //MOV
    gl_Position = t2;
    //Instruction 45754
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45755
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45756
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45757
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 45758
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 45759
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 45760
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 45761
    //MOV
    vs_TEXCOORD5.zw = t2.zw;
    //Instruction 45762
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45763
    //MOV
    vs_TEXCOORD7.xyz = t16_7.xyz;
    //Instruction 45764
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 45522
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 45523
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 45524
    //MOV
    t1.x = t16_0.x;
    //Instruction 45525
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 45526
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45527
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45528
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45529
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45530
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 45531
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45532
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 45533
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 45534
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 45535
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 45536
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 45537
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 45538
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 45539
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 45540
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 45541
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 45542
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 45543
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45544
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45545
    //DIV
    t1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 45546
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45547
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45548
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 45549
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD7.xyz;
    //Instruction 45550
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45551
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45552
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45553
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec3 x1_71;
  x1_71.x = dot (unity_SHAr, normal_69);
  x1_71.y = dot (unity_SHAg, normal_69);
  x1_71.z = dot (unity_SHAb, normal_69);
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_72);
  x2_70.y = dot (unity_SHBg, tmpvar_72);
  x2_70.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_68 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + x1_71);
  tmpvar_6 = tmpvar_68;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_56;
  xlv_TEXCOORD5 = o_61;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  mediump vec2 projUV_10;
  mediump vec2 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_10.x = tmpvar_11.x;
  projUV_10.y = ((fract(tmpvar_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_10).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_13;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_14;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_15 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
  light_3 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_17.w;
  light_3.xyz = (tmpvar_17.xyz + xlv_TEXCOORD7);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_5 * light_3.xyz);
  c_18.w = tmpvar_6;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 45575
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45576
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45577
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 45578
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45579
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 45580
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 45581
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 45582
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 45583
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45584
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45585
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 45586
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45587
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45588
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45589
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45590
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45591
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 45592
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 45593
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 45594
    //IF
    if(tb28){
        //Instruction 45595
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 45596
        //IF
        if(tb28){
            //Instruction 45597
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45598
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45599
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45600
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 45601
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 45602
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45603
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45604
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45605
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45606
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45607
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 45608
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 45609
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45610
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45611
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 45612
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45613
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45614
            //FRC
            t2 = fract(t2);
            //Instruction 45615
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45616
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 45617
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45618
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45619
            //ADD
            t2 = t2 + t2;
            //Instruction 45620
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 45621
            //LT
            tb30 = t5.w<0.0;
            //Instruction 45622
            //MOV
            t5.y = (-t5.w);
            //Instruction 45623
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45624
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 45625
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 45626
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 45627
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 45628
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 45629
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 45630
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45631
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45632
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 45633
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 45634
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45635
            //MUL
            t30 = t30 * t31;
            //Instruction 45636
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 45637
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45638
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45639
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45640
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45641
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45642
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45643
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45644
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45645
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45646
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45647
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45648
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45649
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 45650
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45651
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 45652
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 45653
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45654
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45655
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45656
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45657
        //ELSE
        } else {
            //Instruction 45658
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45659
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45660
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45661
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45662
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45663
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45664
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45665
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45666
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 45667
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45668
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45669
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45670
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45671
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45672
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45673
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45674
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 45675
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45676
            //MOV
            t2.y = (-t2.w);
            //Instruction 45677
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45678
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45679
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 45680
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 45681
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 45682
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 45683
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45684
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45685
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45686
            //MUL
            t30 = t30 * t5.x;
            //Instruction 45687
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 45688
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 45689
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45690
        //ENDIF
        }
        //Instruction 45691
    //ELSE
    } else {
        //Instruction 45692
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 45693
    //ENDIF
    }
    //Instruction 45694
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 45695
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45696
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45697
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 45698
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 45699
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 45700
    //NE
    tb30 = t28!=0.0;
    //Instruction 45701
    //LOG
    t4.x = log2(t28);
    //Instruction 45702
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45703
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45704
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 45705
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45706
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45707
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45708
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45709
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45710
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45711
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45712
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45713
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45714
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 45715
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45716
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45717
    //MUL
    t28 = t28 * t30;
    //Instruction 45718
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45719
    //MOV
    t4.y = t3.y;
    //Instruction 45720
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45721
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45722
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45723
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45724
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45725
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45726
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 45727
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 45728
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 45729
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 45730
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 45731
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 45732
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 45733
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 45734
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 45735
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 45736
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45737
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45738
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45739
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45740
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45741
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 45742
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45743
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45744
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 45745
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45746
    //ADD
    vs_TEXCOORD5.xy = t0.zz + t0.xw;
    //Instruction 45747
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45748
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45749
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45750
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 45751
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 45752
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 45753
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 45754
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 45755
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45756
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45757
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45758
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45759
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45760
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45761
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45762
    //MOV
    t0.w = 1.0;
    //Instruction 45763
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45764
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45765
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45766
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 45767
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 45768
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 45769
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 45770
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45771
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45772
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45773
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45774
    //MOV
    gl_Position = t2;
    //Instruction 45775
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45776
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45777
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45778
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 45779
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 45780
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 45781
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 45782
    //MOV
    vs_TEXCOORD5.zw = t2.zw;
    //Instruction 45783
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 45784
    //MOV
    vs_TEXCOORD7.xyz = t16_7.xyz;
    //Instruction 45785
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 45544
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 45545
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 45546
    //MOV
    t1.x = t16_0.x;
    //Instruction 45547
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 45548
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45549
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45550
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45551
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45552
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 45553
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45554
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 45555
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 45556
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 45557
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 45558
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 45559
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 45560
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 45561
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 45562
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 45563
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 45564
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 45565
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45566
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45567
    //DIV
    t1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 45568
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45569
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45570
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 45571
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45572
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45573
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45574
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec3 x1_71;
  x1_71.x = dot (unity_SHAr, normal_69);
  x1_71.y = dot (unity_SHAg, normal_69);
  x1_71.z = dot (unity_SHAb, normal_69);
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_72);
  x2_70.y = dot (unity_SHBg, tmpvar_72);
  x2_70.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_68 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + x1_71);
  tmpvar_6 = tmpvar_68;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_56;
  xlv_TEXCOORD5 = o_61;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  mediump vec2 projUV_10;
  mediump vec2 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_10.x = tmpvar_11.x;
  projUV_10.y = ((fract(tmpvar_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_10).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_13;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_14;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_15 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
  light_3 = tmpvar_16;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD7);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 46470
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46471
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46472
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 46473
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46474
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 46475
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 46476
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 46477
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 46478
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46479
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46480
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 46481
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46482
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46483
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46484
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46485
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46486
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 46487
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 46488
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 46489
    //IF
    if(tb28){
        //Instruction 46490
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 46491
        //IF
        if(tb28){
            //Instruction 46492
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46493
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 46494
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 46495
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 46496
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 46497
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 46498
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46499
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46500
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46501
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46502
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 46503
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 46504
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46505
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46506
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 46507
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46508
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46509
            //FRC
            t2 = fract(t2);
            //Instruction 46510
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46511
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 46512
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46513
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46514
            //ADD
            t2 = t2 + t2;
            //Instruction 46515
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 46516
            //LT
            tb30 = t5.w<0.0;
            //Instruction 46517
            //MOV
            t5.y = (-t5.w);
            //Instruction 46518
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 46519
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 46520
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 46521
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 46522
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 46523
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 46524
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 46525
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46526
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46527
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 46528
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 46529
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46530
            //MUL
            t30 = t30 * t31;
            //Instruction 46531
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 46532
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 46533
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46534
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46535
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46536
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 46537
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 46538
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46539
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 46540
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46541
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 46542
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 46543
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 46544
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 46545
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46546
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 46547
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 46548
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 46549
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46550
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 46551
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 46552
        //ELSE
        } else {
            //Instruction 46553
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46554
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46555
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46556
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46557
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46558
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46559
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46560
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 46561
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 46562
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46563
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46564
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46565
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 46566
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46567
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46568
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 46569
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 46570
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46571
            //MOV
            t2.y = (-t2.w);
            //Instruction 46572
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46573
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46574
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 46575
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 46576
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 46577
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 46578
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46579
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46580
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46581
            //MUL
            t30 = t30 * t5.x;
            //Instruction 46582
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 46583
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 46584
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 46585
        //ENDIF
        }
        //Instruction 46586
    //ELSE
    } else {
        //Instruction 46587
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 46588
    //ENDIF
    }
    //Instruction 46589
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 46590
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46591
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46592
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 46593
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 46594
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 46595
    //NE
    tb30 = t28!=0.0;
    //Instruction 46596
    //LOG
    t4.x = log2(t28);
    //Instruction 46597
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 46598
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 46599
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 46600
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46601
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46602
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 46603
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 46604
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46605
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 46606
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46607
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 46608
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 46609
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 46610
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46611
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 46612
    //MUL
    t28 = t28 * t30;
    //Instruction 46613
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 46614
    //MOV
    t4.y = t3.y;
    //Instruction 46615
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 46616
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46617
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 46618
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 46619
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 46620
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46621
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 46622
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 46623
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 46624
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 46625
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 46626
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 46627
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46628
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 46629
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 46630
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 46631
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 46632
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 46633
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 46634
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46635
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 46636
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 46637
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 46638
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 46639
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 46640
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46641
    //ADD
    vs_TEXCOORD5.xy = t0.zz + t0.xw;
    //Instruction 46642
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 46643
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 46644
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 46645
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 46646
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 46647
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 46648
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 46649
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 46650
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 46651
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 46652
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 46653
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 46654
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 46655
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 46656
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 46657
    //MOV
    t0.w = 1.0;
    //Instruction 46658
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 46659
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 46660
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 46661
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 46662
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 46663
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 46664
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 46665
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 46666
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 46667
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 46668
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 46669
    //MOV
    gl_Position = t2;
    //Instruction 46670
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46671
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46672
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46673
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 46674
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 46675
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 46676
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 46677
    //MOV
    vs_TEXCOORD5.zw = t2.zw;
    //Instruction 46678
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46679
    //MOV
    vs_TEXCOORD7.xyz = t16_7.xyz;
    //Instruction 46680
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 46438
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 46439
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 46440
    //MOV
    t1.x = t16_0.x;
    //Instruction 46441
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 46442
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46443
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46444
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46445
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46446
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 46447
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 46448
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 46449
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 46450
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 46451
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 46452
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 46453
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 46454
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 46455
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 46456
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 46457
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 46458
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 46459
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 46460
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46461
    //DIV
    t1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 46462
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46463
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46464
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 46465
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD7.xyz;
    //Instruction 46466
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 46467
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 46468
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46469
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_68;
  mediump vec4 normal_69;
  normal_69 = tmpvar_67;
  mediump vec3 x2_70;
  mediump vec3 x1_71;
  x1_71.x = dot (unity_SHAr, normal_69);
  x1_71.y = dot (unity_SHAg, normal_69);
  x1_71.z = dot (unity_SHAb, normal_69);
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_72);
  x2_70.y = dot (unity_SHBg, tmpvar_72);
  x2_70.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_68 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + x1_71);
  tmpvar_6 = tmpvar_68;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_56;
  xlv_TEXCOORD5 = o_61;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  mediump vec2 projUV_10;
  mediump vec2 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_10.x = tmpvar_11.x;
  projUV_10.y = ((fract(tmpvar_11.y) * 0.0625) + unity_LODFade.y);
  lowp float x_12;
  x_12 = (texture2D (_DitherMaskLOD2D, projUV_10).w - 0.5);
  if ((x_12 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_13;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_14;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_15 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD5);
  light_3 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_17.w;
  light_3.xyz = (tmpvar_17.xyz + xlv_TEXCOORD7);
  lowp vec4 c_18;
  c_18.xyz = (tmpvar_5 * light_3.xyz);
  c_18.w = tmpvar_6;
  c_2.xyz = c_18.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 45796
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45797
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 45798
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 45799
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 45800
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 45801
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 45802
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 45803
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 45804
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 45805
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 45806
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 45807
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45808
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 45809
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 45810
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 45811
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45812
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 45813
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 45814
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 45815
    //IF
    if(tb28){
        //Instruction 45816
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 45817
        //IF
        if(tb28){
            //Instruction 45818
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45819
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45820
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45821
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 45822
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 45823
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45824
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45825
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45826
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45827
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45828
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 45829
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 45830
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45831
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 45832
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 45833
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 45834
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45835
            //FRC
            t2 = fract(t2);
            //Instruction 45836
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45837
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 45838
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45839
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45840
            //ADD
            t2 = t2 + t2;
            //Instruction 45841
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 45842
            //LT
            tb30 = t5.w<0.0;
            //Instruction 45843
            //MOV
            t5.y = (-t5.w);
            //Instruction 45844
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45845
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 45846
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 45847
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 45848
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 45849
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 45850
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 45851
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45852
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45853
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 45854
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 45855
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45856
            //MUL
            t30 = t30 * t31;
            //Instruction 45857
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 45858
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45859
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45860
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45861
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45862
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45863
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45864
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45865
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45866
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45867
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45868
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45869
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45870
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 45871
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45872
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 45873
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 45874
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45875
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45876
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 45877
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45878
        //ELSE
        } else {
            //Instruction 45879
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45880
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45881
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45882
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45883
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 45884
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 45885
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45886
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 45887
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 45888
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45889
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 45890
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45891
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 45892
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45893
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45894
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 45895
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 45896
            //LT
            tb0 = t2.w<0.0;
            //Instruction 45897
            //MOV
            t2.y = (-t2.w);
            //Instruction 45898
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 45899
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 45900
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 45901
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 45902
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 45903
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 45904
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 45905
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45906
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45907
            //MUL
            t30 = t30 * t5.x;
            //Instruction 45908
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 45909
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 45910
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 45911
        //ENDIF
        }
        //Instruction 45912
    //ELSE
    } else {
        //Instruction 45913
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 45914
    //ENDIF
    }
    //Instruction 45915
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 45916
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 45917
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45918
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 45919
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 45920
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 45921
    //NE
    tb30 = t28!=0.0;
    //Instruction 45922
    //LOG
    t4.x = log2(t28);
    //Instruction 45923
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 45924
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 45925
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 45926
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45927
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45928
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 45929
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 45930
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45931
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 45932
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45933
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 45934
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 45935
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 45936
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45937
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 45938
    //MUL
    t28 = t28 * t30;
    //Instruction 45939
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 45940
    //MOV
    t4.y = t3.y;
    //Instruction 45941
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 45942
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 45943
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 45944
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 45945
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 45946
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45947
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 45948
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 45949
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 45950
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 45951
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 45952
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 45953
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 45954
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 45955
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 45956
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 45957
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 45958
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 45959
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 45960
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 45961
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 45962
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 45963
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 45964
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 45965
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 45966
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45967
    //ADD
    vs_TEXCOORD5.xy = t0.zz + t0.xw;
    //Instruction 45968
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 45969
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 45970
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 45971
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 45972
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 45973
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 45974
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 45975
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 45976
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 45977
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 45978
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 45979
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 45980
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 45981
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 45982
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 45983
    //MOV
    t0.w = 1.0;
    //Instruction 45984
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 45985
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 45986
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 45987
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 45988
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 45989
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 45990
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 45991
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 45992
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 45993
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 45994
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 45995
    //MOV
    gl_Position = t2;
    //Instruction 45996
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 45997
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 45998
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 45999
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 46000
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 46001
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 46002
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 46003
    //MOV
    vs_TEXCOORD5.zw = t2.zw;
    //Instruction 46004
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46005
    //MOV
    vs_TEXCOORD7.xyz = t16_7.xyz;
    //Instruction 46006
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 45765
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 45766
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 45767
    //MOV
    t1.x = t16_0.x;
    //Instruction 45768
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 45769
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45770
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45771
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45772
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45773
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 45774
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 45775
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 45776
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 45777
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 45778
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 45779
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 45780
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 45781
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 45782
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 45783
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 45784
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 45785
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 45786
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 45787
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45788
    //DIV
    t1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 45789
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45790
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45791
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 45792
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 45793
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 45794
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45795
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_65;
  tmpvar_65.x = tmpvar_64.x;
  tmpvar_65.y = (tmpvar_64.y * _ProjectionParams.x);
  o_63.xy = (tmpvar_65 + tmpvar_64.w);
  o_63.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = normalize(((
    (v_66.xyz * tmpvar_11.x)
   + 
    (v_67.xyz * tmpvar_11.y)
  ) + (v_68.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec3 x1_73;
  x1_73.x = dot (unity_SHAr, normal_71);
  x1_73.y = dot (unity_SHAg, normal_71);
  x1_73.z = dot (unity_SHAb, normal_71);
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_74);
  x2_72.y = dot (unity_SHBg, tmpvar_74);
  x2_72.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_70 = ((x2_72 + (unity_SHC.xyz * 
    ((normal_71.x * normal_71.x) - (normal_71.y * normal_71.y))
  )) + x1_73);
  tmpvar_7 = tmpvar_70;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_58;
  xlv_TEXCOORD4 = o_63;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 45808
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 45809
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 45810
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 45811
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 45812
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 45813
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 45814
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 45815
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 45816
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 45817
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 45818
    //EQ
    tb25 = t16_0==5.000000;
    //Instruction 45819
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 45820
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 45821
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 45822
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 45823
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 45824
    //FRC
    t2.x = fract(t2.x);
    //Instruction 45825
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 45826
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 45827
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 45828
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 45829
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 45830
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 45831
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 45832
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 45833
    //GE
    tb26 = t16_0>=3.000000;
    //Instruction 45834
    //IF
    if(tb26){
        //Instruction 45835
        //IF
        if(tb25){
            //Instruction 45836
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 45837
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 45838
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 45839
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 45840
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 45841
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 45842
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45843
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45844
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45845
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 45846
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45847
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 45848
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 45849
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45850
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 45851
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 45852
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 45853
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 45854
            //FRC
            t0 = fract(t0);
            //Instruction 45855
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 45856
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 45857
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 45858
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 45859
            //ADD
            t0 = t0 + t0;
            //Instruction 45860
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 45861
            //LT
            tb26 = t5.w<0.0;
            //Instruction 45862
            //MOV
            t5.y = (-t5.w);
            //Instruction 45863
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 45864
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 45865
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 45866
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 45867
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 45868
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 45869
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 45870
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45871
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45872
            //MUL
            t28 = t0.x * t28;
            //Instruction 45873
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 45874
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 45875
            //MUL
            t26 = t26 * t27;
            //Instruction 45876
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 45877
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 45878
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45879
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 45880
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 45881
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 45882
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 45883
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 45884
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 45885
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 45886
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 45887
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 45888
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 45889
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 45890
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 45891
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 45892
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 45893
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 45894
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 45895
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 45896
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 45897
        //ELSE
        } else {
            //Instruction 45898
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 45899
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 45900
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45901
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 45902
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 45903
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 45904
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 45905
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 45906
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 45907
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 45908
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 45909
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 45910
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 45911
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 45912
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 45913
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 45914
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 45915
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 45916
            //LT
            tb25 = t0.w<0.0;
            //Instruction 45917
            //MOV
            t0.y = (-t0.w);
            //Instruction 45918
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 45919
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 45920
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 45921
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 45922
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 45923
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 45924
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 45925
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 45926
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 45927
            //MUL
            t27 = t27 * t4.x;
            //Instruction 45928
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 45929
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 45930
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 45931
        //ENDIF
        }
        //Instruction 45932
    //ENDIF
    }
    //Instruction 45933
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 45934
    //SQRT
    t25 = sqrt(t25);
    //Instruction 45935
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 45936
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 45937
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 45938
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 45939
    //NE
    tb3 = t26!=0.0;
    //Instruction 45940
    //LOG
    t11 = log2(t26);
    //Instruction 45941
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 45942
    //EXP
    t11 = exp2(t11);
    //Instruction 45943
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 45944
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 45945
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 45946
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 45947
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 45948
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 45949
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 45950
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 45951
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 45952
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 45953
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 45954
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 45955
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 45956
    //MUL
    t26 = t26 * t3.x;
    //Instruction 45957
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 45958
    //MOV
    t3.y = t2.y;
    //Instruction 45959
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 45960
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 45961
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 45962
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 45963
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 45964
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 45965
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 45966
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 45967
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 45968
    //MOV
    t3.xz = vec2(0.500000, 0.500000);
    //Instruction 45969
    //MOV
    t3.y = _ProjectionParams.x;
    //Instruction 45970
    //MUL
    t0.xyz = t2.xyz * t3.xyz;
    //Instruction 45971
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 45972
    //ADD
    t4.xy = t0.zz + t0.xw;
    //Instruction 45973
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 45974
    //MUL
    t2.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 45975
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 45976
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 45977
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 45978
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 45979
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 45980
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 45981
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 45982
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 45983
    //MUL
    t1.xyz = t3.xyz * t0.xyw;
    //Instruction 45984
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 45985
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 45986
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 45987
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 45988
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 45989
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 45990
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 45991
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 45992
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 45993
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 45994
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 45995
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 45996
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 45997
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 45998
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 45999
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 46000
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 46001
    //MOV
    t1.w = 1.0;
    //Instruction 46002
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 46003
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 46004
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 46005
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 46006
    //DP4
    t16_7.x = dot(unity_SHBr, t16_3);
    //Instruction 46007
    //DP4
    t16_7.y = dot(unity_SHBg, t16_3);
    //Instruction 46008
    //DP4
    t16_7.z = dot(unity_SHBb, t16_3);
    //Instruction 46009
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 46010
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 46011
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 46012
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 46013
    //MOV
    gl_Position = t0;
    //Instruction 46014
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46015
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 46016
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 46017
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 46018
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 46019
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46020
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 46021
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 45786
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 45787
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 45788
    //MOV
    t1.x = t16_0.x;
    //Instruction 45789
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 45790
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 45791
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 45792
    //LT
    tb1 = t16_1<0.0;
    //Instruction 45793
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45794
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 45795
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 45796
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 45797
    //LT
    tb1 = t10_2<0.0;
    //Instruction 45798
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 45799
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 45800
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 45801
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 45802
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 45803
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 45804
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 45805
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 45806
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 45807
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_65;
  tmpvar_65.x = tmpvar_64.x;
  tmpvar_65.y = (tmpvar_64.y * _ProjectionParams.x);
  o_63.xy = (tmpvar_65 + tmpvar_64.w);
  o_63.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = normalize(((
    (v_66.xyz * tmpvar_11.x)
   + 
    (v_67.xyz * tmpvar_11.y)
  ) + (v_68.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_70;
  mediump vec4 normal_71;
  normal_71 = tmpvar_69;
  mediump vec3 x2_72;
  mediump vec3 x1_73;
  x1_73.x = dot (unity_SHAr, normal_71);
  x1_73.y = dot (unity_SHAg, normal_71);
  x1_73.z = dot (unity_SHAb, normal_71);
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_74);
  x2_72.y = dot (unity_SHBg, tmpvar_74);
  x2_72.z = dot (unity_SHBb, tmpvar_74);
  tmpvar_70 = ((x2_72 + (unity_SHC.xyz * 
    ((normal_71.x * normal_71.x) - (normal_71.y * normal_71.y))
  )) + x1_73);
  tmpvar_7 = tmpvar_70;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_58;
  xlv_TEXCOORD4 = o_63;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 46702
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46703
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 46704
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 46705
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46706
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 46707
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 46708
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 46709
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 46710
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 46711
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 46712
    //EQ
    tb25 = t16_0==5.000000;
    //Instruction 46713
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 46714
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 46715
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 46716
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 46717
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 46718
    //FRC
    t2.x = fract(t2.x);
    //Instruction 46719
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 46720
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 46721
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 46722
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 46723
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 46724
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 46725
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 46726
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 46727
    //GE
    tb26 = t16_0>=3.000000;
    //Instruction 46728
    //IF
    if(tb26){
        //Instruction 46729
        //IF
        if(tb25){
            //Instruction 46730
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46731
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 46732
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 46733
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 46734
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 46735
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 46736
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46737
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46738
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46739
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46740
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 46741
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 46742
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 46743
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46744
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 46745
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 46746
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 46747
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46748
            //FRC
            t0 = fract(t0);
            //Instruction 46749
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46750
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 46751
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46752
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46753
            //ADD
            t0 = t0 + t0;
            //Instruction 46754
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 46755
            //LT
            tb26 = t5.w<0.0;
            //Instruction 46756
            //MOV
            t5.y = (-t5.w);
            //Instruction 46757
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 46758
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 46759
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 46760
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 46761
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 46762
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 46763
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 46764
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46765
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46766
            //MUL
            t28 = t0.x * t28;
            //Instruction 46767
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 46768
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46769
            //MUL
            t26 = t26 * t27;
            //Instruction 46770
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 46771
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 46772
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46773
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46774
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46775
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 46776
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 46777
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46778
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 46779
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46780
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 46781
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 46782
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 46783
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 46784
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46785
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 46786
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 46787
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 46788
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46789
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 46790
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 46791
        //ELSE
        } else {
            //Instruction 46792
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46793
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 46794
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46795
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 46796
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 46797
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 46798
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 46799
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46800
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 46801
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 46802
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46803
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46804
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46805
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 46806
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46807
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46808
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 46809
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 46810
            //LT
            tb25 = t0.w<0.0;
            //Instruction 46811
            //MOV
            t0.y = (-t0.w);
            //Instruction 46812
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 46813
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 46814
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 46815
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 46816
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 46817
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 46818
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 46819
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46820
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46821
            //MUL
            t27 = t27 * t4.x;
            //Instruction 46822
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 46823
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 46824
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 46825
        //ENDIF
        }
        //Instruction 46826
    //ENDIF
    }
    //Instruction 46827
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 46828
    //SQRT
    t25 = sqrt(t25);
    //Instruction 46829
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46830
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 46831
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 46832
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 46833
    //NE
    tb3 = t26!=0.0;
    //Instruction 46834
    //LOG
    t11 = log2(t26);
    //Instruction 46835
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 46836
    //EXP
    t11 = exp2(t11);
    //Instruction 46837
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 46838
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46839
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46840
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 46841
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 46842
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46843
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 46844
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46845
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 46846
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 46847
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 46848
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46849
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 46850
    //MUL
    t26 = t26 * t3.x;
    //Instruction 46851
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 46852
    //MOV
    t3.y = t2.y;
    //Instruction 46853
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 46854
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 46855
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 46856
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 46857
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 46858
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46859
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 46860
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 46861
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 46862
    //MOV
    t3.xz = vec2(0.500000, 0.500000);
    //Instruction 46863
    //MOV
    t3.y = _ProjectionParams.x;
    //Instruction 46864
    //MUL
    t0.xyz = t2.xyz * t3.xyz;
    //Instruction 46865
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46866
    //ADD
    t4.xy = t0.zz + t0.xw;
    //Instruction 46867
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 46868
    //MUL
    t2.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 46869
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 46870
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 46871
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 46872
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 46873
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 46874
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 46875
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 46876
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 46877
    //MUL
    t1.xyz = t3.xyz * t0.xyw;
    //Instruction 46878
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 46879
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 46880
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 46881
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 46882
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 46883
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 46884
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 46885
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 46886
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 46887
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 46888
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 46889
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 46890
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 46891
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 46892
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 46893
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 46894
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 46895
    //MOV
    t1.w = 1.0;
    //Instruction 46896
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 46897
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 46898
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 46899
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 46900
    //DP4
    t16_7.x = dot(unity_SHBr, t16_3);
    //Instruction 46901
    //DP4
    t16_7.y = dot(unity_SHBg, t16_3);
    //Instruction 46902
    //DP4
    t16_7.z = dot(unity_SHBb, t16_3);
    //Instruction 46903
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 46904
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 46905
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 46906
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 46907
    //MOV
    gl_Position = t0;
    //Instruction 46908
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46909
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 46910
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 46911
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 46912
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 46913
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46914
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 46915
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 46681
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46682
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46683
    //MOV
    t1.x = t16_0.x;
    //Instruction 46684
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46685
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46686
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46687
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46688
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46689
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46690
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46691
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46692
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46693
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46694
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46695
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46696
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46697
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 46698
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46699
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46700
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46701
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_67;
  tmpvar_67.x = tmpvar_66.x;
  tmpvar_67.y = (tmpvar_66.y * _ProjectionParams.x);
  o_65.xy = (tmpvar_67 + tmpvar_66.w);
  o_65.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = normalize(((
    (v_68.xyz * tmpvar_14.x)
   + 
    (v_69.xyz * tmpvar_14.y)
  ) + (v_70.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec3 x1_75;
  x1_75.x = dot (unity_SHAr, normal_73);
  x1_75.y = dot (unity_SHAg, normal_73);
  x1_75.z = dot (unity_SHAb, normal_73);
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_76);
  x2_74.y = dot (unity_SHBg, tmpvar_76);
  x2_74.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_72 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + x1_75);
  tmpvar_7 = tmpvar_72;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_60;
  xlv_TEXCOORD4 = o_65;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 46038
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46039
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46040
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 46041
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46042
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 46043
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 46044
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 46045
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 46046
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46047
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46048
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 46049
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46050
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46051
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46052
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46053
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46054
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 46055
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 46056
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 46057
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 46058
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 46059
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 46060
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 46061
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 46062
    //FRC
    t3.x = fract(t3.x);
    //Instruction 46063
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 46064
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 46065
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 46066
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 46067
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 46068
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 46069
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 46070
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 46071
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 46072
    //IF
    if(tb30){
        //Instruction 46073
        //IF
        if(tb28){
            //Instruction 46074
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46075
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 46076
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 46077
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 46078
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 46079
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46080
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46081
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46082
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46083
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46084
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 46085
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 46086
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46087
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46088
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 46089
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46090
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46091
            //FRC
            t2 = fract(t2);
            //Instruction 46092
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46093
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 46094
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46095
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46096
            //ADD
            t2 = t2 + t2;
            //Instruction 46097
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 46098
            //LT
            tb30 = t6.w<0.0;
            //Instruction 46099
            //MOV
            t6.y = (-t6.w);
            //Instruction 46100
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 46101
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 46102
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 46103
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 46104
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 46105
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 46106
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 46107
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46108
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46109
            //MUL
            t32 = t2.x * t32;
            //Instruction 46110
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 46111
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46112
            //MUL
            t30 = t30 * t31;
            //Instruction 46113
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 46114
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46115
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46116
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46117
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46118
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 46119
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 46120
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46121
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 46122
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46123
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 46124
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 46125
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 46126
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 46127
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46128
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 46129
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 46130
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 46131
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46132
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46133
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 46134
        //ELSE
        } else {
            //Instruction 46135
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46136
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46137
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46138
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46139
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46140
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46141
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46142
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 46143
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 46144
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46145
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46146
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46147
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 46148
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46149
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46150
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 46151
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 46152
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46153
            //MOV
            t2.y = (-t2.w);
            //Instruction 46154
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46155
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46156
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 46157
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 46158
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 46159
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 46160
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46161
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46162
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46163
            //MUL
            t30 = t30 * t5.x;
            //Instruction 46164
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 46165
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 46166
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46167
        //ENDIF
        }
        //Instruction 46168
    //ENDIF
    }
    //Instruction 46169
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 46170
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46171
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    /