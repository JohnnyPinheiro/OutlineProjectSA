uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 25108
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25109
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25110
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 25111
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25112
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 25113
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 25114
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 25115
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 25116
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25117
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25118
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 25119
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25120
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25121
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25122
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 25123
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 25124
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 25125
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 25126
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 25127
    //IF
    if(tb22){
        //Instruction 25128
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 25129
        //IF
        if(tb22){
            //Instruction 25130
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25131
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25132
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25133
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 25134
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 25135
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 25136
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25137
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25138
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25139
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25140
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 25141
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 25142
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25143
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25144
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 25145
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25146
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25147
            //FRC
            t2 = fract(t2);
            //Instruction 25148
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25149
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 25150
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25151
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25152
            //ADD
            t2 = t2 + t2;
            //Instruction 25153
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 25154
            //LT
            tb24 = t5.w<0.0;
            //Instruction 25155
            //MOV
            t5.y = (-t5.w);
            //Instruction 25156
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25157
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 25158
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 25159
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 25160
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 25161
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 25162
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 25163
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25164
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25165
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 25166
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 25167
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25168
            //MUL
            t24 = t24 * t25;
            //Instruction 25169
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 25170
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25171
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25172
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25173
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25174
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25175
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25176
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25177
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25178
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25179
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25180
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25181
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25182
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 25183
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25184
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 25185
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 25186
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25187
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25188
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 25189
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25190
        //ELSE
        } else {
            //Instruction 25191
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25192
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25193
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25194
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25195
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25196
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25197
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25198
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25199
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25200
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25201
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25202
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25203
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25204
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25205
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25206
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25207
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25208
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25209
            //MOV
            t2.y = (-t2.w);
            //Instruction 25210
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25211
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25212
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25213
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25214
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 25215
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 25216
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25217
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25218
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25219
            //MUL
            t24 = t24 * t5.x;
            //Instruction 25220
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 25221
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25222
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25223
        //ENDIF
        }
        //Instruction 25224
    //ELSE
    } else {
        //Instruction 25225
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 25226
    //ENDIF
    }
    //Instruction 25227
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25228
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25229
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25230
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 25231
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 25232
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 25233
    //NE
    tb24 = t22!=0.0;
    //Instruction 25234
    //LOG
    t4.x = log2(t22);
    //Instruction 25235
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25236
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25237
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 25238
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25239
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25240
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25241
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25242
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25243
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25244
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25245
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25246
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25247
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 25248
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25249
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 25250
    //MUL
    t22 = t22 * t24;
    //Instruction 25251
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 25252
    //MOV
    t4.y = t3.y;
    //Instruction 25253
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 25254
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 25255
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 25256
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25257
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 25258
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25259
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25260
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25261
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25262
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25263
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25264
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25265
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25266
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 25267
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 25268
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 25269
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 25270
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 25271
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 25272
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25273
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25274
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 25275
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 25276
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 25277
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25278
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 25279
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 25280
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 25281
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 25282
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25283
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25284
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 25285
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 25286
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 25287
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 25288
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 25086
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 25087
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 25088
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 25089
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 25090
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 25091
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 25092
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 25093
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 25094
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 25095
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 25096
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 25097
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 25098
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 25099
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 25100
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25101
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 25102
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25103
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 25104
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 25105
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 25106
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25107
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 blendColor_13;
  mediump vec4 diffuseColor_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_14 = tmpvar_15;
  tmpvar_11 = (diffuseColor_14.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_13 = tmpvar_16;
  diffuseColor_14.xyz = mix (blendColor_13.xyz, diffuseColor_14.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_14.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_14.x, max (diffuseColor_14.y, diffuseColor_14.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_14.xyz = clamp ((tmpvar_17 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_14.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_5.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 24150
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24151
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24152
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 24153
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24154
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 24155
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 24156
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 24157
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 24158
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24159
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24160
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 24161
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24162
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24163
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24164
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 24165
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24166
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 24167
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 24168
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 24169
    //IF
    if(tb22){
        //Instruction 24170
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 24171
        //IF
        if(tb22){
            //Instruction 24172
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24173
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24174
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24175
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 24176
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 24177
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24178
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24179
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24180
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24181
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24182
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 24183
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 24184
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24185
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24186
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 24187
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24188
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24189
            //FRC
            t2 = fract(t2);
            //Instruction 24190
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24191
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24192
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24193
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24194
            //ADD
            t2 = t2 + t2;
            //Instruction 24195
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24196
            //LT
            tb24 = t5.w<0.0;
            //Instruction 24197
            //MOV
            t5.y = (-t5.w);
            //Instruction 24198
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24199
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 24200
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 24201
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 24202
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 24203
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 24204
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 24205
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24206
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24207
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24208
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 24209
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24210
            //MUL
            t24 = t24 * t25;
            //Instruction 24211
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 24212
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24213
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24214
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24215
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24216
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24217
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24218
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24219
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24220
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24221
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24222
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24223
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24224
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 24225
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24226
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 24227
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 24228
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24229
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24230
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24231
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24232
        //ELSE
        } else {
            //Instruction 24233
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24234
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24235
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24236
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24237
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24238
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24239
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24240
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24241
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24242
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24243
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24244
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24245
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24246
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24247
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24248
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24249
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24250
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24251
            //MOV
            t2.y = (-t2.w);
            //Instruction 24252
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24253
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24254
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24255
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24256
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 24257
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 24258
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24259
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24260
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24261
            //MUL
            t24 = t24 * t5.x;
            //Instruction 24262
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 24263
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24264
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24265
        //ENDIF
        }
        //Instruction 24266
    //ELSE
    } else {
        //Instruction 24267
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24268
    //ENDIF
    }
    //Instruction 24269
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24270
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24271
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24272
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 24273
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 24274
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 24275
    //NE
    tb24 = t22!=0.0;
    //Instruction 24276
    //LOG
    t4.x = log2(t22);
    //Instruction 24277
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24278
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24279
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 24280
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24281
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24282
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24283
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24284
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24285
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24286
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24287
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24288
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24289
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 24290
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24291
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 24292
    //MUL
    t22 = t22 * t24;
    //Instruction 24293
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 24294
    //MOV
    t4.y = t3.y;
    //Instruction 24295
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 24296
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24297
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 24298
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24299
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 24300
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24301
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24302
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24303
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24304
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24305
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24306
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24307
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24308
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 24309
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 24310
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 24311
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 24312
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 24313
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 24314
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24315
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24316
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 24317
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 24318
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 24319
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24320
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 24321
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 24322
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 24323
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 24324
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24325
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24326
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 24327
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 24328
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 24329
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 24330
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
highp vec3 t2;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_5;
bool tb7;
mediump float t16_12;
lowp float t10_12;
mediump float t16_15;
highp float t17;
void main()
{
    //Instruction 24110
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24111
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24112
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 24113
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24114
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 24115
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 24116
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 24117
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24118
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24119
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24120
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24121
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 24122
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 24123
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24124
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24125
    //MUL
    t16_1 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 24126
    //MAD
    t16_1 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_1;
    //Instruction 24127
    //MAD
    t16_1 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_1;
    //Instruction 24128
    //ADD
    t16_1 = t16_1 + _LightMatrix0[3];
    //Instruction 24129
    //DIV
    t16_3.xy = t16_1.xy / t16_1.ww;
    //Instruction 24130
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 24131
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 24132
    //LT
    tb7 = 0.0<t16_1.z;
    //Instruction 24133
    //DP3
    t16_12 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 24134
    //SAMPLE
    t10_12 = texture(_LightTextureB0, vec2(t16_12)).w;
    //Instruction 24135
    //MOVC
    t10_4 = (tb7) ? 1.0 : 0.0;
    //Instruction 24136
    //MUL
    t10_4 = t10_2.x * t10_4;
    //Instruction 24137
    //MUL
    t10_4 = t10_12 * t10_4;
    //Instruction 24138
    //MUL
    t16_3.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 24139
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24140
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24141
    //DP3
    t17 = dot(t2.xyz, t2.xyz);
    //Instruction 24142
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 24143
    //MUL
    t2.xyz = vec3(t17) * t2.xyz;
    //Instruction 24144
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 24145
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 24146
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 24147
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24148
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24149
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 24382
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24383
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24384
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 24385
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24386
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 24387
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 24388
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 24389
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 24390
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24391
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24392
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 24393
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24394
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24395
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24396
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 24397
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24398
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 24399
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 24400
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 24401
    //IF
    if(tb22){
        //Instruction 24402
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 24403
        //IF
        if(tb22){
            //Instruction 24404
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24405
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24406
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24407
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 24408
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 24409
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24410
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24411
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24412
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24413
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24414
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 24415
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 24416
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24417
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24418
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 24419
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24420
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24421
            //FRC
            t2 = fract(t2);
            //Instruction 24422
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24423
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24424
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24425
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24426
            //ADD
            t2 = t2 + t2;
            //Instruction 24427
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24428
            //LT
            tb24 = t5.w<0.0;
            //Instruction 24429
            //MOV
            t5.y = (-t5.w);
            //Instruction 24430
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24431
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 24432
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 24433
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 24434
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 24435
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 24436
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 24437
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24438
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24439
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24440
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 24441
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24442
            //MUL
            t24 = t24 * t25;
            //Instruction 24443
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 24444
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24445
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24446
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24447
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24448
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24449
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24450
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24451
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24452
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24453
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24454
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24455
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24456
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 24457
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24458
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 24459
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 24460
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24461
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24462
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24463
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24464
        //ELSE
        } else {
            //Instruction 24465
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24466
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24467
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24468
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24469
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24470
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24471
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24472
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24473
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24474
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24475
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24476
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24477
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24478
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24479
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24480
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24481
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24482
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24483
            //MOV
            t2.y = (-t2.w);
            //Instruction 24484
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24485
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24486
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24487
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24488
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 24489
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 24490
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24491
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24492
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24493
            //MUL
            t24 = t24 * t5.x;
            //Instruction 24494
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 24495
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24496
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24497
        //ENDIF
        }
        //Instruction 24498
    //ELSE
    } else {
        //Instruction 24499
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24500
    //ENDIF
    }
    //Instruction 24501
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24502
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24503
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24504
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 24505
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 24506
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 24507
    //NE
    tb24 = t22!=0.0;
    //Instruction 24508
    //LOG
    t4.x = log2(t22);
    //Instruction 24509
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24510
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24511
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 24512
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24513
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24514
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24515
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24516
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24517
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24518
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24519
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24520
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24521
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 24522
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24523
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 24524
    //MUL
    t22 = t22 * t24;
    //Instruction 24525
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 24526
    //MOV
    t4.y = t3.y;
    //Instruction 24527
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 24528
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24529
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 24530
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24531
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 24532
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24533
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24534
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24535
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24536
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24537
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24538
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24539
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24540
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 24541
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 24542
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 24543
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 24544
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 24545
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 24546
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24547
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24548
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 24549
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 24550
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 24551
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24552
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 24553
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 24554
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 24555
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 24556
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24557
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24558
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 24559
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 24560
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 24561
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 24562
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp float t10_5;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 24347
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24348
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24349
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 24350
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24351
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 24352
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 24353
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 24354
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24355
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24356
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24357
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24358
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 24359
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 24360
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24361
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24362
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 24363
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 24364
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 24365
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 24366
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 24367
    //SAMPLE
    t10_5 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 24368
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 24369
    //MUL
    t16_1 = t10_5 * t10_1.x;
    //Instruction 24370
    //MUL
    t16_3.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 24371
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24372
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24373
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 24374
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24375
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 24376
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 24377
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 24378
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 24379
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24380
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24381
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 24591
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24592
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24593
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 24594
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24595
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 24596
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 24597
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 24598
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 24599
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24600
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24601
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 24602
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24603
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24604
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24605
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 24606
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24607
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 24608
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 24609
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 24610
    //IF
    if(tb22){
        //Instruction 24611
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 24612
        //IF
        if(tb22){
            //Instruction 24613
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24614
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24615
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24616
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 24617
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 24618
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24619
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24620
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24621
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24622
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24623
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 24624
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 24625
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24626
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24627
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 24628
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24629
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24630
            //FRC
            t2 = fract(t2);
            //Instruction 24631
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24632
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24633
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24634
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24635
            //ADD
            t2 = t2 + t2;
            //Instruction 24636
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24637
            //LT
            tb24 = t5.w<0.0;
            //Instruction 24638
            //MOV
            t5.y = (-t5.w);
            //Instruction 24639
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24640
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 24641
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 24642
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 24643
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 24644
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 24645
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 24646
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24647
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24648
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24649
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 24650
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24651
            //MUL
            t24 = t24 * t25;
            //Instruction 24652
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 24653
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24654
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24655
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24656
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24657
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24658
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24659
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24660
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24661
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24662
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24663
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24664
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24665
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 24666
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24667
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 24668
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 24669
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24670
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24671
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 24672
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24673
        //ELSE
        } else {
            //Instruction 24674
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24675
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24676
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24677
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24678
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24679
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24680
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24681
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24682
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24683
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24684
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24685
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24686
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24687
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24688
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24689
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24690
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24691
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24692
            //MOV
            t2.y = (-t2.w);
            //Instruction 24693
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24694
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24695
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24696
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24697
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 24698
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 24699
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24700
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24701
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24702
            //MUL
            t24 = t24 * t5.x;
            //Instruction 24703
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 24704
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24705
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24706
        //ENDIF
        }
        //Instruction 24707
    //ELSE
    } else {
        //Instruction 24708
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24709
    //ENDIF
    }
    //Instruction 24710
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24711
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24712
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24713
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 24714
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 24715
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 24716
    //NE
    tb24 = t22!=0.0;
    //Instruction 24717
    //LOG
    t4.x = log2(t22);
    //Instruction 24718
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24719
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24720
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 24721
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24722
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24723
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24724
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24725
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24726
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24727
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24728
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24729
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24730
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 24731
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24732
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 24733
    //MUL
    t22 = t22 * t24;
    //Instruction 24734
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 24735
    //MOV
    t4.y = t3.y;
    //Instruction 24736
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 24737
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 24738
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 24739
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24740
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 24741
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24742
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24743
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24744
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24745
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24746
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24747
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24748
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24749
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 24750
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 24751
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 24752
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 24753
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 24754
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 24755
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24756
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24757
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 24758
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 24759
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 24760
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24761
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 24762
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 24763
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 24764
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 24765
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 24766
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24767
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 24768
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 24769
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 24770
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 24771
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 24563
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24564
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 24565
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 24566
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24567
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 24568
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 24569
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 24570
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24571
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24572
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24573
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24574
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 24575
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 24576
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24577
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24578
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 24579
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 24580
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 24581
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 24582
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 24583
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 24584
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24585
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 24586
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 24587
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 24588
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24589
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24590
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  lowp vec3 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 24369
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24370
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24371
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 24372
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24373
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 24374
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 24375
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 24376
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 24377
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24378
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24379
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 24380
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24381
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24382
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24383
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 24384
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24385
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 24386
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 24387
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 24388
    //IF
    if(tb25){
        //Instruction 24389
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 24390
        //IF
        if(tb25){
            //Instruction 24391
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24392
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24393
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24394
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 24395
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 24396
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24397
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24398
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24399
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24400
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24401
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 24402
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 24403
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24404
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24405
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 24406
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24407
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24408
            //FRC
            t2 = fract(t2);
            //Instruction 24409
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24410
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24411
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24412
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24413
            //ADD
            t2 = t2 + t2;
            //Instruction 24414
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24415
            //LT
            tb27 = t5.w<0.0;
            //Instruction 24416
            //MOV
            t5.y = (-t5.w);
            //Instruction 24417
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24418
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 24419
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 24420
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 24421
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 24422
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 24423
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 24424
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24425
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24426
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24427
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 24428
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24429
            //MUL
            t27 = t27 * t28;
            //Instruction 24430
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 24431
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24432
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24433
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24434
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24435
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24436
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24437
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24438
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24439
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24440
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24441
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24442
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24443
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 24444
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24445
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 24446
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 24447
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24448
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24449
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24450
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24451
        //ELSE
        } else {
            //Instruction 24452
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24453
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24454
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24455
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24456
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24457
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24458
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24459
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24460
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24461
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24462
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24463
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24464
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24465
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24466
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24467
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24468
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24469
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24470
            //MOV
            t2.y = (-t2.w);
            //Instruction 24471
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24472
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24473
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24474
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24475
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 24476
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 24477
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24478
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24479
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24480
            //MUL
            t27 = t27 * t5.x;
            //Instruction 24481
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 24482
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24483
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24484
        //ENDIF
        }
        //Instruction 24485
    //ELSE
    } else {
        //Instruction 24486
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24487
    //ENDIF
    }
    //Instruction 24488
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24489
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24490
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24491
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 24492
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 24493
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 24494
    //NE
    tb27 = t25!=0.0;
    //Instruction 24495
    //LOG
    t4.x = log2(t25);
    //Instruction 24496
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24497
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24498
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 24499
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24500
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24501
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24502
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24503
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24504
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24505
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24506
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24507
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24508
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 24509
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24510
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 24511
    //MUL
    t25 = t25 * t27;
    //Instruction 24512
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 24513
    //MOV
    t4.y = t3.y;
    //Instruction 24514
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 24515
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24516
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 24517
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24518
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 24519
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24520
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24521
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24522
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24523
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24524
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24525
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24526
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24527
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 24528
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 24529
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 24530
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 24531
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 24532
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 24533
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24534
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24535
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 24536
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 24537
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 24538
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24539
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 24540
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24541
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 24542
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 24543
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 24544
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 24545
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 24546
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24547
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 24548
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 24549
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 24550
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 24551
    //MOV
    t5.x = t3.z;
    //Instruction 24552
    //MOV
    t5.y = t4.x;
    //Instruction 24553
    //MOV
    t5.z = t0.x;
    //Instruction 24554
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 24555
    //MOV
    t5.x = t3.x;
    //Instruction 24556
    //MOV
    t5.y = t4.y;
    //Instruction 24557
    //MOV
    t5.z = t0.y;
    //Instruction 24558
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 24559
    //MOV
    t0.x = t3.y;
    //Instruction 24560
    //MOV
    t0.y = t4.z;
    //Instruction 24561
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 24562
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 24563
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24564
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 24565
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 24566
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 24567
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 24568
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump float t16_18;
highp float t19;
void main()
{
    //Instruction 24331
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24332
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 24333
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 24334
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24335
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 24336
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 24337
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 24338
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24339
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24340
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24341
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24342
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 24343
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 24344
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24345
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 24346
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 24347
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 24348
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 24349
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 24350
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 24351
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 24352
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 24353
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24354
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24355
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24356
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24357
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24358
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 24359
    //MAD
    t10_4.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 24360
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 24361
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 24362
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 24363
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 24364
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 24365
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 24366
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24367
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24368
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  lowp vec3 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 25316
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25317
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25318
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 25319
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25320
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 25321
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 25322
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 25323
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 25324
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25325
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25326
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 25327
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25328
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25329
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25330
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 25331
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25332
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 25333
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 25334
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 25335
    //IF
    if(tb25){
        //Instruction 25336
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 25337
        //IF
        if(tb25){
            //Instruction 25338
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25339
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25340
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25341
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 25342
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 25343
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 25344
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25345
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25346
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25347
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25348
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 25349
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 25350
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25351
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25352
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 25353
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25354
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25355
            //FRC
            t2 = fract(t2);
            //Instruction 25356
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25357
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 25358
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25359
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25360
            //ADD
            t2 = t2 + t2;
            //Instruction 25361
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 25362
            //LT
            tb27 = t5.w<0.0;
            //Instruction 25363
            //MOV
            t5.y = (-t5.w);
            //Instruction 25364
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25365
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 25366
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 25367
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 25368
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 25369
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 25370
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 25371
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25372
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25373
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 25374
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 25375
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25376
            //MUL
            t27 = t27 * t28;
            //Instruction 25377
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 25378
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25379
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25380
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25381
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25382
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25383
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25384
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25385
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25386
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25387
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25388
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25389
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25390
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 25391
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25392
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 25393
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 25394
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25395
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25396
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 25397
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25398
        //ELSE
        } else {
            //Instruction 25399
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25400
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25401
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25402
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25403
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25404
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25405
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25406
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25407
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25408
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25409
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25410
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25411
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25412
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25413
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25414
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25415
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25416
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25417
            //MOV
            t2.y = (-t2.w);
            //Instruction 25418
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25419
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25420
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25421
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25422
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 25423
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 25424
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25425
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25426
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25427
            //MUL
            t27 = t27 * t5.x;
            //Instruction 25428
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 25429
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25430
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25431
        //ENDIF
        }
        //Instruction 25432
    //ELSE
    } else {
        //Instruction 25433
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 25434
    //ENDIF
    }
    //Instruction 25435
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25436
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25437
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25438
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 25439
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 25440
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 25441
    //NE
    tb27 = t25!=0.0;
    //Instruction 25442
    //LOG
    t4.x = log2(t25);
    //Instruction 25443
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25444
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25445
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 25446
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25447
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25448
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25449
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25450
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25451
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25452
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25453
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25454
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25455
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 25456
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25457
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 25458
    //MUL
    t25 = t25 * t27;
    //Instruction 25459
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 25460
    //MOV
    t4.y = t3.y;
    //Instruction 25461
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 25462
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25463
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 25464
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25465
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 25466
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25467
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25468
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25469
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25470
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25471
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25472
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25473
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25474
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 25475
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 25476
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 25477
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 25478
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 25479
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 25480
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25481
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25482
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 25483
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 25484
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 25485
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25486
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 25487
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25488
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 25489
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 25490
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 25491
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 25492
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 25493
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25494
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 25495
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 25496
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 25497
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 25498
    //MOV
    t5.x = t3.z;
    //Instruction 25499
    //MOV
    t5.y = t4.x;
    //Instruction 25500
    //MOV
    t5.z = t0.x;
    //Instruction 25501
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 25502
    //MOV
    t5.x = t3.x;
    //Instruction 25503
    //MOV
    t5.y = t4.y;
    //Instruction 25504
    //MOV
    t5.z = t0.y;
    //Instruction 25505
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 25506
    //MOV
    t0.x = t3.y;
    //Instruction 25507
    //MOV
    t0.y = t4.z;
    //Instruction 25508
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 25509
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 25510
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25511
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 25512
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 25513
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 25514
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 25515
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 25289
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 25290
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 25291
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 25292
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 25293
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 25294
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 25295
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 25296
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 25297
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 25298
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 25299
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 25300
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 25301
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 25302
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 25303
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 25304
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 25305
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 25306
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 25307
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 25308
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 25309
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 25310
    //DP3
    t16_18 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25311
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 25312
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 25313
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 25314
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25315
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  lowp vec3 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 blendColor_13;
  mediump vec4 diffuseColor_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_14 = tmpvar_15;
  tmpvar_11 = (diffuseColor_14.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_13 = tmpvar_16;
  diffuseColor_14.xyz = mix (blendColor_13.xyz, diffuseColor_14.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_14.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_14.x, max (diffuseColor_14.y, diffuseColor_14.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_14.xyz = clamp ((tmpvar_17 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_14.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_6 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  highp vec3 LightCoord_23;
  LightCoord_23 = lightCoord_6.xyz;
  highp float tmpvar_24;
  tmpvar_24 = dot (LightCoord_23, LightCoord_23);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_25.w);
  atten_5 = tmpvar_26;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 24817
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24818
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24819
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 24820
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24821
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 24822
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 24823
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 24824
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 24825
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24826
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24827
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 24828
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24829
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24830
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24831
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 24832
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24833
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 24834
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 24835
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 24836
    //IF
    if(tb25){
        //Instruction 24837
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 24838
        //IF
        if(tb25){
            //Instruction 24839
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24840
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24841
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24842
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 24843
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 24844
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24845
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24846
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24847
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24848
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24849
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 24850
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 24851
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24852
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24853
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 24854
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24855
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24856
            //FRC
            t2 = fract(t2);
            //Instruction 24857
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24858
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24859
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24860
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24861
            //ADD
            t2 = t2 + t2;
            //Instruction 24862
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24863
            //LT
            tb27 = t5.w<0.0;
            //Instruction 24864
            //MOV
            t5.y = (-t5.w);
            //Instruction 24865
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24866
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 24867
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 24868
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 24869
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 24870
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 24871
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 24872
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24873
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24874
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24875
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 24876
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24877
            //MUL
            t27 = t27 * t28;
            //Instruction 24878
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 24879
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24880
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24881
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24882
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24883
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24884
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24885
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24886
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24887
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24888
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24889
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24890
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24891
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 24892
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24893
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 24894
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 24895
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24896
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24897
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24898
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24899
        //ELSE
        } else {
            //Instruction 24900
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24901
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24902
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24903
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24904
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24905
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24906
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24907
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24908
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24909
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24910
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24911
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24912
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24913
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24914
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24915
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24916
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24917
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24918
            //MOV
            t2.y = (-t2.w);
            //Instruction 24919
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24920
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24921
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24922
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24923
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 24924
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 24925
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24926
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24927
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24928
            //MUL
            t27 = t27 * t5.x;
            //Instruction 24929
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 24930
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24931
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24932
        //ENDIF
        }
        //Instruction 24933
    //ELSE
    } else {
        //Instruction 24934
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24935
    //ENDIF
    }
    //Instruction 24936
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24937
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24938
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24939
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 24940
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 24941
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 24942
    //NE
    tb27 = t25!=0.0;
    //Instruction 24943
    //LOG
    t4.x = log2(t25);
    //Instruction 24944
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24945
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24946
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 24947
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24948
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24949
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24950
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24951
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24952
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24953
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24954
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24955
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24956
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 24957
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24958
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 24959
    //MUL
    t25 = t25 * t27;
    //Instruction 24960
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 24961
    //MOV
    t4.y = t3.y;
    //Instruction 24962
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 24963
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24964
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 24965
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24966
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 24967
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24968
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24969
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24970
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24971
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24972
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24973
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24974
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24975
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 24976
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 24977
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 24978
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 24979
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 24980
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 24981
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24982
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24983
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 24984
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 24985
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 24986
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24987
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 24988
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24989
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 24990
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 24991
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 24992
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 24993
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 24994
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24995
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 24996
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 24997
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 24998
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 24999
    //MOV
    t5.x = t3.z;
    //Instruction 25000
    //MOV
    t5.y = t4.x;
    //Instruction 25001
    //MOV
    t5.z = t0.x;
    //Instruction 25002
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 25003
    //MOV
    t5.x = t3.x;
    //Instruction 25004
    //MOV
    t5.y = t4.y;
    //Instruction 25005
    //MOV
    t5.z = t0.y;
    //Instruction 25006
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 25007
    //MOV
    t0.x = t3.y;
    //Instruction 25008
    //MOV
    t0.y = t4.z;
    //Instruction 25009
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 25010
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 25011
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25012
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 25013
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 25014
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 25015
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 25016
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
highp vec3 t2;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
bool tb9;
mediump float t16_16;
lowp float t10_16;
mediump float t16_21;
highp float t23;
void main()
{
    //Instruction 24772
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24773
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 24774
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 24775
    //ADD
    t16_7.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24776
    //MAD
    t16_0.xyz = t16_0.xxx * t16_7.xyz + t10_2.xyz;
    //Instruction 24777
    //MAX
    t16_21 = max(t16_0.z, t16_0.y);
    //Instruction 24778
    //MAX
    t16_21 = max(t16_21, t16_0.x);
    //Instruction 24779
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24780
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24781
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24782
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24783
    //DIV
    t16_21 = t16_21 / t16_3.x;
    //Instruction 24784
    //MAD
    t16_1.x = t16_21 * 0.500000 + 0.500000;
    //Instruction 24785
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24786
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 24787
    //MUL
    t16_1 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 24788
    //MAD
    t16_1 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_1;
    //Instruction 24789
    //MAD
    t16_1 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_1;
    //Instruction 24790
    //ADD
    t16_1 = t16_1 + _LightMatrix0[3];
    //Instruction 24791
    //DIV
    t16_3.xy = t16_1.xy / t16_1.ww;
    //Instruction 24792
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 24793
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 24794
    //LT
    tb9 = 0.0<t16_1.z;
    //Instruction 24795
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 24796
    //SAMPLE
    t10_16 = texture(_LightTextureB0, vec2(t16_16)).w;
    //Instruction 24797
    //MOVC
    t10_4.x = (tb9) ? 1.0 : 0.0;
    //Instruction 24798
    //MUL
    t10_4.x = t10_2.x * t10_4.x;
    //Instruction 24799
    //MUL
    t10_4.x = t10_16 * t10_4.x;
    //Instruction 24800
    //MUL
    t16_3.xyz = t10_4.xxx * _LightColor0.xyz;
    //Instruction 24801
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24802
    //ADD
    t2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24803
    //DP3
    t23 = dot(t2.xyz, t2.xyz);
    //Instruction 24804
    //RSQ
    t23 = inversesqrt(t23);
    //Instruction 24805
    //MUL
    t2.xyz = vec3(t23) * t2.xyz;
    //Instruction 24806
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 24807
    //MAD
    t10_4.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 24808
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 24809
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 24810
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 24811
    //DP3
    t16_21 = dot(t10_6.xyz, t2.xyz);
    //Instruction 24812
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 24813
    //MUL
    t16_0.xyz = vec3(t16_21) * t16_0.xyz;
    //Instruction 24814
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24815
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24816
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  lowp vec3 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, tmpvar_18).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 24609
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24610
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 24611
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 24612
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 24613
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 24614
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 24615
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 24616
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 24617
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 24618
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 24619
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 24620
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24621
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 24622
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 24623
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 24624
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24625
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 24626
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 24627
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 24628
    //IF
    if(tb25){
        //Instruction 24629
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 24630
        //IF
        if(tb25){
            //Instruction 24631
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24632
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24633
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24634
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 24635
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 24636
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24637
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24638
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24639
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24640
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24641
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 24642
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 24643
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24644
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 24645
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 24646
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 24647
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24648
            //FRC
            t2 = fract(t2);
            //Instruction 24649
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24650
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 24651
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24652
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24653
            //ADD
            t2 = t2 + t2;
            //Instruction 24654
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 24655
            //LT
            tb27 = t5.w<0.0;
            //Instruction 24656
            //MOV
            t5.y = (-t5.w);
            //Instruction 24657
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24658
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 24659
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 24660
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 24661
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 24662
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 24663
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 24664
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24665
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24666
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 24667
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 24668
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24669
            //MUL
            t27 = t27 * t28;
            //Instruction 24670
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 24671
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24672
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24673
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24674
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24675
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24676
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24677
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24678
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24679
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24680
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24681
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24682
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24683
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 24684
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24685
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 24686
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 24687
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24688
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24689
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 24690
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24691
        //ELSE
        } else {
            //Instruction 24692
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24693
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24694
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24695
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24696
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 24697
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 24698
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24699
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 24700
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 24701
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24702
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 24703
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24704
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 24705
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24706
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24707
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 24708
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 24709
            //LT
            tb0 = t2.w<0.0;
            //Instruction 24710
            //MOV
            t2.y = (-t2.w);
            //Instruction 24711
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 24712
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 24713
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 24714
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 24715
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 24716
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 24717
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 24718
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24719
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24720
            //MUL
            t27 = t27 * t5.x;
            //Instruction 24721
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 24722
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 24723
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 24724
        //ENDIF
        }
        //Instruction 24725
    //ELSE
    } else {
        //Instruction 24726
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 24727
    //ENDIF
    }
    //Instruction 24728
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 24729
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 24730
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24731
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 24732
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 24733
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 24734
    //NE
    tb27 = t25!=0.0;
    //Instruction 24735
    //LOG
    t4.x = log2(t25);
    //Instruction 24736
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 24737
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 24738
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 24739
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24740
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24741
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 24742
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 24743
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24744
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 24745
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24746
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 24747
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 24748
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 24749
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24750
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 24751
    //MUL
    t25 = t25 * t27;
    //Instruction 24752
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 24753
    //MOV
    t4.y = t3.y;
    //Instruction 24754
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 24755
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 24756
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 24757
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 24758
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 24759
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 24760
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 24761
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 24762
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 24763
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 24764
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 24765
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 24766
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 24767
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 24768
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 24769
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 24770
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 24771
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 24772
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 24773
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 24774
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 24775
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 24776
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 24777
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 24778
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 24779
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 24780
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24781
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 24782
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 24783
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 24784
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 24785
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 24786
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 24787
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 24788
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 24789
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 24790
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 24791
    //MOV
    t5.x = t3.z;
    //Instruction 24792
    //MOV
    t5.y = t4.x;
    //Instruction 24793
    //MOV
    t5.z = t0.x;
    //Instruction 24794
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 24795
    //MOV
    t5.x = t3.x;
    //Instruction 24796
    //MOV
    t5.y = t4.y;
    //Instruction 24797
    //MOV
    t5.z = t0.y;
    //Instruction 24798
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 24799
    //MOV
    t0.x = t3.y;
    //Instruction 24800
    //MOV
    t0.y = t4.z;
    //Instruction 24801
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 24802
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 24803
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 24804
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 24805
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 24806
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 24807
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 24808
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
lowp float t10_7;
mediump float t16_18;
highp float t19;
void main()
{
    //Instruction 24569
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 24570
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 24571
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 24572
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 24573
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 24574
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 24575
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 24576
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 24577
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 24578
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 24579
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 24580
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 24581
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 24582
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 24583
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 24584
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 24585
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 24586
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 24587
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 24588
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 24589
    //SAMPLE
    t10_7 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 24590
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 24591
    //MUL
    t16_1 = t10_7 * t10_1.x;
    //Instruction 24592
    //MUL
    t16_3.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 24593
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 24594
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 24595
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24596
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24597
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 24598
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 24599
    //MAD
    t10_4.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 24600
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 24601
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 24602
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 24603
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 24604
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 24605
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 24606
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 24607
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24608
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  lowp vec3 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  lowp vec3 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, tmpvar_18).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 25549
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25550
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25551
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 25552
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25553
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 25554
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 25555
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 25556
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 25557
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25558
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25559
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 25560
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25561
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25562
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25563
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 25564
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25565
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 25566
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 25567
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 25568
    //IF
    if(tb25){
        //Instruction 25569
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 25570
        //IF
        if(tb25){
            //Instruction 25571
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25572
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25573
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25574
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 25575
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 25576
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 25577
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25578
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25579
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25580
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25581
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 25582
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 25583
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25584
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25585
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 25586
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25587
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25588
            //FRC
            t2 = fract(t2);
            //Instruction 25589
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25590
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 25591
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25592
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25593
            //ADD
            t2 = t2 + t2;
            //Instruction 25594
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 25595
            //LT
            tb27 = t5.w<0.0;
            //Instruction 25596
            //MOV
            t5.y = (-t5.w);
            //Instruction 25597
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25598
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 25599
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 25600
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 25601
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 25602
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 25603
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 25604
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25605
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25606
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 25607
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 25608
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25609
            //MUL
            t27 = t27 * t28;
            //Instruction 25610
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 25611
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25612
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25613
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25614
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25615
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25616
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25617
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25618
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25619
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25620
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25621
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25622
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25623
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 25624
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25625
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 25626
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 25627
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25628
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25629
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 25630
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25631
        //ELSE
        } else {
            //Instruction 25632
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25633
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25634
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25635
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25636
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25637
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25638
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25639
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25640
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25641
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25642
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25643
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25644
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25645
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25646
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25647
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25648
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25649
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25650
            //MOV
            t2.y = (-t2.w);
            //Instruction 25651
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25652
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25653
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25654
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25655
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 25656
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 25657
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25658
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25659
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25660
            //MUL
            t27 = t27 * t5.x;
            //Instruction 25661
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 25662
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25663
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 25664
        //ENDIF
        }
        //Instruction 25665
    //ELSE
    } else {
        //Instruction 25666
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 25667
    //ENDIF
    }
    //Instruction 25668
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25669
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25670
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25671
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 25672
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 25673
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 25674
    //NE
    tb27 = t25!=0.0;
    //Instruction 25675
    //LOG
    t4.x = log2(t25);
    //Instruction 25676
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25677
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25678
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 25679
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25680
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25681
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25682
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25683
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25684
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25685
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25686
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25687
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25688
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 25689
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25690
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 25691
    //MUL
    t25 = t25 * t27;
    //Instruction 25692
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 25693
    //MOV
    t4.y = t3.y;
    //Instruction 25694
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 25695
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25696
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 25697
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25698
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 25699
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25700
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25701
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25702
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25703
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25704
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25705
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25706
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25707
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 25708
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 25709
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 25710
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 25711
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 25712
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 25713
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25714
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25715
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 25716
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 25717
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 25718
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25719
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 25720
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25721
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 25722
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 25723
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 25724
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 25725
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 25726
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25727
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 25728
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 25729
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 25730
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 25731
    //MOV
    t5.x = t3.z;
    //Instruction 25732
    //MOV
    t5.y = t4.x;
    //Instruction 25733
    //MOV
    t5.z = t0.x;
    //Instruction 25734
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 25735
    //MOV
    t5.x = t3.x;
    //Instruction 25736
    //MOV
    t5.y = t4.y;
    //Instruction 25737
    //MOV
    t5.z = t0.y;
    //Instruction 25738
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 25739
    //MOV
    t0.x = t3.y;
    //Instruction 25740
    //MOV
    t0.y = t4.z;
    //Instruction 25741
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 25742
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 25743
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25744
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 25745
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 25746
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 25747
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 25748
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 25516
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 25517
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 25518
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 25519
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 25520
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 25521
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 25522
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 25523
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 25524
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 25525
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 25526
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 25527
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 25528
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 25529
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 25530
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 25531
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 25532
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 25533
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 25534
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 25535
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 25536
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 25537
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 25538
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 25539
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 25540
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 25541
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 25542
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 25543
    //DP3
    t16_18 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25544
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 25545
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 25546
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 25547
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25548
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 25772
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25773
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 25774
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 25775
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25776
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 25777
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 25778
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 25779
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 25780
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 25781
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 25782
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 25783
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 25784
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 25785
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25786
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 25787
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 25788
    //FRC
    t2.x = fract(t2.x);
    //Instruction 25789
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 25790
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 25791
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 25792
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 25793
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 25794
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 25795
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25796
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 25797
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 25798
    //IF
    if(tb20){
        //Instruction 25799
        //IF
        if(tb19){
            //Instruction 25800
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25801
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25802
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25803
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 25804
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 25805
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25806
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25807
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25808
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25809
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25810
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25811
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25812
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 25813
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25814
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 25815
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 25816
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 25817
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25818
            //FRC
            t0 = fract(t0);
            //Instruction 25819
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25820
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 25821
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25822
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25823
            //ADD
            t0 = t0 + t0;
            //Instruction 25824
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 25825
            //LT
            tb20 = t5.w<0.0;
            //Instruction 25826
            //MOV
            t5.y = (-t5.w);
            //Instruction 25827
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25828
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 25829
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 25830
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 25831
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 25832
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 25833
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 25834
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25835
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25836
            //MUL
            t22 = t0.x * t22;
            //Instruction 25837
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 25838
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25839
            //MUL
            t20 = t20 * t21;
            //Instruction 25840
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 25841
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25842
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25843
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25844
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25845
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25846
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25847
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25848
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25849
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25850
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25851
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25852
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25853
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 25854
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25855
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 25856
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 25857
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25858
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25859
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25860
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25861
        //ELSE
        } else {
            //Instruction 25862
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25863
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 25864
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25865
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 25866
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25867
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25868
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 25869
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25870
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 25871
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 25872
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25873
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25874
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25875
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 25876
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25877
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25878
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 25879
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 25880
            //LT
            tb19 = t0.w<0.0;
            //Instruction 25881
            //MOV
            t0.y = (-t0.w);
            //Instruction 25882
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 25883
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 25884
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 25885
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 25886
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 25887
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 25888
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 25889
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25890
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25891
            //MUL
            t21 = t21 * t4.x;
            //Instruction 25892
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 25893
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25894
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25895
        //ENDIF
        }
        //Instruction 25896
    //ENDIF
    }
    //Instruction 25897
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 25898
    //SQRT
    t19 = sqrt(t19);
    //Instruction 25899
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25900
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 25901
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 25902
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 25903
    //NE
    tb3 = t20!=0.0;
    //Instruction 25904
    //LOG
    t9 = log2(t20);
    //Instruction 25905
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 25906
    //EXP
    t9 = exp2(t9);
    //Instruction 25907
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 25908
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25909
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25910
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 25911
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 25912
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25913
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 25914
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25915
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 25916
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 25917
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 25918
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25919
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 25920
    //MUL
    t20 = t20 * t3.x;
    //Instruction 25921
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 25922
    //MOV
    t3.y = t2.y;
    //Instruction 25923
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 25924
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 25925
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 25926
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 25927
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 25928
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 25929
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 25930
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 25931
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 25932
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 25933
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 25934
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 25935
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 25936
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 25937
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 25938
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 25939
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 25940
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 25941
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 25942
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 25943
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 25944
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 25945
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 25946
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 25947
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 25948
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 25949
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25950
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 25951
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 25952
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25953
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 25954
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 25955
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 25749
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25750
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25751
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25752
    //LT
    tb0 = t10_1<0.0;
    //Instruction 25753
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 25754
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 25755
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 25756
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 25757
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 25758
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 25759
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 25760
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 25761
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25762
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25763
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 25764
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 25765
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 25766
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 25767
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 25768
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 25769
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25770
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25771
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 24821
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 24822
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 24823
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 24824
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 24825
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 24826
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 24827
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 24828
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 24829
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 24830
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 24831
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 24832
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 24833
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 24834
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 24835
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 24836
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 24837
    //FRC
    t2.x = fract(t2.x);
    //Instruction 24838
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 24839
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 24840
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 24841
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 24842
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 24843
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 24844
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 24845
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 24846
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 24847
    //IF
    if(tb20){
        //Instruction 24848
        //IF
        if(tb19){
            //Instruction 24849
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 24850
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 24851
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 24852
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 24853
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 24854
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24855
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24856
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24857
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24858
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 24859
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24860
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24861
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 24862
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24863
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 24864
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 24865
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 24866
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 24867
            //FRC
            t0 = fract(t0);
            //Instruction 24868
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 24869
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 24870
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 24871
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 24872
            //ADD
            t0 = t0 + t0;
            //Instruction 24873
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 24874
            //LT
            tb20 = t5.w<0.0;
            //Instruction 24875
            //MOV
            t5.y = (-t5.w);
            //Instruction 24876
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 24877
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 24878
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 24879
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 24880
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 24881
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 24882
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 24883
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24884
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24885
            //MUL
            t22 = t0.x * t22;
            //Instruction 24886
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 24887
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 24888
            //MUL
            t20 = t20 * t21;
            //Instruction 24889
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 24890
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 24891
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24892
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 24893
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 24894
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 24895
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 24896
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 24897
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 24898
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 24899
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 24900
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 24901
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 24902
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 24903
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 24904
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 24905
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 24906
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 24907
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 24908
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24909
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 24910
        //ELSE
        } else {
            //Instruction 24911
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 24912
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 24913
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24914
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 24915
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 24916
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 24917
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 24918
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 24919
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 24920
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 24921
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 24922
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 24923
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 24924
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 24925
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 24926
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 24927
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 24928
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 24929
            //LT
            tb19 = t0.w<0.0;
            //Instruction 24930
            //MOV
            t0.y = (-t0.w);
            //Instruction 24931
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 24932
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 24933
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 24934
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 24935
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 24936
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 24937
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 24938
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 24939
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 24940
            //MUL
            t21 = t21 * t4.x;
            //Instruction 24941
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 24942
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 24943
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 24944
        //ENDIF
        }
        //Instruction 24945
    //ENDIF
    }
    //Instruction 24946
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 24947
    //SQRT
    t19 = sqrt(t19);
    //Instruction 24948
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 24949
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 24950
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 24951
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 24952
    //NE
    tb3 = t20!=0.0;
    //Instruction 24953
    //LOG
    t9 = log2(t20);
    //Instruction 24954
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 24955
    //EXP
    t9 = exp2(t9);
    //Instruction 24956
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 24957
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 24958
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 24959
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 24960
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 24961
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 24962
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 24963
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 24964
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 24965
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 24966
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 24967
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 24968
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 24969
    //MUL
    t20 = t20 * t3.x;
    //Instruction 24970
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 24971
    //MOV
    t3.y = t2.y;
    //Instruction 24972
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 24973
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 24974
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 24975
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 24976
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 24977
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 24978
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 24979
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 24980
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 24981
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 24982
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 24983
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 24984
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 24985
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 24986
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 24987
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 24988
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 24989
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 24990
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 24991
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 24992
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 24993
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 24994
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 24995
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 24996
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 24997
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 24998
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 24999
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 25000
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 25001
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25002
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 25003
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 25004
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 24809
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 24810
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 24811
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 24812
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 24813
    //LT
    tb0 = t10_1<0.0;
    //Instruction 24814
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 24815
    //DP3
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 24816
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 24817
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 24818
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 24819
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 24820
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 25047
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25048
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 25049
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 25050
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25051
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 25052
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 25053
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 25054
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 25055
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 25056
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 25057
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 25058
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 25059
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 25060
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25061
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 25062
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 25063
    //FRC
    t2.x = fract(t2.x);
    //Instruction 25064
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 25065
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 25066
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 25067
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 25068
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 25069
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 25070
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25071
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 25072
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 25073
    //IF
    if(tb20){
        //Instruction 25074
        //IF
        if(tb19){
            //Instruction 25075
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25076
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25077
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25078
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 25079
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 25080
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25081
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25082
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25083
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25084
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25085
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25086
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25087
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 25088
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25089
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 25090
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 25091
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 25092
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25093
            //FRC
            t0 = fract(t0);
            //Instruction 25094
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25095
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 25096
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25097
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25098
            //ADD
            t0 = t0 + t0;
            //Instruction 25099
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 25100
            //LT
            tb20 = t5.w<0.0;
            //Instruction 25101
            //MOV
            t5.y = (-t5.w);
            //Instruction 25102
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25103
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 25104
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 25105
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 25106
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 25107
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 25108
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 25109
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25110
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25111
            //MUL
            t22 = t0.x * t22;
            //Instruction 25112
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 25113
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25114
            //MUL
            t20 = t20 * t21;
            //Instruction 25115
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 25116
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25117
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25118
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25119
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25120
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25121
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25122
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25123
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25124
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25125
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25126
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25127
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25128
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 25129
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25130
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 25131
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 25132
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25133
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25134
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25135
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25136
        //ELSE
        } else {
            //Instruction 25137
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25138
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 25139
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25140
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 25141
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25142
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25143
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 25144
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25145
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 25146
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 25147
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25148
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25149
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25150
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 25151
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25152
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25153
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 25154
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 25155
            //LT
            tb19 = t0.w<0.0;
            //Instruction 25156
            //MOV
            t0.y = (-t0.w);
            //Instruction 25157
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 25158
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 25159
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 25160
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 25161
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 25162
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 25163
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 25164
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25165
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25166
            //MUL
            t21 = t21 * t4.x;
            //Instruction 25167
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 25168
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25169
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25170
        //ENDIF
        }
        //Instruction 25171
    //ENDIF
    }
    //Instruction 25172
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 25173
    //SQRT
    t19 = sqrt(t19);
    //Instruction 25174
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25175
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 25176
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 25177
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 25178
    //NE
    tb3 = t20!=0.0;
    //Instruction 25179
    //LOG
    t9 = log2(t20);
    //Instruction 25180
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 25181
    //EXP
    t9 = exp2(t9);
    //Instruction 25182
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 25183
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25184
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25185
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 25186
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 25187
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25188
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 25189
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25190
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 25191
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 25192
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 25193
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25194
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 25195
    //MUL
    t20 = t20 * t3.x;
    //Instruction 25196
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 25197
    //MOV
    t3.y = t2.y;
    //Instruction 25198
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 25199
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 25200
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 25201
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 25202
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 25203
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 25204
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 25205
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 25206
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 25207
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 25208
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 25209
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 25210
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 25211
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 25212
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 25213
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 25214
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 25215
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 25216
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 25217
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 25218
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 25219
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 25220
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 25221
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 25222
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 25223
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 25224
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25225
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 25226
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 25227
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25228
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 25229
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 25230
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 25017
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25018
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25019
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25020
    //LT
    tb0 = t10_1<0.0;
    //Instruction 25021
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 25022
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 25023
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 25024
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 25025
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 25026
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 25027
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 25028
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 25029
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 25030
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 25031
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 25032
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 25033
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 25034
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 25035
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 25036
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25037
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25038
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 25039
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25040
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 25041
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 25042
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 25043
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 25044
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25045
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25046
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 25256
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25257
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 25258
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 25259
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25260
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 25261
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 25262
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 25263
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 25264
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 25265
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 25266
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 25267
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 25268
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 25269
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25270
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 25271
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 25272
    //FRC
    t2.x = fract(t2.x);
    //Instruction 25273
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 25274
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 25275
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 25276
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 25277
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 25278
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 25279
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25280
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 25281
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 25282
    //IF
    if(tb20){
        //Instruction 25283
        //IF
        if(tb19){
            //Instruction 25284
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25285
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25286
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25287
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 25288
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 25289
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25290
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25291
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25292
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25293
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25294
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25295
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25296
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 25297
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25298
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 25299
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 25300
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 25301
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25302
            //FRC
            t0 = fract(t0);
            //Instruction 25303
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25304
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 25305
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25306
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25307
            //ADD
            t0 = t0 + t0;
            //Instruction 25308
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 25309
            //LT
            tb20 = t5.w<0.0;
            //Instruction 25310
            //MOV
            t5.y = (-t5.w);
            //Instruction 25311
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25312
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 25313
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 25314
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 25315
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 25316
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 25317
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 25318
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25319
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25320
            //MUL
            t22 = t0.x * t22;
            //Instruction 25321
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 25322
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25323
            //MUL
            t20 = t20 * t21;
            //Instruction 25324
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 25325
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25326
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25327
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25328
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25329
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25330
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25331
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25332
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25333
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25334
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25335
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25336
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25337
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 25338
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25339
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 25340
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 25341
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25342
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25343
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25344
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25345
        //ELSE
        } else {
            //Instruction 25346
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25347
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 25348
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25349
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 25350
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25351
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25352
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 25353
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25354
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 25355
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 25356
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25357
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25358
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25359
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 25360
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25361
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25362
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 25363
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 25364
            //LT
            tb19 = t0.w<0.0;
            //Instruction 25365
            //MOV
            t0.y = (-t0.w);
            //Instruction 25366
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 25367
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 25368
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 25369
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 25370
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 25371
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 25372
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 25373
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25374
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25375
            //MUL
            t21 = t21 * t4.x;
            //Instruction 25376
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 25377
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25378
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25379
        //ENDIF
        }
        //Instruction 25380
    //ENDIF
    }
    //Instruction 25381
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 25382
    //SQRT
    t19 = sqrt(t19);
    //Instruction 25383
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25384
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 25385
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 25386
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 25387
    //NE
    tb3 = t20!=0.0;
    //Instruction 25388
    //LOG
    t9 = log2(t20);
    //Instruction 25389
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 25390
    //EXP
    t9 = exp2(t9);
    //Instruction 25391
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 25392
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25393
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25394
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 25395
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 25396
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25397
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 25398
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25399
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 25400
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 25401
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 25402
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25403
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 25404
    //MUL
    t20 = t20 * t3.x;
    //Instruction 25405
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 25406
    //MOV
    t3.y = t2.y;
    //Instruction 25407
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 25408
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 25409
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 25410
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 25411
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 25412
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 25413
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 25414
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 25415
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 25416
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 25417
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 25418
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 25419
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 25420
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 25421
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 25422
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 25423
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 25424
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 25425
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 25426
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 25427
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 25428
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 25429
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 25430
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 25431
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 25432
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 25433
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25434
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 25435
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 25436
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25437
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 25438
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 25439
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 25231
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25232
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25233
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25234
    //LT
    tb0 = t10_1<0.0;
    //Instruction 25235
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 25236
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 25237
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 25238
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 25239
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 25240
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 25241
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 25242
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 25243
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 25244
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 25245
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25246
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25247
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 25248
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 25249
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 25250
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 25251
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 25252
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 25253
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25254
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25255
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 25023
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25024
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 25025
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 25026
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25027
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 25028
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 25029
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 25030
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 25031
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 25032
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 25033
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 25034
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 25035
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 25036
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25037
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 25038
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 25039
    //FRC
    t2.x = fract(t2.x);
    //Instruction 25040
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 25041
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 25042
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 25043
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 25044
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 25045
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 25046
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25047
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 25048
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 25049
    //IF
    if(tb20){
        //Instruction 25050
        //IF
        if(tb19){
            //Instruction 25051
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25052
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 25053
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 25054
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 25055
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 25056
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25057
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25058
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25059
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25060
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25061
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25062
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25063
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 25064
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25065
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 25066
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 25067
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 25068
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25069
            //FRC
            t0 = fract(t0);
            //Instruction 25070
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25071
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 25072
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25073
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25074
            //ADD
            t0 = t0 + t0;
            //Instruction 25075
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 25076
            //LT
            tb20 = t5.w<0.0;
            //Instruction 25077
            //MOV
            t5.y = (-t5.w);
            //Instruction 25078
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 25079
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 25080
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 25081
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 25082
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 25083
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 25084
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 25085
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25086
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25087
            //MUL
            t22 = t0.x * t22;
            //Instruction 25088
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 25089
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25090
            //MUL
            t20 = t20 * t21;
            //Instruction 25091
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 25092
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25093
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25094
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25095
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25096
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 25097
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 25098
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25099
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 25100
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25101
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 25102
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 25103
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 25104
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 25105
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25106
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 25107
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 25108
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 25109
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25110
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25111
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 25112
        //ELSE
        } else {
            //Instruction 25113
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25114
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 25115
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25116
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 25117
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 25118
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 25119
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 25120
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25121
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 25122
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 25123
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25124
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25125
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25126
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 25127
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25128
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25129
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 25130
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 25131
            //LT
            tb19 = t0.w<0.0;
            //Instruction 25132
            //MOV
            t0.y = (-t0.w);
            //Instruction 25133
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 25134
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 25135
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 25136
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 25137
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 25138
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 25139
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 25140
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25141
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25142
            //MUL
            t21 = t21 * t4.x;
            //Instruction 25143
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 25144
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 25145
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 25146
        //ENDIF
        }
        //Instruction 25147
    //ENDIF
    }
    //Instruction 25148
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 25149
    //SQRT
    t19 = sqrt(t19);
    //Instruction 25150
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25151
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 25152
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 25153
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 25154
    //NE
    tb3 = t20!=0.0;
    //Instruction 25155
    //LOG
    t9 = log2(t20);
    //Instruction 25156
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 25157
    //EXP
    t9 = exp2(t9);
    //Instruction 25158
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 25159
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25160
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25161
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 25162
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 25163
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25164
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 25165
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25166
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 25167
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 25168
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 25169
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25170
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 25171
    //MUL
    t20 = t20 * t3.x;
    //Instruction 25172
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 25173
    //MOV
    t3.y = t2.y;
    //Instruction 25174
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 25175
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 25176
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 25177
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 25178
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 25179
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 25180
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 25181
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 25182
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 25183
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 25184
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 25185
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 25186
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 25187
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 25188
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 25189
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 25190
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 25191
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 25192
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 25193
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 25194
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 25195
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 25196
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 25197
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 25198
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 25199
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 25200
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25201
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 25202
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 25203
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25204
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 25205
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 25206
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 25005
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25006
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25007
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25008
    //LT
    tb0 = t10_1<0.0;
    //Instruction 25009
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 25010
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 25011
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 25012
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 25013
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 25014
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 25015
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 25016
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25017
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25018
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 25019
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 25020
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25021
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25022
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 25988
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25989
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25990
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 25991
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25992
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 25993
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 25994
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 25995
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 25996
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25997
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25998
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 25999
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26000
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26001
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26002
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 26003
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 26004
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 26005
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 26006
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 26007
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 26008
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 26009
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 26010
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 26011
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 26012
    //FRC
    t3.x = fract(t3.x);
    //Instruction 26013
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 26014
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 26015
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 26016
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 26017
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 26018
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 26019
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 26020
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 26021
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 26022
    //IF
    if(tb24){
        //Instruction 26023
        //IF
        if(tb22){
            //Instruction 26024
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26025
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26026
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26027
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 26028
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 26029
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 26030
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26031
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26032
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26033
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26034
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 26035
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 26036
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26037
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 26038
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 26039
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 26040
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26041
            //FRC
            t2 = fract(t2);
            //Instruction 26042
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26043
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 26044
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26045
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26046
            //ADD
            t2 = t2 + t2;
            //Instruction 26047
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 26048
            //LT
            tb24 = t6.w<0.0;
            //Instruction 26049
            //MOV
            t6.y = (-t6.w);
            //Instruction 26050
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26051
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 26052
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 26053
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 26054
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 26055
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 26056
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 26057
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26058
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26059
            //MUL
            t26 = t2.x * t26;
            //Instruction 26060
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 26061
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26062
            //MUL
            t24 = t24 * t25;
            //Instruction 26063
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 26064
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26065
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26066
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26067
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26068
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26069
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26070
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26071
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26072
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26073
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26074
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26075
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 26076
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 26077
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26078
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 26079
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 26080
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26081
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26082
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 26083
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26084
        //ELSE
        } else {
            //Instruction 26085
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26086
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26087
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26088
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26089
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26090
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26091
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26092
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26093
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 26094
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26095
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26096
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26097
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26098
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26099
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26100
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26101
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 26102
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26103
            //MOV
            t2.y = (-t2.w);
            //Instruction 26104
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26105
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26106
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 26107
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 26108
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 26109
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 26110
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26111
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26112
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26113
            //MUL
            t24 = t24 * t5.x;
            //Instruction 26114
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 26115
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 26116
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26117
        //ENDIF
        }
        //Instruction 26118
    //ENDIF
    }
    //Instruction 26119
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 26120
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26121
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26122
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 26123
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 26124
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 26125
    //NE
    tb24 = t22!=0.0;
    //Instruction 26126
    //LOG
    t4.x = log2(t22);
    //Instruction 26127
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26128
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26129
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 26130
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26131
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26132
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26133
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26134
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26135
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26136
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26137
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26138
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26139
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 26140
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26141
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 26142
    //MUL
    t22 = t22 * t24;
    //Instruction 26143
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 26144
    //MOV
    t4.y = t3.y;
    //Instruction 26145
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 26146
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 26147
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 26148
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 26149
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 26150
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 26151
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 26152
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 26153
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26154
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 26155
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 26156
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 26157
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 26158
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 26159
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 26160
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 26161
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 26162
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 26163
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 26164
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 26165
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 26166
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 26167
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 26168
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 26169
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 26170
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 26171
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 26172
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 26173
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 26174
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26175
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26176
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 26177
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 25956
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25957
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25958
    //LT
    tb12 = t10_1<0.0;
    //Instruction 25959
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 25960
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25961
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25962
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25963
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 25964
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 25965
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 25966
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 25967
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25968
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25969
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25970
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 25971
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 25972
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 25973
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 25974
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 25975
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 25976
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 25977
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25978
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25979
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 25980
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 25981
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 25982
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 25983
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 25984
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 25985
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25986
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25987
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 26199
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26200
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26201
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 26202
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26203
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 26204
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 26205
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 26206
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 26207
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26208
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26209
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 26210
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26211
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26212
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26213
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 26214
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 26215
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 26216
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 26217
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 26218
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 26219
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 26220
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 26221
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 26222
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 26223
    //FRC
    t3.x = fract(t3.x);
    //Instruction 26224
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 26225
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 26226
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 26227
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 26228
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 26229
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 26230
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 26231
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 26232
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 26233
    //IF
    if(tb24){
        //Instruction 26234
        //IF
        if(tb22){
            //Instruction 26235
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26236
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26237
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26238
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 26239
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 26240
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 26241
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26242
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26243
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26244
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26245
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 26246
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 26247
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26248
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 26249
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 26250
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 26251
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26252
            //FRC
            t2 = fract(t2);
            //Instruction 26253
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26254
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 26255
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26256
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26257
            //ADD
            t2 = t2 + t2;
            //Instruction 26258
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 26259
            //LT
            tb24 = t6.w<0.0;
            //Instruction 26260
            //MOV
            t6.y = (-t6.w);
            //Instruction 26261
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26262
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 26263
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 26264
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 26265
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 26266
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 26267
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 26268
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26269
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26270
            //MUL
            t26 = t2.x * t26;
            //Instruction 26271
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 26272
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26273
            //MUL
            t24 = t24 * t25;
            //Instruction 26274
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 26275
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26276
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26277
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26278
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26279
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26280
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26281
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26282
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26283
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26284
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26285
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26286
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 26287
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 26288
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26289
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 26290
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 26291
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26292
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26293
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 26294
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26295
        //ELSE
        } else {
            //Instruction 26296
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26297
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26298
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26299
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26300
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26301
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26302
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26303
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26304
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 26305
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26306
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26307
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26308
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26309
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26310
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26311
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26312
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 26313
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26314
            //MOV
            t2.y = (-t2.w);
            //Instruction 26315
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26316
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26317
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 26318
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 26319
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 26320
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 26321
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26322
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26323
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26324
            //MUL
            t24 = t24 * t5.x;
            //Instruction 26325
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 26326
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 26327
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26328
        //ENDIF
        }
        //Instruction 26329
    //ENDIF
    }
    //Instruction 26330
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 26331
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26332
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26333
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 26334
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 26335
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 26336
    //NE
    tb24 = t22!=0.0;
    //Instruction 26337
    //LOG
    t4.x = log2(t22);
    //Instruction 26338
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26339
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26340
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 26341
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26342
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26343
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26344
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26345
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26346
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26347
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26348
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26349
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26350
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 26351
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26352
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 26353
    //MUL
    t22 = t22 * t24;
    //Instruction 26354
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 26355
    //MOV
    t4.y = t3.y;
    //Instruction 26356
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 26357
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 26358
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 26359
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 26360
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 26361
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 26362
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 26363
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 26364
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26365
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 26366
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 26367
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 26368
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 26369
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 26370
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 26371
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 26372
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 26373
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 26374
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 26375
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 26376
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 26377
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 26378
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 26379
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 26380
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 26381
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 26382
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 26383
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 26384
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 26385
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26386
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26387
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 26388
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 26178
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26179
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26180
    //LT
    tb12 = t10_1<0.0;
    //Instruction 26181
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 26182
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26183
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26184
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26185
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 26186
    //MAX
    t16_3 = max(t16_6.z, t16_6.y);
    //Instruction 26187
    //MAX
    t16_3 = max(t16_6.x, t16_3);
    //Instruction 26188
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 26189
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26190
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26191
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26192
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 26193
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 26194
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 26195
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 26196
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26197
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26198
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 25246
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25247
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25248
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 25249
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25250
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 25251
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 25252
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 25253
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 25254
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25255
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25256
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 25257
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25258
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25259
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25260
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 25261
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 25262
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 25263
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 25264
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 25265
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 25266
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 25267
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25268
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 25269
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 25270
    //FRC
    t3.x = fract(t3.x);
    //Instruction 25271
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 25272
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 25273
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 25274
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 25275
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 25276
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 25277
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25278
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 25279
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 25280
    //IF
    if(tb24){
        //Instruction 25281
        //IF
        if(tb22){
            //Instruction 25282
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25283
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 25284
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 25285
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 25286
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 25287
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 25288
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25289
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25290
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25291
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 25292
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 25293
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 25294
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25295
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25296
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 25297
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25298
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25299
            //FRC
            t2 = fract(t2);
            //Instruction 25300
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25301
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 25302
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25303
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25304
            //ADD
            t2 = t2 + t2;
            //Instruction 25305
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 25306
            //LT
            tb24 = t6.w<0.0;
            //Instruction 25307
            //MOV
            t6.y = (-t6.w);
            //Instruction 25308
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 25309
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 25310
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 25311
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 25312
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 25313
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 25314
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 25315
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25316
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25317
            //MUL
            t26 = t2.x * t26;
            //Instruction 25318
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 25319
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25320
            //MUL
            t24 = t24 * t25;
            //Instruction 25321
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 25322
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25323
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25324
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25325
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25326
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 25327
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 25328
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25329
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 25330
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25331
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 25332
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 25333
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 25334
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 25335
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25336
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 25337
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 25338
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 25339
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25340
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 25341
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 25342
        //ELSE
        } else {
            //Instruction 25343
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25344
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25345
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25346
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25347
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25348
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25349
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25350
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25351
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25352
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25353
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25354
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25355
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25356
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25357
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25358
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25359
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25360
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25361
            //MOV
            t2.y = (-t2.w);
            //Instruction 25362
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25363
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25364
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25365
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25366
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 25367
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 25368
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25369
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25370
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25371
            //MUL
            t24 = t24 * t5.x;
            //Instruction 25372
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 25373
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25374
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25375
        //ENDIF
        }
        //Instruction 25376
    //ENDIF
    }
    //Instruction 25377
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25378
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25379
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25380
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 25381
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 25382
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 25383
    //NE
    tb24 = t22!=0.0;
    //Instruction 25384
    //LOG
    t4.x = log2(t22);
    //Instruction 25385
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25386
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25387
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 25388
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25389
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25390
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25391
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25392
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25393
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25394
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25395
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25396
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25397
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 25398
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25399
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 25400
    //MUL
    t22 = t22 * t24;
    //Instruction 25401
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 25402
    //MOV
    t4.y = t3.y;
    //Instruction 25403
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 25404
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 25405
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 25406
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25407
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 25408
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25409
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25410
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25411
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25412
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25413
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25414
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25415
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25416
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 25417
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 25418
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 25419
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 25420
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 25421
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 25422
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25423
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25424
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 25425
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 25426
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 25427
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25428
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 25429
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 25430
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 25431
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 25432
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25433
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25434
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 25435
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 25207
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25208
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25209
    //LT
    tb15 = t10_1<0.0;
    //Instruction 25210
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 25211
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25212
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25213
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25214
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 25215
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 25216
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 25217
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 25218
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25219
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25220
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25221
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 25222
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 25223
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 25224
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 25225
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 25226
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 25227
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 25228
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 25229
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 25230
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 25231
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 25232
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 25233
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 25234
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 25235
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25236
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25237
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 25238
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 25239
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 25240
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 25241
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 25242
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 25243
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25244
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25245
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 25474
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25475
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25476
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 25477
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25478
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 25479
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 25480
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 25481
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 25482
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25483
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25484
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 25485
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25486
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25487
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25488
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 25489
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 25490
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 25491
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 25492
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 25493
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 25494
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 25495
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25496
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 25497
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 25498
    //FRC
    t3.x = fract(t3.x);
    //Instruction 25499
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 25500
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 25501
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 25502
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 25503
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 25504
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 25505
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25506
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 25507
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 25508
    //IF
    if(tb24){
        //Instruction 25509
        //IF
        if(tb22){
            //Instruction 25510
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25511
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 25512
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 25513
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 25514
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 25515
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 25516
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25517
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25518
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25519
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 25520
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 25521
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 25522
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25523
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25524
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 25525
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25526
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25527
            //FRC
            t2 = fract(t2);
            //Instruction 25528
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25529
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 25530
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25531
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25532
            //ADD
            t2 = t2 + t2;
            //Instruction 25533
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 25534
            //LT
            tb24 = t6.w<0.0;
            //Instruction 25535
            //MOV
            t6.y = (-t6.w);
            //Instruction 25536
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 25537
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 25538
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 25539
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 25540
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 25541
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 25542
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 25543
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25544
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25545
            //MUL
            t26 = t2.x * t26;
            //Instruction 25546
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 25547
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25548
            //MUL
            t24 = t24 * t25;
            //Instruction 25549
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 25550
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25551
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25552
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25553
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25554
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 25555
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 25556
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25557
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 25558
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25559
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 25560
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 25561
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 25562
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 25563
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25564
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 25565
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 25566
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 25567
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25568
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 25569
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 25570
        //ELSE
        } else {
            //Instruction 25571
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25572
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25573
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25574
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25575
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25576
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25577
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25578
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25579
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25580
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25581
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25582
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25583
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25584
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25585
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25586
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25587
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25588
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25589
            //MOV
            t2.y = (-t2.w);
            //Instruction 25590
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25591
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25592
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25593
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25594
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 25595
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 25596
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25597
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25598
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25599
            //MUL
            t24 = t24 * t5.x;
            //Instruction 25600
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 25601
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25602
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25603
        //ENDIF
        }
        //Instruction 25604
    //ENDIF
    }
    //Instruction 25605
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25606
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25607
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25608
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 25609
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 25610
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 25611
    //NE
    tb24 = t22!=0.0;
    //Instruction 25612
    //LOG
    t4.x = log2(t22);
    //Instruction 25613
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25614
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25615
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 25616
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25617
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25618
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25619
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25620
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25621
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25622
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25623
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25624
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25625
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 25626
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25627
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 25628
    //MUL
    t22 = t22 * t24;
    //Instruction 25629
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 25630
    //MOV
    t4.y = t3.y;
    //Instruction 25631
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 25632
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 25633
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 25634
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25635
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 25636
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25637
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25638
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25639
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25640
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25641
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25642
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25643
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25644
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 25645
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 25646
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 25647
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 25648
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 25649
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 25650
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25651
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25652
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 25653
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 25654
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 25655
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25656
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 25657
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 25658
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 25659
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 25660
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 25661
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25662
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 25663
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 25440
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25441
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25442
    //LT
    tb12 = t10_1<0.0;
    //Instruction 25443
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 25444
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25445
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25446
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25447
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 25448
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 25449
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 25450
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 25451
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25452
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25453
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25454
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 25455
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 25456
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 25457
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 25458
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 25459
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 25460
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 25461
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 25462
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 25463
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25464
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25465
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 25466
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 25467
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 25468
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 25469
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 25470
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 25471
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25472
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25473
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 26416
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26417
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26418
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 26419
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26420
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 26421
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 26422
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 26423
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 26424
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26425
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26426
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 26427
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26428
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26429
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26430
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 26431
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 26432
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 26433
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 26434
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 26435
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 26436
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 26437
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 26438
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 26439
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 26440
    //FRC
    t3.x = fract(t3.x);
    //Instruction 26441
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 26442
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 26443
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 26444
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 26445
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 26446
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 26447
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 26448
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 26449
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 26450
    //IF
    if(tb24){
        //Instruction 26451
        //IF
        if(tb22){
            //Instruction 26452
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26453
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26454
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26455
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 26456
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 26457
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 26458
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26459
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26460
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26461
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26462
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 26463
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 26464
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26465
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 26466
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 26467
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 26468
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26469
            //FRC
            t2 = fract(t2);
            //Instruction 26470
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26471
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 26472
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26473
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26474
            //ADD
            t2 = t2 + t2;
            //Instruction 26475
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 26476
            //LT
            tb24 = t6.w<0.0;
            //Instruction 26477
            //MOV
            t6.y = (-t6.w);
            //Instruction 26478
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26479
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 26480
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 26481
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 26482
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 26483
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 26484
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 26485
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26486
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26487
            //MUL
            t26 = t2.x * t26;
            //Instruction 26488
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 26489
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26490
            //MUL
            t24 = t24 * t25;
            //Instruction 26491
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 26492
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26493
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26494
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26495
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26496
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26497
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26498
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26499
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26500
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26501
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26502
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26503
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 26504
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 26505
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26506
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 26507
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 26508
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26509
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26510
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 26511
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26512
        //ELSE
        } else {
            //Instruction 26513
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26514
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26515
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26516
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26517
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26518
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26519
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26520
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26521
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 26522
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26523
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26524
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26525
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26526
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26527
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26528
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26529
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 26530
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26531
            //MOV
            t2.y = (-t2.w);
            //Instruction 26532
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26533
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26534
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 26535
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 26536
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 26537
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 26538
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26539
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26540
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26541
            //MUL
            t24 = t24 * t5.x;
            //Instruction 26542
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 26543
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 26544
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26545
        //ENDIF
        }
        //Instruction 26546
    //ENDIF
    }
    //Instruction 26547
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 26548
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26549
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26550
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 26551
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 26552
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 26553
    //NE
    tb24 = t22!=0.0;
    //Instruction 26554
    //LOG
    t4.x = log2(t22);
    //Instruction 26555
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26556
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26557
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 26558
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26559
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26560
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26561
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26562
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26563
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26564
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26565
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26566
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26567
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 26568
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26569
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 26570
    //MUL
    t22 = t22 * t24;
    //Instruction 26571
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 26572
    //MOV
    t4.y = t3.y;
    //Instruction 26573
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 26574
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 26575
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 26576
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 26577
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 26578
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 26579
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 26580
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 26581
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26582
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 26583
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 26584
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 26585
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 26586
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 26587
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 26588
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 26589
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 26590
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 26591
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 26592
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 26593
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 26594
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 26595
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 26596
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 26597
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 26598
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 26599
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 26600
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 26601
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 26602
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26603
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26604
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 26605
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 26389
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26390
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26391
    //LT
    tb12 = t10_1<0.0;
    //Instruction 26392
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 26393
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26394
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26395
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26396
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 26397
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 26398
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 26399
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 26400
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26401
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26402
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26403
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 26404
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 26405
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 26406
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 26407
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 26408
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 26409
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26410
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 26411
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 26412
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 26413
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26414
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26415
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 25473
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25474
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25475
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 25476
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25477
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 25478
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 25479
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 25480
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 25481
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25482
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25483
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 25484
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25485
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25486
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25487
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 25488
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25489
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 25490
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 25491
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 25492
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 25493
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 25494
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25495
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 25496
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 25497
    //FRC
    t3.x = fract(t3.x);
    //Instruction 25498
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 25499
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 25500
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 25501
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 25502
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 25503
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 25504
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25505
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 25506
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 25507
    //IF
    if(tb27){
        //Instruction 25508
        //IF
        if(tb25){
            //Instruction 25509
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25510
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 25511
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 25512
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 25513
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 25514
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25515
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25516
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25517
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25518
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 25519
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 25520
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 25521
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25522
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25523
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 25524
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25525
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25526
            //FRC
            t2 = fract(t2);
            //Instruction 25527
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25528
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 25529
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25530
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25531
            //ADD
            t2 = t2 + t2;
            //Instruction 25532
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 25533
            //LT
            tb27 = t6.w<0.0;
            //Instruction 25534
            //MOV
            t6.y = (-t6.w);
            //Instruction 25535
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 25536
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 25537
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 25538
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 25539
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 25540
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 25541
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 25542
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25543
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25544
            //MUL
            t29 = t2.x * t29;
            //Instruction 25545
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 25546
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25547
            //MUL
            t27 = t27 * t28;
            //Instruction 25548
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 25549
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25550
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25551
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25552
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25553
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 25554
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 25555
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25556
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 25557
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25558
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 25559
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 25560
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 25561
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 25562
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25563
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 25564
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 25565
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 25566
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25567
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25568
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 25569
        //ELSE
        } else {
            //Instruction 25570
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25571
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25572
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25573
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25574
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25575
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25576
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25577
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25578
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25579
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25580
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25581
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25582
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25583
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25584
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25585
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25586
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25587
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25588
            //MOV
            t2.y = (-t2.w);
            //Instruction 25589
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25590
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25591
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25592
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25593
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 25594
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 25595
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25596
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25597
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25598
            //MUL
            t27 = t27 * t5.x;
            //Instruction 25599
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 25600
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25601
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25602
        //ENDIF
        }
        //Instruction 25603
    //ENDIF
    }
    //Instruction 25604
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25605
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25606
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25607
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 25608
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 25609
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 25610
    //NE
    tb27 = t25!=0.0;
    //Instruction 25611
    //LOG
    t4.x = log2(t25);
    //Instruction 25612
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25613
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25614
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 25615
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25616
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25617
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25618
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25619
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25620
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25621
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25622
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25623
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25624
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 25625
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25626
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 25627
    //MUL
    t25 = t25 * t27;
    //Instruction 25628
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 25629
    //MOV
    t4.y = t3.y;
    //Instruction 25630
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 25631
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25632
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 25633
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25634
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 25635
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25636
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25637
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25638
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25639
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25640
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25641
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25642
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25643
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 25644
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 25645
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 25646
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 25647
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 25648
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 25649
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25650
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25651
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 25652
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 25653
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 25654
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25655
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 25656
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25657
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 25658
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 25659
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 25660
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 25661
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 25662
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25663
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 25664
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 25665
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 25666
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 25667
    //MOV
    t5.x = t3.z;
    //Instruction 25668
    //MOV
    t5.y = t4.x;
    //Instruction 25669
    //MOV
    t5.z = t0.x;
    //Instruction 25670
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 25671
    //MOV
    t5.x = t3.x;
    //Instruction 25672
    //MOV
    t5.y = t4.y;
    //Instruction 25673
    //MOV
    t5.z = t0.y;
    //Instruction 25674
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 25675
    //MOV
    t0.x = t3.y;
    //Instruction 25676
    //MOV
    t0.y = t4.z;
    //Instruction 25677
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 25678
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 25679
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25680
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 25681
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 25436
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 25437
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25438
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 25439
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 25440
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25441
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25442
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25443
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 25444
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 25445
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 25446
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 25447
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25448
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25449
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 25450
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 25451
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 25452
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 25453
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 25454
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 25455
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 25456
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 25457
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25458
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25459
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 25460
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 25461
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 25462
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 25463
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 25464
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 25465
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 25466
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 25467
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 25468
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 25469
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 25470
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25471
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25472
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 25690
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25691
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25692
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 25693
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25694
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 25695
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 25696
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 25697
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 25698
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25699
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25700
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 25701
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25702
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25703
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25704
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 25705
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25706
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 25707
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 25708
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 25709
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 25710
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 25711
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25712
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 25713
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 25714
    //FRC
    t3.x = fract(t3.x);
    //Instruction 25715
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 25716
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 25717
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 25718
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 25719
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 25720
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 25721
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25722
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 25723
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 25724
    //IF
    if(tb27){
        //Instruction 25725
        //IF
        if(tb25){
            //Instruction 25726
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25727
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 25728
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 25729
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 25730
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 25731
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25732
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25733
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25734
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25735
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 25736
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 25737
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 25738
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25739
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25740
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 25741
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25742
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25743
            //FRC
            t2 = fract(t2);
            //Instruction 25744
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25745
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 25746
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25747
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25748
            //ADD
            t2 = t2 + t2;
            //Instruction 25749
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 25750
            //LT
            tb27 = t6.w<0.0;
            //Instruction 25751
            //MOV
            t6.y = (-t6.w);
            //Instruction 25752
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 25753
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 25754
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 25755
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 25756
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 25757
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 25758
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 25759
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25760
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25761
            //MUL
            t29 = t2.x * t29;
            //Instruction 25762
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 25763
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25764
            //MUL
            t27 = t27 * t28;
            //Instruction 25765
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 25766
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25767
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25768
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25769
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25770
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 25771
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 25772
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25773
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 25774
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25775
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 25776
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 25777
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 25778
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 25779
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25780
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 25781
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 25782
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 25783
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25784
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25785
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 25786
        //ELSE
        } else {
            //Instruction 25787
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25788
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25789
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25790
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25791
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25792
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25793
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25794
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25795
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25796
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25797
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25798
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25799
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25800
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25801
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25802
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25803
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25804
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25805
            //MOV
            t2.y = (-t2.w);
            //Instruction 25806
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25807
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25808
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25809
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25810
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 25811
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 25812
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25813
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25814
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25815
            //MUL
            t27 = t27 * t5.x;
            //Instruction 25816
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 25817
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25818
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25819
        //ENDIF
        }
        //Instruction 25820
    //ENDIF
    }
    //Instruction 25821
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25822
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25823
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25824
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 25825
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 25826
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 25827
    //NE
    tb27 = t25!=0.0;
    //Instruction 25828
    //LOG
    t4.x = log2(t25);
    //Instruction 25829
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25830
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25831
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 25832
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25833
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25834
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25835
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25836
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25837
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25838
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25839
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25840
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25841
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 25842
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25843
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 25844
    //MUL
    t25 = t25 * t27;
    //Instruction 25845
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 25846
    //MOV
    t4.y = t3.y;
    //Instruction 25847
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 25848
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25849
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 25850
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25851
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 25852
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25853
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25854
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25855
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25856
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25857
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25858
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25859
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25860
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 25861
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 25862
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 25863
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 25864
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 25865
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 25866
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25867
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25868
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 25869
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 25870
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 25871
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25872
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 25873
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25874
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 25875
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 25876
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 25877
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 25878
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 25879
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25880
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 25881
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 25882
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 25883
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 25884
    //MOV
    t5.x = t3.z;
    //Instruction 25885
    //MOV
    t5.y = t4.x;
    //Instruction 25886
    //MOV
    t5.z = t0.x;
    //Instruction 25887
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 25888
    //MOV
    t5.x = t3.x;
    //Instruction 25889
    //MOV
    t5.y = t4.y;
    //Instruction 25890
    //MOV
    t5.z = t0.y;
    //Instruction 25891
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 25892
    //MOV
    t0.x = t3.y;
    //Instruction 25893
    //MOV
    t0.y = t4.z;
    //Instruction 25894
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 25895
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 25896
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25897
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 25898
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 25664
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 25665
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25666
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 25667
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 25668
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25669
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25670
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25671
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 25672
    //MAX
    t16_3 = max(t16_7.z, t16_7.y);
    //Instruction 25673
    //MAX
    t16_3 = max(t16_7.x, t16_3);
    //Instruction 25674
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 25675
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25676
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25677
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 25678
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 25679
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 25680
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 25681
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 25682
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 25683
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 25684
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25685
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 25686
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 25687
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25688
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25689
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 26650
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26651
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26652
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 26653
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26654
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 26655
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 26656
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 26657
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 26658
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26659
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26660
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 26661
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26662
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26663
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26664
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 26665
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 26666
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 26667
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 26668
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 26669
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 26670
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 26671
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 26672
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 26673
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 26674
    //FRC
    t3.x = fract(t3.x);
    //Instruction 26675
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 26676
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 26677
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 26678
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 26679
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 26680
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 26681
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 26682
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 26683
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 26684
    //IF
    if(tb27){
        //Instruction 26685
        //IF
        if(tb25){
            //Instruction 26686
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26687
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26688
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26689
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 26690
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 26691
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 26692
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26693
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26694
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26695
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26696
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 26697
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 26698
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26699
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 26700
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 26701
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 26702
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26703
            //FRC
            t2 = fract(t2);
            //Instruction 26704
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26705
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 26706
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26707
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26708
            //ADD
            t2 = t2 + t2;
            //Instruction 26709
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 26710
            //LT
            tb27 = t6.w<0.0;
            //Instruction 26711
            //MOV
            t6.y = (-t6.w);
            //Instruction 26712
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26713
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 26714
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 26715
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 26716
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 26717
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 26718
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 26719
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26720
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26721
            //MUL
            t29 = t2.x * t29;
            //Instruction 26722
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 26723
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26724
            //MUL
            t27 = t27 * t28;
            //Instruction 26725
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 26726
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26727
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26728
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26729
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26730
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26731
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26732
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26733
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26734
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26735
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26736
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26737
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 26738
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 26739
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26740
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 26741
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 26742
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26743
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26744
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 26745
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26746
        //ELSE
        } else {
            //Instruction 26747
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26748
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26749
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26750
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26751
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26752
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26753
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26754
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26755
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 26756
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26757
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26758
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26759
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26760
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26761
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26762
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26763
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 26764
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26765
            //MOV
            t2.y = (-t2.w);
            //Instruction 26766
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26767
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26768
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 26769
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 26770
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 26771
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 26772
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26773
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26774
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26775
            //MUL
            t27 = t27 * t5.x;
            //Instruction 26776
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 26777
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 26778
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26779
        //ENDIF
        }
        //Instruction 26780
    //ENDIF
    }
    //Instruction 26781
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 26782
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26783
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26784
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 26785
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 26786
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 26787
    //NE
    tb27 = t25!=0.0;
    //Instruction 26788
    //LOG
    t4.x = log2(t25);
    //Instruction 26789
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26790
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26791
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 26792
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26793
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26794
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26795
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26796
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26797
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26798
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26799
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26800
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26801
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 26802
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26803
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 26804
    //MUL
    t25 = t25 * t27;
    //Instruction 26805
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 26806
    //MOV
    t4.y = t3.y;
    //Instruction 26807
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 26808
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 26809
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 26810
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 26811
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 26812
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 26813
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 26814
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 26815
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26816
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 26817
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 26818
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 26819
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 26820
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 26821
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 26822
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 26823
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 26824
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 26825
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 26826
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 26827
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 26828
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 26829
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 26830
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 26831
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 26832
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 26833
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 26834
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 26835
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 26836
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 26837
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 26838
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 26839
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 26840
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 26841
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 26842
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 26843
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 26844
    //MOV
    t5.x = t3.z;
    //Instruction 26845
    //MOV
    t5.y = t4.x;
    //Instruction 26846
    //MOV
    t5.z = t0.x;
    //Instruction 26847
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 26848
    //MOV
    t5.x = t3.x;
    //Instruction 26849
    //MOV
    t5.y = t4.y;
    //Instruction 26850
    //MOV
    t5.z = t0.y;
    //Instruction 26851
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 26852
    //MOV
    t0.x = t3.y;
    //Instruction 26853
    //MOV
    t0.y = t4.z;
    //Instruction 26854
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 26855
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 26856
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26857
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 26858
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 26606
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 26607
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26608
    //LT
    tb21 = t10_1.x<0.0;
    //Instruction 26609
    //DISCARD
    if((int(tb21))!=0){discard;}
    //Instruction 26610
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26611
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26612
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26613
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 26614
    //MAX
    t16_3.x = max(t16_9.z, t16_9.y);
    //Instruction 26615
    //MAX
    t16_3.x = max(t16_9.x, t16_3.x);
    //Instruction 26616
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 26617
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26618
    //MUL
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26619
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 26620
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 26621
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 26622
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 26623
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 26624
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 26625
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 26626
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 26627
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 26628
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 26629
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 26630
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 26631
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 26632
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 26633
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 26634
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26635
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 26636
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 26637
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 26638
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 26639
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 26640
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 26641
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 26642
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 26643
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 26644
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 26645
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 26646
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 26647
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26648
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26649
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 25721
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25722
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25723
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 25724
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25725
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 25726
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 25727
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 25728
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 25729
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25730
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25731
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 25732
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25733
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25734
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25735
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 25736
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25737
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 25738
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 25739
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 25740
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 25741
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 25742
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25743
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 25744
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 25745
    //FRC
    t3.x = fract(t3.x);
    //Instruction 25746
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 25747
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 25748
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 25749
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 25750
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 25751
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 25752
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25753
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 25754
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 25755
    //IF
    if(tb27){
        //Instruction 25756
        //IF
        if(tb25){
            //Instruction 25757
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25758
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 25759
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 25760
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 25761
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 25762
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25763
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25764
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25765
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25766
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 25767
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 25768
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 25769
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25770
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25771
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 25772
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25773
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25774
            //FRC
            t2 = fract(t2);
            //Instruction 25775
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25776
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 25777
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25778
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25779
            //ADD
            t2 = t2 + t2;
            //Instruction 25780
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 25781
            //LT
            tb27 = t6.w<0.0;
            //Instruction 25782
            //MOV
            t6.y = (-t6.w);
            //Instruction 25783
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 25784
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 25785
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 25786
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 25787
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 25788
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 25789
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 25790
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25791
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25792
            //MUL
            t29 = t2.x * t29;
            //Instruction 25793
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 25794
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 25795
            //MUL
            t27 = t27 * t28;
            //Instruction 25796
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 25797
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25798
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25799
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 25800
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 25801
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 25802
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 25803
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25804
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 25805
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25806
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 25807
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 25808
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 25809
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 25810
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 25811
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 25812
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 25813
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 25814
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 25815
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25816
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 25817
        //ELSE
        } else {
            //Instruction 25818
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25819
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 25820
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25821
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 25822
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 25823
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 25824
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25825
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 25826
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 25827
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 25828
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25829
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25830
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 25831
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 25832
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 25833
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 25834
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 25835
            //LT
            tb0 = t2.w<0.0;
            //Instruction 25836
            //MOV
            t2.y = (-t2.w);
            //Instruction 25837
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 25838
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 25839
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 25840
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 25841
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 25842
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 25843
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 25844
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 25845
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 25846
            //MUL
            t27 = t27 * t5.x;
            //Instruction 25847
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 25848
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 25849
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 25850
        //ENDIF
        }
        //Instruction 25851
    //ENDIF
    }
    //Instruction 25852
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 25853
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 25854
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 25855
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 25856
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 25857
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 25858
    //NE
    tb27 = t25!=0.0;
    //Instruction 25859
    //LOG
    t4.x = log2(t25);
    //Instruction 25860
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 25861
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 25862
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 25863
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 25864
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 25865
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 25866
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 25867
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 25868
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 25869
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 25870
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 25871
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 25872
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 25873
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 25874
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 25875
    //MUL
    t25 = t25 * t27;
    //Instruction 25876
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 25877
    //MOV
    t4.y = t3.y;
    //Instruction 25878
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 25879
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25880
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 25881
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 25882
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 25883
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 25884
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 25885
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 25886
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 25887
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 25888
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 25889
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 25890
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 25891
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 25892
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 25893
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 25894
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 25895
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 25896
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 25897
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 25898
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 25899
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 25900
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 25901
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 25902
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 25903
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 25904
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25905
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 25906
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 25907
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 25908
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 25909
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 25910
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 25911
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 25912
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 25913
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 25914
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 25915
    //MOV
    t5.x = t3.z;
    //Instruction 25916
    //MOV
    t5.y = t4.x;
    //Instruction 25917
    //MOV
    t5.z = t0.x;
    //Instruction 25918
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 25919
    //MOV
    t5.x = t3.x;
    //Instruction 25920
    //MOV
    t5.y = t4.y;
    //Instruction 25921
    //MOV
    t5.z = t0.y;
    //Instruction 25922
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 25923
    //MOV
    t0.x = t3.y;
    //Instruction 25924
    //MOV
    t0.y = t4.z;
    //Instruction 25925
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 25926
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 25927
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 25928
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 25929
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 25682
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 25683
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25684
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 25685
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 25686
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25687
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25688
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25689
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 25690
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 25691
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 25692
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 25693
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25694
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25695
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 25696
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 25697
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 25698
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 25699
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 25700
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 25701
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 25702
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 25703
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 25704
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 25705
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25706
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 25707
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 25708
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 25709
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 25710
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 25711
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 25712
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 25713
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 25714
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 25715
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 25716
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 25717
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 25718
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25719
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25720
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 25931
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25932
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 25933
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 25934
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 25935
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 25936
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 25937
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 25938
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 25939
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 25940
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 25941
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 25942
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25943
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 25944
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 25945
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 25946
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 25947
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 25948
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 25949
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 25950
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 25951
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 25952
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 25953
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 25954
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 25955
    //FRC
    t3.x = fract(t3.x);
    //Instruction 25956
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 25957
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 25958
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 25959
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 25960
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 25961
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 25962
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 25963
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 25964
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 25965
    //IF
    if(tb27){
        //Instruction 25966
        //IF
        if(tb25){
            //Instruction 25967
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 25968
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 25969
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 25970
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 25971
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 25972
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 25973
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 25974
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 25975
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25976
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 25977
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 25978
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 25979
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 25980
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 25981
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 25982
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 25983
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 25984
            //FRC
            t2 = fract(t2);
            //Instruction 25985
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 25986
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 25987
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 25988
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 25989
            //ADD
            t2 = t2 + t2;
            //Instruction 25990
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 25991
            //LT
            tb27 = t6.w<0.0;
            //Instruction 25992
            //MOV
            t6.y = (-t6.w);
            //Instruction 25993
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 25994
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 25995
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 25996
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 25997
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 25998
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 25999
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 26000
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26001
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26002
            //MUL
            t29 = t2.x * t29;
            //Instruction 26003
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 26004
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26005
            //MUL
            t27 = t27 * t28;
            //Instruction 26006
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 26007
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26008
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26009
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26010
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26011
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26012
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26013
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26014
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26015
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26016
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26017
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26018
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 26019
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 26020
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26021
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 26022
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 26023
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26024
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26025
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 26026
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26027
        //ELSE
        } else {
            //Instruction 26028
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26029
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26030
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26031
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26032
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26033
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26034
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26035
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26036
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 26037
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26038
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26039
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26040
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26041
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26042
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26043
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26044
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 26045
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26046
            //MOV
            t2.y = (-t2.w);
            //Instruction 26047
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26048
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26049
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 26050
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 26051
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 26052
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 26053
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26054
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26055
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26056
            //MUL
            t27 = t27 * t5.x;
            //Instruction 26057
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 26058
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 26059
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26060
        //ENDIF
        }
        //Instruction 26061
    //ENDIF
    }
    //Instruction 26062
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 26063
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26064
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26065
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 26066
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 26067
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 26068
    //NE
    tb27 = t25!=0.0;
    //Instruction 26069
    //LOG
    t4.x = log2(t25);
    //Instruction 26070
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26071
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26072
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 26073
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26074
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26075
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26076
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26077
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26078
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26079
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26080
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26081
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26082
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 26083
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26084
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 26085
    //MUL
    t25 = t25 * t27;
    //Instruction 26086
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 26087
    //MOV
    t4.y = t3.y;
    //Instruction 26088
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 26089
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 26090
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 26091
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 26092
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 26093
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 26094
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 26095
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 26096
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26097
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 26098
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 26099
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 26100
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 26101
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 26102
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 26103
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 26104
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 26105
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 26106
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 26107
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 26108
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 26109
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 26110
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 26111
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 26112
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 26113
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 26114
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 26115
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 26116
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 26117
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 26118
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 26119
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 26120
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 26121
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 26122
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 26123
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 26124
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 26125
    //MOV
    t5.x = t3.z;
    //Instruction 26126
    //MOV
    t5.y = t4.x;
    //Instruction 26127
    //MOV
    t5.z = t0.x;
    //Instruction 26128
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 26129
    //MOV
    t5.x = t3.x;
    //Instruction 26130
    //MOV
    t5.y = t4.y;
    //Instruction 26131
    //MOV
    t5.z = t0.y;
    //Instruction 26132
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 26133
    //MOV
    t0.x = t3.y;
    //Instruction 26134
    //MOV
    t0.y = t4.z;
    //Instruction 26135
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 26136
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 26137
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26138
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 26139
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 25899
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 25900
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25901
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 25902
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 25903
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 25904
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 25905
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 25906
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 25907
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 25908
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 25909
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 25910
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 25911
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 25912
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 25913
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 25914
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 25915
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 25916
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 25917
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 25918
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 25919
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 25920
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 25921
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 25922
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 25923
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 25924
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 25925
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25926
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 25927
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 25928
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25929
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25930
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 26882
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26883
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 26884
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 26885
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26886
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 26887
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 26888
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 26889
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 26890
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 26891
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 26892
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26893
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 26894
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 26895
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 26896
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26897
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 26898
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 26899
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26900
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 26901
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 26902
        //FRC
        t15.x = fract(t15.x);
        //Instruction 26903
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 26904
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 26905
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 26906
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 26907
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 26908
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26909
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 26910
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26911
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 26912
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 26913
        //IF
        if(tb29){
            //Instruction 26914
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 26915
            //FRC
            t4 = fract(t4);
            //Instruction 26916
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26917
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 26918
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 26919
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 26920
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 26921
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 26922
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26923
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26924
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26925
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26926
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26927
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26928
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26929
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 26930
            //SQRT
            t44 = sqrt(t44);
            //Instruction 26931
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 26932
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 26933
            //MUL
            t45 = t45 * t5.x;
            //Instruction 26934
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 26935
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 26936
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 26937
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 26938
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 26939
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 26940
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 26941
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 26942
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 26943
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 26944
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 26945
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 26946
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 26947
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 26948
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 26949
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 26950
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 26951
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 26952
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 26953
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 26954
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 26955
            //SQRT
            t45 = sqrt(t45);
            //Instruction 26956
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 26957
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 26958
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 26959
            //MUL
            t33 = t45 * t5.x;
            //Instruction 26960
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 26961
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 26962
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 26963
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 26964
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 26965
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 26966
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 26967
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26968
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 26969
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26970
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 26971
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26972
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 26973
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 26974
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 26975
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 26976
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 26977
            //LOG
            t43 = log2(t43);
            //Instruction 26978
            //MUL
            t29 = t43 * t15.y;
            //Instruction 26979
            //EXP
            t29 = exp2(t29);
            //Instruction 26980
            //MUL
            t43 = t5.y * t45;
            //Instruction 26981
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 26982
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 26983
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 26984
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 26985
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 26986
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 26987
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 26988
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 26989
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 26990
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 26991
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 26992
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 26993
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 26994
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 26995
            //MOV
            t10.z = t11.x;
            //Instruction 26996
            //MOV
            t10.w = t9.x;
            //Instruction 26997
            //MOV
            t12.z = t8.y;
            //Instruction 26998
            //MOV
            t12.w = t13.y;
            //Instruction 26999
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 27000
            //MOV
            t13.w = t12.y;
            //Instruction 27001
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 27002
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 27003
            //MOV
            t9.w = t10.y;
            //Instruction 27004
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 27005
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 27006
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 27007
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 27008
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 27009
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 27010
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 27011
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27012
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27013
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 27014
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 27015
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 27016
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 27017
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 27018
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27019
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 27020
        //ELSE
        } else {
            //Instruction 27021
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 27022
        //ENDIF
        }
        //Instruction 27023
    //ELSE
    } else {
        //Instruction 27024
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 27025
    //ENDIF
    }
    //Instruction 27026
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 27027
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 27028
    //IF
    if(tb16){
        //Instruction 27029
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 27030
        //IF
        if(tb16){
            //Instruction 27031
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27032
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 27033
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 27034
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 27035
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 27036
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27037
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27038
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27039
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27040
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27041
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27042
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 27043
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 27044
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27045
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 27046
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 27047
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 27048
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27049
            //FRC
            t0 = fract(t0);
            //Instruction 27050
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27051
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 27052
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27053
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27054
            //ADD
            t0 = t0 + t0;
            //Instruction 27055
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 27056
            //LT
            tb44 = t6.w<0.0;
            //Instruction 27057
            //MOV
            t6.y = (-t6.w);
            //Instruction 27058
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 27059
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 27060
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 27061
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 27062
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 27063
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 27064
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 27065
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27066
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27067
            //MUL
            t46 = t0.x * t46;
            //Instruction 27068
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 27069
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27070
            //MUL
            t44 = t44 * t45;
            //Instruction 27071
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 27072
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 27073
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27074
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27075
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27076
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 27077
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 27078
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27079
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 27080
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27081
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 27082
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 27083
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 27084
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 27085
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27086
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 27087
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 27088
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 27089
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27090
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27091
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 27092
        //ELSE
        } else {
            //Instruction 27093
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27094
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27095
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27096
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 27097
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27098
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 27099
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 27100
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27101
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 27102
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 27103
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27104
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27105
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27106
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 27107
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27108
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27109
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 27110
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 27111
            //LT
            tb16 = t0.w<0.0;
            //Instruction 27112
            //MOV
            t0.y = (-t0.w);
            //Instruction 27113
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 27114
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 27115
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 27116
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 27117
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 27118
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 27119
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 27120
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27121
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27122
            //MUL
            t45 = t45 * t5.x;
            //Instruction 27123
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 27124
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27125
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 27126
        //ENDIF
        }
        //Instruction 27127
    //ENDIF
    }
    //Instruction 27128
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 27129
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 27130
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27131
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 27132
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 27133
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 27134
    //NE
    tb45 = t44!=0.0;
    //Instruction 27135
    //LOG
    t4.x = log2(t44);
    //Instruction 27136
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 27137
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 27138
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 27139
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27140
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27141
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 27142
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 27143
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27144
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 27145
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27146
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 27147
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 27148
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 27149
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27150
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 27151
    //MUL
    t44 = t44 * t45;
    //Instruction 27152
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 27153
    //MOV
    t4.y = t3.y;
    //Instruction 27154
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 27155
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 27156
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 27157
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 27158
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 27159
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 27160
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 27161
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 27162
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 27163
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 27164
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 27165
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 27166
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 27167
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 27168
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 27169
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 27170
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 27171
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 27172
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 27173
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 27174
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 27175
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 27176
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 27177
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 27178
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 27179
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 27180
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 27181
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 27182
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 27183
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 27184
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 27185
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 27186
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 26859
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26860
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26861
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26862
    //LT
    tb0 = t10_1<0.0;
    //Instruction 26863
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 26864
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 26865
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 26866
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 26867
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 26868
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 26869
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 26870
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 26871
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26872
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 26873
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 26874
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 26875
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 26876
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 26877
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 26878
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 26879
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26880
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26881
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 25942
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 25943
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 25944
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 25945
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 25946
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 25947
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 25948
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 25949
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 25950
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 25951
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 25952
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 25953
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 25954
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 25955
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 25956
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 25957
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 25958
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 25959
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 25960
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 25961
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 25962
        //FRC
        t15.x = fract(t15.x);
        //Instruction 25963
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 25964
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 25965
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 25966
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 25967
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 25968
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 25969
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 25970
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 25971
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 25972
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 25973
        //IF
        if(tb29){
            //Instruction 25974
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 25975
            //FRC
            t4 = fract(t4);
            //Instruction 25976
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 25977
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 25978
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 25979
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 25980
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 25981
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 25982
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 25983
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 25984
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 25985
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 25986
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 25987
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 25988
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 25989
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 25990
            //SQRT
            t44 = sqrt(t44);
            //Instruction 25991
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 25992
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 25993
            //MUL
            t45 = t45 * t5.x;
            //Instruction 25994
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 25995
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 25996
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 25997
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 25998
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 25999
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 26000
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 26001
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 26002
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 26003
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 26004
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 26005
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 26006
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 26007
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 26008
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 26009
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 26010
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 26011
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 26012
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 26013
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 26014
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 26015
            //SQRT
            t45 = sqrt(t45);
            //Instruction 26016
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 26017
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 26018
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 26019
            //MUL
            t33 = t45 * t5.x;
            //Instruction 26020
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 26021
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 26022
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 26023
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 26024
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 26025
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 26026
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 26027
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26028
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 26029
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26030
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 26031
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26032
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 26033
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 26034
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 26035
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 26036
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 26037
            //LOG
            t43 = log2(t43);
            //Instruction 26038
            //MUL
            t29 = t43 * t15.y;
            //Instruction 26039
            //EXP
            t29 = exp2(t29);
            //Instruction 26040
            //MUL
            t43 = t5.y * t45;
            //Instruction 26041
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 26042
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 26043
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 26044
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 26045
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 26046
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 26047
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 26048
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 26049
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 26050
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 26051
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 26052
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 26053
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 26054
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 26055
            //MOV
            t10.z = t11.x;
            //Instruction 26056
            //MOV
            t10.w = t9.x;
            //Instruction 26057
            //MOV
            t12.z = t8.y;
            //Instruction 26058
            //MOV
            t12.w = t13.y;
            //Instruction 26059
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 26060
            //MOV
            t13.w = t12.y;
            //Instruction 26061
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 26062
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 26063
            //MOV
            t9.w = t10.y;
            //Instruction 26064
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 26065
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 26066
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 26067
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 26068
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 26069
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 26070
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 26071
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 26072
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 26073
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 26074
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 26075
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 26076
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 26077
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 26078
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26079
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 26080
        //ELSE
        } else {
            //Instruction 26081
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 26082
        //ENDIF
        }
        //Instruction 26083
    //ELSE
    } else {
        //Instruction 26084
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 26085
    //ENDIF
    }
    //Instruction 26086
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 26087
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 26088
    //IF
    if(tb16){
        //Instruction 26089
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 26090
        //IF
        if(tb16){
            //Instruction 26091
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26092
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26093
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26094
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 26095
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 26096
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26097
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26098
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26099
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26100
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26101
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 26102
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 26103
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 26104
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26105
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 26106
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 26107
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 26108
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26109
            //FRC
            t0 = fract(t0);
            //Instruction 26110
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26111
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 26112
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26113
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26114
            //ADD
            t0 = t0 + t0;
            //Instruction 26115
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 26116
            //LT
            tb44 = t6.w<0.0;
            //Instruction 26117
            //MOV
            t6.y = (-t6.w);
            //Instruction 26118
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26119
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 26120
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 26121
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 26122
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 26123
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 26124
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 26125
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26126
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26127
            //MUL
            t46 = t0.x * t46;
            //Instruction 26128
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 26129
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26130
            //MUL
            t44 = t44 * t45;
            //Instruction 26131
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 26132
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26133
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26134
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26135
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26136
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26137
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 26138
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26139
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 26140
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26141
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 26142
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 26143
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 26144
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 26145
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26146
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 26147
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 26148
            //MAD
            t4.xyz 