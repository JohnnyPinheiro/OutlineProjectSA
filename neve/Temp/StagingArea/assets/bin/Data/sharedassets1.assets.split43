xy;
    //Instruction 60185
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 60186
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 60187
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 60188
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 60189
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 60190
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 60191
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 60192
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 60193
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 60194
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 60195
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 60196
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 60197
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 60198
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 60199
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 60200
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 60201
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 60202
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    //Instruction 60057
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 60058
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60059
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 60060
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 60061
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 60062
    //SAMPLE_C_LZ
    vec3 txVec52 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec52, 0.0);
    //Instruction 60063
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 60064
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 60065
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 60066
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 60067
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 60068
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 60069
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 60070
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 60071
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 60072
    //MOV
    t0.w = 1.0;
    //Instruction 60073
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 60074
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 60075
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 60076
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60077
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60078
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60079
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60080
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60081
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60082
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60083
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  highp vec3 lightColor0_47;
  lightColor0_47 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_48;
  lightColor1_48 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_49;
  lightColor2_49 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_50;
  lightColor3_50 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_51;
  lightAttenSq_51 = unity_4LightAtten0;
  highp vec3 normal_52;
  normal_52 = worldNormal_4;
  highp vec3 col_53;
  highp vec4 ndotl_54;
  highp vec4 lengthSq_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosZ0 - tmpvar_31.z);
  lengthSq_55 = (tmpvar_56 * tmpvar_56);
  lengthSq_55 = (lengthSq_55 + (tmpvar_57 * tmpvar_57));
  lengthSq_55 = (lengthSq_55 + (tmpvar_58 * tmpvar_58));
  ndotl_54 = (tmpvar_56 * normal_52.x);
  ndotl_54 = (ndotl_54 + (tmpvar_57 * normal_52.y));
  ndotl_54 = (ndotl_54 + (tmpvar_58 * normal_52.z));
  highp vec4 tmpvar_59;
  tmpvar_59 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_54 * inversesqrt(lengthSq_55)));
  ndotl_54 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * (1.0/((1.0 + 
    (lengthSq_55 * lightAttenSq_51)
  ))));
  col_53 = (lightColor0_47 * tmpvar_60.x);
  col_53 = (col_53 + (lightColor1_48 * tmpvar_60.y));
  col_53 = (col_53 + (lightColor2_49 * tmpvar_60.z));
  col_53 = (col_53 + (lightColor3_50 * tmpvar_60.w));
  tmpvar_6 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + col_53);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp float t9;
bool tb9;
bool tb10;
highp vec2 t18;
bool tb18;
highp float t27;
highp uint tu27;
void main()
{
    //Instruction 60162
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 60163
    //LT
    tb18 = 0.0<_InstanceData.x;
    //Instruction 60164
    //MOVC
    t1 = (bool(tb18)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60165
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 60166
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 60167
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60168
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 60169
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60170
    //MUL
    t18.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 60171
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60172
    //MAD
    t0.xy = t18.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 60173
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 60174
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 60175
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60176
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t9;
    //Instruction 60177
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60178
    //ADD
    t18.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 60179
    //MUL
    t27 = in_COLOR0.w * 255.000000;
    //Instruction 60180
    //FTOU
    tu27 = uint(t27);
    //Instruction 60181
    //MUL
    t18.x = t18.x * _TreeSize[int(tu27) + 0].x;
    //Instruction 60182
    //MUL
    t18.x = t1.x * t18.x;
    //Instruction 60183
    //MUL
    t2.xyz = t18.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 60184
    //MAD
    t18.x = in_TEXCOORD0.y * _TreeSize[int(tu27) + 0].y + _TreeSize[int(tu27) + 0].z;
    //Instruction 60185
    //MAD
    t2.w = t18.x * t1.y + t2.y;
    //Instruction 60186
    //ADD
    t18.x = t1.z + _CameraXZAngle;
    //Instruction 60187
    //MAD
    t18.x = t18.x * _TreeInfo[int(tu27) + 0].y + 0.500000;
    //Instruction 60188
    //ROUND_NI
    t18.x = floor(t18.x);
    //Instruction 60189
    //DIV
    t18.x = t18.x / _TreeInfo[int(tu27) + 0].x;
    //Instruction 60190
    //MAD
    t9 = (-t9) * 0.250000 + t2.w;
    //Instruction 60191
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 60192
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 60193
    //LOG
    t1.x = log2(t9);
    //Instruction 60194
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 60195
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 60196
    //NE
    tb10 = t9!=0.0;
    //Instruction 60197
    //MOVC
    t9 = (tb10) ? t1.x : t9;
    //Instruction 60198
    //MUL
    t0.x = t9 * t0.x;
    //Instruction 60199
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 60200
    //MOV
    t1.y = t2.w;
    //Instruction 60201
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 60202
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 60203
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 60204
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 60205
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 60206
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 60207
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 60208
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 60209
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 60210
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 60211
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 60212
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 60213
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 60214
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 60215
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 60216
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 60217
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 60218
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 60219
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 60220
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 60221
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 60222
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 60223
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 60224
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 60225
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 60226
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 60227
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 60228
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 60229
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 60230
    //MUL
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 60231
    //MUL
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 60232
    //MUL
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 60233
    //ADD
    t3 = t3 + t5;
    //Instruction 60234
    //MUL
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 60235
    //MUL
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 60236
    //MUL
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 60237
    //ADD
    t3 = t3 + t5;
    //Instruction 60238
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 60239
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 60240
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 60241
    //MUL
    t10_6.xyz = t4.xyz * t3.wxy;
    //Instruction 60242
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 60243
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 60244
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 60245
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 60246
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 60247
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 60248
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 60249
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 60250
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 60251
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 60252
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 60253
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 60254
    //GE
    tb0 = t18.x>=(-t18.x);
    //Instruction 60255
    //FRC
    t9 = fract(abs(t18.x));
    //Instruction 60256
    //MOVC
    t0.x = (tb0) ? t9 : (-t9);
    //Instruction 60257
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu27) + 0].x + _TreeInfo[int(tu27) + 0].z;
    //Instruction 60258
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 60259
    //LT
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 60260
    //MAD
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60261
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60262
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t4.xy;
    //Instruction 60263
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 60264
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 60265
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 60266
    //ADD
    t2 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 60267
    //MUL
    t5 = t3.yyyy * t4;
    //Instruction 60268
    //MUL
    t4 = t4 * t4;
    //Instruction 60269
    //MAD
    t4 = t0 * t0 + t4;
    //Instruction 60270
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 60271
    //MAD
    t0 = t2 * t3.wwww + t0;
    //Instruction 60272
    //MAD
    t2 = t2 * t2 + t4;
    //Instruction 60273
    //RSQ
    t4 = inversesqrt(t2);
    //Instruction 60274
    //MAD
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 60275
    //DIV
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    //Instruction 60276
    //MUL
    t0 = t0 * t4;
    //Instruction 60277
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 60278
    //MUL
    t0 = t2 * t0;
    //Instruction 60279
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 60280
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 60281
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 60282
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 60283
    //MUL
    t16_7.x = t3.y * t3.y;
    //Instruction 60284
    //MAD
    t16_7.x = t3.x * t3.x + (-t16_7.x);
    //Instruction 60285
    //MUL
    t16_2 = t3.ywzx * t3;
    //Instruction 60286
    //DP4
    t16_8.x = dot(unity_SHBr, t16_2);
    //Instruction 60287
    //DP4
    t16_8.y = dot(unity_SHBg, t16_2);
    //Instruction 60288
    //DP4
    t16_8.z = dot(unity_SHBb, t16_2);
    //Instruction 60289
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 60290
    //ADD
    t0.xyz = t0.xyz + t16_7.xyz;
    //Instruction 60291
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 60292
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 60293
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 60294
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 60295
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 60296
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 60297
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 60298
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 60299
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 60300
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 60301
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    //Instruction 60135
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 60136
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60137
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 60138
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 60139
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 60140
    //SAMPLE_C_LZ
    vec3 txVec68 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec68, 0.0);
    //Instruction 60141
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 60142
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 60143
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 60144
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 60145
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 60146
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 60147
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 60148
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 60149
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 60150
    //MOV
    t0.w = 1.0;
    //Instruction 60151
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 60152
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 60153
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 60154
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60155
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60156
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60157
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60158
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60159
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60160
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60161
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
bool tb8;
highp float t10;
highp uint tu10;
highp vec2 t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 60334
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 60335
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60336
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60337
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 60338
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 60339
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60340
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60341
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60342
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60343
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60344
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60345
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60346
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 60347
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60348
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 60349
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60350
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 60351
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 60352
    //FTOU
    tu10 = uint(t10);
    //Instruction 60353
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 60354
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 60355
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 60356
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 60357
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 60358
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 60359
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 60360
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 60361
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 60362
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 60363
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 60364
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 60365
    //LOG
    t16.x = log2(t8.x);
    //Instruction 60366
    //MUL
    t16.x = t16.x * _ST_WindGlobal.w;
    //Instruction 60367
    //EXP
    t16.x = exp2(t16.x);
    //Instruction 60368
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 60369
    //MOVC
    t8.x = (tb25) ? t16.x : t8.x;
    //Instruction 60370
    //MUL
    t8.x = t8.x * t24;
    //Instruction 60371
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 60372
    //MOV
    t4.y = t3.w;
    //Instruction 60373
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 60374
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 60375
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 60376
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 60377
    //SQRT
    t25 = sqrt(t25);
    //Instruction 60378
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 60379
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 60380
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 60381
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 60382
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 60383
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 60384
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 60385
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 60386
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60387
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 60388
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 60389
    //MAD
    t8.xyz = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 60390
    //ADD
    t8.xyz = t8.xyz + _Object2World[3].xyz;
    //Instruction 60391
    //MOV
    vs_TEXCOORD0.w = t8.x;
    //Instruction 60392
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 60393
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 60394
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 60395
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 60396
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 60397
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 60398
    //ADD
    t3 = t3 + t4;
    //Instruction 60399
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 60400
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 60401
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 60402
    //ADD
    t3 = t3 + t4;
    //Instruction 60403
    //DP3
    t8.x = dot(t3.xyw, t3.xyw);
    //Instruction 60404
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 60405
    //MUL
    t3 = t8.xxxx * t3;
    //Instruction 60406
    //MUL
    t2.xzw = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 60407
    //MAD
    t2.xzw = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xzw;
    //Instruction 60408
    //MAD
    t2.xzw = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xzw;
    //Instruction 60409
    //DP3
    t8.x = dot(t2.xzw, t2.xzw);
    //Instruction 60410
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 60411
    //MUL
    t2.xzw = t8.xxx * t2.xzw;
    //Instruction 60412
    //MUL
    t10_6.xyz = t2.xzw * t3.wxy;
    //Instruction 60413
    //MAD
    t10_6.xyz = t3.ywx * t2.zwx + (-t10_6.xyz);
    //Instruction 60414
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 60415
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 60416
    //MOV
    vs_TEXCOORD0.x = t2.w;
    //Instruction 60417
    //MOV
    vs_TEXCOORD1.w = t8.y;
    //Instruction 60418
    //MOV
    vs_TEXCOORD2.w = t8.z;
    //Instruction 60419
    //MOV
    vs_TEXCOORD1.x = t2.x;
    //Instruction 60420
    //MOV
    vs_TEXCOORD2.x = t2.z;
    //Instruction 60421
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 60422
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 60423
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 60424
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 60425
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 60426
    //ADD
    t8.x = t1.y + t1.x;
    //Instruction 60427
    //ADD
    t8.x = t1.z + t8.x;
    //Instruction 60428
    //FRC
    t8.x = fract(t8.x);
    //Instruction 60429
    //MUL
    t8.x = t8.x * _HueVariation.w;
    t8.x = clamp(t8.x, 0.0, 1.0);
    //Instruction 60430
    //MOV
    vs_TEXCOORD4.z = t8.x;
    //Instruction 60431
    //GE
    tb8 = t0.x>=(-t0.x);
    //Instruction 60432
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 60433
    //MOVC
    t0.x = (tb8) ? t0.x : (-t0.x);
    //Instruction 60434
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 60435
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 60436
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 60437
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60438
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60439
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t1.xy;
    //Instruction 60440
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 60441
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 60442
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 60443
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 60444
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 60445
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 60446
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 60447
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 60302
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 60303
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60304
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 60305
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 60306
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 60307
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 60308
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60309
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 60310
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 60311
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 60312
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 60313
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 60314
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 60315
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 60316
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 60317
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 60318
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 60319
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 60320
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 60321
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 60322
    //MOV
    t0.w = 1.0;
    //Instruction 60323
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 60324
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 60325
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 60326
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60327
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60328
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60329
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60330
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60331
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60332
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60333
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  highp vec3 lightColor0_47;
  lightColor0_47 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_48;
  lightColor1_48 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_49;
  lightColor2_49 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_50;
  lightColor3_50 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_51;
  lightAttenSq_51 = unity_4LightAtten0;
  highp vec3 normal_52;
  normal_52 = worldNormal_4;
  highp vec3 col_53;
  highp vec4 ndotl_54;
  highp vec4 lengthSq_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosZ0 - tmpvar_31.z);
  lengthSq_55 = (tmpvar_56 * tmpvar_56);
  lengthSq_55 = (lengthSq_55 + (tmpvar_57 * tmpvar_57));
  lengthSq_55 = (lengthSq_55 + (tmpvar_58 * tmpvar_58));
  ndotl_54 = (tmpvar_56 * normal_52.x);
  ndotl_54 = (ndotl_54 + (tmpvar_57 * normal_52.y));
  ndotl_54 = (ndotl_54 + (tmpvar_58 * normal_52.z));
  highp vec4 tmpvar_59;
  tmpvar_59 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_54 * inversesqrt(lengthSq_55)));
  ndotl_54 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_59 * (1.0/((1.0 + 
    (lengthSq_55 * lightAttenSq_51)
  ))));
  col_53 = (lightColor0_47 * tmpvar_60.x);
  col_53 = (col_53 + (lightColor1_48 * tmpvar_60.y));
  col_53 = (col_53 + (lightColor2_49 * tmpvar_60.z));
  col_53 = (col_53 + (lightColor3_50 * tmpvar_60.w));
  tmpvar_6 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + col_53);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 60480
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 60481
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60482
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60483
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 60484
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 60485
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60486
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60487
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60488
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60489
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60490
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60491
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60492
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 60493
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60494
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 60495
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60496
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 60497
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 60498
    //FTOU
    tu10 = uint(t10);
    //Instruction 60499
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 60500
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 60501
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 60502
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 60503
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 60504
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 60505
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 60506
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 60507
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 60508
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 60509
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 60510
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 60511
    //LOG
    t16 = log2(t8.x);
    //Instruction 60512
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 60513
    //EXP
    t16 = exp2(t16);
    //Instruction 60514
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 60515
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 60516
    //MUL
    t8.x = t8.x * t24;
    //Instruction 60517
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 60518
    //MOV
    t4.y = t3.w;
    //Instruction 60519
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 60520
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 60521
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 60522
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 60523
    //SQRT
    t25 = sqrt(t25);
    //Instruction 60524
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 60525
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 60526
    //LT
    tb25 = 0.0<t16_5.x;
    //Instruction 60527
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 60528
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 60529
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 60530
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 60531
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 60532
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60533
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 60534
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 60535
    //MAD
    t8.xyz = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 60536
    //ADD
    t8.xyz = t8.xyz + _Object2World[3].xyz;
    //Instruction 60537
    //MOV
    vs_TEXCOORD0.w = t8.x;
    //Instruction 60538
    //MUL
    t2.xzw = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 60539
    //MAD
    t2.xzw = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xzw;
    //Instruction 60540
    //MAD
    t2.xzw = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xzw;
    //Instruction 60541
    //DP3
    t25 = dot(t2.xzw, t2.xzw);
    //Instruction 60542
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 60543
    //MUL
    t2.xzw = vec3(t25) * t2.xzw;
    //Instruction 60544
    //MOV
    vs_TEXCOORD0.x = t2.w;
    //Instruction 60545
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 60546
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 60547
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 60548
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 60549
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 60550
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 60551
    //ADD
    t3 = t3 + t4;
    //Instruction 60552
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 60553
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 60554
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 60555
    //ADD
    t3 = t3 + t4;
    //Instruction 60556
    //DP3
    t25 = dot(t3.xyw, t3.xyw);
    //Instruction 60557
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 60558
    //MUL
    t3 = vec4(t25) * t3;
    //Instruction 60559
    //MUL
    t10_6.xyz = t2.xzw * t3.wxy;
    //Instruction 60560
    //MAD
    t10_6.xyz = t3.ywx * t2.zwx + (-t10_6.xyz);
    //Instruction 60561
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 60562
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 60563
    //MOV
    vs_TEXCOORD1.x = t2.x;
    //Instruction 60564
    //MOV
    vs_TEXCOORD2.x = t2.z;
    //Instruction 60565
    //MOV
    vs_TEXCOORD1.w = t8.y;
    //Instruction 60566
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 60567
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 60568
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 60569
    //MOV
    vs_TEXCOORD2.w = t8.z;
    //Instruction 60570
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 60571
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 60572
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 60573
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 60574
    //FRC
    t1.x = fract(t1.x);
    //Instruction 60575
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 60576
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 60577
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 60578
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 60579
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 60580
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 60581
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 60582
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 60583
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60584
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60585
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 60586
    //ADD
    t1 = (-t8.zzzz) + unity_4LightPosZ0;
    //Instruction 60587
    //ADD
    t2 = (-t8.xxxx) + unity_4LightPosX0;
    //Instruction 60588
    //ADD
    t0 = (-t8.yyyy) + unity_4LightPosY0;
    //Instruction 60589
    //MUL
    t4 = t3.yyyy * t0;
    //Instruction 60590
    //MUL
    t0 = t0 * t0;
    //Instruction 60591
    //MAD
    t0 = t2 * t2 + t0;
    //Instruction 60592
    //MAD
    t2 = t2 * t3.xxxx + t4;
    //Instruction 60593
    //MAD
    t2 = t1 * t3.wwww + t2;
    //Instruction 60594
    //MAD
    t0 = t1 * t1 + t0;
    //Instruction 60595
    //RSQ
    t1 = inversesqrt(t0);
    //Instruction 60596
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 60597
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 60598
    //MUL
    t1 = t1 * t2;
    //Instruction 60599
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 60600
    //MUL
    t0 = t0 * t1;
    //Instruction 60601
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 60602
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 60603
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 60604
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 60605
    //MUL
    t16_5.x = t3.y * t3.y;
    //Instruction 60606
    //MAD
    t16_5.x = t3.x * t3.x + (-t16_5.x);
    //Instruction 60607
    //MUL
    t16_1 = t3.ywzx * t3;
    //Instruction 60608
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 60609
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 60610
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 60611
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_7.xyz;
    //Instruction 60612
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 60613
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 60614
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 60448
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 60449
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60450
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 60451
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 60452
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 60453
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 60454
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60455
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 60456
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 60457
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 60458
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 60459
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 60460
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 60461
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 60462
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 60463
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 60464
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 60465
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 60466
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 60467
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 60468
    //MOV
    t0.w = 1.0;
    //Instruction 60469
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 60470
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 60471
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 60472
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60473
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60474
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60475
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60476
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60477
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60478
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60479
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_31;
  tmpvar_31 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_31;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_3 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_40;
  tmpvar_40 = -(tmpvar_39);
  worldBinormal_2 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.x;
  tmpvar_41.y = worldBinormal_2.x;
  tmpvar_41.z = worldNormal_4.x;
  tmpvar_41.w = tmpvar_32.x;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.y;
  tmpvar_42.y = worldBinormal_2.y;
  tmpvar_42.z = worldNormal_4.y;
  tmpvar_42.w = tmpvar_32.y;
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_3.z;
  tmpvar_43.y = worldBinormal_2.z;
  tmpvar_43.z = worldNormal_4.z;
  tmpvar_43.w = tmpvar_32.z;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_4;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  highp vec3 lightColor0_48;
  lightColor0_48 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_49;
  lightColor1_49 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_50;
  lightColor2_50 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_51;
  lightColor3_51 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_52;
  lightAttenSq_52 = unity_4LightAtten0;
  highp vec3 normal_53;
  normal_53 = worldNormal_4;
  highp vec3 col_54;
  highp vec4 ndotl_55;
  highp vec4 lengthSq_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosX0 - tmpvar_32.x);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosY0 - tmpvar_32.y);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosZ0 - tmpvar_32.z);
  lengthSq_56 = (tmpvar_57 * tmpvar_57);
  lengthSq_56 = (lengthSq_56 + (tmpvar_58 * tmpvar_58));
  lengthSq_56 = (lengthSq_56 + (tmpvar_59 * tmpvar_59));
  ndotl_55 = (tmpvar_57 * normal_53.x);
  ndotl_55 = (ndotl_55 + (tmpvar_58 * normal_53.y));
  ndotl_55 = (ndotl_55 + (tmpvar_59 * normal_53.z));
  highp vec4 tmpvar_60;
  tmpvar_60 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_55 * inversesqrt(lengthSq_56)));
  ndotl_55 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * (1.0/((1.0 + 
    (lengthSq_56 * lightAttenSq_52)
  ))));
  col_54 = (lightColor0_48 * tmpvar_61.x);
  col_54 = (col_54 + (lightColor1_49 * tmpvar_61.y));
  col_54 = (col_54 + (lightColor2_50 * tmpvar_61.z));
  col_54 = (col_54 + (lightColor3_51 * tmpvar_61.w));
  tmpvar_6 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + col_54);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 60922
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 60923
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60924
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60925
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 60926
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 60927
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60928
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60929
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60930
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60931
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60932
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60933
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60934
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 60935
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60936
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 60937
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60938
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 60939
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 60940
    //FTOU
    tu10 = uint(t10);
    //Instruction 60941
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 60942
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 60943
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 60944
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 60945
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 60946
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 60947
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 60948
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 60949
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 60950
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 60951
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 60952
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 60953
    //LOG
    t16 = log2(t8.x);
    //Instruction 60954
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 60955
    //EXP
    t16 = exp2(t16);
    //Instruction 60956
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 60957
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 60958
    //MUL
    t8.x = t8.x * t24;
    //Instruction 60959
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 60960
    //MOV
    t4.y = t3.w;
    //Instruction 60961
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 60962
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 60963
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 60964
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 60965
    //SQRT
    t25 = sqrt(t25);
    //Instruction 60966
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 60967
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 60968
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 60969
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 60970
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 60971
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 60972
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 60973
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 60974
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60975
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 60976
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 60977
    //MAD
    t2.xzw = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 60978
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 60979
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 60980
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 60981
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 60982
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 60983
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 60984
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 60985
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 60986
    //ADD
    t3 = t3 + t4;
    //Instruction 60987
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 60988
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 60989
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 60990
    //ADD
    t3 = t3 + t4;
    //Instruction 60991
    //DP3
    t25 = dot(t3.xyw, t3.xyw);
    //Instruction 60992
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 60993
    //MUL
    t3 = vec4(t25) * t3;
    //Instruction 60994
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 60995
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 60996
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 60997
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 60998
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 60999
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 61000
    //MUL
    t10_6.xyz = t3.wxy * t4.xyz;
    //Instruction 61001
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 61002
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 61003
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 61004
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 61005
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 61006
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 61007
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 61008
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 61009
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 61010
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 61011
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 61012
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 61013
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61014
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 61015
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 61016
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61017
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61018
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 61019
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 61020
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 61021
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 61022
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 61023
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61024
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61025
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61026
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61027
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 61028
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 61029
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 61030
    //MUL
    t16_1 = t3.ywzx * t3;
    //Instruction 61031
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 61032
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 61033
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 61034
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 61035
    //MUL
    t1 = t8.yyyy * _Object2World[1];
    //Instruction 61036
    //MAD
    t1 = _Object2World[0] * t8.xxxx + t1;
    //Instruction 61037
    //MAD
    t0 = _Object2World[2] * t8.zzzz + t1;
    //Instruction 61038
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61039
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61040
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61041
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61042
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61043
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 61044
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 60886
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 60887
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60888
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 60889
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 60890
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 60891
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 60892
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60893
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 60894
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 60895
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 60896
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 60897
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 60898
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 60899
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 60900
    //SAMPLE_C_LZ
    vec3 txVec63 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec63, 0.0);
    //Instruction 60901
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 60902
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 60903
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 60904
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 60905
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 60906
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 60907
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 60908
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 60909
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 60910
    //MOV
    t0.w = 1.0;
    //Instruction 60911
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 60912
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 60913
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 60914
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60915
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60916
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60917
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60918
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60919
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60920
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60921
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_31;
  tmpvar_31 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_31;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_36;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * _BillboardTangent));
  worldTangent_3 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_40;
  tmpvar_40 = -(tmpvar_39);
  worldBinormal_2 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.x;
  tmpvar_41.y = worldBinormal_2.x;
  tmpvar_41.z = worldNormal_4.x;
  tmpvar_41.w = tmpvar_32.x;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.y;
  tmpvar_42.y = worldBinormal_2.y;
  tmpvar_42.z = worldNormal_4.y;
  tmpvar_42.w = tmpvar_32.y;
  highp vec4 tmpvar_43;
  tmpvar_43.x = worldTangent_3.z;
  tmpvar_43.y = worldBinormal_2.z;
  tmpvar_43.z = worldNormal_4.z;
  tmpvar_43.w = tmpvar_32.z;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_4;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  highp vec3 lightColor0_48;
  lightColor0_48 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_49;
  lightColor1_49 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_50;
  lightColor2_50 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_51;
  lightColor3_51 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_52;
  lightAttenSq_52 = unity_4LightAtten0;
  highp vec3 normal_53;
  normal_53 = worldNormal_4;
  highp vec3 col_54;
  highp vec4 ndotl_55;
  highp vec4 lengthSq_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosX0 - tmpvar_32.x);
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosY0 - tmpvar_32.y);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosZ0 - tmpvar_32.z);
  lengthSq_56 = (tmpvar_57 * tmpvar_57);
  lengthSq_56 = (lengthSq_56 + (tmpvar_58 * tmpvar_58));
  lengthSq_56 = (lengthSq_56 + (tmpvar_59 * tmpvar_59));
  ndotl_55 = (tmpvar_57 * normal_53.x);
  ndotl_55 = (ndotl_55 + (tmpvar_58 * normal_53.y));
  ndotl_55 = (ndotl_55 + (tmpvar_59 * normal_53.z));
  highp vec4 tmpvar_60;
  tmpvar_60 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_55 * inversesqrt(lengthSq_56)));
  ndotl_55 = tmpvar_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * (1.0/((1.0 + 
    (lengthSq_56 * lightAttenSq_52)
  ))));
  col_54 = (lightColor0_48 * tmpvar_61.x);
  col_54 = (col_54 + (lightColor1_49 * tmpvar_61.y));
  col_54 = (col_54 + (lightColor2_50 * tmpvar_61.z));
  col_54 = (col_54 + (lightColor3_51 * tmpvar_61.w));
  tmpvar_6 = ((x2_46 + (unity_SHC.xyz * 
    ((normal_45.x * normal_45.x) - (normal_45.y * normal_45.y))
  )) + col_54);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_41;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_43;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec2 t10;
highp float t11;
highp uint tu11;
highp float t18;
highp vec2 t20;
highp float t27;
highp float t28;
bool tb28;
void main()
{
    //Instruction 61081
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 61082
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61083
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61084
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 61085
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 61086
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61087
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61088
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61089
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61090
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61091
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61092
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61093
    //MAD
    t27 = t2.y * t2.y + t2.x;
    //Instruction 61094
    //DIV
    t28 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61095
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t28;
    //Instruction 61096
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61097
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 61098
    //MUL
    t11 = in_COLOR0.w * 255.000000;
    //Instruction 61099
    //FTOU
    tu11 = uint(t11);
    //Instruction 61100
    //MUL
    t2.x = t2.x * _TreeSize[int(tu11) + 0].x;
    //Instruction 61101
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 61102
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 61103
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    //Instruction 61104
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 61105
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 61106
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.500000;
    //Instruction 61107
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 61108
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    //Instruction 61109
    //MAD
    t9.x = (-t28) * 0.250000 + t3.w;
    //Instruction 61110
    //MAX
    t9.x = max(t9.x, 0.0);
    //Instruction 61111
    //MUL
    t9.x = t9.x * _ST_WindGlobal.z;
    //Instruction 61112
    //LOG
    t18 = log2(t9.x);
    //Instruction 61113
    //MUL
    t18 = t18 * _ST_WindGlobal.w;
    //Instruction 61114
    //EXP
    t18 = exp2(t18);
    //Instruction 61115
    //NE
    tb28 = t9.x!=0.0;
    //Instruction 61116
    //MOVC
    t9.x = (tb28) ? t18 : t9.x;
    //Instruction 61117
    //MUL
    t9.x = t9.x * t27;
    //Instruction 61118
    //MAD
    t4.xz = _ST_WindVector.xz * t9.xx + t3.xz;
    //Instruction 61119
    //MOV
    t4.y = t3.w;
    //Instruction 61120
    //DP3
    t9.x = dot(t4.xyz, t4.xyz);
    //Instruction 61121
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 61122
    //MUL
    t9.xyz = t9.xxx * t4.xyz;
    //Instruction 61123
    //DP3
    t28 = dot(t3.xzw, t3.xzw);
    //Instruction 61124
    //SQRT
    t28 = sqrt(t28);
    //Instruction 61125
    //MUL
    t9.xyz = t9.xyz * vec3(t28);
    //Instruction 61126
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 61127
    //LT
    tb28 = 0.0<t16_5;
    //Instruction 61128
    //MOVC
    t9.xyz = (bool(tb28)) ? t9.xyz : t3.xwz;
    //Instruction 61129
    //ADD
    t9.xyz = t9.xyz + in_POSITION0.xyz;
    //Instruction 61130
    //MUL
    t3 = t9.yyyy * glstate_matrix_mvp[1];
    //Instruction 61131
    //MAD
    t3 = glstate_matrix_mvp[0] * t9.xxxx + t3;
    //Instruction 61132
    //MAD
    t3 = glstate_matrix_mvp[2] * t9.zzzz + t3;
    //Instruction 61133
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61134
    //MUL
    t2.xzw = t9.yyy * _Object2World[1].xyz;
    //Instruction 61135
    //MAD
    t2.xzw = _Object2World[0].xyz * t9.xxx + t2.xzw;
    //Instruction 61136
    //MAD
    t2.xzw = _Object2World[2].xyz * t9.zzz + t2.xzw;
    //Instruction 61137
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 61138
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 61139
    //MUL
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 61140
    //MAD
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    //Instruction 61141
    //MAD
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    //Instruction 61142
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 61143
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 61144
    //MUL
    t3.xyz = vec3(t28) * t3.xyz;
    //Instruction 61145
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 61146
    //MUL
    t4.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 61147
    //MUL
    t4.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 61148
    //MUL
    t4.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 61149
    //MUL
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 61150
    //MUL
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 61151
    //MUL
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 61152
    //ADD
    t4 = t4 + t5;
    //Instruction 61153
    //MUL
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 61154
    //MUL
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 61155
    //MUL
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 61156
    //ADD
    t4 = t4 + t5;
    //Instruction 61157
    //DP3
    t28 = dot(t4.xyw, t4.xyw);
    //Instruction 61158
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 61159
    //MUL
    t4 = vec4(t28) * t4;
    //Instruction 61160
    //MUL
    t10_6.xyz = t3.xyz * t4.wxy;
    //Instruction 61161
    //MAD
    t10_6.xyz = t4.ywx * t3.yzx + (-t10_6.xyz);
    //Instruction 61162
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 61163
    //MOV
    vs_TEXCOORD0.z = t4.x;
    //Instruction 61164
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 61165
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 61166
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 61167
    //MOV
    vs_TEXCOORD1.z = t4.y;
    //Instruction 61168
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 61169
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 61170
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 61171
    //MOV
    vs_TEXCOORD2.z = t4.w;
    //Instruction 61172
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61173
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 61174
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 61175
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61176
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61177
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 61178
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 61179
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 61180
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 61181
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    //Instruction 61182
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61183
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61184
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61185
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61186
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t10.xy : t3.xy;
    //Instruction 61187
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 61188
    //ADD
    t3 = (-t2.zzzz) + unity_4LightPosY0;
    //Instruction 61189
    //ADD
    t2 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 61190
    //MUL
    t5 = t4.yyyy * t3;
    //Instruction 61191
    //MUL
    t3 = t3 * t3;
    //Instruction 61192
    //MAD
    t3 = t1 * t1 + t3;
    //Instruction 61193
    //MAD
    t1 = t1 * t4.xxxx + t5;
    //Instruction 61194
    //MAD
    t1 = t2 * t4.wwww + t1;
    //Instruction 61195
    //MAD
    t2 = t2 * t2 + t3;
    //Instruction 61196
    //RSQ
    t3 = inversesqrt(t2);
    //Instruction 61197
    //MAD
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61198
    //DIV
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    //Instruction 61199
    //MUL
    t1 = t1 * t3;
    //Instruction 61200
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61201
    //MUL
    t1 = t2 * t1;
    //Instruction 61202
    //MUL
    t2.xyz = t1.yyy * unity_LightColor[1].xyz;
    //Instruction 61203
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t1.xxx + t2.xyz;
    //Instruction 61204
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t2.xyz;
    //Instruction 61205
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    //Instruction 61206
    //MUL
    t16_7.x = t4.y * t4.y;
    //Instruction 61207
    //MAD
    t16_7.x = t4.x * t4.x + (-t16_7.x);
    //Instruction 61208
    //MUL
    t16_2 = t4.ywzx * t4;
    //Instruction 61209
    //DP4
    t16_8.x = dot(unity_SHBr, t16_2);
    //Instruction 61210
    //DP4
    t16_8.y = dot(unity_SHBg, t16_2);
    //Instruction 61211
    //DP4
    t16_8.z = dot(unity_SHBb, t16_2);
    //Instruction 61212
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 61213
    //ADD
    t1.xyz = t1.xyz + t16_7.xyz;
    //Instruction 61214
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 61215
    //MUL
    t1 = t9.yyyy * _Object2World[1];
    //Instruction 61216
    //MAD
    t1 = _Object2World[0] * t9.xxxx + t1;
    //Instruction 61217
    //MAD
    t0 = _Object2World[2] * t9.zzzz + t1;
    //Instruction 61218
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61219
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61220
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61221
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61222
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61223
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 61224
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 61045
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61046
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61047
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 61048
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 61049
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 61050
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 61051
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61052
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 61053
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 61054
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 61055
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 61056
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 61057
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 61058
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61059
    //SAMPLE_C_LZ
    vec3 txVec64 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec64, 0.0);
    //Instruction 61060
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61061
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 61062
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 61063
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61064
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61065
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61066
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 61067
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 61068
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 61069
    //MOV
    t0.w = 1.0;
    //Instruction 61070
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 61071
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 61072
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 61073
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61074
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61075
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61076
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61077
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61078
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61079
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61080
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_2;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 61244
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61245
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61246
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61247
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61248
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61249
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 61250
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 61251
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61252
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61253
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61254
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61255
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61256
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61257
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61258
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61259
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61260
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61261
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 61262
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61263
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 61264
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 61265
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 61266
    //MUL
    t3.y = t0.y * t23;
    //Instruction 61267
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 61268
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 61269
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 61270
    //LOG
    t23 = log2(t9);
    //Instruction 61271
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 61272
    //EXP
    t23 = exp2(t23);
    //Instruction 61273
    //NE
    tb24 = t9!=0.0;
    //Instruction 61274
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 61275
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 61276
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61277
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 61278
    //MUL
    t9 = t0.x * t9;
    //Instruction 61279
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 61280
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 61281
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 61282
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61283
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 61284
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61285
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 61286
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 61287
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 61288
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61289
    //MOV
    t4.y = t3.y;
    //Instruction 61290
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 61291
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 61292
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 61293
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 61294
    //SQRT
    t22 = sqrt(t22);
    //Instruction 61295
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 61296
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61297
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61298
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61299
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61300
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61301
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61302
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 61303
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 61304
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 61305
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 61306
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 61307
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 61308
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 61309
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 61310
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 61311
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 61312
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 61313
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61314
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 61315
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 61316
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 61317
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61318
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 61319
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 61320
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 61321
    //MUL
    t1 = t1 * t22;
    //Instruction 61322
    //MUL
    t22 = t1 * t1;
    //Instruction 61323
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 61324
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 61325
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 61326
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 61327
    //MUL
    t2.x = t22 * t1;
    //Instruction 61328
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 61329
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 61330
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 61331
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 61332
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 61333
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 61334
    //ADD
    t1 = t22 + t1;
    //Instruction 61335
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 61336
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 61337
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 61338
    //LT
    tb15 = t22<(-t22);
    //Instruction 61339
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 61340
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 61341
    //LT
    tb8 = t1<0.0;
    //Instruction 61342
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 61343
    //ADD
    t1 = t8.x + t1;
    //Instruction 61344
    //ADD
    t1 = t0.z + t1;
    //Instruction 61345
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 61346
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 61347
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 61348
    //GE
    tb8 = t1>=(-t1);
    //Instruction 61349
    //FRC
    t1 = fract(abs(t1));
    //Instruction 61350
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 61351
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 61352
    //FTOU
    tu1 = uint(t1);
    //Instruction 61353
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61354
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61355
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61356
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 61357
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 61358
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 61359
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 61360
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 61361
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 61362
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 61363
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 61364
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 61365
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 61225
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61226
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61227
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61228
    //LT
    tb0 = t10_1<0.0;
    //Instruction 61229
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 61230
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61231
    //MOV
    t16_0.w = 1.0;
    //Instruction 61232
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 61233
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 61234
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 61235
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 61236
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61237
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 61238
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61239
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 61240
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 61241
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61242
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61243
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  highp vec3 lightColor0_49;
  lightColor0_49 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_50;
  lightColor1_50 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_51;
  lightColor2_51 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_52;
  lightColor3_52 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_53;
  lightAttenSq_53 = unity_4LightAtten0;
  highp vec3 normal_54;
  normal_54 = worldNormal_2;
  highp vec3 col_55;
  highp vec4 ndotl_56;
  highp vec4 lengthSq_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosZ0 - tmpvar_41.z);
  lengthSq_57 = (tmpvar_58 * tmpvar_58);
  lengthSq_57 = (lengthSq_57 + (tmpvar_59 * tmpvar_59));
  lengthSq_57 = (lengthSq_57 + (tmpvar_60 * tmpvar_60));
  ndotl_56 = (tmpvar_58 * normal_54.x);
  ndotl_56 = (ndotl_56 + (tmpvar_59 * normal_54.y));
  ndotl_56 = (ndotl_56 + (tmpvar_60 * normal_54.z));
  highp vec4 tmpvar_61;
  tmpvar_61 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_56 * inversesqrt(lengthSq_57)));
  ndotl_56 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * (1.0/((1.0 + 
    (lengthSq_57 * lightAttenSq_53)
  ))));
  col_55 = (lightColor0_49 * tmpvar_62.x);
  col_55 = (col_55 + (lightColor1_50 * tmpvar_62.y));
  col_55 = (col_55 + (lightColor2_51 * tmpvar_62.z));
  col_55 = (col_55 + (lightColor3_52 * tmpvar_62.w));
  tmpvar_5 = ((x2_47 + (unity_SHC.xyz * 
    ((normal_46.x * normal_46.x) - (normal_46.y * normal_46.y))
  )) + col_55);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 61385
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61386
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61387
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61388
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61389
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61390
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 61391
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 61392
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61393
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61394
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61395
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61396
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61397
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61398
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61399
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61400
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61401
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61402
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 61403
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61404
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 61405
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 61406
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 61407
    //MUL
    t3.y = t0.y * t23;
    //Instruction 61408
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 61409
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 61410
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 61411
    //LOG
    t23 = log2(t9);
    //Instruction 61412
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 61413
    //EXP
    t23 = exp2(t23);
    //Instruction 61414
    //NE
    tb24 = t9!=0.0;
    //Instruction 61415
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 61416
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 61417
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61418
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 61419
    //MUL
    t9 = t0.x * t9;
    //Instruction 61420
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 61421
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 61422
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 61423
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61424
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 61425
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61426
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 61427
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 61428
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 61429
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61430
    //MOV
    t4.y = t3.y;
    //Instruction 61431
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 61432
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 61433
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 61434
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 61435
    //SQRT
    t22 = sqrt(t22);
    //Instruction 61436
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 61437
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61438
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61439
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61440
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61441
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61442
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61443
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 61444
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 61445
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 61446
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 61447
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 61448
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 61449
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 61450
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 61451
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61452
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 61453
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 61454
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61455
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 61456
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 61457
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 61458
    //MOV
    vs_TEXCOORD1.xyz = t2.xyw;
    //Instruction 61459
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61460
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 61461
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61462
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 61463
    //MUL
    t1.x = t1.x * t22;
    //Instruction 61464
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 61465
    //MAD
    t24 = t22 * 0.020835 + -0.085133;
    //Instruction 61466
    //MAD
    t24 = t22 * t24 + 0.180141;
    //Instruction 61467
    //MAD
    t24 = t22 * t24 + -0.330299;
    //Instruction 61468
    //MAD
    t22 = t22 * t24 + 0.999866;
    //Instruction 61469
    //MUL
    t24 = t22 * t1.x;
    //Instruction 61470
    //MAD
    t24 = t24 * -2.000000 + 1.570796;
    //Instruction 61471
    //LT
    tb4 = abs(t8.y)<abs(t8.x);
    //Instruction 61472
    //AND
    t24 = tb4 ? t24 : float(0.0);
    //Instruction 61473
    //MAD
    t1.x = t1.x * t22 + t24;
    //Instruction 61474
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 61475
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 61476
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 61477
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 61478
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 61479
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 61480
    //LT
    tb15 = t22<(-t22);
    //Instruction 61481
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 61482
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 61483
    //LT
    tb8 = t1.x<0.0;
    //Instruction 61484
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 61485
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 61486
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61487
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 61488
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61489
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 61490
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 61491
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61492
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 61493
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 61494
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61495
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61496
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61497
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61498
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    //Instruction 61499
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 61500
    //ADD
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 61501
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 61502
    //ADD
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 61503
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 61504
    //MUL
    t2 = t2 * t2;
    //Instruction 61505
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 61506
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 61507
    //MAD
    t1 = t0 * t3.zzzz + t1;
    //Instruction 61508
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 61509
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 61510
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61511
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 61512
    //MUL
    t1 = t1 * t2;
    //Instruction 61513
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61514
    //MUL
    t0 = t0 * t1;
    //Instruction 61515
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61516
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61517
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61518
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 61519
    //MUL
    t16_5.x = t3.y * t3.y;
    //Instruction 61520
    //MAD
    t16_5.x = t3.x * t3.x + (-t16_5.x);
    //Instruction 61521
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 61522
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 61523
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 61524
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 61525
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 61526
    //ADD
    t1.xyz = t1.xyz + t16_5.xyz;
    //Instruction 61527
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 61528
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 61366
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61367
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61368
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61369
    //LT
    tb0 = t10_1<0.0;
    //Instruction 61370
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 61371
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61372
    //MOV
    t16_0.w = 1.0;
    //Instruction 61373
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 61374
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 61375
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 61376
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 61377
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61378
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 61379
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61380
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 61381
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 61382
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61383
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61384
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_45;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_2;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  highp vec3 lightColor0_50;
  lightColor0_50 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_51;
  lightColor1_51 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_52;
  lightColor2_52 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_53;
  lightColor3_53 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_54;
  lightAttenSq_54 = unity_4LightAtten0;
  highp vec3 normal_55;
  normal_55 = worldNormal_2;
  highp vec3 col_56;
  highp vec4 ndotl_57;
  highp vec4 lengthSq_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosZ0 - tmpvar_42.z);
  lengthSq_58 = (tmpvar_59 * tmpvar_59);
  lengthSq_58 = (lengthSq_58 + (tmpvar_60 * tmpvar_60));
  lengthSq_58 = (lengthSq_58 + (tmpvar_61 * tmpvar_61));
  ndotl_57 = (tmpvar_59 * normal_55.x);
  ndotl_57 = (ndotl_57 + (tmpvar_60 * normal_55.y));
  ndotl_57 = (ndotl_57 + (tmpvar_61 * normal_55.z));
  highp vec4 tmpvar_62;
  tmpvar_62 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_57 * inversesqrt(lengthSq_58)));
  ndotl_57 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * (1.0/((1.0 + 
    (lengthSq_58 * lightAttenSq_54)
  ))));
  col_56 = (lightColor0_50 * tmpvar_63.x);
  col_56 = (col_56 + (lightColor1_51 * tmpvar_63.y));
  col_56 = (col_56 + (lightColor2_52 * tmpvar_63.z));
  col_56 = (col_56 + (lightColor3_53 * tmpvar_63.w));
  tmpvar_5 = ((x2_48 + (unity_SHC.xyz * 
    ((normal_47.x * normal_47.x) - (normal_47.y * normal_47.y))
  )) + col_56);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 60638
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 60639
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 60640
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60641
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 60642
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60643
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 60644
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 60645
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60646
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60647
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60648
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60649
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60650
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60651
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60652
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60653
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 60654
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60655
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 60656
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60657
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 60658
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 60659
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 60660
    //MUL
    t3.y = t0.y * t23;
    //Instruction 60661
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 60662
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 60663
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 60664
    //LOG
    t23 = log2(t9);
    //Instruction 60665
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 60666
    //EXP
    t23 = exp2(t23);
    //Instruction 60667
    //NE
    tb24 = t9!=0.0;
    //Instruction 60668
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 60669
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 60670
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 60671
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 60672
    //MUL
    t9 = t0.x * t9;
    //Instruction 60673
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 60674
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 60675
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 60676
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 60677
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 60678
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 60679
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 60680
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 60681
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 60682
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 60683
    //MOV
    t4.y = t3.y;
    //Instruction 60684
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 60685
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 60686
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 60687
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 60688
    //SQRT
    t22 = sqrt(t22);
    //Instruction 60689
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 60690
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 60691
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 60692
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 60693
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 60694
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 60695
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60696
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 60697
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 60698
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 60699
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 60700
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 60701
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 60702
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 60703
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 60704
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 60705
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 60706
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 60707
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 60708
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 60709
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 60710
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 60711
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60712
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 60713
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 60714
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 60715
    //MUL
    t1.x = t1.x * t22;
    //Instruction 60716
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 60717
    //MAD
    t24 = t22 * 0.020835 + -0.085133;
    //Instruction 60718
    //MAD
    t24 = t22 * t24 + 0.180141;
    //Instruction 60719
    //MAD
    t24 = t22 * t24 + -0.330299;
    //Instruction 60720
    //MAD
    t22 = t22 * t24 + 0.999866;
    //Instruction 60721
    //MUL
    t24 = t22 * t1.x;
    //Instruction 60722
    //MAD
    t24 = t24 * -2.000000 + 1.570796;
    //Instruction 60723
    //LT
    tb4 = abs(t8.y)<abs(t8.x);
    //Instruction 60724
    //AND
    t24 = tb4 ? t24 : float(0.0);
    //Instruction 60725
    //MAD
    t1.x = t1.x * t22 + t24;
    //Instruction 60726
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 60727
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 60728
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 60729
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 60730
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 60731
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 60732
    //LT
    tb15 = t22<(-t22);
    //Instruction 60733
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 60734
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 60735
    //LT
    tb8 = t1.x<0.0;
    //Instruction 60736
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 60737
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 60738
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 60739
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 60740
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 60741
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 60742
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 60743
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 60744
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 60745
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 60746
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 60747
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 60748
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60749
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60750
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    //Instruction 60751
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 60752
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 60753
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 60754
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 60755
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 60756
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 60757
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 60758
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 60759
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 60760
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 60761
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 60762
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 60763
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 60764
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 60765
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 60766
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 60767
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 60768
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 60615
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60616
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60617
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60618
    //LT
    tb0 = t10_1<0.0;
    //Instruction 60619
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 60620
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60621
    //MOV
    t16_0.w = 1.0;
    //Instruction 60622
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 60623
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 60624
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 60625
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 60626
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 60627
    //SAMPLE_C_LZ
    vec3 txVec69 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec69, 0.0);
    //Instruction 60628
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 60629
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 60630
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 60631
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60632
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60633
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60634
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 60635
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60636
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60637
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_45;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_2;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  highp vec3 lightColor0_50;
  lightColor0_50 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_51;
  lightColor1_51 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_52;
  lightColor2_52 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_53;
  lightColor3_53 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_54;
  lightAttenSq_54 = unity_4LightAtten0;
  highp vec3 normal_55;
  normal_55 = worldNormal_2;
  highp vec3 col_56;
  highp vec4 ndotl_57;
  highp vec4 lengthSq_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosZ0 - tmpvar_42.z);
  lengthSq_58 = (tmpvar_59 * tmpvar_59);
  lengthSq_58 = (lengthSq_58 + (tmpvar_60 * tmpvar_60));
  lengthSq_58 = (lengthSq_58 + (tmpvar_61 * tmpvar_61));
  ndotl_57 = (tmpvar_59 * normal_55.x);
  ndotl_57 = (ndotl_57 + (tmpvar_60 * normal_55.y));
  ndotl_57 = (ndotl_57 + (tmpvar_61 * normal_55.z));
  highp vec4 tmpvar_62;
  tmpvar_62 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_57 * inversesqrt(lengthSq_58)));
  ndotl_57 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * (1.0/((1.0 + 
    (lengthSq_58 * lightAttenSq_54)
  ))));
  col_56 = (lightColor0_50 * tmpvar_63.x);
  col_56 = (col_56 + (lightColor1_51 * tmpvar_63.y));
  col_56 = (col_56 + (lightColor2_52 * tmpvar_63.z));
  col_56 = (col_56 + (lightColor3_53 * tmpvar_63.w));
  tmpvar_5 = ((x2_48 + (unity_SHC.xyz * 
    ((normal_47.x * normal_47.x) - (normal_47.y * normal_47.y))
  )) + col_56);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    //Instruction 60226
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 60227
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 60228
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60229
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 60230
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60231
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 60232
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 60233
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60234
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60235
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60236
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60237
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60238
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60239
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60240
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60241
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 60242
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60243
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 60244
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60245
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 60246
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 60247
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 60248
    //MUL
    t3.y = t0.y * t26;
    //Instruction 60249
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 60250
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 60251
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 60252
    //LOG
    t26 = log2(t10);
    //Instruction 60253
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 60254
    //EXP
    t26 = exp2(t26);
    //Instruction 60255
    //NE
    tb27 = t10!=0.0;
    //Instruction 60256
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 60257
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 60258
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 60259
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 60260
    //MUL
    t10 = t0.x * t10;
    //Instruction 60261
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 60262
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 60263
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 60264
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 60265
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 60266
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 60267
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 60268
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 60269
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 60270
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 60271
    //MOV
    t4.y = t3.y;
    //Instruction 60272
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 60273
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 60274
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 60275
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 60276
    //SQRT
    t25 = sqrt(t25);
    //Instruction 60277
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 60278
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 60279
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 60280
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 60281
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 60282
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 60283
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60284
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 60285
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 60286
    //MUL
    t3.z = t9.y * _World2Object[2].x;
    //Instruction 60287
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 60288
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 60289
    //MUL
    t4.z = (-t9.x) * _World2Object[2].z;
    //Instruction 60290
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 60291
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 60292
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 60293
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 60294
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 60295
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 60296
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 60297
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 60298
    //ADD
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 60299
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 60300
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60301
    //MAX
    t1.x = max(abs(t9.y), abs(t9.x));
    //Instruction 60302
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 60303
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 60304
    //MUL
    t1.x = t1.x * t25;
    //Instruction 60305
    //MUL
    t25 = t1.x * t1.x;
    //Instruction 60306
    //MAD
    t27 = t25 * 0.020835 + -0.085133;
    //Instruction 60307
    //MAD
    t27 = t25 * t27 + 0.180141;
    //Instruction 60308
    //MAD
    t27 = t25 * t27 + -0.330299;
    //Instruction 60309
    //MAD
    t25 = t25 * t27 + 0.999866;
    //Instruction 60310
    //MUL
    t27 = t25 * t1.x;
    //Instruction 60311
    //MAD
    t27 = t27 * -2.000000 + 1.570796;
    //Instruction 60312
    //LT
    tb28 = abs(t9.y)<abs(t9.x);
    //Instruction 60313
    //AND
    t27 = tb28 ? t27 : float(0.0);
    //Instruction 60314
    //MAD
    t1.x = t1.x * t25 + t27;
    //Instruction 60315
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 60316
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 60317
    //ADD
    t1.x = t25 + t1.x;
    //Instruction 60318
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 60319
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 60320
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 60321
    //LT
    tb17 = t25<(-t25);
    //Instruction 60322
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 60323
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 60324
    //LT
    tb9 = t1.x<0.0;
    //Instruction 60325
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 60326
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 60327
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 60328
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 60329
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 60330
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 60331
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 60332
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 60333
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 60334
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 60335
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 60336
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 60337
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60338
    //MAD
    t5.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60339
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t5.xy;
    //Instruction 60340
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 60341
    //ADD
    t0 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 60342
    //ADD
    t1 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 60343
    //ADD
    t4 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 60344
    //MUL
    t5 = t3.yyyy * t1;
    //Instruction 60345
    //MUL
    t1 = t1 * t1;
    //Instruction 60346
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 60347
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 60348
    //MAD
    t0 = t4 * t3.zzzz + t0;
    //Instruction 60349
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 60350
    //RSQ
    t4 = inversesqrt(t1);
    //Instruction 60351
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 60352
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 60353
    //MUL
    t0 = t0 * t4;
    //Instruction 60354
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 60355
    //MUL
    t0 = t1 * t0;
    //Instruction 60356
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 60357
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 60358
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 60359
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 60360
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 60361
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 60362
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 60363
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 60364
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 60365
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 60366
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 60367
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 60368
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 60369
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 60370
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 60371
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 60372
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 60373
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 60374
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 60375
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 60376
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 60377
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 60378
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 60203
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60204
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60205
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60206
    //LT
    tb0 = t10_1<0.0;
    //Instruction 60207
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 60208
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60209
    //MOV
    t16_0.w = 1.0;
    //Instruction 60210
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 60211
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 60212
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 60213
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 60214
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 60215
    //SAMPLE_C_LZ
    vec3 txVec53 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec53, 0.0);
    //Instruction 60216
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 60217
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 60218
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 60219
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60220
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60221
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60222
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 60223
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60224
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60225
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 60407
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 60408
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 60409
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 60410
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60411
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60412
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 60413
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 60414
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60415
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60416
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60417
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60418
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60419
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60420
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60421
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 60422
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60423
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 60424
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60425
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 60426
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 60427
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 60428
    //MUL
    t3.y = t0.y * t26;
    //Instruction 60429
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 60430
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 60431
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 60432
    //LOG
    t26 = log2(t10);
    //Instruction 60433
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 60434
    //EXP
    t26 = exp2(t26);
    //Instruction 60435
    //NE
    tb27 = t10!=0.0;
    //Instruction 60436
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 60437
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 60438
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 60439
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 60440
    //MUL
    t10 = t0.x * t10;
    //Instruction 60441
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60442
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 60443
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 60444
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 60445
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 60446
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 60447
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 60448
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 60449
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 60450
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 60451
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 60452
    //MOV
    t5.y = t3.y;
    //Instruction 60453
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 60454
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 60455
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 60456
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 60457
    //SQRT
    t27 = sqrt(t27);
    //Instruction 60458
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 60459
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 60460
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 60461
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 60462
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 60463
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 60464
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60465
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 60466
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 60467
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 60468
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 60469
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 60470
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 60471
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 60472
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 60473
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 60474
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 60475
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 60476
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 60477
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 60478
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 60479
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 60480
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60481
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 60482
    //ADD
    t1 = t9.z + t1;
    //Instruction 60483
    //FRC
    t1 = fract(t1);
    //Instruction 60484
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 60485
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 60486
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 60487
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 60488
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 60489
    //MUL
    t1 = t1 * t9.x;
    //Instruction 60490
    //MUL
    t9.x = t1 * t1;
    //Instruction 60491
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 60492
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 60493
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 60494
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 60495
    //MUL
    t17.x = t9.x * t1;
    //Instruction 60496
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 60497
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 60498
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 60499
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 60500
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 60501
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 60502
    //ADD
    t1 = t9.x + t1;
    //Instruction 60503
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 60504
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 60505
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 60506
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 60507
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 60508
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 60509
    //LT
    tb9 = t1<0.0;
    //Instruction 60510
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 60511
    //ADD
    t1 = t9.x + t1;
    //Instruction 60512
    //ADD
    t1 = t0.z + t1;
    //Instruction 60513
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 60514
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 60515
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 60516
    //GE
    tb9 = t1>=(-t1);
    //Instruction 60517
    //FRC
    t1 = fract(abs(t1));
    //Instruction 60518
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 60519
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 60520
    //FTOU
    tu1 = uint(t1);
    //Instruction 60521
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 60522
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60523
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60524
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 60525
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 60526
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 60527
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 60528
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 60529
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 60530
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 60531
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 60532
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 60379
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60380
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60381
    //LT
    tb15 = t10_1<0.0;
    //Instruction 60382
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 60383
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 60384
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 60385
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60386
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 60387
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 60388
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 60389
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 60390
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 60391
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 60392
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60393
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 60394
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60395
    //MOV
    t16_0.w = 1.0;
    //Instruction 60396
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 60397
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 60398
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 60399
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 60400
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60401
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60402
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60403
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60404
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60405
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60406
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_45;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = worldNormal_2;
  mediump vec4 normal_47;
  normal_47 = tmpvar_46;
  mediump vec3 x2_48;
  mediump vec4 tmpvar_49;
  tmpvar_49 = (normal_47.xyzz * normal_47.yzzx);
  x2_48.x = dot (unity_SHBr, tmpvar_49);
  x2_48.y = dot (unity_SHBg, tmpvar_49);
  x2_48.z = dot (unity_SHBb, tmpvar_49);
  highp vec3 lightColor0_50;
  lightColor0_50 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_51;
  lightColor1_51 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_52;
  lightColor2_52 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_53;
  lightColor3_53 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_54;
  lightAttenSq_54 = unity_4LightAtten0;
  highp vec3 normal_55;
  normal_55 = worldNormal_2;
  highp vec3 col_56;
  highp vec4 ndotl_57;
  highp vec4 lengthSq_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosZ0 - tmpvar_42.z);
  lengthSq_58 = (tmpvar_59 * tmpvar_59);
  lengthSq_58 = (lengthSq_58 + (tmpvar_60 * tmpvar_60));
  lengthSq_58 = (lengthSq_58 + (tmpvar_61 * tmpvar_61));
  ndotl_57 = (tmpvar_59 * normal_55.x);
  ndotl_57 = (ndotl_57 + (tmpvar_60 * normal_55.y));
  ndotl_57 = (ndotl_57 + (tmpvar_61 * normal_55.z));
  highp vec4 tmpvar_62;
  tmpvar_62 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_57 * inversesqrt(lengthSq_58)));
  ndotl_57 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * (1.0/((1.0 + 
    (lengthSq_58 * lightAttenSq_54)
  ))));
  col_56 = (lightColor0_50 * tmpvar_63.x);
  col_56 = (col_56 + (lightColor1_51 * tmpvar_63.y));
  col_56 = (col_56 + (lightColor2_52 * tmpvar_63.z));
  col_56 = (col_56 + (lightColor3_53 * tmpvar_63.w));
  tmpvar_5 = ((x2_48 + (unity_SHC.xyz * 
    ((normal_47.x * normal_47.x) - (normal_47.y * normal_47.y))
  )) + col_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_42;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 60561
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 60562
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 60563
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 60564
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60565
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60566
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 60567
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 60568
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60569
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60570
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60571
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60572
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60573
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60574
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60575
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 60576
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60577
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 60578
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60579
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 60580
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 60581
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 60582
    //MUL
    t3.y = t0.y * t26;
    //Instruction 60583
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 60584
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 60585
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 60586
    //LOG
    t26 = log2(t10);
    //Instruction 60587
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 60588
    //EXP
    t26 = exp2(t26);
    //Instruction 60589
    //NE
    tb27 = t10!=0.0;
    //Instruction 60590
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 60591
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 60592
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 60593
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 60594
    //MUL
    t10 = t0.x * t10;
    //Instruction 60595
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60596
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 60597
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 60598
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 60599
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 60600
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 60601
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 60602
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 60603
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 60604
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 60605
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 60606
    //MOV
    t5.y = t3.y;
    //Instruction 60607
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 60608
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 60609
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 60610
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 60611
    //SQRT
    t27 = sqrt(t27);
    //Instruction 60612
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 60613
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 60614
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 60615
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 60616
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 60617
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 60618
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60619
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 60620
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 60621
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 60622
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 60623
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 60624
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 60625
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 60626
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 60627
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 60628
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 60629
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 60630
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 60631
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 60632
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 60633
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 60634
    //MOV
    vs_TEXCOORD1.xyz = t2.xyw;
    //Instruction 60635
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60636
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 60637
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 60638
    //FRC
    t1.x = fract(t1.x);
    //Instruction 60639
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 60640
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 60641
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 60642
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 60643
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 60644
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 60645
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 60646
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 60647
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 60648
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 60649
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 60650
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 60651
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 60652
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 60653
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 60654
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 60655
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 60656
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 60657
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 60658
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 60659
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 60660
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 60661
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 60662
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 60663
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 60664
    //LT
    tb9 = t1.x<0.0;
    //Instruction 60665
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 60666
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 60667
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 60668
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 60669
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 60670
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 60671
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 60672
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 60673
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 60674
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 60675
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 60676
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 60677
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60678
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60679
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 60680
    //ADD
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 60681
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 60682
    //ADD
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 60683
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 60684
    //MUL
    t2 = t2 * t2;
    //Instruction 60685
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 60686
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 60687
    //MAD
    t1 = t0 * t3.zzzz + t1;
    //Instruction 60688
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 60689
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 60690
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 60691
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 60692
    //MUL
    t1 = t1 * t2;
    //Instruction 60693
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 60694
    //MUL
    t0 = t0 * t1;
    //Instruction 60695
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 60696
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 60697
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 60698
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 60699
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 60700
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 60701
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 60702
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 60703
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 60704
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 60705
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 60706
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 60707
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 60708
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 60533
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60534
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60535
    //LT
    tb15 = t10_1<0.0;
    //Instruction 60536
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 60537
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 60538
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 60539
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60540
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 60541
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 60542
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 60543
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 60544
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 60545
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 60546
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60547
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 60548
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60549
    //MOV
    t16_0.w = 1.0;
    //Instruction 60550
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 60551
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 60552
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 60553
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 60554
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60555
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60556
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60557
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60558
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60559
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60560
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_46;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = worldNormal_2;
  mediump vec4 normal_48;
  normal_48 = tmpvar_47;
  mediump vec3 x2_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_50);
  x2_49.y = dot (unity_SHBg, tmpvar_50);
  x2_49.z = dot (unity_SHBb, tmpvar_50);
  highp vec3 lightColor0_51;
  lightColor0_51 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_52;
  lightColor1_52 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_53;
  lightColor2_53 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_54;
  lightColor3_54 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_55;
  lightAttenSq_55 = unity_4LightAtten0;
  highp vec3 normal_56;
  normal_56 = worldNormal_2;
  highp vec3 col_57;
  highp vec4 ndotl_58;
  highp vec4 lengthSq_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosX0 - tmpvar_43.x);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosY0 - tmpvar_43.y);
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosZ0 - tmpvar_43.z);
  lengthSq_59 = (tmpvar_60 * tmpvar_60);
  lengthSq_59 = (lengthSq_59 + (tmpvar_61 * tmpvar_61));
  lengthSq_59 = (lengthSq_59 + (tmpvar_62 * tmpvar_62));
  ndotl_58 = (tmpvar_60 * normal_56.x);
  ndotl_58 = (ndotl_58 + (tmpvar_61 * normal_56.y));
  ndotl_58 = (ndotl_58 + (tmpvar_62 * normal_56.z));
  highp vec4 tmpvar_63;
  tmpvar_63 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_58 * inversesqrt(lengthSq_59)));
  ndotl_58 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * (1.0/((1.0 + 
    (lengthSq_59 * lightAttenSq_55)
  ))));
  col_57 = (lightColor0_51 * tmpvar_64.x);
  col_57 = (col_57 + (lightColor1_52 * tmpvar_64.y));
  col_57 = (col_57 + (lightColor2_53 * tmpvar_64.z));
  col_57 = (col_57 + (lightColor3_54 * tmpvar_64.w));
  tmpvar_5 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + col_57);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_43;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 61561
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61562
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61563
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 61564
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61565
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61566
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 61567
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 61568
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61569
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61570
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61571
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61572
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61573
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61574
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61575
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61576
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61577
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 61578
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61579
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 61580
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 61581
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 61582
    //MUL
    t3.y = t0.y * t26;
    //Instruction 61583
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 61584
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 61585
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 61586
    //LOG
    t26 = log2(t10);
    //Instruction 61587
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 61588
    //EXP
    t26 = exp2(t26);
    //Instruction 61589
    //NE
    tb27 = t10!=0.0;
    //Instruction 61590
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 61591
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 61592
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61593
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 61594
    //MUL
    t10 = t0.x * t10;
    //Instruction 61595
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61596
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 61597
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 61598
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 61599
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61600
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 61601
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61602
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 61603
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 61604
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 61605
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61606
    //MOV
    t5.y = t3.y;
    //Instruction 61607
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 61608
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 61609
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 61610
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 61611
    //SQRT
    t27 = sqrt(t27);
    //Instruction 61612
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 61613
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61614
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61615
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61616
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61617
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61618
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61619
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 61620
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 61621
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 61622
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 61623
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 61624
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 61625
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 61626
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 61627
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61628
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 61629
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 61630
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61631
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 61632
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 61633
    //ADD
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 61634
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61635
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 61636
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 61637
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61638
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61639
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 61640
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 61641
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61642
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 61643
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 61644
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 61645
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 61646
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 61647
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 61648
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 61649
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 61650
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 61651
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 61652
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 61653
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 61654
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 61655
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 61656
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 61657
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 61658
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 61659
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 61660
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 61661
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 61662
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 61663
    //LT
    tb9 = t1.x<0.0;
    //Instruction 61664
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 61665
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 61666
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61667
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 61668
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61669
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 61670
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 61671
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61672
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 61673
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 61674
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61675
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61676
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61677
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61678
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 61679
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 61680
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 61681
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 61682
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 61683
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 61684
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 61685
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 61686
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 61687
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 61688
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 61689
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61690
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61691
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61692
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61693
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61694
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 61695
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 61529
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61530
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61531
    //LT
    tb15 = t10_1<0.0;
    //Instruction 61532
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 61533
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 61534
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 61535
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61536
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 61537
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 61538
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 61539
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 61540
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 61541
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 61542
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61543
    //SAMPLE_C_LZ
    vec3 txVec65 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec65, 0.0);
    //Instruction 61544
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61545
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 61546
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 61547
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61548
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61549
    //MOV
    t16_0.w = 1.0;
    //Instruction 61550
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61551
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61552
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61553
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 61554
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61555
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61556
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61557
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61558
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61559
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61560
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_4 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_46;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = worldNormal_2;
  mediump vec4 normal_48;
  normal_48 = tmpvar_47;
  mediump vec3 x2_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_50);
  x2_49.y = dot (unity_SHBg, tmpvar_50);
  x2_49.z = dot (unity_SHBb, tmpvar_50);
  highp vec3 lightColor0_51;
  lightColor0_51 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_52;
  lightColor1_52 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_53;
  lightColor2_53 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_54;
  lightColor3_54 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_55;
  lightAttenSq_55 = unity_4LightAtten0;
  highp vec3 normal_56;
  normal_56 = worldNormal_2;
  highp vec3 col_57;
  highp vec4 ndotl_58;
  highp vec4 lengthSq_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_4LightPosX0 - tmpvar_43.x);
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosY0 - tmpvar_43.y);
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosZ0 - tmpvar_43.z);
  lengthSq_59 = (tmpvar_60 * tmpvar_60);
  lengthSq_59 = (lengthSq_59 + (tmpvar_61 * tmpvar_61));
  lengthSq_59 = (lengthSq_59 + (tmpvar_62 * tmpvar_62));
  ndotl_58 = (tmpvar_60 * normal_56.x);
  ndotl_58 = (ndotl_58 + (tmpvar_61 * normal_56.y));
  ndotl_58 = (ndotl_58 + (tmpvar_62 * normal_56.z));
  highp vec4 tmpvar_63;
  tmpvar_63 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_58 * inversesqrt(lengthSq_59)));
  ndotl_58 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * (1.0/((1.0 + 
    (lengthSq_59 * lightAttenSq_55)
  ))));
  col_57 = (lightColor0_51 * tmpvar_64.x);
  col_57 = (col_57 + (lightColor1_52 * tmpvar_64.y));
  col_57 = (col_57 + (lightColor2_53 * tmpvar_64.z));
  col_57 = (col_57 + (lightColor3_54 * tmpvar_64.w));
  tmpvar_5 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + col_57);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_43;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 60801
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 60802
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 60803
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 60804
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60805
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60806
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 60807
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 60808
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60809
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60810
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60811
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60812
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60813
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60814
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60815
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 60816
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60817
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 60818
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60819
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 60820
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 60821
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 60822
    //MUL
    t3.y = t0.y * t26;
    //Instruction 60823
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 60824
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 60825
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 60826
    //LOG
    t26 = log2(t10);
    //Instruction 60827
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 60828
    //EXP
    t26 = exp2(t26);
    //Instruction 60829
    //NE
    tb27 = t10!=0.0;
    //Instruction 60830
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 60831
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 60832
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 60833
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 60834
    //MUL
    t10 = t0.x * t10;
    //Instruction 60835
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60836
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 60837
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 60838
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 60839
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 60840
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 60841
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 60842
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 60843
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 60844
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 60845
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 60846
    //MOV
    t5.y = t3.y;
    //Instruction 60847
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 60848
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 60849
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 60850
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 60851
    //SQRT
    t27 = sqrt(t27);
    //Instruction 60852
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 60853
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 60854
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 60855
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 60856
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 60857
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 60858
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60859
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 60860
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 60861
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 60862
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 60863
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 60864
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 60865
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 60866
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 60867
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 60868
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 60869
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 60870
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 60871
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 60872
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 60873
    //ADD
    t5.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 60874
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 60875
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60876
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 60877
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 60878
    //FRC
    t1.x = fract(t1.x);
    //Instruction 60879
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 60880
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 60881
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 60882
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 60883
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 60884
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 60885
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 60886
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 60887
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 60888
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 60889
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 60890
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 60891
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 60892
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 60893
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 60894
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 60895
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 60896
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 60897
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 60898
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 60899
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 60900
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 60901
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 60902
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 60903
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 60904
    //LT
    tb9 = t1.x<0.0;
    //Instruction 60905
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 60906
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 60907
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 60908
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 60909
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 60910
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 60911
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 60912
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 60913
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 60914
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 60915
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 60916
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 60917
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60918
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 60919
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 60920
    //ADD
    t0 = (-t5.xxxx) + unity_4LightPosX0;
    //Instruction 60921
    //ADD
    t1 = (-t5.yyyy) + unity_4LightPosY0;
    //Instruction 60922
    //ADD
    t4 = (-t5.zzzz) + unity_4LightPosZ0;
    //Instruction 60923
    //MUL
    t5 = t3.yyyy * t1;
    //Instruction 60924
    //MUL
    t1 = t1 * t1;
    //Instruction 60925
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 60926
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 60927
    //MAD
    t0 = t4 * t3.zzzz + t0;
    //Instruction 60928
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 60929
    //RSQ
    t4 = inversesqrt(t1);
    //Instruction 60930
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 60931
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 60932
    //MUL
    t0 = t0 * t4;
    //Instruction 60933
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 60934
    //MUL
    t0 = t1 * t0;
    //Instruction 60935
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 60936
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 60937
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 60938
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 60939
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 60940
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 60941
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 60942
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 60943
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 60944
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 60945
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 60946
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 60947
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 60948
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 60949
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 60950
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 60951
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 60952
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 60953
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 60954
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 60955
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 60956
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 60957
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 60769
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60770
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60771
    //LT
    tb15 = t10_1<0.0;
    //Instruction 60772
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 60773
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 60774
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 60775
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60776
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 60777
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 60778
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 60779
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 60780
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 60781
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 60782
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60783
    //SAMPLE_C_LZ
    vec3 txVec70 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec70, 0.0);
    //Instruction 60784
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 60785
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 60786
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 60787
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 60788
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60789
    //MOV
    t16_0.w = 1.0;
    //Instruction 60790
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 60791
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 60792
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 60793
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 60794
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60795
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60796
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60797
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60798
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60799
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60800
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  tmpvar_51.w = tmpvar_41.z;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_4;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_54 + (unity_SHC.xyz * (
    (normal_53.x * normal_53.x)
   - 
    (normal_53.y * normal_53.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    //Instruction 60981
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 60982
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 60983
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60984
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 60985
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60986
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 60987
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 60988
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 60989
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60990
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60991
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60992
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60993
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60994
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60995
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60996
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 60997
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60998
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 60999
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61000
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 61001
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 61002
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 61003
    //MUL
    t3.y = t0.y * t26;
    //Instruction 61004
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 61005
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 61006
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 61007
    //LOG
    t26 = log2(t10);
    //Instruction 61008
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 61009
    //EXP
    t26 = exp2(t26);
    //Instruction 61010
    //NE
    tb27 = t10!=0.0;
    //Instruction 61011
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 61012
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 61013
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61014
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 61015
    //MUL
    t10 = t0.x * t10;
    //Instruction 61016
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 61017
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 61018
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 61019
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61020
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 61021
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61022
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 61023
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 61024
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 61025
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61026
    //MOV
    t4.y = t3.y;
    //Instruction 61027
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 61028
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 61029
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 61030
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 61031
    //SQRT
    t25 = sqrt(t25);
    //Instruction 61032
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 61033
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61034
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61035
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61036
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61037
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61038
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61039
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61040
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 61041
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 61042
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 61043
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 61044
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 61045
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 61046
    //MUL
    t3.zw = t9.yy * _World2Object[2].xx;
    //Instruction 61047
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 61048
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 61049
    //MUL
    t4.zw = (-t9.xx) * _World2Object[2].zz;
    //Instruction 61050
    //ADD
    t3 = t3 + t4;
    //Instruction 61051
    //DP3
    t1 = dot(t3.xyw, t3.xyw);
    //Instruction 61052
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 61053
    //MUL
    t3 = vec4(t1) * t3;
    //Instruction 61054
    //MUL
    t4.xyz = t9.yyy * _Object2World[2].yzx;
    //Instruction 61055
    //MAD
    t4.xyz = _Object2World[0].yzx * t9.xxx + t4.xyz;
    //Instruction 61056
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 61057
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 61058
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 61059
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 61060
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 61061
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 61062
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 61063
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 61064
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 61065
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 61066
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 61067
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 61068
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 61069
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 61070
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 61071
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 61072
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61073
    //MAX
    t1 = max(abs(t9.y), abs(t9.x));
    //Instruction 61074
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 61075
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 61076
    //MUL
    t1 = t1 * t25;
    //Instruction 61077
    //MUL
    t25 = t1 * t1;
    //Instruction 61078
    //MAD
    t2.x = t25 * 0.020835 + -0.085133;
    //Instruction 61079
    //MAD
    t2.x = t25 * t2.x + 0.180141;
    //Instruction 61080
    //MAD
    t2.x = t25 * t2.x + -0.330299;
    //Instruction 61081
    //MAD
    t25 = t25 * t2.x + 0.999866;
    //Instruction 61082
    //MUL
    t2.x = t25 * t1;
    //Instruction 61083
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 61084
    //LT
    tb10 = abs(t9.y)<abs(t9.x);
    //Instruction 61085
    //AND
    t2.x = tb10 ? t2.x : float(0.0);
    //Instruction 61086
    //MAD
    t1 = t1 * t25 + t2.x;
    //Instruction 61087
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 61088
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 61089
    //ADD
    t1 = t25 + t1;
    //Instruction 61090
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 61091
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 61092
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 61093
    //LT
    tb17 = t25<(-t25);
    //Instruction 61094
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 61095
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 61096
    //LT
    tb9 = t1<0.0;
    //Instruction 61097
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 61098
    //ADD
    t1 = t9.x + t1;
    //Instruction 61099
    //ADD
    t1 = t0.z + t1;
    //Instruction 61100
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 61101
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 61102
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 61103
    //GE
    tb9 = t1>=(-t1);
    //Instruction 61104
    //FRC
    t1 = fract(abs(t1));
    //Instruction 61105
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 61106
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 61107
    //FTOU
    tu1 = uint(t1);
    //Instruction 61108
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61109
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61110
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61111
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 61112
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 61113
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 61114
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 61115
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 61116
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 61117
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 61118
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 61119
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 61120
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    //Instruction 60958
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 60959
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60960
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 60961
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 60962
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 60963
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 60964
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 60965
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 60966
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 60967
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 60968
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 60969
    //MOV
    t0.w = 1.0;
    //Instruction 60970
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 60971
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 60972
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 60973
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60974
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 60975
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60976
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 60977
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 60978
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 60979
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60980
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  highp vec3 lightColor0_57;
  lightColor0_57 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_58;
  lightColor1_58 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_59;
  lightColor2_59 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_60;
  lightColor3_60 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_61;
  lightAttenSq_61 = unity_4LightAtten0;
  highp vec3 normal_62;
  normal_62 = worldNormal_4;
  highp vec3 col_63;
  highp vec4 ndotl_64;
  highp vec4 lengthSq_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosZ0 - tmpvar_42.z);
  lengthSq_65 = (tmpvar_66 * tmpvar_66);
  lengthSq_65 = (lengthSq_65 + (tmpvar_67 * tmpvar_67));
  lengthSq_65 = (lengthSq_65 + (tmpvar_68 * tmpvar_68));
  ndotl_64 = (tmpvar_66 * normal_62.x);
  ndotl_64 = (ndotl_64 + (tmpvar_67 * normal_62.y));
  ndotl_64 = (ndotl_64 + (tmpvar_68 * normal_62.z));
  highp vec4 tmpvar_69;
  tmpvar_69 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_64 * inversesqrt(lengthSq_65)));
  ndotl_64 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * (1.0/((1.0 + 
    (lengthSq_65 * lightAttenSq_61)
  ))));
  col_63 = (lightColor0_57 * tmpvar_70.x);
  col_63 = (col_63 + (lightColor1_58 * tmpvar_70.y));
  col_63 = (col_63 + (lightColor2_59 * tmpvar_70.z));
  col_63 = (col_63 + (lightColor3_60 * tmpvar_70.w));
  tmpvar_6 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + col_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb12;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    //Instruction 61144
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61145
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61146
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61147
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61148
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61149
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 61150
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 61151
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61152
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61153
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61154
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61155
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61156
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61157
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61158
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61159
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61160
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61161
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 61162
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61163
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 61164
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 61165
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 61166
    //MUL
    t3.y = t0.y * t26;
    //Instruction 61167
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 61168
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 61169
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 61170
    //LOG
    t26 = log2(t10);
    //Instruction 61171
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 61172
    //EXP
    t26 = exp2(t26);
    //Instruction 61173
    //NE
    tb27 = t10!=0.0;
    //Instruction 61174
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 61175
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 61176
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61177
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 61178
    //MUL
    t10 = t0.x * t10;
    //Instruction 61179
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 61180
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 61181
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 61182
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61183
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 61184
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61185
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 61186
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 61187
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 61188
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61189
    //MOV
    t4.y = t3.y;
    //Instruction 61190
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 61191
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 61192
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 61193
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 61194
    //SQRT
    t25 = sqrt(t25);
    //Instruction 61195
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 61196
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61197
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61198
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61199
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61200
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61201
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61202
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61203
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 61204
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 61205
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 61206
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 61207
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 61208
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 61209
    //MUL
    t3.zw = t9.yy * _World2Object[2].xx;
    //Instruction 61210
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 61211
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 61212
    //MUL
    t4.zw = (-t9.xx) * _World2Object[2].zz;
    //Instruction 61213
    //ADD
    t3 = t3 + t4;
    //Instruction 61214
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 61215
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61216
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 61217
    //MUL
    t4.xyz = t9.yyy * _Object2World[2].yzx;
    //Instruction 61218
    //MAD
    t4.xyz = _Object2World[0].yzx * t9.xxx + t4.xyz;
    //Instruction 61219
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 61220
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61221
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 61222
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 61223
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 61224
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 61225
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 61226
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 61227
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 61228
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 61229
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 61230
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 61231
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 61232
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 61233
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 61234
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 61235
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61236
    //MAX
    t1.x = max(abs(t9.y), abs(t9.x));
    //Instruction 61237
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61238
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 61239
    //MUL
    t1.x = t1.x * t25;
    //Instruction 61240
    //MUL
    t25 = t1.x * t1.x;
    //Instruction 61241
    //MAD
    t4.x = t25 * 0.020835 + -0.085133;
    //Instruction 61242
    //MAD
    t4.x = t25 * t4.x + 0.180141;
    //Instruction 61243
    //MAD
    t4.x = t25 * t4.x + -0.330299;
    //Instruction 61244
    //MAD
    t25 = t25 * t4.x + 0.999866;
    //Instruction 61245
    //MUL
    t4.x = t25 * t1.x;
    //Instruction 61246
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 61247
    //LT
    tb12 = abs(t9.y)<abs(t9.x);
    //Instruction 61248
    //AND
    t4.x = tb12 ? t4.x : float(0.0);
    //Instruction 61249
    //MAD
    t1.x = t1.x * t25 + t4.x;
    //Instruction 61250
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 61251
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 61252
    //ADD
    t1.x = t25 + t1.x;
    //Instruction 61253
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 61254
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 61255
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 61256
    //LT
    tb17 = t25<(-t25);
    //Instruction 61257
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 61258
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 61259
    //LT
    tb9 = t1.x<0.0;
    //Instruction 61260
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 61261
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 61262
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61263
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 61264
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61265
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 61266
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 61267
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61268
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 61269
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 61270
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61271
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61272
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61273
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61274
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 61275
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 61276
    //ADD
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 61277
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 61278
    //ADD
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 61279
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 61280
    //MUL
    t2 = t2 * t2;
    //Instruction 61281
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 61282
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 61283
    //MAD
    t1 = t0 * t3.wwww + t1;
    //Instruction 61284
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 61285
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 61286
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61287
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 61288
    //MUL
    t1 = t1 * t2;
    //Instruction 61289
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61290
    //MUL
    t0 = t0 * t1;
    //Instruction 61291
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61292
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61293
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61294
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 61295
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 61296
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 61297
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 61298
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 61299
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 61300
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 61301
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 61302
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 61303
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 61304
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    //Instruction 61121
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61122
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61123
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61124
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 61125
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 61126
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 61127
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61128
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61129
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 61130
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 61131
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 61132
    //MOV
    t0.w = 1.0;
    //Instruction 61133
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 61134
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 61135
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 61136
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61137
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61138
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61139
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61140
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61141
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61142
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61143
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_19.z) + (v_45.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_19));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  highp vec3 lightColor0_58;
  lightColor0_58 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_59;
  lightColor1_59 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_60;
  lightColor2_60 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_61;
  lightColor3_61 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_62;
  lightAttenSq_62 = unity_4LightAtten0;
  highp vec3 normal_63;
  normal_63 = worldNormal_4;
  highp vec3 col_64;
  highp vec4 ndotl_65;
  highp vec4 lengthSq_66;
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosX0 - tmpvar_43.x);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosY0 - tmpvar_43.y);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_4LightPosZ0 - tmpvar_43.z);
  lengthSq_66 = (tmpvar_67 * tmpvar_67);
  lengthSq_66 = (lengthSq_66 + (tmpvar_68 * tmpvar_68));
  lengthSq_66 = (lengthSq_66 + (tmpvar_69 * tmpvar_69));
  ndotl_65 = (tmpvar_67 * normal_63.x);
  ndotl_65 = (ndotl_65 + (tmpvar_68 * normal_63.y));
  ndotl_65 = (ndotl_65 + (tmpvar_69 * normal_63.z));
  highp vec4 tmpvar_70;
  tmpvar_70 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_65 * inversesqrt(lengthSq_66)));
  ndotl_65 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * (1.0/((1.0 + 
    (lengthSq_66 * lightAttenSq_62)
  ))));
  col_64 = (lightColor0_58 * tmpvar_71.x);
  col_64 = (col_64 + (lightColor1_59 * tmpvar_71.y));
  col_64 = (col_64 + (lightColor2_60 * tmpvar_71.z));
  col_64 = (col_64 + (lightColor3_61 * tmpvar_71.w));
  tmpvar_6 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + col_64);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
bool tb13;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
bool tb30;
void main()
{
    //Instruction 61332
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61333
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61334
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61335
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61336
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61337
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 61338
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 61339
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61340
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61341
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61342
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61343
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61344
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61345
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61346
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61347
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61348
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61349
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 61350
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61351
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 61352
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 61353
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 61354
    //MUL
    t3.y = t0.y * t29;
    //Instruction 61355
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 61356
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 61357
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 61358
    //LOG
    t29 = log2(t11);
    //Instruction 61359
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 61360
    //EXP
    t29 = exp2(t29);
    //Instruction 61361
    //NE
    tb30 = t11!=0.0;
    //Instruction 61362
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 61363
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 61364
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61365
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 61366
    //MUL
    t11 = t0.x * t11;
    //Instruction 61367
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 61368
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 61369
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 61370
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61371
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 61372
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61373
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 61374
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 61375
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 61376
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61377
    //MOV
    t4.y = t3.y;
    //Instruction 61378
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 61379
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 61380
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 61381
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 61382
    //SQRT
    t28 = sqrt(t28);
    //Instruction 61383
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 61384
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61385
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61386
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61387
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61388
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61389
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61390
    //MUL
    t3.x = t10.y * _World2Object[0].x;
    //Instruction 61391
    //MUL
    t3.y = t10.y * _World2Object[1].x;
    //Instruction 61392
    //MUL
    t3.zw = t10.yy * _World2Object[2].xx;
    //Instruction 61393
    //MUL
    t4.x = (-t10.x) * _World2Object[0].z;
    //Instruction 61394
    //MUL
    t4.y = (-t10.x) * _World2Object[1].z;
    //Instruction 61395
    //MUL
    t4.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 61396
    //ADD
    t3 = t3 + t4;
    //Instruction 61397
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 61398
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61399
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 61400
    //MUL
    t4.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 61401
    //MAD
    t4.xyz = _Object2World[0].yzx * t10.xxx + t4.xyz;
    //Instruction 61402
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 61403
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61404
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 61405
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 61406
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 61407
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 61408
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61409
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 61410
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 61411
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 61412
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 61413
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 61414
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 61415
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 61416
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 61417
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 61418
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 61419
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 61420
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 61421
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 61422
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 61423
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61424
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 61425
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61426
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 61427
    //MUL
    t1.x = t1.x * t28;
    //Instruction 61428
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 61429
    //MAD
    t4.x = t28 * 0.020835 + -0.085133;
    //Instruction 61430
    //MAD
    t4.x = t28 * t4.x + 0.180141;
    //Instruction 61431
    //MAD
    t4.x = t28 * t4.x + -0.330299;
    //Instruction 61432
    //MAD
    t28 = t28 * t4.x + 0.999866;
    //Instruction 61433
    //MUL
    t4.x = t28 * t1.x;
    //Instruction 61434
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 61435
    //LT
    tb13 = abs(t10.y)<abs(t10.x);
    //Instruction 61436
    //AND
    t4.x = tb13 ? t4.x : float(0.0);
    //Instruction 61437
    //MAD
    t1.x = t1.x * t28 + t4.x;
    //Instruction 61438
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 61439
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 61440
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 61441
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 61442
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 61443
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 61444
    //LT
    tb19 = t28<(-t28);
    //Instruction 61445
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 61446
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 61447
    //LT
    tb10 = t1.x<0.0;
    //Instruction 61448
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 61449
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 61450
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61451
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 61452
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61453
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 61454
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 61455
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61456
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 61457
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 61458
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61459
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61460
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61461
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61462
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 61463
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 61464
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 61465
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 61466
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 61467
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 61468
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 61469
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 61470
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 61471
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 61472
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 61473
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 61474
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61475
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61476
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61477
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61478
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61479
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 61480
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    //Instruction 61305
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61306
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61307
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61308
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 61309
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 61310
    //SAMPLE_C_LZ
    vec3 txVec71 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec71, 0.0);
    //Instruction 61311
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61312
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 61313
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 61314
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61315
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61316
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61317
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 61318
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 61319
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 61320
    //MOV
    t0.w = 1.0;
    //Instruction 61321
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 61322
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 61323
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 61324
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61325
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61326
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61327
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61328
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61329
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61330
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61331
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_19.z) + (v_45.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_19));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  highp vec3 lightColor0_58;
  lightColor0_58 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_59;
  lightColor1_59 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_60;
  lightColor2_60 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_61;
  lightColor3_61 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_62;
  lightAttenSq_62 = unity_4LightAtten0;
  highp vec3 normal_63;
  normal_63 = worldNormal_4;
  highp vec3 col_64;
  highp vec4 ndotl_65;
  highp vec4 lengthSq_66;
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosX0 - tmpvar_43.x);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosY0 - tmpvar_43.y);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_4LightPosZ0 - tmpvar_43.z);
  lengthSq_66 = (tmpvar_67 * tmpvar_67);
  lengthSq_66 = (lengthSq_66 + (tmpvar_68 * tmpvar_68));
  lengthSq_66 = (lengthSq_66 + (tmpvar_69 * tmpvar_69));
  ndotl_65 = (tmpvar_67 * normal_63.x);
  ndotl_65 = (ndotl_65 + (tmpvar_68 * normal_63.y));
  ndotl_65 = (ndotl_65 + (tmpvar_69 * normal_63.z));
  highp vec4 tmpvar_70;
  tmpvar_70 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_65 * inversesqrt(lengthSq_66)));
  ndotl_65 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * (1.0/((1.0 + 
    (lengthSq_66 * lightAttenSq_62)
  ))));
  col_64 = (lightColor0_58 * tmpvar_71.x);
  col_64 = (col_64 + (lightColor1_59 * tmpvar_71.y));
  col_64 = (col_64 + (lightColor2_60 * tmpvar_71.z));
  col_64 = (col_64 + (lightColor3_61 * tmpvar_71.w));
  tmpvar_6 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + col_64);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_4;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_5.xyz = c_24.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
bool tb5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    //Instruction 61723
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61724
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61725
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61726
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61727
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61728
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 61729
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 61730
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61731
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61732
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61733
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61734
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61735
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61736
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61737
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61738
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61739
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61740
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 61741
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61742
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 61743
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 61744
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 61745
    //MUL
    t3.y = t0.y * t29;
    //Instruction 61746
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 61747
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 61748
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 61749
    //LOG
    t29 = log2(t11);
    //Instruction 61750
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 61751
    //EXP
    t29 = exp2(t29);
    //Instruction 61752
    //NE
    tb30 = t11!=0.0;
    //Instruction 61753
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 61754
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 61755
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61756
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 61757
    //MUL
    t11 = t0.x * t11;
    //Instruction 61758
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 61759
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 61760
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 61761
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61762
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 61763
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61764
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 61765
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 61766
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 61767
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61768
    //MOV
    t4.y = t3.y;
    //Instruction 61769
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 61770
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 61771
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 61772
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 61773
    //SQRT
    t28 = sqrt(t28);
    //Instruction 61774
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 61775
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61776
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61777
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61778
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61779
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61780
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61781
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61782
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 61783
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 61784
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 61785
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 61786
    //MUL
    t4.x = t10.y * _World2Object[0].x;
    //Instruction 61787
    //MUL
    t4.y = t10.y * _World2Object[1].x;
    //Instruction 61788
    //MUL
    t4.zw = t10.yy * _World2Object[2].xx;
    //Instruction 61789
    //MUL
    t5.x = (-t10.x) * _World2Object[0].z;
    //Instruction 61790
    //MUL
    t5.y = (-t10.x) * _World2Object[1].z;
    //Instruction 61791
    //MUL
    t5.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 61792
    //ADD
    t4 = t4 + t5;
    //Instruction 61793
    //DP3
    t1.x = dot(t4.xyw, t4.xyw);
    //Instruction 61794
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61795
    //MUL
    t4 = t1.xxxx * t4;
    //Instruction 61796
    //MUL
    t5.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 61797
    //MAD
    t5.xyz = _Object2World[0].yzx * t10.xxx + t5.xyz;
    //Instruction 61798
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 61799
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61800
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 61801
    //MUL
    t10_6.xyz = t4.wxy * t5.xyz;
    //Instruction 61802
    //MAD
    t10_6.xyz = t4.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 61803
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 61804
    //MOV
    vs_TEXCOORD0.z = t4.x;
    //Instruction 61805
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 61806
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 61807
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 61808
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 61809
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 61810
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 61811
    //MOV
    vs_TEXCOORD1.z = t4.y;
    //Instruction 61812
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 61813
    //MOV
    vs_TEXCOORD2.z = t4.w;
    //Instruction 61814
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61815
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 61816
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61817
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 61818
    //MUL
    t1.x = t1.x * t28;
    //Instruction 61819
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 61820
    //MAD
    t30 = t28 * 0.020835 + -0.085133;
    //Instruction 61821
    //MAD
    t30 = t28 * t30 + 0.180141;
    //Instruction 61822
    //MAD
    t30 = t28 * t30 + -0.330299;
    //Instruction 61823
    //MAD
    t28 = t28 * t30 + 0.999866;
    //Instruction 61824
    //MUL
    t30 = t28 * t1.x;
    //Instruction 61825
    //MAD
    t30 = t30 * -2.000000 + 1.570796;
    //Instruction 61826
    //LT
    tb5 = abs(t10.y)<abs(t10.x);
    //Instruction 61827
    //AND
    t30 = tb5 ? t30 : float(0.0);
    //Instruction 61828
    //MAD
    t1.x = t1.x * t28 + t30;
    //Instruction 61829
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 61830
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 61831
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 61832
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 61833
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 61834
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 61835
    //LT
    tb19 = t28<(-t28);
    //Instruction 61836
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 61837
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 61838
    //LT
    tb10 = t1.x<0.0;
    //Instruction 61839
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 61840
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 61841
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61842
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 61843
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61844
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 61845
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 61846
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61847
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 61848
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 61849
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61850
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61851
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61852
    //MAD
    t5.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61853
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t5.xy;
    //Instruction 61854
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 61855
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 61856
    //ADD
    t1 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 61857
    //ADD
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 61858
    //MUL
    t5 = t4.yyyy * t1;
    //Instruction 61859
    //MUL
    t1 = t1 * t1;
    //Instruction 61860
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 61861
    //MAD
    t0 = t0 * t4.xxxx + t5;
    //Instruction 61862
    //MAD
    t0 = t3 * t4.wwww + t0;
    //Instruction 61863
    //MAD
    t1 = t3 * t3 + t1;
    //Instruction 61864
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 61865
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61866
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 61867
    //MUL
    t0 = t0 * t3;
    //Instruction 61868
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61869
    //MUL
    t0 = t1 * t0;
    //Instruction 61870
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61871
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61872
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61873
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 61874
    //MUL
    t16_7.x = t4.y * t4.y;
    //Instruction 61875
    //MAD
    t16_7.x = t4.x * t4.x + (-t16_7.x);
    //Instruction 61876
    //MUL
    t16_0 = t4.ywzx * t4;
    //Instruction 61877
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 61878
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 61879
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 61880
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 61881
    //ADD
    t1.xyz = t1.xyz + t16_7.xyz;
    //Instruction 61882
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 61883
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 61884
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 61885
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 61886
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61887
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61888
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61889
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61890
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61891
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 61892
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
void main()
{
    //Instruction 61696
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61697
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61698
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61699
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 61700
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 61701
    //SAMPLE_C_LZ
    vec3 txVec66 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec66, 0.0);
    //Instruction 61702
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61703
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 61704
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 61705
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61706
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61707
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61708
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 61709
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 61710
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 61711
    //MOV
    t0.w = 1.0;
    //Instruction 61712
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 61713
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 61714
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 61715
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61716
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61717
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61718
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61719
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61720
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61721
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61722
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_17));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    //Instruction 61925
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61926
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61927
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 61928
    //MOVC
    t0 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61929
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61930
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 61931
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 61932
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61933
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61934
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61935
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61936
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61937
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61938
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61939
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61940
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61941
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 61942
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61943
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 61944
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 61945
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 61946
    //MUL
    t3.y = t0.y * t29;
    //Instruction 61947
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 61948
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 61949
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 61950
    //LOG
    t29 = log2(t11);
    //Instruction 61951
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 61952
    //EXP
    t29 = exp2(t29);
    //Instruction 61953
    //NE
    tb30 = t11!=0.0;
    //Instruction 61954
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 61955
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 61956
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61957
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 61958
    //MUL
    t11 = t0.x * t11;
    //Instruction 61959
    //ADD
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61960
    //DP3
    t29 = dot(t4.xyz, t4.xyz);
    //Instruction 61961
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 61962
    //MUL
    t4.xy = vec2(t29) * t4.xz;
    //Instruction 61963
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61964
    //DP2
    t29 = dot(t4.xz, t4.xw);
    //Instruction 61965
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61966
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 61967
    //MUL
    t4.xy = vec2(t29) * t4.xy;
    //Instruction 61968
    //MUL
    t3.xz = vec2(t11) * t4.xy;
    //Instruction 61969
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61970
    //MOV
    t5.y = t3.y;
    //Instruction 61971
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 61972
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 61973
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 61974
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 61975
    //SQRT
    t30 = sqrt(t30);
    //Instruction 61976
    //MUL
    t2.xyw = t2.xyw * vec3(t30);
    //Instruction 61977
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61978
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61979
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61980
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61981
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61982
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61983
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61984
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 61985
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 61986
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 61987
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 61988
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 61989
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 61990
    //MUL
    t3.zw = t4.yy * _World2Object[2].xx;
    //Instruction 61991
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 61992
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 61993
    //MUL
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 61994
    //ADD
    t3 = t3 + t5;
    //Instruction 61995
    //DP3
    t1 = dot(t3.xyw, t3.xyw);
    //Instruction 61996
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 61997
    //MUL
    t3 = vec4(t1) * t3;
    //Instruction 61998
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 61999
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 62000
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 62001
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 62002
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 62003
    //MUL
    t10_6.xyz = t3.wxy * t5.xyz;
    //Instruction 62004
    //MAD
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 62005
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 62006
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 62007
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 62008
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 62009
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 62010
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 62011
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 62012
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 62013
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 62014
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 62015
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 62016
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62017
    //ADD
    t1 = t10.y + t10.x;
    //Instruction 62018
    //ADD
    t1 = t10.z + t1;
    //Instruction 62019
    //FRC
    t1 = fract(t1);
    //Instruction 62020
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 62021
    //MOV
    vs_TEXCOORD4.z = t1;
    //Instruction 62022
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 62023
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 62024
    //MIN
    t10.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62025
    //MUL
    t1 = t1 * t10.x;
    //Instruction 62026
    //MUL
    t10.x = t1 * t1;
    //Instruction 62027
    //MAD
    t19.x = t10.x * 0.020835 + -0.085133;
    //Instruction 62028
    //MAD
    t19.x = t10.x * t19.x + 0.180141;
    //Instruction 62029
    //MAD
    t19.x = t10.x * t19.x + -0.330299;
    //Instruction 62030
    //MAD
    t10.x = t10.x * t19.x + 0.999866;
    //Instruction 62031
    //MUL
    t19.x = t10.x * t1;
    //Instruction 62032
    //MAD
    t19.x = t19.x * -2.000000 + 1.570796;
    //Instruction 62033
    //LT
    tb28 = abs(t4.y)<abs(t4.x);
    //Instruction 62034
    //AND
    t19.x = tb28 ? t19.x : float(0.0);
    //Instruction 62035
    //MAD
    t1 = t1 * t10.x + t19.x;
    //Instruction 62036
    //LT
    tb10 = t4.y<(-t4.y);
    //Instruction 62037
    //AND
    t10.x = tb10 ? -3.141593 : float(0.0);
    //Instruction 62038
    //ADD
    t1 = t10.x + t1;
    //Instruction 62039
    //MIN
    t10.x = min(t4.y, (-t4.x));
    //Instruction 62040
    //MAX
    t19.x = max(t4.y, (-t4.x));
    //Instruction 62041
    //GE
    tb19 = t19.x>=(-t19.x);
    //Instruction 62042
    //LT
    tb10 = t10.x<(-t10.x);
    //Instruction 62043
    //AND
    ti10 = int(uint(tb19) & uint(tb10));
    //Instruction 62044
    //MOVC
    t1 = (ti10 != 0) ? (-t1) : t1;
    //Instruction 62045
    //LT
    tb10 = t1<0.0;
    //Instruction 62046
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 62047
    //ADD
    t1 = t10.x + t1;
    //Instruction 62048
    //ADD
    t1 = t0.z + t1;
    //Instruction 62049
    //MAD
    t1 = t1 * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 62050
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 62051
    //DIV
    t1 = t1 / _TreeInfo[int(tu20) + 0].x;
    //Instruction 62052
    //GE
    tb10 = t1>=(-t1);
    //Instruction 62053
    //FRC
    t1 = fract(abs(t1));
    //Instruction 62054
    //MOVC
    t1 = (tb10) ? t1 : (-t1);
    //Instruction 62055
    //MAD
    t1 = t1 * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 62056
    //FTOU
    tu1 = uint(t1);
    //Instruction 62057
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62058
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62059
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62060
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t2.xy;
    //Instruction 62061
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 62062
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 62063
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 62064
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 62065
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 62066
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 62067
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 62068
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 61893
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61894
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61895
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 61896
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 61897
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 61898
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 61899
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61900
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 61901
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 61902
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 61903
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 61904
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 61905
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 61906
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61907
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 61908
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61909
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61910
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 61911
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 61912
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 61913
    //MOV
    t0.w = 1.0;
    //Instruction 61914
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 61915
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 61916
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 61917
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61918
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61919
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61920
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61921
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61922
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61923
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61924
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_18));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_18));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  highp vec3 lightColor0_58;
  lightColor0_58 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_59;
  lightColor1_59 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_60;
  lightColor2_60 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_61;
  lightColor3_61 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_62;
  lightAttenSq_62 = unity_4LightAtten0;
  highp vec3 normal_63;
  normal_63 = worldNormal_4;
  highp vec3 col_64;
  highp vec4 ndotl_65;
  highp vec4 lengthSq_66;
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosX0 - tmpvar_43.x);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosY0 - tmpvar_43.y);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_4LightPosZ0 - tmpvar_43.z);
  lengthSq_66 = (tmpvar_67 * tmpvar_67);
  lengthSq_66 = (lengthSq_66 + (tmpvar_68 * tmpvar_68));
  lengthSq_66 = (lengthSq_66 + (tmpvar_69 * tmpvar_69));
  ndotl_65 = (tmpvar_67 * normal_63.x);
  ndotl_65 = (ndotl_65 + (tmpvar_68 * normal_63.y));
  ndotl_65 = (ndotl_65 + (tmpvar_69 * normal_63.z));
  highp vec4 tmpvar_70;
  tmpvar_70 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_65 * inversesqrt(lengthSq_66)));
  ndotl_65 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * (1.0/((1.0 + 
    (lengthSq_66 * lightAttenSq_62)
  ))));
  col_64 = (lightColor0_58 * tmpvar_71.x);
  col_64 = (col_64 + (lightColor1_59 * tmpvar_71.y));
  col_64 = (col_64 + (lightColor2_60 * tmpvar_71.z));
  col_64 = (col_64 + (lightColor3_61 * tmpvar_71.w));
  tmpvar_6 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + col_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    //Instruction 62101
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62102
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62103
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 62104
    //MOVC
    t0 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62105
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62106
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 62107
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 62108
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62109
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62110
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62111
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62112
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62113
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62114
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62115
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62116
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62117
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 62118
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62119
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 62120
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 62121
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 62122
    //MUL
    t3.y = t0.y * t29;
    //Instruction 62123
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 62124
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 62125
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 62126
    //LOG
    t29 = log2(t11);
    //Instruction 62127
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 62128
    //EXP
    t29 = exp2(t29);
    //Instruction 62129
    //NE
    tb30 = t11!=0.0;
    //Instruction 62130
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 62131
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 62132
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62133
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 62134
    //MUL
    t11 = t0.x * t11;
    //Instruction 62135
    //ADD
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62136
    //DP3
    t29 = dot(t4.xyz, t4.xyz);
    //Instruction 62137
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 62138
    //MUL
    t4.xy = vec2(t29) * t4.xz;
    //Instruction 62139
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62140
    //DP2
    t29 = dot(t4.xz, t4.xw);
    //Instruction 62141
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62142
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 62143
    //MUL
    t4.xy = vec2(t29) * t4.xy;
    //Instruction 62144
    //MUL
    t3.xz = vec2(t11) * t4.xy;
    //Instruction 62145
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62146
    //MOV
    t5.y = t3.y;
    //Instruction 62147
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62148
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62149
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62150
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 62151
    //SQRT
    t30 = sqrt(t30);
    //Instruction 62152
    //MUL
    t2.xyw = t2.xyw * vec3(t30);
    //Instruction 62153
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62154
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62155
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62156
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62157
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62158
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62159
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62160
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 62161
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 62162
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 62163
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 62164
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 62165
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 62166
    //MUL
    t3.zw = t4.yy * _World2Object[2].xx;
    //Instruction 62167
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62168
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62169
    //MUL
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 62170
    //ADD
    t3 = t3 + t5;
    //Instruction 62171
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 62172
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62173
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 62174
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 62175
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 62176
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 62177
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62178
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 62179
    //MUL
    t10_6.xyz = t3.wxy * t5.xyz;
    //Instruction 62180
    //MAD
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 62181
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 62182
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 62183
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 62184
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 62185
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 62186
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 62187
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 62188
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 62189
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 62190
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 62191
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 62192
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62193
    //ADD
    t1.x = t10.y + t10.x;
    //Instruction 62194
    //ADD
    t1.x = t10.z + t1.x;
    //Instruction 62195
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62196
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62197
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 62198
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62199
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62200
    //MIN
    t10.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62201
    //MUL
    t1.x = t1.x * t10.x;
    //Instruction 62202
    //MUL
    t10.x = t1.x * t1.x;
    //Instruction 62203
    //MAD
    t19.x = t10.x * 0.020835 + -0.085133;
    //Instruction 62204
    //MAD
    t19.x = t10.x * t19.x + 0.180141;
    //Instruction 62205
    //MAD
    t19.x = t10.x * t19.x + -0.330299;
    //Instruction 62206
    //MAD
    t10.x = t10.x * t19.x + 0.999866;
    //Instruction 62207
    //MUL
    t19.x = t10.x * t1.x;
    //Instruction 62208
    //MAD
    t19.x = t19.x * -2.000000 + 1.570796;
    //Instruction 62209
    //LT
    tb28 = abs(t4.y)<abs(t4.x);
    //Instruction 62210
    //AND
    t19.x = tb28 ? t19.x : float(0.0);
    //Instruction 62211
    //MAD
    t1.x = t1.x * t10.x + t19.x;
    //Instruction 62212
    //LT
    tb10 = t4.y<(-t4.y);
    //Instruction 62213
    //AND
    t10.x = tb10 ? -3.141593 : float(0.0);
    //Instruction 62214
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 62215
    //MIN
    t10.x = min(t4.y, (-t4.x));
    //Instruction 62216
    //MAX
    t19.x = max(t4.y, (-t4.x));
    //Instruction 62217
    //GE
    tb19 = t19.x>=(-t19.x);
    //Instruction 62218
    //LT
    tb10 = t10.x<(-t10.x);
    //Instruction 62219
    //AND
    ti10 = int(uint(tb19) & uint(tb10));
    //Instruction 62220
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 62221
    //LT
    tb10 = t1.x<0.0;
    //Instruction 62222
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 62223
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 62224
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62225
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 62226
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62227
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 62228
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 62229
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62230
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 62231
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 62232
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62233
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62234
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62235
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62236
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 62237
    //ADD
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 62238
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 62239
    //ADD
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 62240
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 62241
    //MUL
    t2 = t2 * t2;
    //Instruction 62242
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 62243
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 62244
    //MAD
    t1 = t0 * t3.wwww + t1;
    //Instruction 62245
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 62246
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 62247
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62248
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 62249
    //MUL
    t1 = t1 * t2;
    //Instruction 62250
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62251
    //MUL
    t0 = t0 * t1;
    //Instruction 62252
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 62253
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 62254
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 62255
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 62256
    //MUL
    t16_7.x = t3.y * t3.y;
    //Instruction 62257
    //MAD
    t16_7.x = t3.x * t3.x + (-t16_7.x);
    //Instruction 62258
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 62259
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 62260
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 62261
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 62262
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 62263
    //ADD
    t1.xyz = t1.xyz + t16_7.xyz;
    //Instruction 62264
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62265
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 62069
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62070
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62071
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 62072
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 62073
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 62074
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 62075
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62076
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 62077
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 62078
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 62079
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 62080
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 62081
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 62082
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62083
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 62084
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62085
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62086
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 62087
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 62088
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 62089
    //MOV
    t0.w = 1.0;
    //Instruction 62090
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 62091
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 62092
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 62093
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62094
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 62095
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62096
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 62097
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 62098
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 62099
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62100
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_43;
  tmpvar_43 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_43;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_44;
  tmpvar_44 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(((v_45.xyz * tmpvar_19.z) + (v_46.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_47;
  highp mat3 tmpvar_48;
  tmpvar_48[0] = _Object2World[0].xyz;
  tmpvar_48[1] = _Object2World[1].xyz;
  tmpvar_48[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize((tmpvar_48 * tmpvar_19));
  worldTangent_3 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_51;
  tmpvar_51 = -(tmpvar_50);
  worldBinormal_2 = tmpvar_51;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.x;
  tmpvar_52.y = worldBinormal_2.x;
  tmpvar_52.z = worldNormal_4.x;
  tmpvar_52.w = tmpvar_44.x;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.y;
  tmpvar_53.y = worldBinormal_2.y;
  tmpvar_53.z = worldNormal_4.y;
  tmpvar_53.w = tmpvar_44.y;
  highp vec4 tmpvar_54;
  tmpvar_54.x = worldTangent_3.z;
  tmpvar_54.y = worldBinormal_2.z;
  tmpvar_54.z = worldNormal_4.z;
  tmpvar_54.w = tmpvar_44.z;
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_4;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  highp vec3 lightColor0_59;
  lightColor0_59 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_60;
  lightColor1_60 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_61;
  lightColor2_61 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_62;
  lightColor3_62 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_63;
  lightAttenSq_63 = unity_4LightAtten0;
  highp vec3 normal_64;
  normal_64 = worldNormal_4;
  highp vec3 col_65;
  highp vec4 ndotl_66;
  highp vec4 lengthSq_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosX0 - tmpvar_44.x);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_4LightPosY0 - tmpvar_44.y);
  highp vec4 tmpvar_70;
  tmpvar_70 = (unity_4LightPosZ0 - tmpvar_44.z);
  lengthSq_67 = (tmpvar_68 * tmpvar_68);
  lengthSq_67 = (lengthSq_67 + (tmpvar_69 * tmpvar_69));
  lengthSq_67 = (lengthSq_67 + (tmpvar_70 * tmpvar_70));
  ndotl_66 = (tmpvar_68 * normal_64.x);
  ndotl_66 = (ndotl_66 + (tmpvar_69 * normal_64.y));
  ndotl_66 = (ndotl_66 + (tmpvar_70 * normal_64.z));
  highp vec4 tmpvar_71;
  tmpvar_71 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_66 * inversesqrt(lengthSq_67)));
  ndotl_66 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * (1.0/((1.0 + 
    (lengthSq_67 * lightAttenSq_63)
  ))));
  col_65 = (lightColor0_59 * tmpvar_72.x);
  col_65 = (col_65 + (lightColor1_60 * tmpvar_72.y));
  col_65 = (col_65 + (lightColor2_61 * tmpvar_72.z));
  col_65 = (col_65 + (lightColor3_62 * tmpvar_72.w));
  tmpvar_6 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + col_65);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_52;
  xlv_TEXCOORD1 = tmpvar_53;
  xlv_TEXCOORD2 = tmpvar_54;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_18));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump float t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 62302
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62303
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62304
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 62305
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62306
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62307
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 62308
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 62309
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62310
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62311
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62312
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62313
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62314
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62315
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62316
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62317
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62318
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 62319
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62320
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 62321
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 62322
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 62323
    //MUL
    t3.y = t0.y * t32;
    //Instruction 62324
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 62325
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 62326
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 62327
    //LOG
    t32 = log2(t12);
    //Instruction 62328
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 62329
    //EXP
    t32 = exp2(t32);
    //Instruction 62330
    //NE
    tb33 = t12!=0.0;
    //Instruction 62331
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 62332
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 62333
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62334
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 62335
    //MUL
    t12 = t0.x * t12;
    //Instruction 62336
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62337
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 62338
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62339
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 62340
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62341
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 62342
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62343
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62344
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 62345
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 62346
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62347
    //MOV
    t5.y = t3.y;
    //Instruction 62348
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62349
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62350
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62351
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 62352
    //SQRT
    t33 = sqrt(t33);
    //Instruction 62353
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 62354
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62355
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62356
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62357
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62358
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62359
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62360
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62361
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 62362
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 62363
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 62364
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 62365
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 62366
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 62367
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 62368
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62369
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62370
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 62371
    //ADD
    t5 = t5 + t6;
    //Instruction 62372
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 62373
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62374
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 62375
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 62376
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 62377
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 62378
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62379
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 62380
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 62381
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 62382
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 62383
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 62384
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 62385
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 62386
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 62387
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 62388
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 62389
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 62390
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 62391
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 62392
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 62393
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62394
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 62395
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 62396
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62397
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62398
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 62399
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62400
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62401
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62402
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 62403
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 62404
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 62405
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 62406
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 62407
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 62408
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 62409
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 62410
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 62411
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 62412
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 62413
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 62414
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 62415
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62416
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 62417
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 62418
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 62419
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 62420
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 62421
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 62422
    //LT
    tb11 = t1.x<0.0;
    //Instruction 62423
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 62424
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62425
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62426
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 62427
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62428
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 62429
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 62430
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62431
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 62432
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 62433
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62434
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62435
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62436
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62437
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t3.xy;
    //Instruction 62438
    //MUL
    t16_8 = t5.y * t5.y;
    //Instruction 62439
    //MAD
    t16_8 = t5.x * t5.x + (-t16_8);
    //Instruction 62440
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 62441
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 62442
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 62443
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 62444
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_8) + t16_9.xyz;
    //Instruction 62445
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 62446
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 62447
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 62448
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62449
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62450
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62451
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62452
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62453
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 62454
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 62266
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62267
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62268
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 62269
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 62270
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 62271
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 62272
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62273
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 62274
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 62275
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 62276
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 62277
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 62278
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 62279
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62280
    //SAMPLE_C_LZ
    vec3 txVec67 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec67, 0.0);
    //Instruction 62281
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 62282
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 62283
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 62284
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 62285
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62286
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62287
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 62288
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 62289
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 62290
    //MOV
    t0.w = 1.0;
    //Instruction 62291
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 62292
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 62293
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 62294
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62295
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 62296
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62297
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 62298
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 62299
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 62300
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62301
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_43;
  tmpvar_43 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_43;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_44;
  tmpvar_44 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize(((v_45.xyz * tmpvar_19.z) + (v_46.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_47;
  highp mat3 tmpvar_48;
  tmpvar_48[0] = _Object2World[0].xyz;
  tmpvar_48[1] = _Object2World[1].xyz;
  tmpvar_48[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize((tmpvar_48 * tmpvar_19));
  worldTangent_3 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_51;
  tmpvar_51 = -(tmpvar_50);
  worldBinormal_2 = tmpvar_51;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.x;
  tmpvar_52.y = worldBinormal_2.x;
  tmpvar_52.z = worldNormal_4.x;
  tmpvar_52.w = tmpvar_44.x;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.y;
  tmpvar_53.y = worldBinormal_2.y;
  tmpvar_53.z = worldNormal_4.y;
  tmpvar_53.w = tmpvar_44.y;
  highp vec4 tmpvar_54;
  tmpvar_54.x = worldTangent_3.z;
  tmpvar_54.y = worldBinormal_2.z;
  tmpvar_54.z = worldNormal_4.z;
  tmpvar_54.w = tmpvar_44.z;
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_4;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  highp vec3 lightColor0_59;
  lightColor0_59 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_60;
  lightColor1_60 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_61;
  lightColor2_61 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_62;
  lightColor3_62 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_63;
  lightAttenSq_63 = unity_4LightAtten0;
  highp vec3 normal_64;
  normal_64 = worldNormal_4;
  highp vec3 col_65;
  highp vec4 ndotl_66;
  highp vec4 lengthSq_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosX0 - tmpvar_44.x);
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_4LightPosY0 - tmpvar_44.y);
  highp vec4 tmpvar_70;
  tmpvar_70 = (unity_4LightPosZ0 - tmpvar_44.z);
  lengthSq_67 = (tmpvar_68 * tmpvar_68);
  lengthSq_67 = (lengthSq_67 + (tmpvar_69 * tmpvar_69));
  lengthSq_67 = (lengthSq_67 + (tmpvar_70 * tmpvar_70));
  ndotl_66 = (tmpvar_68 * normal_64.x);
  ndotl_66 = (ndotl_66 + (tmpvar_69 * normal_64.y));
  ndotl_66 = (ndotl_66 + (tmpvar_70 * normal_64.z));
  highp vec4 tmpvar_71;
  tmpvar_71 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_66 * inversesqrt(lengthSq_67)));
  ndotl_66 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * (1.0/((1.0 + 
    (lengthSq_67 * lightAttenSq_63)
  ))));
  col_65 = (lightColor0_59 * tmpvar_72.x);
  col_65 = (col_65 + (lightColor1_60 * tmpvar_72.y));
  col_65 = (col_65 + (lightColor2_61 * tmpvar_72.z));
  col_65 = (col_65 + (lightColor3_62 * tmpvar_72.w));
  tmpvar_6 = ((x2_57 + (unity_SHC.xyz * 
    ((normal_56.x * normal_56.x) - (normal_56.y * normal_56.y))
  )) + col_65);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_52;
  xlv_TEXCOORD1 = tmpvar_53;
  xlv_TEXCOORD2 = tmpvar_54;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 61517
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61518
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61519
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 61520
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61521
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61522
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 61523
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 61524
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61525
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61526
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61527
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61528
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61529
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61530
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61531
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61532
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61533
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 61534
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61535
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 61536
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 61537
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 61538
    //MUL
    t3.y = t0.y * t32;
    //Instruction 61539
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 61540
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 61541
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 61542
    //LOG
    t32 = log2(t12);
    //Instruction 61543
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 61544
    //EXP
    t32 = exp2(t32);
    //Instruction 61545
    //NE
    tb33 = t12!=0.0;
    //Instruction 61546
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 61547
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 61548
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61549
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 61550
    //MUL
    t12 = t0.x * t12;
    //Instruction 61551
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61552
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 61553
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 61554
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 61555
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61556
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 61557
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61558
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 61559
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 61560
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 61561
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61562
    //MOV
    t5.y = t3.y;
    //Instruction 61563
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 61564
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 61565
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 61566
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 61567
    //SQRT
    t33 = sqrt(t33);
    //Instruction 61568
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 61569
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61570
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61571
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61572
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61573
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61574
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61575
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61576
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 61577
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 61578
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 61579
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 61580
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 61581
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 61582
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 61583
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 61584
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 61585
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 61586
    //ADD
    t5 = t5 + t6;
    //Instruction 61587
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 61588
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61589
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 61590
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 61591
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 61592
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 61593
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61594
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 61595
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 61596
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 61597
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 61598
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 61599
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 61600
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 61601
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 61602
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 61603
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 61604
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 61605
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 61606
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 61607
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 61608
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61609
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 61610
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 61611
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61612
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61613
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 61614
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 61615
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61616
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 61617
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 61618
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 61619
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 61620
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 61621
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 61622
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 61623
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 61624
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 61625
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 61626
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 61627
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 61628
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 61629
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 61630
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 61631
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 61632
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 61633
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 61634
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 61635
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 61636
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 61637
    //LT
    tb11 = t1.x<0.0;
    //Instruction 61638
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 61639
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 61640
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61641
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 61642
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61643
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 61644
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 61645
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61646
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 61647
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 61648
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61649
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61650
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61651
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61652
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t4.xy;
    //Instruction 61653
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 61654
    //ADD
    t1 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 61655
    //ADD
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 61656
    //MUL
    t4 = t5.yyyy * t1;
    //Instruction 61657
    //MUL
    t1 = t1 * t1;
    //Instruction 61658
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 61659
    //MAD
    t0 = t0 * t5.xxxx + t4;
    //Instruction 61660
    //MAD
    t0 = t3 * t5.wwww + t0;
    //Instruction 61661
    //MAD
    t1 = t3 * t3 + t1;
    //Instruction 61662
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 61663
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61664
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 61665
    //MUL
    t0 = t0 * t3;
    //Instruction 61666
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61667
    //MUL
    t0 = t1 * t0;
    //Instruction 61668
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61669
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61670
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61671
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 61672
    //MUL
    t16_8.x = t5.y * t5.y;
    //Instruction 61673
    //MAD
    t16_8.x = t5.x * t5.x + (-t16_8.x);
    //Instruction 61674
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 61675
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 61676
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 61677
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 61678
    //MAD
    t16_8.xyz = unity_SHC.xyz * t16_8.xxx + t16_9.xyz;
    //Instruction 61679
    //ADD
    t1.xyz = t1.xyz + t16_8.xyz;
    //Instruction 61680
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 61681
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 61682
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 61683
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 61684
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61685
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61686
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61687
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61688
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61689
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 61690
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 61481
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61482
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61483
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 61484
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 61485
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 61486
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 61487
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61488
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 61489
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 61490
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 61491
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 61492
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 61493
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 61494
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61495
    //SAMPLE_C_LZ
    vec3 txVec72 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec72, 0.0);
    //Instruction 61496
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61497
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 61498
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 61499
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 61500
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61501
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61502
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 61503
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 61504
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 61505
    //MOV
    t0.w = 1.0;
    //Instruction 61506
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 61507
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 61508
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 61509
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61510
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 61511
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61512
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 61513
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 61514
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 61515
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61516
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = worldNormal_2;
  mediump vec4 normal_39;
  normal_39 = tmpvar_38;
  mediump vec3 x2_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_39.xyzz * normal_39.yzzx);
  x2_40.x = dot (unity_SHBr, tmpvar_41);
  x2_40.y = dot (unity_SHBg, tmpvar_41);
  x2_40.z = dot (unity_SHBb, tmpvar_41);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
  xlv_TEXCOORD5 = (x2_40 + (unity_SHC.xyz * (
    (normal_39.x * normal_39.x)
   - 
    (normal_39.y * normal_39.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 61718
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 61719
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 61720
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61721
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 61722
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 61723
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61724
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 61725
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61726
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 61727
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61728
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 61729
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 61730
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 61731
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61732
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 61733
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61734
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 61735
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 61736
    //FTOU
    tu18 = uint(t18);
    //Instruction 61737
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 61738
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 61739
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 61740
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 61741
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 61742
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 61743
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 61744
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 61745
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 61746
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 61747
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 61748
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 61749
    //LOG
    t1.x = log2(t6);
    //Instruction 61750
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 61751
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 61752
    //NE
    tb7 = t6!=0.0;
    //Instruction 61753
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 61754
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 61755
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 61756
    //MOV
    t1.y = t2.w;
    //Instruction 61757
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 61758
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 61759
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 61760
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 61761
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 61762
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 61763
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 61764
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 61765
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 61766
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 61767
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 61768
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 61769
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 61770
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 61771
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 61772
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 61773
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 61774
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 61775
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 61776
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 61777
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 61778
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 61779
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 61780
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 61781
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 61782
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 61783
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 61784
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 61785
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 61786
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 61787
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 61788
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 61789
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 61790
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61791
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 61792
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 61793
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 61794
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 61795
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61796
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61797
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61798
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61799
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t4.xy;
    //Instruction 61800
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 61801
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61802
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 61803
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 61804
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61805
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 61806
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 61807
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 61808
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 61809
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 61810
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 61811
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 61812
    //MUL
    t16_3 = t2.y * t2.y;
    //Instruction 61813
    //MAD
    t16_3 = t2.x * t2.x + (-t16_3);
    //Instruction 61814
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 61815
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 61816
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 61817
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 61818
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_3) + t16_5.xyz;
    //Instruction 61819
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 61691
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61692
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 61693
    //MOV
    t1.x = t16_0.x;
    //Instruction 61694
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 61695
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61696
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61697
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61698
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61699
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61700
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61701
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61702
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61703
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61704
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61705
    //MOV
    t16_0.w = 1.0;
    //Instruction 61706
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61707
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61708
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61709
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61710
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61711
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 61712
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61713
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 61714
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 61715
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61716
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61717
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_2;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD5 = (x2_41 + (unity_SHC.xyz * (
    (normal_40.x * normal_40.x)
   - 
    (normal_40.y * normal_40.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  highp vec3 lightColor0_44;
  lightColor0_44 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_45;
  lightColor1_45 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_46;
  lightColor2_46 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_47;
  lightColor3_47 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_48;
  lightAttenSq_48 = unity_4LightAtten0;
  highp vec3 normal_49;
  normal_49 = worldNormal_2;
  highp vec3 col_50;
  highp vec4 ndotl_51;
  highp vec4 lengthSq_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (unity_4LightPosX0 - tmpvar_35.x);
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosY0 - tmpvar_35.y);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosZ0 - tmpvar_35.z);
  lengthSq_52 = (tmpvar_53 * tmpvar_53);
  lengthSq_52 = (lengthSq_52 + (tmpvar_54 * tmpvar_54));
  lengthSq_52 = (lengthSq_52 + (tmpvar_55 * tmpvar_55));
  ndotl_51 = (tmpvar_53 * normal_49.x);
  ndotl_51 = (ndotl_51 + (tmpvar_54 * normal_49.y));
  ndotl_51 = (ndotl_51 + (tmpvar_55 * normal_49.z));
  highp vec4 tmpvar_56;
  tmpvar_56 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_51 * inversesqrt(lengthSq_52)));
  ndotl_51 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (tmpvar_56 * (1.0/((1.0 + 
    (lengthSq_52 * lightAttenSq_48)
  ))));
  col_50 = (lightColor0_44 * tmpvar_57.x);
  col_50 = (col_50 + (lightColor1_45 * tmpvar_57.y));
  col_50 = (col_50 + (lightColor2_46 * tmpvar_57.z));
  col_50 = (col_50 + (lightColor3_47 * tmpvar_57.w));
  tmpvar_5 = ((x2_42 + (unity_SHC.xyz * 
    ((normal_41.x * normal_41.x) - (normal_41.y * normal_41.y))
  )) + col_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_35;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
highp vec2 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 61847
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 61848
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 61849
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61850
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 61851
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 61852
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61853
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 61854
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61855
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 61856
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61857
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 61858
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 61859
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 61860
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61861
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 61862
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61863
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 61864
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 61865
    //FTOU
    tu24 = uint(t24);
    //Instruction 61866
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 61867
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 61868
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 61869
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 61870
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 61871
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 61872
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 61873
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 61874
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 61875
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 61876
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 61877
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 61878
    //LOG
    t1.x = log2(t8);
    //Instruction 61879
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 61880
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 61881
    //NE
    tb9 = t8!=0.0;
    //Instruction 61882
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 61883
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 61884
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 61885
    //MOV
    t1.y = t2.w;
    //Instruction 61886
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 61887
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 61888
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 61889
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 61890
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 61891
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 61892
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 61893
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 61894
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 61895
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 61896
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 61897
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 61898
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 61899
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 61900
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 61901
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 61902
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 61903
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 61904
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 61905
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 61906
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 61907
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 61908
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 61909
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 61910
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 61911
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 61912
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 61913
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 61914
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 61915
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 61916
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 61917
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 61918
    //ADD
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 61919
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 61920
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61921
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 61922
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 61923
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 61924
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 61925
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61926
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61927
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61928
    //MAD
    t5.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61929
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t16.xy : t5.xy;
    //Instruction 61930
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 61931
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61932
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 61933
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 61934
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61935
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 61936
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 61937
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 61938
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 61939
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 61940
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 61941
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 61942
    //ADD
    t0 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 61943
    //ADD
    t1 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 61944
    //ADD
    t3 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 61945
    //MUL
    t4 = t2.yyyy * t3;
    //Instruction 61946
    //MUL
    t3 = t3 * t3;
    //Instruction 61947
    //MAD
    t3 = t1 * t1 + t3;
    //Instruction 61948
    //MAD
    t1 = t1 * t2.xxxx + t4;
    //Instruction 61949
    //MAD
    t1 = t0 * t2.zzzz + t1;
    //Instruction 61950
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 61951
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 61952
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61953
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 61954
    //MUL
    t1 = t1 * t3;
    //Instruction 61955
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61956
    //MUL
    t0 = t0 * t1;
    //Instruction 61957
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61958
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61959
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61960
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 61961
    //MUL
    t16_6.x = t2.y * t2.y;
    //Instruction 61962
    //MAD
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    //Instruction 61963
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 61964
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 61965
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 61966
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 61967
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 61968
    //ADD
    t0.xyz = t0.xyz + t16_6.xyz;
    //Instruction 61969
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 61970
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 61820
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61821
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 61822
    //MOV
    t1.x = t16_0.x;
    //Instruction 61823
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 61824
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61825
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61826
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61827
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61828
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61829
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61830
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61831
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61832
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61833
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61834
    //MOV
    t16_0.w = 1.0;
    //Instruction 61835
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61836
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61837
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61838
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61839
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61840
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 61841
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61842
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 61843
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 61844
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61845
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61846
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  highp vec3 lightColor0_45;
  lightColor0_45 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_46;
  lightColor1_46 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_47;
  lightColor2_47 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_48;
  lightColor3_48 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_49;
  lightAttenSq_49 = unity_4LightAtten0;
  highp vec3 normal_50;
  normal_50 = worldNormal_2;
  highp vec3 col_51;
  highp vec4 ndotl_52;
  highp vec4 lengthSq_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosZ0 - tmpvar_36.z);
  lengthSq_53 = (tmpvar_54 * tmpvar_54);
  lengthSq_53 = (lengthSq_53 + (tmpvar_55 * tmpvar_55));
  lengthSq_53 = (lengthSq_53 + (tmpvar_56 * tmpvar_56));
  ndotl_52 = (tmpvar_54 * normal_50.x);
  ndotl_52 = (ndotl_52 + (tmpvar_55 * normal_50.y));
  ndotl_52 = (ndotl_52 + (tmpvar_56 * normal_50.z));
  highp vec4 tmpvar_57;
  tmpvar_57 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_52 * inversesqrt(lengthSq_53)));
  ndotl_52 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_57 * (1.0/((1.0 + 
    (lengthSq_53 * lightAttenSq_49)
  ))));
  col_51 = (lightColor0_45 * tmpvar_58.x);
  col_51 = (col_51 + (lightColor1_46 * tmpvar_58.y));
  col_51 = (col_51 + (lightColor2_47 * tmpvar_58.z));
  col_51 = (col_51 + (lightColor3_48 * tmpvar_58.w));
  tmpvar_5 = ((x2_43 + (unity_SHC.xyz * 
    ((normal_42.x * normal_42.x) - (normal_42.y * normal_42.y))
  )) + col_51);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_36;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_2;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD5 = (x2_41 + (unity_SHC.xyz * (
    (normal_40.x * normal_40.x)
   - 
    (normal_40.y * normal_40.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec4 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 62002
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 62003
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 62004
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62005
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 62006
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 62007
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62008
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 62009
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62010
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 62011
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62012
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 62013
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 62014
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 62015
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62016
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 62017
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62018
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62019
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 62020
    //FTOU
    tu18 = uint(t18);
    //Instruction 62021
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 62022
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 62023
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62024
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 62025
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 62026
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 62027
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 62028
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 62029
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 62030
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 62031
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 62032
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 62033
    //LOG
    t1.x = log2(t6);
    //Instruction 62034
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 62035
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 62036
    //NE
    tb7 = t6!=0.0;
    //Instruction 62037
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 62038
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 62039
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 62040
    //MOV
    t1.y = t2.w;
    //Instruction 62041
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 62042
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62043
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 62044
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 62045
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 62046
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 62047
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 62048
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 62049
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 62050
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 62051
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 62052
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 62053
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 62054
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 62055
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 62056
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 62057
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 62058
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 62059
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 62060
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 62061
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 62062
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 62063
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 62064
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 62065
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 62066
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 62067
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62068
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 62069
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 62070
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 62071
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 62072
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 62073
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 62074
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62075
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 62076
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 62077
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 62078
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 62079
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 62080
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 62081
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62082
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62083
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t4.xy;
    //Instruction 62084
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 62085
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62086
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 62087
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 62088
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62089
    //MUL
    t0.w = t0.y * _ProjectionParams.x;
    //Instruction 62090
    //MUL
    t4.xzw = t0.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 62091
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 62092
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 62093
    //MUL
    t0.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 62094
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 62095
    //MUL
    t16_3 = t2.y * t2.y;
    //Instruction 62096
    //MAD
    t16_3 = t2.x * t2.x + (-t16_3);
    //Instruction 62097
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 62098
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 62099
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 62100
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 62101
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_3) + t16_5.xyz;
    //Instruction 62102
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 62103
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 62104
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 62105
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62106
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62107
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62108
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62109
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62110
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 62111
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 61971
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61972
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 61973
    //MOV
    t1.x = t16_0.x;
    //Instruction 61974
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 61975
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61976
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61977
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61978
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61979
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61980
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61981
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61982
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61983
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61984
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61985
    //MOV
    t16_0.w = 1.0;
    //Instruction 61986
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61987
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61988
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61989
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61990
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61991
    //SAMPLE_C_LZ
    vec3 txVec73 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec73, 0.0);
    //Instruction 61992
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 61993
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 61994
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 61995
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 61996
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61997
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 61998
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 61999
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62000
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62001
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  highp vec3 lightColor0_45;
  lightColor0_45 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_46;
  lightColor1_46 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_47;
  lightColor2_47 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_48;
  lightColor3_48 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_49;
  lightAttenSq_49 = unity_4LightAtten0;
  highp vec3 normal_50;
  normal_50 = worldNormal_2;
  highp vec3 col_51;
  highp vec4 ndotl_52;
  highp vec4 lengthSq_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosZ0 - tmpvar_36.z);
  lengthSq_53 = (tmpvar_54 * tmpvar_54);
  lengthSq_53 = (lengthSq_53 + (tmpvar_55 * tmpvar_55));
  lengthSq_53 = (lengthSq_53 + (tmpvar_56 * tmpvar_56));
  ndotl_52 = (tmpvar_54 * normal_50.x);
  ndotl_52 = (ndotl_52 + (tmpvar_55 * normal_50.y));
  ndotl_52 = (ndotl_52 + (tmpvar_56 * normal_50.z));
  highp vec4 tmpvar_57;
  tmpvar_57 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_52 * inversesqrt(lengthSq_53)));
  ndotl_52 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_57 * (1.0/((1.0 + 
    (lengthSq_53 * lightAttenSq_49)
  ))));
  col_51 = (lightColor0_45 * tmpvar_58.x);
  col_51 = (col_51 + (lightColor1_46 * tmpvar_58.y));
  col_51 = (col_51 + (lightColor2_47 * tmpvar_58.z));
  col_51 = (col_51 + (lightColor3_48 * tmpvar_58.w));
  tmpvar_5 = ((x2_43 + (unity_SHC.xyz * 
    ((normal_42.x * normal_42.x) - (normal_42.y * normal_42.y))
  )) + col_51);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_36;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 60740
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 60741
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 60742
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60743
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 60744
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 60745
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60746
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 60747
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60748
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 60749
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60750
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 60751
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 60752
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 60753
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60754
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 60755
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60756
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 60757
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 60758
    //FTOU
    tu24 = uint(t24);
    //Instruction 60759
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 60760
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 60761
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 60762
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 60763
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 60764
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 60765
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 60766
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 60767
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 60768
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 60769
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 60770
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 60771
    //LOG
    t1.x = log2(t8);
    //Instruction 60772
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 60773
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 60774
    //NE
    tb9 = t8!=0.0;
    //Instruction 60775
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 60776
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 60777
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 60778
    //MOV
    t1.y = t2.w;
    //Instruction 60779
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 60780
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 60781
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 60782
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 60783
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 60784
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 60785
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 60786
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 60787
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 60788
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 60789
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 60790
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 60791
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 60792
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 60793
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 60794
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 60795
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 60796
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 60797
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 60798
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 60799
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 60800
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 60801
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 60802
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 60803
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 60804
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 60805
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 60806
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 60807
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 60808
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 60809
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 60810
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 60811
    //ADD
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 60812
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 60813
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60814
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 60815
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 60816
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 60817
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 60818
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 60819
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 60820
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60821
    //MAD
    t5.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60822
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t16.xy : t5.xy;
    //Instruction 60823
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 60824
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 60825
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 60826
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 60827
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 60828
    //MUL
    t0.w = t0.y * _ProjectionParams.x;
    //Instruction 60829
    //MUL
    t5.xzw = t0.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 60830
    //ADD
    t5.xy = t5.zz + t5.xw;
    //Instruction 60831
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 60832
    //MUL
    t0.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 60833
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 60834
    //ADD
    t0 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 60835
    //ADD
    t3 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 60836
    //ADD
    t4 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 60837
    //MUL
    t5 = t2.yyyy * t3;
    //Instruction 60838
    //MUL
    t3 = t3 * t3;
    //Instruction 60839
    //MAD
    t3 = t0 * t0 + t3;
    //Instruction 60840
    //MAD
    t0 = t0 * t2.xxxx + t5;
    //Instruction 60841
    //MAD
    t0 = t4 * t2.zzzz + t0;
    //Instruction 60842
    //MAD
    t3 = t4 * t4 + t3;
    //Instruction 60843
    //RSQ
    t4 = inversesqrt(t3);
    //Instruction 60844
    //MAD
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 60845
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 60846
    //MUL
    t0 = t0 * t4;
    //Instruction 60847
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 60848
    //MUL
    t0 = t3 * t0;
    //Instruction 60849
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 60850
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 60851
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 60852
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 60853
    //MUL
    t16_6.x = t2.y * t2.y;
    //Instruction 60854
    //MAD
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    //Instruction 60855
    //MUL
    t16_2 = t2.yzzx * t2.xyzz;
    //Instruction 60856
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 60857
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 60858
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 60859
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 60860
    //ADD
    t0.xyz = t0.xyz + t16_6.xyz;
    //Instruction 60861
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 60862
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 60863
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 60864
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 60865
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 60866
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 60867
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 60868
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 60869
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 60870
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 60871
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 60709
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 60710
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 60711
    //MOV
    t1.x = t16_0.x;
    //Instruction 60712
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 60713
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 60714
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 60715
    //LT
    tb1 = t16_1<0.0;
    //Instruction 60716
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 60717
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60718
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60719
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60720
    //LT
    tb1 = t10_2<0.0;
    //Instruction 60721
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 60722
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60723
    //MOV
    t16_0.w = 1.0;
    //Instruction 60724
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 60725
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 60726
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 60727
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60728
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 60729
    //SAMPLE_C_LZ
    vec3 txVec54 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec54, 0.0);
    //Instruction 60730
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 60731
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 60732
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 60733
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 60734
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60735
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 60736
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 60737
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 60738
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60739
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_2;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD5 = (x2_41 + (unity_SHC.xyz * (
    (normal_40.x * normal_40.x)
   - 
    (normal_40.y * normal_40.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 60908
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 60909
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 60910
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 60911
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 60912
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 60913
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 60914
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 60915
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 60916
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 60917
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 60918
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 60919
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 60920
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 60921
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 60922
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 60923
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 60924
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 60925
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 60926
    //FTOU
    tu9 = uint(t9);
    //Instruction 60927
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 60928
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 60929
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 60930
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 60931
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 60932
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 60933
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 60934
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 60935
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 60936
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 60937
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 60938
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 60939
    //LOG
    t14 = log2(t7.x);
    //Instruction 60940
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 60941
    //EXP
    t14 = exp2(t14);
    //Instruction 60942
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 60943
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 60944
    //MUL
    t7.x = t7.x * t21;
    //Instruction 60945
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 60946
    //MOV
    t4.y = t3.w;
    //Instruction 60947
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 60948
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 60949
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 60950
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 60951
    //SQRT
    t22 = sqrt(t22);
    //Instruction 60952
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 60953
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 60954
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 60955
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 60956
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 60957
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 60958
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 60959
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 60960
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 60961
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 60962
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 60963
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 60964
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 60965
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 60966
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 60967
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 60968
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 60969
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 60970
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 60971
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 60972
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 60973
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 60974
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 60975
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 60976
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 60977
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 60978
    //MAD
    t3.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 60979
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 60980
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 60981
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 60982
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 60983
    //FRC
    t1.x = fract(t1.x);
    //Instruction 60984
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 60985
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 60986
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 60987
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 60988
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 60989
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 60990
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 60991
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 60992
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60993
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 60994
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t8.xy : t3.xy;
    //Instruction 60995
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 60996
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 60997
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 60998
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 60999
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 61000
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 61001
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 61002
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 61003
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 61004
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 61005
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 61006
    //MUL
    t16_5 = t2.z * t2.z;
    //Instruction 61007
    //MAD
    t16_5 = t2.x * t2.x + (-t16_5);
    //Instruction 61008
    //MUL
    t16_0 = t2.zwwx * t2.xzww;
    //Instruction 61009
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 61010
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 61011
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 61012
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 61013
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 60872
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 60873
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 60874
    //MOV
    t1.x = t16_0.x;
    //Instruction 60875
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 60876
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 60877
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 60878
    //LT
    tb1 = t16_1<0.0;
    //Instruction 60879
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 60880
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 60881
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 60882
    //LT
    tb1 = t10_2<0.0;
    //Instruction 60883
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 60884
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 60885
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 60886
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 60887
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 60888
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 60889
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 60890
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 60891
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 60892
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 60893
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 60894
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 60895
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 60896
    //MOV
    t16_0.w = 1.0;
    //Instruction 60897
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 60898
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 60899
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 60900
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 60901
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 60902
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 60903
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 60904
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 60905
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 60906
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 60907
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD5 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_40;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = worldNormal_2;
  mediump vec4 normal_42;
  normal_42 = tmpvar_41;
  mediump vec3 x2_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = (normal_42.xyzz * normal_42.yzzx);
  x2_43.x = dot (unity_SHBr, tmpvar_44);
  x2_43.y = dot (unity_SHBg, tmpvar_44);
  x2_43.z = dot (unity_SHBb, tmpvar_44);
  highp vec3 lightColor0_45;
  lightColor0_45 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_46;
  lightColor1_46 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_47;
  lightColor2_47 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_48;
  lightColor3_48 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_49;
  lightAttenSq_49 = unity_4LightAtten0;
  highp vec3 normal_50;
  normal_50 = worldNormal_2;
  highp vec3 col_51;
  highp vec4 ndotl_52;
  highp vec4 lengthSq_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosZ0 - tmpvar_36.z);
  lengthSq_53 = (tmpvar_54 * tmpvar_54);
  lengthSq_53 = (lengthSq_53 + (tmpvar_55 * tmpvar_55));
  lengthSq_53 = (lengthSq_53 + (tmpvar_56 * tmpvar_56));
  ndotl_52 = (tmpvar_54 * normal_50.x);
  ndotl_52 = (ndotl_52 + (tmpvar_55 * normal_50.y));
  ndotl_52 = (ndotl_52 + (tmpvar_56 * normal_50.z));
  highp vec4 tmpvar_57;
  tmpvar_57 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_52 * inversesqrt(lengthSq_53)));
  ndotl_52 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_57 * (1.0/((1.0 + 
    (lengthSq_53 * lightAttenSq_49)
  ))));
  col_51 = (lightColor0_45 * tmpvar_58.x);
  col_51 = (col_51 + (lightColor1_46 * tmpvar_58.y));
  col_51 = (col_51 + (lightColor2_47 * tmpvar_58.z));
  col_51 = (col_51 + (lightColor3_48 * tmpvar_58.w));
  tmpvar_5 = ((x2_43 + (unity_SHC.xyz * 
    ((normal_42.x * normal_42.x) - (normal_42.y * normal_42.y))
  )) + col_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_36;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 61050
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 61051
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61052
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61053
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 61054
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 61055
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61056
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61057
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61058
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61059
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61060
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61061
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61062
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 61063
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61064
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 61065
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61066
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 61067
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 61068
    //FTOU
    tu9 = uint(t9);
    //Instruction 61069
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 61070
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 61071
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 61072
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 61073
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 61074
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 61075
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 61076
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 61077
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 61078
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 61079
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 61080
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 61081
    //LOG
    t14 = log2(t7.x);
    //Instruction 61082
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 61083
    //EXP
    t14 = exp2(t14);
    //Instruction 61084
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 61085
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 61086
    //MUL
    t7.x = t7.x * t21;
    //Instruction 61087
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 61088
    //MOV
    t4.y = t3.w;
    //Instruction 61089
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 61090
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 61091
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 61092
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 61093
    //SQRT
    t22 = sqrt(t22);
    //Instruction 61094
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 61095
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 61096
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 61097
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 61098
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 61099
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 61100
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 61101
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 61102
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61103
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 61104
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 61105
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 61106
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 61107
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 61108
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 61109
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 61110
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 61111
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 61112
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 61113
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 61114
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 61115
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 61116
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 61117
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 61118
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 61119
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 61120
    //MAD
    t3.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 61121
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 61122
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 61123
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61124
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 61125
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 61126
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61127
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61128
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 61129
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 61130
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 61131
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 61132
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 61133
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61134
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61135
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61136
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61137
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t8.xy : t4.xy;
    //Instruction 61138
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61139
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 61140
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 61141
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61142
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 61143
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 61144
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 61145
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 61146
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 61147
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 61148
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 61149
    //ADD
    t0 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 61150
    //ADD
    t1 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 61151
    //ADD
    t3 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 61152
    //MUL
    t4 = t2.zzzz * t3;
    //Instruction 61153
    //MUL
    t3 = t3 * t3;
    //Instruction 61154
    //MAD
    t3 = t1 * t1 + t3;
    //Instruction 61155
    //MAD
    t1 = t1 * t2.xxxx + t4;
    //Instruction 61156
    //MAD
    t1 = t0 * t2.wwww + t1;
    //Instruction 61157
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 61158
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 61159
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61160
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 61161
    //MUL
    t1 = t1 * t3;
    //Instruction 61162
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61163
    //MUL
    t0 = t0 * t1;
    //Instruction 61164
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61165
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61166
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61167
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 61168
    //MUL
    t16_5.x = t2.z * t2.z;
    //Instruction 61169
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 61170
    //MUL
    t16_1 = t2.zwwx * t2.xzww;
    //Instruction 61171
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 61172
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 61173
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 61174
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 61175
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 61176
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 61177
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 61014
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61015
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 61016
    //MOV
    t1.x = t16_0.x;
    //Instruction 61017
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 61018
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61019
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61020
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61021
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61022
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61023
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61024
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61025
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61026
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 61027
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 61028
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61029
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 61030
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 61031
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 61032
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 61033
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 61034
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 61035
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61036
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 61037
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61038
    //MOV
    t16_0.w = 1.0;
    //Instruction 61039
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 61040
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 61041
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 61042
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61043
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 61044
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61045
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 61046
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 61047
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61048
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61049
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_41;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_2;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  highp vec3 lightColor0_46;
  lightColor0_46 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_47;
  lightColor1_47 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_48;
  lightColor2_48 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_49;
  lightColor3_49 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_50;
  lightAttenSq_50 = unity_4LightAtten0;
  highp vec3 normal_51;
  normal_51 = worldNormal_2;
  highp vec3 col_52;
  highp vec4 ndotl_53;
  highp vec4 lengthSq_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosX0 - tmpvar_37.x);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosY0 - tmpvar_37.y);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosZ0 - tmpvar_37.z);
  lengthSq_54 = (tmpvar_55 * tmpvar_55);
  lengthSq_54 = (lengthSq_54 + (tmpvar_56 * tmpvar_56));
  lengthSq_54 = (lengthSq_54 + (tmpvar_57 * tmpvar_57));
  ndotl_53 = (tmpvar_55 * normal_51.x);
  ndotl_53 = (ndotl_53 + (tmpvar_56 * normal_51.y));
  ndotl_53 = (ndotl_53 + (tmpvar_57 * normal_51.z));
  highp vec4 tmpvar_58;
  tmpvar_58 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_53 * inversesqrt(lengthSq_54)));
  ndotl_53 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * (1.0/((1.0 + 
    (lengthSq_54 * lightAttenSq_50)
  ))));
  col_52 = (lightColor0_46 * tmpvar_59.x);
  col_52 = (col_52 + (lightColor1_47 * tmpvar_59.y));
  col_52 = (col_52 + (lightColor2_48 * tmpvar_59.z));
  col_52 = (col_52 + (lightColor3_49 * tmpvar_59.w));
  tmpvar_5 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + col_52);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_32;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD5 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_