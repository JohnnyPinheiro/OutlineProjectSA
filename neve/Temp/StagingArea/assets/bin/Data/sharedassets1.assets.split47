R0.w * 255.000000;
    //Instruction 66565
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 66566
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 66567
    //MUL
    t3.y = t0.y * t23;
    //Instruction 66568
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 66569
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 66570
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 66571
    //LOG
    t23 = log2(t9);
    //Instruction 66572
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 66573
    //EXP
    t23 = exp2(t23);
    //Instruction 66574
    //NE
    tb24 = t9!=0.0;
    //Instruction 66575
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 66576
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 66577
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66578
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 66579
    //MUL
    t9 = t0.x * t9;
    //Instruction 66580
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 66581
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 66582
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 66583
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66584
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 66585
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66586
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 66587
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 66588
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 66589
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66590
    //MOV
    t4.y = t3.y;
    //Instruction 66591
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 66592
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66593
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 66594
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 66595
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66596
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 66597
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66598
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66599
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66600
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66601
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66602
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66603
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 66604
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 66605
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 66606
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 66607
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 66608
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 66609
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66610
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66611
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66612
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66613
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 66614
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 66615
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 66616
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66617
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 66618
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 66619
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 66620
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 66621
    //MOV
    t6.z = t3.x;
    //Instruction 66622
    //MOV
    t6.x = t4.z;
    //Instruction 66623
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 66624
    //MOV
    t6.z = t3.y;
    //Instruction 66625
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 66626
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 66627
    //MOV
    t6.x = t4.x;
    //Instruction 66628
    //MOV
    t3.x = t4.y;
    //Instruction 66629
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66630
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 66631
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66632
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66633
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66634
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66635
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66636
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 66637
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66638
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 66639
    //MUL
    t1.x = t1.x * t22;
    //Instruction 66640
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 66641
    //MAD
    t3.x = t22 * 0.020835 + -0.085133;
    //Instruction 66642
    //MAD
    t3.x = t22 * t3.x + 0.180141;
    //Instruction 66643
    //MAD
    t3.x = t22 * t3.x + -0.330299;
    //Instruction 66644
    //MAD
    t22 = t22 * t3.x + 0.999866;
    //Instruction 66645
    //MUL
    t3.x = t22 * t1.x;
    //Instruction 66646
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 66647
    //LT
    tb10 = abs(t8.y)<abs(t8.x);
    //Instruction 66648
    //AND
    t3.x = tb10 ? t3.x : float(0.0);
    //Instruction 66649
    //MAD
    t1.x = t1.x * t22 + t3.x;
    //Instruction 66650
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 66651
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 66652
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 66653
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 66654
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 66655
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 66656
    //LT
    tb15 = t22<(-t22);
    //Instruction 66657
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 66658
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 66659
    //LT
    tb8 = t1.x<0.0;
    //Instruction 66660
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 66661
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 66662
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66663
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 66664
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66665
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 66666
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 66667
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66668
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 66669
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 66670
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66671
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66672
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66673
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66674
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t3.xy;
    //Instruction 66675
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 66676
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66677
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66678
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66679
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66680
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66681
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 66682
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 66683
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66684
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66685
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66686
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 66687
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 66507
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 66508
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 66509
    //MOV
    t1.x = t16_0.x;
    //Instruction 66510
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 66511
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66512
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66513
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66514
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66515
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66516
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66517
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66518
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 66519
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66520
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 66521
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 66522
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 66523
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 66524
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 66525
    //SAMPLE
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 66526
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 66527
    //MUL
    t16_1 = t10_8 * t10_1;
    //Instruction 66528
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 66529
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66530
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66531
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 66532
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66533
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 66534
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66535
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66536
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 66537
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 66538
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 66539
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 66540
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 66541
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 66542
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66543
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66544
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_3 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_53;
  tmpvar_53 = -(tmpvar_52);
  worldBinormal_2 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54.x = worldTangent_3.x;
  tmpvar_54.y = worldBinormal_2.x;
  tmpvar_54.z = worldNormal_4.x;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.y;
  tmpvar_55.y = worldBinormal_2.y;
  tmpvar_55.z = worldNormal_4.y;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.z;
  tmpvar_56.y = worldBinormal_2.z;
  tmpvar_56.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, tmpvar_18).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb10;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 66719
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66720
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66721
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66722
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66723
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66724
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 66725
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 66726
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66727
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66728
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66729
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66730
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66731
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66732
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66733
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66734
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66735
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66736
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 66737
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66738
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 66739
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 66740
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 66741
    //MUL
    t3.y = t0.y * t23;
    //Instruction 66742
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 66743
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 66744
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 66745
    //LOG
    t23 = log2(t9);
    //Instruction 66746
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 66747
    //EXP
    t23 = exp2(t23);
    //Instruction 66748
    //NE
    tb24 = t9!=0.0;
    //Instruction 66749
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 66750
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 66751
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66752
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 66753
    //MUL
    t9 = t0.x * t9;
    //Instruction 66754
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 66755
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 66756
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 66757
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66758
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 66759
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66760
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 66761
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 66762
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 66763
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66764
    //MOV
    t4.y = t3.y;
    //Instruction 66765
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 66766
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66767
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 66768
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 66769
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66770
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 66771
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66772
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66773
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66774
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66775
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66776
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66777
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 66778
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 66779
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 66780
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 66781
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 66782
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 66783
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66784
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66785
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66786
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66787
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 66788
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 66789
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 66790
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66791
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 66792
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 66793
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 66794
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 66795
    //MOV
    t6.z = t3.x;
    //Instruction 66796
    //MOV
    t6.x = t4.z;
    //Instruction 66797
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 66798
    //MOV
    t6.z = t3.y;
    //Instruction 66799
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 66800
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 66801
    //MOV
    t6.x = t4.x;
    //Instruction 66802
    //MOV
    t3.x = t4.y;
    //Instruction 66803
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66804
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 66805
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66806
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66807
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66808
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66809
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66810
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 66811
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66812
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 66813
    //MUL
    t1.x = t1.x * t22;
    //Instruction 66814
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 66815
    //MAD
    t3.x = t22 * 0.020835 + -0.085133;
    //Instruction 66816
    //MAD
    t3.x = t22 * t3.x + 0.180141;
    //Instruction 66817
    //MAD
    t3.x = t22 * t3.x + -0.330299;
    //Instruction 66818
    //MAD
    t22 = t22 * t3.x + 0.999866;
    //Instruction 66819
    //MUL
    t3.x = t22 * t1.x;
    //Instruction 66820
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 66821
    //LT
    tb10 = abs(t8.y)<abs(t8.x);
    //Instruction 66822
    //AND
    t3.x = tb10 ? t3.x : float(0.0);
    //Instruction 66823
    //MAD
    t1.x = t1.x * t22 + t3.x;
    //Instruction 66824
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 66825
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 66826
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 66827
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 66828
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 66829
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 66830
    //LT
    tb15 = t22<(-t22);
    //Instruction 66831
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 66832
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 66833
    //LT
    tb8 = t1.x<0.0;
    //Instruction 66834
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 66835
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 66836
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66837
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 66838
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66839
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 66840
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 66841
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66842
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 66843
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 66844
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66845
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66846
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66847
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66848
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t3.xy;
    //Instruction 66849
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 66850
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66851
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66852
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66853
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66854
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66855
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 66856
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 66857
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66858
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66859
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66860
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 66861
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 66688
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 66689
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 66690
    //MOV
    t1.x = t16_0.x;
    //Instruction 66691
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 66692
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66693
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 66694
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66695
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66696
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66697
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66698
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66699
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 66700
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66701
    //MUL
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 66702
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    //Instruction 66703
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    //Instruction 66704
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 66705
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 66706
    //MUL
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 66707
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66708
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66709
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66710
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 66711
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 66712
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 66713
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 66714
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 66715
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 66716
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66717
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66718
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 68520
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68521
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68522
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 68523
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68524
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68525
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 68526
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 68527
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68528
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68529
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68530
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68531
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68532
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68533
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68534
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68535
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68536
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 68537
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68538
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 68539
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 68540
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 68541
    //MUL
    t3.y = t0.y * t26;
    //Instruction 68542
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 68543
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 68544
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 68545
    //LOG
    t26 = log2(t10);
    //Instruction 68546
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 68547
    //EXP
    t26 = exp2(t26);
    //Instruction 68548
    //NE
    tb27 = t10!=0.0;
    //Instruction 68549
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 68550
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 68551
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68552
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 68553
    //MUL
    t10 = t0.x * t10;
    //Instruction 68554
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68555
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 68556
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68557
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 68558
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68559
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 68560
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68561
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68562
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 68563
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 68564
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68565
    //MOV
    t5.y = t3.y;
    //Instruction 68566
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68567
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68568
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68569
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 68570
    //SQRT
    t27 = sqrt(t27);
    //Instruction 68571
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 68572
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68573
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68574
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68575
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68576
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68577
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 68578
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 68579
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 68580
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 68581
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 68582
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 68583
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 68584
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 68585
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 68586
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68587
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 68588
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 68589
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 68590
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 68591
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68592
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 68593
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 68594
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 68595
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 68596
    //MOV
    t7.z = t3.x;
    //Instruction 68597
    //MOV
    t7.x = t5.z;
    //Instruction 68598
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 68599
    //MOV
    t7.z = t3.y;
    //Instruction 68600
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 68601
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 68602
    //MOV
    t7.x = t5.x;
    //Instruction 68603
    //MOV
    t3.x = t5.y;
    //Instruction 68604
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 68605
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 68606
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68607
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 68608
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 68609
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 68610
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 68611
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 68612
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 68613
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68614
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68615
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 68616
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68617
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68618
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68619
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 68620
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 68621
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 68622
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 68623
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 68624
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 68625
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 68626
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 68627
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 68628
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 68629
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 68630
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 68631
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 68632
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68633
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 68634
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 68635
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 68636
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 68637
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 68638
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 68639
    //LT
    tb9 = t1.x<0.0;
    //Instruction 68640
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 68641
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68642
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68643
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 68644
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68645
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 68646
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 68647
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68648
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 68649
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 68650
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68651
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68652
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68653
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68654
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t3.xy;
    //Instruction 68655
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68656
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 68657
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 68658
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68659
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 68660
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 68661
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 68662
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68663
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68664
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68665
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 68666
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 68475
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 68476
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 68477
    //MOV
    t1.x = t16_0.x;
    //Instruction 68478
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 68479
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68480
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 68481
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68482
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68483
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 68484
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68485
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 68486
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68487
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68488
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68489
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68490
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 68491
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 68492
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 68493
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68494
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68495
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68496
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 68497
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 68498
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 68499
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 68500
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 68501
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 68502
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 68503
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 68504
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 68505
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 68506
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68507
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68508
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 68509
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 68510
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 68511
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 68512
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 68513
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 68514
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 68515
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 68516
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 68517
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68518
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68519
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_43;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 66179
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66180
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66181
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 66182
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66183
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66184
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 66185
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 66186
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66187
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66188
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66189
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66190
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66191
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66192
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66193
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66194
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66195
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 66196
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66197
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 66198
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 66199
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66200
    //MUL
    t3.y = t0.y * t26;
    //Instruction 66201
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 66202
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 66203
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 66204
    //LOG
    t26 = log2(t10);
    //Instruction 66205
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 66206
    //EXP
    t26 = exp2(t26);
    //Instruction 66207
    //NE
    tb27 = t10!=0.0;
    //Instruction 66208
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 66209
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 66210
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66211
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 66212
    //MUL
    t10 = t0.x * t10;
    //Instruction 66213
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66214
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 66215
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66216
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 66217
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66218
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 66219
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66220
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66221
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 66222
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 66223
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66224
    //MOV
    t5.y = t3.y;
    //Instruction 66225
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66226
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66227
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66228
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 66229
    //SQRT
    t27 = sqrt(t27);
    //Instruction 66230
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 66231
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66232
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66233
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66234
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66235
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66236
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66237
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 66238
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 66239
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 66240
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 66241
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 66242
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 66243
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66244
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66245
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66246
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66247
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 66248
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 66249
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 66250
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66251
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 66252
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 66253
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 66254
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 66255
    //MOV
    t7.z = t3.x;
    //Instruction 66256
    //MOV
    t7.x = t5.z;
    //Instruction 66257
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 66258
    //MOV
    t7.z = t3.y;
    //Instruction 66259
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 66260
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 66261
    //MOV
    t7.x = t5.x;
    //Instruction 66262
    //MOV
    t3.x = t5.y;
    //Instruction 66263
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66264
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 66265
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66266
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66267
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66268
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66269
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66270
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 66271
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 66272
    //FRC
    t1.x = fract(t1.x);
    //Instruction 66273
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 66274
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 66275
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 66276
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66277
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66278
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 66279
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 66280
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 66281
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 66282
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 66283
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 66284
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 66285
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 66286
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 66287
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 66288
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 66289
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 66290
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 66291
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 66292
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 66293
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 66294
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 66295
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 66296
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 66297
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 66298
    //LT
    tb9 = t1.x<0.0;
    //Instruction 66299
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 66300
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 66301
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66302
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 66303
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66304
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 66305
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 66306
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66307
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 66308
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 66309
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66310
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66311
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66312
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66313
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t3.xy;
    //Instruction 66314
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66315
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66316
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66317
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66318
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66319
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 66320
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 66321
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66322
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66323
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66324
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 66325
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 66145
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 66146
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 66147
    //MOV
    t1.x = t16_0.x;
    //Instruction 66148
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 66149
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66150
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 66151
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66152
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66153
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66154
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66155
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 66156
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66157
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 66158
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 66159
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66160
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 66161
    //MAX
    t16_4 = max(t16_9.z, t16_9.y);
    //Instruction 66162
    //MAX
    t16_4 = max(t16_9.x, t16_4);
    //Instruction 66163
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 66164
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 66165
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 66166
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66167
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 66168
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66169
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66170
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 66171
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 66172
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 66173
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 66174
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 66175
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 66176
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66177
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66178
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21);
  lightCoord_6 = tmpvar_22;
  lowp vec4 tmpvar_23;
  mediump vec2 P_24;
  P_24 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_23 = texture2D (_LightTexture0, P_24);
  highp vec3 LightCoord_25;
  LightCoord_25 = lightCoord_6.xyz;
  highp float tmpvar_26;
  tmpvar_26 = dot (LightCoord_25, LightCoord_25);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_23.w) * tmpvar_27.w);
  atten_5 = tmpvar_28;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  c_29.w = c_30.w;
  c_29.xyz = c_30.xyz;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 66914
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66915
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66916
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 66917
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66918
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66919
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 66920
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 66921
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66922
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66923
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66924
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66925
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66926
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66927
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66928
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66929
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66930
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 66931
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66932
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 66933
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 66934
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66935
    //MUL
    t3.y = t0.y * t26;
    //Instruction 66936
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 66937
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 66938
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 66939
    //LOG
    t26 = log2(t10);
    //Instruction 66940
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 66941
    //EXP
    t26 = exp2(t26);
    //Instruction 66942
    //NE
    tb27 = t10!=0.0;
    //Instruction 66943
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 66944
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 66945
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66946
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 66947
    //MUL
    t10 = t0.x * t10;
    //Instruction 66948
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66949
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 66950
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66951
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 66952
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66953
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 66954
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66955
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66956
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 66957
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 66958
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66959
    //MOV
    t5.y = t3.y;
    //Instruction 66960
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66961
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66962
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66963
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 66964
    //SQRT
    t27 = sqrt(t27);
    //Instruction 66965
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 66966
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66967
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66968
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66969
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66970
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66971
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66972
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 66973
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 66974
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 66975
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 66976
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 66977
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 66978
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66979
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66980
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66981
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66982
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 66983
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 66984
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 66985
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66986
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 66987
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 66988
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 66989
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 66990
    //MOV
    t7.z = t3.x;
    //Instruction 66991
    //MOV
    t7.x = t5.z;
    //Instruction 66992
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 66993
    //MOV
    t7.z = t3.y;
    //Instruction 66994
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 66995
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 66996
    //MOV
    t7.x = t5.x;
    //Instruction 66997
    //MOV
    t3.x = t5.y;
    //Instruction 66998
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66999
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 67000
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 67001
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 67002
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 67003
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 67004
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 67005
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 67006
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 67007
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67008
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67009
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 67010
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 67011
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 67012
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 67013
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 67014
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 67015
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 67016
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 67017
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 67018
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 67019
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 67020
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 67021
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 67022
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 67023
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 67024
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 67025
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 67026
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 67027
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 67028
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 67029
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 67030
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 67031
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 67032
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 67033
    //LT
    tb9 = t1.x<0.0;
    //Instruction 67034
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 67035
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 67036
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 67037
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67038
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 67039
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67040
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 67041
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 67042
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 67043
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67044
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 67045
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67046
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67047
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67048
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t3.xy;
    //Instruction 67049
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67050
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 67051
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 67052
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67053
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 67054
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 67055
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 67056
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 67057
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 67058
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 67059
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 67060
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump vec3 t16_10;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 66862
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 66863
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 66864
    //MOV
    t1.x = t16_0.x;
    //Instruction 66865
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 66866
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66867
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66868
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66869
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66870
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66871
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66872
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 66873
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66874
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 66875
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 66876
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66877
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 66878
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 66879
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 66880
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 66881
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 66882
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 66883
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66884
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 66885
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 66886
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 66887
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 66888
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 66889
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 66890
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 66891
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 66892
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 66893
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    //Instruction 66894
    //MOVC
    t10_2.x = (tb8) ? 1.0 : 0.0;
    //Instruction 66895
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 66896
    //MUL
    t10_2.x = t10_15 * t10_2.x;
    //Instruction 66897
    //MUL
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 66898
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66899
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66900
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 66901
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66902
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 66903
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66904
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66905
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 66906
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 66907
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 66908
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 66909
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 66910
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 66911
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66912
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66913
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, tmpvar_20).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 68714
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68715
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68716
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 68717
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68718
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68719
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 68720
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 68721
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68722
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68723
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68724
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68725
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68726
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68727
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68728
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68729
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68730
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 68731
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68732
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 68733
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 68734
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 68735
    //MUL
    t3.y = t0.y * t26;
    //Instruction 68736
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 68737
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 68738
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 68739
    //LOG
    t26 = log2(t10);
    //Instruction 68740
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 68741
    //EXP
    t26 = exp2(t26);
    //Instruction 68742
    //NE
    tb27 = t10!=0.0;
    //Instruction 68743
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 68744
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 68745
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68746
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 68747
    //MUL
    t10 = t0.x * t10;
    //Instruction 68748
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68749
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 68750
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68751
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 68752
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68753
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 68754
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68755
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68756
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 68757
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 68758
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68759
    //MOV
    t5.y = t3.y;
    //Instruction 68760
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68761
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68762
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68763
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 68764
    //SQRT
    t27 = sqrt(t27);
    //Instruction 68765
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 68766
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68767
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68768
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68769
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68770
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68771
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 68772
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 68773
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 68774
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 68775
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 68776
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 68777
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 68778
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 68779
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 68780
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68781
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 68782
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 68783
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 68784
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 68785
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68786
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 68787
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 68788
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 68789
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 68790
    //MOV
    t7.z = t3.x;
    //Instruction 68791
    //MOV
    t7.x = t5.z;
    //Instruction 68792
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 68793
    //MOV
    t7.z = t3.y;
    //Instruction 68794
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 68795
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 68796
    //MOV
    t7.x = t5.x;
    //Instruction 68797
    //MOV
    t3.x = t5.y;
    //Instruction 68798
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 68799
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 68800
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68801
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 68802
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 68803
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 68804
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 68805
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 68806
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 68807
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68808
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68809
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 68810
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68811
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68812
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68813
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 68814
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 68815
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 68816
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 68817
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 68818
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 68819
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 68820
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 68821
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 68822
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 68823
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 68824
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 68825
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 68826
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68827
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 68828
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 68829
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 68830
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 68831
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 68832
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 68833
    //LT
    tb9 = t1.x<0.0;
    //Instruction 68834
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 68835
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68836
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68837
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 68838
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68839
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 68840
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 68841
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68842
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 68843
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 68844
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68845
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68846
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68847
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68848
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t3.xy;
    //Instruction 68849
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68850
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 68851
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 68852
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68853
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 68854
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 68855
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 68856
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68857
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68858
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68859
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 68860
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 68667
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 68668
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 68669
    //MOV
    t1.x = t16_0.x;
    //Instruction 68670
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 68671
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68672
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 68673
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68674
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68675
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 68676
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68677
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 68678
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68679
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68680
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68681
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68682
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 68683
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 68684
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 68685
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68686
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68687
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68688
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 68689
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 68690
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 68691
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 68692
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 68693
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 68694
    //SAMPLE
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 68695
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 68696
    //MUL
    t16_1 = t10_8 * t10_1;
    //Instruction 68697
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 68698
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 68699
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 68700
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68701
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68702
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 68703
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 68704
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 68705
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 68706
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 68707
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 68708
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 68709
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 68710
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 68711
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68712
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68713
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  lowp vec3 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_43;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, tmpvar_20).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 66366
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66367
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66368
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 66369
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66370
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66371
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 66372
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 66373
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66374
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66375
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66376
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66377
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66378
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66379
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66380
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66381
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66382
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 66383
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66384
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 66385
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 66386
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66387
    //MUL
    t3.y = t0.y * t26;
    //Instruction 66388
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 66389
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 66390
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 66391
    //LOG
    t26 = log2(t10);
    //Instruction 66392
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 66393
    //EXP
    t26 = exp2(t26);
    //Instruction 66394
    //NE
    tb27 = t10!=0.0;
    //Instruction 66395
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 66396
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 66397
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66398
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 66399
    //MUL
    t10 = t0.x * t10;
    //Instruction 66400
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66401
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 66402
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66403
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 66404
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66405
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 66406
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66407
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66408
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 66409
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 66410
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66411
    //MOV
    t5.y = t3.y;
    //Instruction 66412
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66413
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66414
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66415
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 66416
    //SQRT
    t27 = sqrt(t27);
    //Instruction 66417
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 66418
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66419
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66420
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66421
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66422
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66423
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66424
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 66425
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 66426
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 66427
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 66428
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 66429
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 66430
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66431
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66432
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66433
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66434
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 66435
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 66436
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 66437
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66438
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 66439
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 66440
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 66441
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 66442
    //MOV
    t7.z = t3.x;
    //Instruction 66443
    //MOV
    t7.x = t5.z;
    //Instruction 66444
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 66445
    //MOV
    t7.z = t3.y;
    //Instruction 66446
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 66447
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 66448
    //MOV
    t7.x = t5.x;
    //Instruction 66449
    //MOV
    t3.x = t5.y;
    //Instruction 66450
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66451
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 66452
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66453
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66454
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66455
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66456
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66457
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 66458
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 66459
    //FRC
    t1.x = fract(t1.x);
    //Instruction 66460
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 66461
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 66462
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 66463
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66464
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66465
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 66466
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 66467
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 66468
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 66469
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 66470
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 66471
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 66472
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 66473
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 66474
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 66475
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 66476
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 66477
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 66478
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 66479
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 66480
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 66481
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 66482
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 66483
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 66484
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 66485
    //LT
    tb9 = t1.x<0.0;
    //Instruction 66486
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 66487
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 66488
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66489
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 66490
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66491
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 66492
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 66493
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66494
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 66495
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 66496
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66497
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66498
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66499
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66500
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t3.xy;
    //Instruction 66501
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66502
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66503
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66504
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66505
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66506
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 66507
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 66508
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66509
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66510
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66511
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 66512
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 66326
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 66327
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 66328
    //MOV
    t1.x = t16_0.x;
    //Instruction 66329
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 66330
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66331
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 66332
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66333
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66334
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66335
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66336
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 66337
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66338
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 66339
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 66340
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66341
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 66342
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 66343
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 66344
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 66345
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 66346
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 66347
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66348
    //MUL
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 66349
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    //Instruction 66350
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    //Instruction 66351
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 66352
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 66353
    //MUL
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 66354
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66355
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66356
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66357
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 66358
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 66359
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 66360
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 66361
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 66362
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 66363
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66364
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66365
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 190448
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 67068
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67069
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 67070
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67071
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67072
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67073
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67074
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67075
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67076
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67077
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67078
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67079
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67080
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67081
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67082
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 67083
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67084
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67085
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 67086
    //FTOU
    tu15 = uint(t15);
    //Instruction 67087
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 67088
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 67089
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67090
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 67091
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 67092
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 67093
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 67094
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 67095
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 67096
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 67097
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 67098
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 67099
    //LOG
    t1.x = log2(t5);
    //Instruction 67100
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67101
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67102
    //NE
    tb6 = t5!=0.0;
    //Instruction 67103
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 67104
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 67105
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67106
    //MOV
    t1.y = t2.w;
    //Instruction 67107
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67108
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67109
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67110
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67111
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67112
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67113
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 67114
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 67115
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67116
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67117
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67118
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67119
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67120
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 67121
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67122
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67123
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67124
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67125
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67126
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67127
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67128
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67129
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67130
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67131
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67132
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 67133
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67134
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 67135
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 67136
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67137
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 67138
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 67139
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 67140
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67141
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 67142
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 67143
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 67144
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 67145
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67146
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67147
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67148
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67149
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 67150
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 67151
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 67061
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 67062
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 67063
    //LT
    tb0 = t10_1<0.0;
    //Instruction 67064
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 67065
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 67066
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 67067
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
bool tb6;
highp float t8;
highp uint tu8;
highp vec2 t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 67159
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67160
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67161
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67162
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67163
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67164
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67165
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67166
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67167
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67168
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67169
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67170
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67171
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 67172
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67173
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 67174
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67175
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67176
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 67177
    //FTOU
    tu8 = uint(t8);
    //Instruction 67178
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 67179
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67180
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67181
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 67182
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67183
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67184
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 67185
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67186
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 67187
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 67188
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 67189
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 67190
    //LOG
    t12.x = log2(t6.x);
    //Instruction 67191
    //MUL
    t12.x = t12.x * _ST_WindGlobal.w;
    //Instruction 67192
    //EXP
    t12.x = exp2(t12.x);
    //Instruction 67193
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 67194
    //MOVC
    t6.x = (tb19) ? t12.x : t6.x;
    //Instruction 67195
    //MUL
    t6.x = t6.x * t18;
    //Instruction 67196
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 67197
    //MOV
    t4.y = t3.w;
    //Instruction 67198
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 67199
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 67200
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 67201
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 67202
    //SQRT
    t19 = sqrt(t19);
    //Instruction 67203
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 67204
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 67205
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 67206
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 67207
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 67208
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 67209
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 67210
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 67211
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67212
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67213
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67214
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67215
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67216
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67217
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67218
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 67219
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67220
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67221
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67222
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 67223
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 67224
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 67225
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 67226
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 67227
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 67228
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 67229
    //MAD
    t6.xyz = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 67230
    //ADD
    vs_TEXCOORD1.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 67231
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67232
    //ADD
    t6.x = t1.y + t1.x;
    //Instruction 67233
    //ADD
    t6.x = t1.z + t6.x;
    //Instruction 67234
    //FRC
    t6.x = fract(t6.x);
    //Instruction 67235
    //MUL
    t6.x = t6.x * _HueVariation.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 67236
    //MOV
    vs_TEXCOORD3.z = t6.x;
    //Instruction 67237
    //GE
    tb6 = t0.x>=(-t0.x);
    //Instruction 67238
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67239
    //MOVC
    t0.x = (tb6) ? t0.x : (-t0.x);
    //Instruction 67240
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 67241
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67242
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67243
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67244
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67245
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 67246
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 67152
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 67153
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 67154
    //LT
    tb0 = t10_1<0.0;
    //Instruction 67155
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 67156
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 67157
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 67158
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_29;
  tmpvar_29 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  tmpvar_38.w = tmpvar_29.x;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  tmpvar_39.w = tmpvar_29.y;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  tmpvar_40.w = tmpvar_29.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD0.xyz, tmpvar_7);
  worldN_2.x = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD1.xyz, tmpvar_7);
  worldN_2.y = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD2.xyz, tmpvar_7);
  worldN_2.z = tmpvar_10;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 66525
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 66526
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 66527
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66528
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 66529
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 66530
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66531
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 66532
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66533
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 66534
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66535
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 66536
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 66537
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 66538
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66539
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 66540
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66541
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 66542
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 66543
    //FTOU
    tu18 = uint(t18);
    //Instruction 66544
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 66545
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 66546
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 66547
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66548
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 66549
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 66550
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 66551
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 66552
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 66553
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 66554
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 66555
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 66556
    //LOG
    t1.x = log2(t6);
    //Instruction 66557
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 66558
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 66559
    //NE
    tb7 = t6!=0.0;
    //Instruction 66560
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 66561
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 66562
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 66563
    //MOV
    t1.y = t2.w;
    //Instruction 66564
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 66565
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 66566
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 66567
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 66568
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 66569
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 66570
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 66571
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 66572
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 66573
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 66574
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 66575
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 66576
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 66577
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 66578
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 66579
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 66580
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 66581
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 66582
    //MOV
    vs_TEXCOORD0.w = t1.x;
    //Instruction 66583
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 66584
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 66585
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 66586
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 66587
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 66588
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 66589
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 66590
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 66591
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 66592
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 66593
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 66594
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 66595
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 66596
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 66597
    //MOV
    vs_TEXCOORD0.z = t2.y;
    //Instruction 66598
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 66599
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 66600
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 66601
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 66602
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 66603
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 66604
    //MUL
    t10_5.xyz = t2.xyz * t4.xyz;
    //Instruction 66605
    //MAD
    t10_5.xyz = t2.zxy * t4.yzx + (-t10_5.xyz);
    //Instruction 66606
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 66607
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 66608
    //MOV
    vs_TEXCOORD1.w = t1.y;
    //Instruction 66609
    //MOV
    vs_TEXCOORD2.w = t1.z;
    //Instruction 66610
    //MOV
    vs_TEXCOORD1.z = t2.z;
    //Instruction 66611
    //MOV
    vs_TEXCOORD2.z = t2.x;
    //Instruction 66612
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 66613
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 66614
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 66615
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 66616
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 66617
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 66618
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 66619
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 66620
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 66621
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 66622
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 66623
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 66624
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 66625
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 66626
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 66627
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 66513
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 66514
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 66515
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 66516
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 66517
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 66518
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66519
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66520
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66521
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66522
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 66523
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 66524
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 66640
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 66641
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66642
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66643
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 66644
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 66645
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66646
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66647
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66648
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66649
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66650
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66651
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66652
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 66653
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66654
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 66655
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66656
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 66657
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 66658
    //FTOU
    tu9 = uint(t9);
    //Instruction 66659
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 66660
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 66661
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 66662
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 66663
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 66664
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 66665
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 66666
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 66667
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 66668
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 66669
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 66670
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 66671
    //LOG
    t14.x = log2(t7.x);
    //Instruction 66672
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 66673
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 66674
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 66675
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 66676
    //MUL
    t7.x = t7.x * t21;
    //Instruction 66677
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 66678
    //MOV
    t4.y = t3.w;
    //Instruction 66679
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 66680
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 66681
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 66682
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 66683
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66684
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 66685
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 66686
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 66687
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 66688
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 66689
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 66690
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 66691
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 66692
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66693
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 66694
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 66695
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 66696
    //ADD
    t7.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 66697
    //MOV
    vs_TEXCOORD0.w = t7.x;
    //Instruction 66698
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 66699
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 66700
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 66701
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 66702
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 66703
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 66704
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 66705
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 66706
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 66707
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 66708
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 66709
    //DP3
    t7.x = dot(t2.xzw, t2.xzw);
    //Instruction 66710
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 66711
    //MUL
    t2.xzw = t7.xxx * t2.xzw;
    //Instruction 66712
    //MOV
    vs_TEXCOORD0.z = t2.z;
    //Instruction 66713
    //MUL
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 66714
    //MAD
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    //Instruction 66715
    //MAD
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    //Instruction 66716
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 66717
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 66718
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 66719
    //MUL
    t10_6.xyz = t2.xzw * t3.xyz;
    //Instruction 66720
    //MAD
    t10_6.xyz = t2.wxz * t3.yzx + (-t10_6.xyz);
    //Instruction 66721
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 66722
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 66723
    //MOV
    vs_TEXCOORD1.z = t2.w;
    //Instruction 66724
    //MOV
    vs_TEXCOORD2.z = t2.x;
    //Instruction 66725
    //MOV
    vs_TEXCOORD1.w = t7.y;
    //Instruction 66726
    //MOV
    vs_TEXCOORD2.w = t7.z;
    //Instruction 66727
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 66728
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 66729
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 66730
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 66731
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 66732
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 66733
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 66734
    //FRC
    t7.x = fract(t7.x);
    //Instruction 66735
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 66736
    //MOV
    vs_TEXCOORD4.z = t7.x;
    //Instruction 66737
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 66738
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 66739
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 66740
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 66741
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 66742
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 66743
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 66744
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 66745
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 66746
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 66628
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 66629
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 66630
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 66631
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 66632
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 66633
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66634
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66635
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66636
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66637
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 66638
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 66639
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 66754
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66755
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66756
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66757
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66758
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66759
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 66760
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 66761
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66762
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66763
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66764
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66765
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66766
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66767
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66768
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66769
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66770
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66771
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 66772
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66773
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 66774
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 66775
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 66776
    //MUL
    t3.y = t0.y * t17;
    //Instruction 66777
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 66778
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 66779
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 66780
    //LOG
    t17 = log2(t7);
    //Instruction 66781
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 66782
    //EXP
    t17 = exp2(t17);
    //Instruction 66783
    //NE
    tb18 = t7!=0.0;
    //Instruction 66784
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 66785
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 66786
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66787
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 66788
    //MUL
    t7 = t0.x * t7;
    //Instruction 66789
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 66790
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 66791
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 66792
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66793
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 66794
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66795
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 66796
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 66797
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 66798
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66799
    //MOV
    t4.y = t3.y;
    //Instruction 66800
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 66801
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 66802
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 66803
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 66804
    //SQRT
    t16 = sqrt(t16);
    //Instruction 66805
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 66806
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66807
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66808
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66809
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66810
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66811
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66812
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 66813
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 66814
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 66815
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 66816
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 66817
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 66818
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66819
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66820
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66821
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 66822
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 66823
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66824
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66825
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66826
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 66827
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 66828
    //MAX
    t1 = max(abs(t6.y), abs(t6.x));
    //Instruction 66829
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66830
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 66831
    //MUL
    t1 = t1 * t16;
    //Instruction 66832
    //MUL
    t16 = t1 * t1;
    //Instruction 66833
    //MAD
    t2.x = t16 * 0.020835 + -0.085133;
    //Instruction 66834
    //MAD
    t2.x = t16 * t2.x + 0.180141;
    //Instruction 66835
    //MAD
    t2.x = t16 * t2.x + -0.330299;
    //Instruction 66836
    //MAD
    t16 = t16 * t2.x + 0.999866;
    //Instruction 66837
    //MUL
    t2.x = t16 * t1;
    //Instruction 66838
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 66839
    //LT
    tb7 = abs(t6.y)<abs(t6.x);
    //Instruction 66840
    //AND
    t2.x = tb7 ? t2.x : float(0.0);
    //Instruction 66841
    //MAD
    t1 = t1 * t16 + t2.x;
    //Instruction 66842
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 66843
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 66844
    //ADD
    t1 = t16 + t1;
    //Instruction 66845
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 66846
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 66847
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 66848
    //LT
    tb11 = t16<(-t16);
    //Instruction 66849
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 66850
    //MOVC
    t1 = (ti6 != 0) ? (-t1) : t1;
    //Instruction 66851
    //LT
    tb6 = t1<0.0;
    //Instruction 66852
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 66853
    //ADD
    t1 = t6.x + t1;
    //Instruction 66854
    //ADD
    t1 = t0.z + t1;
    //Instruction 66855
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 66856
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 66857
    //DIV
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    //Instruction 66858
    //GE
    tb6 = t1>=(-t1);
    //Instruction 66859
    //FRC
    t1 = fract(abs(t1));
    //Instruction 66860
    //MOVC
    t1 = (tb6) ? t1 : (-t1);
    //Instruction 66861
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 66862
    //FTOU
    tu1 = uint(t1);
    //Instruction 66863
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66864
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66865
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66866
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    //Instruction 66867
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 66868
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 66747
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 66748
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 66749
    //LT
    tb0 = t10_1<0.0;
    //Instruction 66750
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 66751
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 66752
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 66753
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 68868
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68869
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68870
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 68871
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68872
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68873
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 68874
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 68875
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68876
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68877
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68878
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68879
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68880
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68881
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68882
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68883
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68884
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 68885
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68886
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 68887
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 68888
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 68889
    //MUL
    t3.y = t0.y * t20;
    //Instruction 68890
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 68891
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 68892
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 68893
    //LOG
    t20 = log2(t8);
    //Instruction 68894
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 68895
    //EXP
    t20 = exp2(t20);
    //Instruction 68896
    //NE
    tb21 = t8!=0.0;
    //Instruction 68897
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 68898
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 68899
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68900
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 68901
    //MUL
    t8 = t0.x * t8;
    //Instruction 68902
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68903
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 68904
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 68905
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 68906
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68907
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 68908
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68909
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 68910
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 68911
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 68912
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68913
    //MOV
    t5.y = t3.y;
    //Instruction 68914
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68915
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68916
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68917
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 68918
    //SQRT
    t21 = sqrt(t21);
    //Instruction 68919
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 68920
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68921
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68922
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68923
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68924
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68925
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 68926
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 68927
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 68928
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 68929
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 68930
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 68931
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 68932
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 68933
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 68934
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 68935
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 68936
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 68937
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68938
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 68939
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 68940
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 68941
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 68942
    //ADD
    t1 = t7.y + t7.x;
    //Instruction 68943
    //ADD
    t1 = t7.z + t1;
    //Instruction 68944
    //FRC
    t1 = fract(t1);
    //Instruction 68945
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 68946
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 68947
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 68948
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 68949
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68950
    //MUL
    t1 = t1 * t7.x;
    //Instruction 68951
    //MUL
    t7.x = t1 * t1;
    //Instruction 68952
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 68953
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 68954
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 68955
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 68956
    //MUL
    t13.x = t7.x * t1;
    //Instruction 68957
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 68958
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 68959
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 68960
    //MAD
    t1 = t1 * t7.x + t13.x;
    //Instruction 68961
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 68962
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 68963
    //ADD
    t1 = t7.x + t1;
    //Instruction 68964
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 68965
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 68966
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 68967
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 68968
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 68969
    //MOVC
    t1 = (ti7 != 0) ? (-t1) : t1;
    //Instruction 68970
    //LT
    tb7 = t1<0.0;
    //Instruction 68971
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 68972
    //ADD
    t1 = t7.x + t1;
    //Instruction 68973
    //ADD
    t1 = t0.z + t1;
    //Instruction 68974
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 68975
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 68976
    //DIV
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    //Instruction 68977
    //GE
    tb7 = t1>=(-t1);
    //Instruction 68978
    //FRC
    t1 = fract(abs(t1));
    //Instruction 68979
    //MOVC
    t1 = (tb7) ? t1 : (-t1);
    //Instruction 68980
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 68981
    //FTOU
    tu1 = uint(t1);
    //Instruction 68982
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68983
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68984
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68985
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    //Instruction 68986
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 68861
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 68862
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 68863
    //LT
    tb0 = t10_1<0.0;
    //Instruction 68864
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 68865
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 68866
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 68867
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  tmpvar_49.w = tmpvar_41.x;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  tmpvar_50.w = tmpvar_41.y;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  tmpvar_51.w = tmpvar_41.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD0.xyz, tmpvar_7);
  worldN_2.x = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD1.xyz, tmpvar_7);
  worldN_2.y = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD2.xyz, tmpvar_7);
  worldN_2.z = tmpvar_10;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68999
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 69000
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 69001
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69002
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69003
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69004
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 69005
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 69006
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69007
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69008
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69009
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69010
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69011
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69012
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69013
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69014
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69015
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69016
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 69017
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69018
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 69019
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 69020
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 69021
    //MUL
    t3.y = t0.y * t23;
    //Instruction 69022
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 69023
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 69024
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 69025
    //LOG
    t23 = log2(t9);
    //Instruction 69026
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 69027
    //EXP
    t23 = exp2(t23);
    //Instruction 69028
    //NE
    tb24 = t9!=0.0;
    //Instruction 69029
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 69030
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 69031
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69032
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 69033
    //MUL
    t9 = t0.x * t9;
    //Instruction 69034
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 69035
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 69036
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 69037
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69038
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 69039
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69040
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69041
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 69042
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 69043
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69044
    //MOV
    t4.y = t3.y;
    //Instruction 69045
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 69046
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69047
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 69048
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 69049
    //SQRT
    t22 = sqrt(t22);
    //Instruction 69050
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 69051
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69052
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69053
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69054
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69055
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69056
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69057
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 69058
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 69059
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 69060
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 69061
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 69062
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 69063
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 69064
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 69065
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69066
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 69067
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 69068
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 69069
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 69070
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69071
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 69072
    //MUL
    t10_5.xyz = t3.xyz * t4.xyz;
    //Instruction 69073
    //MAD
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    //Instruction 69074
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 69075
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69076
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 69077
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 69078
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 69079
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 69080
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 69081
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 69082
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 69083
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 69084
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 69085
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 69086
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 69087
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 69088
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 69089
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 69090
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69091
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 69092
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 69093
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 69094
    //MUL
    t1 = t1 * t22;
    //Instruction 69095
    //MUL
    t22 = t1 * t1;
    //Instruction 69096
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 69097
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 69098
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 69099
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 69100
    //MUL
    t2.x = t22 * t1;
    //Instruction 69101
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 69102
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 69103
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 69104
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 69105
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 69106
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 69107
    //ADD
    t1 = t22 + t1;
    //Instruction 69108
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 69109
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 69110
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 69111
    //LT
    tb15 = t22<(-t22);
    //Instruction 69112
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 69113
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 69114
    //LT
    tb8 = t1<0.0;
    //Instruction 69115
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 69116
    //ADD
    t1 = t8.x + t1;
    //Instruction 69117
    //ADD
    t1 = t0.z + t1;
    //Instruction 69118
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 69119
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 69120
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 69121
    //GE
    tb8 = t1>=(-t1);
    //Instruction 69122
    //FRC
    t1 = fract(abs(t1));
    //Instruction 69123
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 69124
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 69125
    //FTOU
    tu1 = uint(t1);
    //Instruction 69126
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69127
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69128
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69129
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 69130
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 69131
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 68987
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 68988
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 68989
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 68990
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 68991
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 68992
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 68993
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 68994
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 68995
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 68996
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 68997
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 68998
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_17.z) + (v_44.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_17));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 66881
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66882
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66883
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 66884
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66885
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66886
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 66887
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 66888
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66889
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66890
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66891
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66892
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66893
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66894
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66895
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66896
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66897
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 66898
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66899
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 66900
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 66901
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66902
    //MUL
    t3.y = t0.y * t26;
    //Instruction 66903
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 66904
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 66905
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 66906
    //LOG
    t26 = log2(t10);
    //Instruction 66907
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 66908
    //EXP
    t26 = exp2(t26);
    //Instruction 66909
    //NE
    tb27 = t10!=0.0;
    //Instruction 66910
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 66911
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 66912
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66913
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 66914
    //MUL
    t10 = t0.x * t10;
    //Instruction 66915
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66916
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 66917
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66918
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 66919
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66920
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 66921
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66922
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66923
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 66924
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 66925
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66926
    //MOV
    t5.y = t3.y;
    //Instruction 66927
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66928
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66929
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66930
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 66931
    //SQRT
    t27 = sqrt(t27);
    //Instruction 66932
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 66933
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66934
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66935
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66936
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66937
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66938
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66939
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 66940
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 66941
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 66942
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 66943
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 66944
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 66945
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66946
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66947
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66948
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 66949
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 66950
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 66951
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 66952
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66953
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 66954
    //MUL
    t10_6.xyz = t3.xyz * t5.xyz;
    //Instruction 66955
    //MAD
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    //Instruction 66956
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 66957
    //MUL
    t7.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66958
    //MAD
    t7.xyz = _Object2World[0].xyz * t2.xxx + t7.xyz;
    //Instruction 66959
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t7.xyz;
    //Instruction 66960
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 66961
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 66962
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 66963
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 66964
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 66965
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 66966
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 66967
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 66968
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 66969
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 66970
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 66971
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 66972
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 66973
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 66974
    //ADD
    t1 = t9.z + t1;
    //Instruction 66975
    //FRC
    t1 = fract(t1);
    //Instruction 66976
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 66977
    //MOV
    vs_TEXCOORD4.z = t1;
    //Instruction 66978
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 66979
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66980
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66981
    //MUL
    t1 = t1 * t9.x;
    //Instruction 66982
    //MUL
    t9.x = t1 * t1;
    //Instruction 66983
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 66984
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 66985
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 66986
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 66987
    //MUL
    t17.x = t9.x * t1;
    //Instruction 66988
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 66989
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 66990
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 66991
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 66992
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 66993
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 66994
    //ADD
    t1 = t9.x + t1;
    //Instruction 66995
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 66996
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 66997
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 66998
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 66999
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 67000
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 67001
    //LT
    tb9 = t1<0.0;
    //Instruction 67002
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 67003
    //ADD
    t1 = t9.x + t1;
    //Instruction 67004
    //ADD
    t1 = t0.z + t1;
    //Instruction 67005
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67006
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 67007
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67008
    //GE
    tb9 = t1>=(-t1);
    //Instruction 67009
    //FRC
    t1 = fract(abs(t1));
    //Instruction 67010
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 67011
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67012
    //FTOU
    tu1 = uint(t1);
    //Instruction 67013
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67014
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67015
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67016
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 67017
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 66869
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 66870
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 66871
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 66872
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 66873
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 66874
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66875
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66876
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66877
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66878
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 66879
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 66880
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_3 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 67033
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67034
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 67035
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67036
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67037
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67038
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67039
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67040
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67041
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67042
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67043
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67044
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67045
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67046
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67047
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 67048
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67049
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67050
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 67051
    //FTOU
    tu15 = uint(t15);
    //Instruction 67052
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 67053
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 67054
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67055
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 67056
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 67057
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 67058
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 67059
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 67060
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 67061
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 67062
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 67063
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 67064
    //LOG
    t1.x = log2(t5);
    //Instruction 67065
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67066
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67067
    //NE
    tb6 = t5!=0.0;
    //Instruction 67068
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 67069
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 67070
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67071
    //MOV
    t1.y = t2.w;
    //Instruction 67072
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67073
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67074
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67075
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67076
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67077
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67078
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 67079
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 67080
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67081
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67082
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67083
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67084
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67085
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 67086
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67087
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67088
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67089
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67090
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67091
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67092
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67093
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67094
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67095
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67096
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67097
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 67098
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67099
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 67100
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 67101
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67102
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 67103
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 67104
    //ADD
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 67105
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67106
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 67107
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 67108
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 67109
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 67110
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67111
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67112
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67113
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67114
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    //Instruction 67115
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 67116
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67117
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 67118
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 67119
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67120
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67121
    //MUL
    t15 = t0.y * _ProjectionParams.x;
    //Instruction 67122
    //MUL
    t1.w = t15 * 0.500000;
    //Instruction 67123
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67124
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67125
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67126
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 67127
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 67018
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 67019
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 67020
    //MOV
    t1.x = t16_0.x;
    //Instruction 67021
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 67022
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67023
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 67024
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67025
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67026
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 67027
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 67028
    //LT
    tb1 = t10_2<0.0;
    //Instruction 67029
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67030
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 67031
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 67032
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
highp vec2 t7;
highp float t8;
highp uint tu8;
highp float t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 69147
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 69148
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69149
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69150
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 69151
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 69152
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69153
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69154
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69155
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69156
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69157
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69158
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69159
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 69160
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69161
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 69162
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69163
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69164
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 69165
    //FTOU
    tu8 = uint(t8);
    //Instruction 69166
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 69167
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 69168
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69169
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 69170
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 69171
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 69172
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 69173
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 69174
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 69175
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 69176
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 69177
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 69178
    //LOG
    t12 = log2(t6.x);
    //Instruction 69179
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 69180
    //EXP
    t12 = exp2(t12);
    //Instruction 69181
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 69182
    //MOVC
    t6.x = (tb19) ? t12 : t6.x;
    //Instruction 69183
    //MUL
    t6.x = t6.x * t18;
    //Instruction 69184
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 69185
    //MOV
    t4.y = t3.w;
    //Instruction 69186
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 69187
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 69188
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 69189
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 69190
    //SQRT
    t19 = sqrt(t19);
    //Instruction 69191
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 69192
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 69193
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 69194
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 69195
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 69196
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 69197
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 69198
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 69199
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69200
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69201
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69202
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 69203
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69204
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69205
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 69206
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 69207
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69208
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69209
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 69210
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 69211
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 69212
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 69213
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 69214
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 69215
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 69216
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 69217
    //MAD
    t2.xzw = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 69218
    //ADD
    vs_TEXCOORD1.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 69219
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69220
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 69221
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 69222
    //FRC
    t1.x = fract(t1.x);
    //Instruction 69223
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 69224
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 69225
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 69226
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 69227
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 69228
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 69229
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69230
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69231
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69232
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69233
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t2.xy;
    //Instruction 69234
    //MUL
    t1.xyz = t6.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 69235
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t6.xxx + t1.xyz;
    //Instruction 69236
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t6.zzz + t0.xyz;
    //Instruction 69237
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 69238
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 69239
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 69240
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 69241
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 69242
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 69243
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 69244
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 69245
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 69132
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 69133
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 69134
    //MOV
    t1.x = t16_0.x;
    //Instruction 69135
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 69136
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 69137
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 69138
    //LT
    tb1 = t16_1<0.0;
    //Instruction 69139
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69140
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 69141
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 69142
    //LT
    tb1 = t10_2<0.0;
    //Instruction 69143
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69144
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69145
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 69146
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  tmpvar_44.w = tmpvar_35.x;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  tmpvar_45.w = tmpvar_35.y;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  tmpvar_46.w = tmpvar_35.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_3 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_2.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_2.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_2.z = tmpvar_13;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 67267
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67268
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 67269
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67270
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67271
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67272
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67273
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67274
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67275
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67276
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67277
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67278
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67279
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67280
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67281
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 67282
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67283
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67284
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 67285
    //FTOU
    tu21 = uint(t21);
    //Instruction 67286
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 67287
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 67288
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67289
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 67290
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 67291
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 67292
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 67293
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 67294
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 67295
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 67296
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 67297
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 67298
    //LOG
    t1.x = log2(t7);
    //Instruction 67299
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67300
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67301
    //NE
    tb8 = t7!=0.0;
    //Instruction 67302
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 67303
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 67304
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67305
    //MOV
    t1.y = t2.w;
    //Instruction 67306
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67307
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67308
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67309
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67310
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67311
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67312
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 67313
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 67314
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67315
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67316
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67317
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67318
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67319
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 67320
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67321
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 67322
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 67323
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 67324
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 67325
    //MUL
    t4.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67326
    //MUL
    t4.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67327
    //MUL
    t4.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67328
    //MUL
    t5.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67329
    //MUL
    t5.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67330
    //MUL
    t5.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67331
    //ADD
    t4.xyz = t4.xyz + t5.xyz;
    //Instruction 67332
    //MUL
    t5.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67333
    //MUL
    t5.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67334
    //MUL
    t5.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67335
    //ADD
    t4.xyz = t4.xyz + t5.xyz;
    //Instruction 67336
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 67337
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67338
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 67339
    //MOV
    vs_TEXCOORD0.z = t4.y;
    //Instruction 67340
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 67341
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 67342
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 67343
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 67344
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67345
    //MUL
    t5.xyz = t0.xxx * t5.xyz;
    //Instruction 67346
    //MUL
    t10_6.xyz = t4.xyz * t5.xyz;
    //Instruction 67347
    //MAD
    t10_6.xyz = t4.zxy * t5.yzx + (-t10_6.xyz);
    //Instruction 67348
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 67349
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 67350
    //MOV
    vs_TEXCOORD1.z = t4.z;
    //Instruction 67351
    //MOV
    vs_TEXCOORD2.z = t4.x;
    //Instruction 67352
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 67353
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 67354
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 67355
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 67356
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 67357
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 67358
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 67359
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 67360
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 67361
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 67362
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 67363
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67364
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67365
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67366
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67367
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb7)) ? t14.xy : t2.xy;
    //Instruction 67368
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 67369
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67370
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 67371
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 67372
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67373
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67374
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 67375
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 67376
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67377
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67378
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67379
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 67380
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 67247
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 67248
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 67249
    //MOV
    t1.x = t16_0.x;
    //Instruction 67250
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 67251
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67252
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 67253
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67254
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67255
    //SAMPLE
    t10_1.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 67256
    //MAD
    t10_2.x = t10_1.x * _Color.w + (-_Cutoff);
    //Instruction 67257
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 67258
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67259
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 67260
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 67261
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 67262
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 67263
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 67264
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 67265
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 67266
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 67148
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67149
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67150
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67151
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67152
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67153
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67154
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67155
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67156
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67157
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67158
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67159
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67160
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 67161
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67162
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 67163
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67164
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67165
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 67166
    //FTOU
    tu9 = uint(t9);
    //Instruction 67167
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 67168
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67169
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67170
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 67171
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67172
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67173
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 67174
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67175
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 67176
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 67177
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 67178
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 67179
    //LOG
    t14 = log2(t7.x);
    //Instruction 67180
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 67181
    //EXP
    t14 = exp2(t14);
    //Instruction 67182
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 67183
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 67184
    //MUL
    t7.x = t7.x * t21;
    //Instruction 67185
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 67186
    //MOV
    t4.y = t3.w;
    //Instruction 67187
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 67188
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 67189
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 67190
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 67191
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67192
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 67193
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 67194
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 67195
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 67196
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 67197
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 67198
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 67199
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 67200
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67201
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 67202
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 67203
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 67204
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 67205
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 67206
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67207
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67208
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67209
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67210
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67211
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67212
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 67213
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67214
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67215
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67216
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 67217
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 67218
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67219
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 67220
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 67221
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 67222
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 67223
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 67224
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 67225
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67226
    //MUL
    t4.xyz = vec3(t22) * t4.xyz;
    //Instruction 67227
    //MUL
    t10_6.xyz = t3.xyz * t4.xyz;
    //Instruction 67228
    //MAD
    t10_6.xyz = t3.zxy * t4.yzx + (-t10_6.xyz);
    //Instruction 67229
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 67230
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 67231
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 67232
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 67233
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 67234
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 67235
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 67236
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 67237
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 67238
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 67239
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 67240
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 67241
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 67242
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67243
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67244
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 67245
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 67246
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67247
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 67248
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 67249
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67250
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67251
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67252
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67253
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 67254
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67255
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 67256
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 67257
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67258
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67259
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 67260
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 67261
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67262
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67263
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67264
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 67265
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 67128
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 67129
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 67130
    //MOV
    t1.x = t16_0.x;
    //Instruction 67131
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 67132
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67133
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 67134
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67135
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67136
    //SAMPLE
    t10_1.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 67137
    //MAD
    t10_2.x = t10_1.x * _Color.w + (-_Cutoff);
    //Instruction 67138
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 67139
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67140
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 67141
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 67142
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 67143
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 67144
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 67145
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 67146
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 67147
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_3 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb8;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 69261
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 69262
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 69263
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69264
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69265
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69266
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 69267
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 69268
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69269
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69270
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69271
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69272
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69273
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69274
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69275
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69276
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69277
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69278
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 69279
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69280
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 69281
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 69282
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 69283
    //MUL
    t3.y = t0.y * t17;
    //Instruction 69284
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 69285
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 69286
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 69287
    //LOG
    t17 = log2(t7);
    //Instruction 69288
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 69289
    //EXP
    t17 = exp2(t17);
    //Instruction 69290
    //NE
    tb18 = t7!=0.0;
    //Instruction 69291
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 69292
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 69293
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69294
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 69295
    //MUL
    t7 = t0.x * t7;
    //Instruction 69296
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 69297
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 69298
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 69299
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69300
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 69301
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69302
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 69303
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 69304
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 69305
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69306
    //MOV
    t4.y = t3.y;
    //Instruction 69307
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 69308
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 69309
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 69310
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 69311
    //SQRT
    t16 = sqrt(t16);
    //Instruction 69312
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 69313
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69314
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69315
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69316
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69317
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69318
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69319
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 69320
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 69321
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 69322
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 69323
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 69324
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 69325
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 69326
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 69327
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 69328
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 69329
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 69330
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69331
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 69332
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 69333
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 69334
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69335
    //MAX
    t1.x = max(abs(t6.y), abs(t6.x));
    //Instruction 69336
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 69337
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 69338
    //MUL
    t1.x = t1.x * t16;
    //Instruction 69339
    //MUL
    t16 = t1.x * t1.x;
    //Instruction 69340
    //MAD
    t3.x = t16 * 0.020835 + -0.085133;
    //Instruction 69341
    //MAD
    t3.x = t16 * t3.x + 0.180141;
    //Instruction 69342
    //MAD
    t3.x = t16 * t3.x + -0.330299;
    //Instruction 69343
    //MAD
    t16 = t16 * t3.x + 0.999866;
    //Instruction 69344
    //MUL
    t3.x = t16 * t1.x;
    //Instruction 69345
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 69346
    //LT
    tb8 = abs(t6.y)<abs(t6.x);
    //Instruction 69347
    //AND
    t3.x = tb8 ? t3.x : float(0.0);
    //Instruction 69348
    //MAD
    t1.x = t1.x * t16 + t3.x;
    //Instruction 69349
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 69350
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 69351
    //ADD
    t1.x = t16 + t1.x;
    //Instruction 69352
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 69353
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 69354
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 69355
    //LT
    tb11 = t16<(-t16);
    //Instruction 69356
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 69357
    //MOVC
    t1.x = (ti6 != 0) ? (-t1.x) : t1.x;
    //Instruction 69358
    //LT
    tb6 = t1.x<0.0;
    //Instruction 69359
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 69360
    //ADD
    t1.x = t6.x + t1.x;
    //Instruction 69361
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 69362
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 69363
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 69364
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    //Instruction 69365
    //GE
    tb6 = t1.x>=(-t1.x);
    //Instruction 69366
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 69367
    //MOVC
    t1.x = (tb6) ? t1.x : (-t1.x);
    //Instruction 69368
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 69369
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 69370
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69371
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69372
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69373
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t3.xy;
    //Instruction 69374
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 69375
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 69376
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 69377
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 69378
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 69379
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 69380
    //MUL
    t16 = t1.y * _ProjectionParams.x;
    //Instruction 69381
    //MUL
    t2.w = t16 * 0.500000;
    //Instruction 69382
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 69383
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 69384
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 69385
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 69386
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 69246
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 69247
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 69248
    //MOV
    t1.x = t16_0.x;
    //Instruction 69249
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 69250
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 69251
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 69252
    //LT
    tb1 = t16_1<0.0;
    //Instruction 69253
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69254
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 69255
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 69256
    //LT
    tb1 = t10_2<0.0;
    //Instruction 69257
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69258
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69259
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 69260
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 69402
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 69403
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 69404
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 69405
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69406
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69407
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 69408
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 69409
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69410
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69411
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69412
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69413
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69414
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69415
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69416
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69417
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69418
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 69419
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69420
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 69421
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 69422
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 69423
    //MUL
    t3.y = t0.y * t20;
    //Instruction 69424
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 69425
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 69426
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 69427
    //LOG
    t20 = log2(t8);
    //Instruction 69428
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 69429
    //EXP
    t20 = exp2(t20);
    //Instruction 69430
    //NE
    tb21 = t8!=0.0;
    //Instruction 69431
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 69432
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 69433
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69434
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 69435
    //MUL
    t8 = t0.x * t8;
    //Instruction 69436
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69437
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 69438
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 69439
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 69440
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69441
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 69442
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69443
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 69444
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 69445
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 69446
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69447
    //MOV
    t5.y = t3.y;
    //Instruction 69448
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 69449
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 69450
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 69451
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 69452
    //SQRT
    t21 = sqrt(t21);
    //Instruction 69453
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 69454
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69455
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69456
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69457
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69458
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69459
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69460
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 69461
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 69462
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 69463
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 69464
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 69465
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 69466
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 69467
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 69468
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 69469
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 69470
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 69471
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69472
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 69473
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 69474
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 69475
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69476
    //ADD
    t1.x = t7.y + t7.x;
    //Instruction 69477
    //ADD
    t1.x = t7.z + t1.x;
    //Instruction 69478
    //FRC
    t1.x = fract(t1.x);
    //Instruction 69479
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 69480
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 69481
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 69482
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 69483
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 69484
    //MUL
    t1.x = t1.x * t7.x;
    //Instruction 69485
    //MUL
    t7.x = t1.x * t1.x;
    //Instruction 69486
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 69487
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 69488
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 69489
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 69490
    //MUL
    t13.x = t7.x * t1.x;
    //Instruction 69491
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 69492
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 69493
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 69494
    //MAD
    t1.x = t1.x * t7.x + t13.x;
    //Instruction 69495
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 69496
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 69497
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 69498
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 69499
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 69500
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 69501
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 69502
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 69503
    //MOVC
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    //Instruction 69504
    //LT
    tb7 = t1.x<0.0;
    //Instruction 69505
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 69506
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 69507
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 69508
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 69509
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 69510
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu14) + 0].x;
    //Instruction 69511
    //GE
    tb7 = t1.x>=(-t1.x);
    //Instruction 69512
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 69513
    //MOVC
    t1.x = (tb7) ? t1.x : (-t1.x);
    //Instruction 69514
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 69515
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 69516
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69517
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69518
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69519
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t3.xy;
    //Instruction 69520
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 69521
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 69522
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 69523
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 69524
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 69525
    //MUL
    t19 = t1.y * _ProjectionParams.x;
    //Instruction 69526
    //MUL
    t2.w = t19 * 0.500000;
    //Instruction 69527
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 69528
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 69529
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 69530
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 69531
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 69387
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 69388
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 69389
    //MOV
    t1.x = t16_0.x;
    //Instruction 69390
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 69391
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 69392
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 69393
    //LT
    tb1 = t16_1<0.0;
    //Instruction 69394
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69395
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 69396
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 69397
    //LT
    tb1 = t10_2<0.0;
    //Instruction 69398
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69399
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69400
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 69401
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_47;
  tmpvar_47 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  highp vec4 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  tmpvar_55.w = tmpvar_47.x;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  tmpvar_56.w = tmpvar_47.y;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  tmpvar_57.w = tmpvar_47.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_3 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_2.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_2.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_2.z = tmpvar_13;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb10;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 69552
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 69553
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 69554
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69555
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69556
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69557
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 69558
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 69559
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69560
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69561
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69562
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69563
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69564
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69565
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69566
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69567
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69568
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69569
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 69570
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69571
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 69572
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 69573
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 69574
    //MUL
    t3.y = t0.y * t23;
    //Instruction 69575
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 69576
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 69577
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 69578
    //LOG
    t23 = log2(t9);
    //Instruction 69579
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 69580
    //EXP
    t23 = exp2(t23);
    //Instruction 69581
    //NE
    tb24 = t9!=0.0;
    //Instruction 69582
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 69583
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 69584
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69585
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 69586
    //MUL
    t9 = t0.x * t9;
    //Instruction 69587
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 69588
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 69589
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 69590
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69591
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 69592
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69593
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69594
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 69595
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 69596
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69597
    //MOV
    t4.y = t3.y;
    //Instruction 69598
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 69599
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69600
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 69601
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 69602
    //SQRT
    t22 = sqrt(t22);
    //Instruction 69603
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 69604
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69605
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69606
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69607
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69608
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69609
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69610
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 69611
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 69612
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 69613
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 69614
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 69615
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 69616
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 69617
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 69618
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 69619
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 69620
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 69621
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 69622
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 69623
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 69624
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 69625
    //MUL
    t10_5.xyz = t3.xyz * t4.xyz;
    //Instruction 69626
    //MAD
    t10_5.xyz = t3.zxy * t4.yzx + (-t10_5.xyz);
    //Instruction 69627
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 69628
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 69629
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69630
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 69631
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 69632
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 69633
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 69634
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 69635
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 69636
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 69637
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 69638
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 69639
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 69640
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 69641
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 69642
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 69643
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69644
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 69645
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 69646
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 69647
    //MUL
    t1.x = t1.x * t22;
    //Instruction 69648
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 69649
    //MAD
    t3.x = t22 * 0.020835 + -0.085133;
    //Instruction 69650
    //MAD
    t3.x = t22 * t3.x + 0.180141;
    //Instruction 69651
    //MAD
    t3.x = t22 * t3.x + -0.330299;
    //Instruction 69652
    //MAD
    t22 = t22 * t3.x + 0.999866;
    //Instruction 69653
    //MUL
    t3.x = t22 * t1.x;
    //Instruction 69654
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 69655
    //LT
    tb10 = abs(t8.y)<abs(t8.x);
    //Instruction 69656
    //AND
    t3.x = tb10 ? t3.x : float(0.0);
    //Instruction 69657
    //MAD
    t1.x = t1.x * t22 + t3.x;
    //Instruction 69658
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 69659
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 69660
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 69661
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 69662
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 69663
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 69664
    //LT
    tb15 = t22<(-t22);
    //Instruction 69665
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 69666
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 69667
    //LT
    tb8 = t1.x<0.0;
    //Instruction 69668
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 69669
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 69670
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 69671
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 69672
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 69673
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 69674
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 69675
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 69676
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 69677
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 69678
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 69679
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69680
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69681
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69682
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t15.xy : t3.xy;
    //Instruction 69683
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 69684
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 69685
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 69686
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 69687
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 69688
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 69689
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 69690
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 69691
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 69692
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 69693
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 69694
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 69695
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 69532
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 69533
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 69534
    //MOV
    t1.x = t16_0.x;
    //Instruction 69535
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 69536
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 69537
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 69538
    //LT
    tb1 = t16_1<0.0;
    //Instruction 69539
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69540
    //SAMPLE
    t10_1.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 69541
    //MAD
    t10_2.x = t10_1.x * _Color.w + (-_Cutoff);
    //Instruction 69542
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 69543
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69544
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69545
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69546
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 69547
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 69548
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 69549
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69550
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 69551
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 67401
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67402
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67403
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 67404
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67405
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67406
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 67407
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 67408
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67409
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67410
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67411
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67412
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67413
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67414
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67415
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 67416
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67417
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 67418
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67419
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 67420
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 67421
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 67422
    //MUL
    t3.y = t0.y * t26;
    //Instruction 67423
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 67424
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 67425
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 67426
    //LOG
    t26 = log2(t10);
    //Instruction 67427
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 67428
    //EXP
    t26 = exp2(t26);
    //Instruction 67429
    //NE
    tb27 = t10!=0.0;
    //Instruction 67430
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 67431
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 67432
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 67433
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 67434
    //MUL
    t10 = t0.x * t10;
    //Instruction 67435
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 67436
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 67437
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 67438
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 67439
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 67440
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 67441
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 67442
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 67443
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 67444
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 67445
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 67446
    //MOV
    t5.y = t3.y;
    //Instruction 67447
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 67448
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 67449
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 67450
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 67451
    //SQRT
    t27 = sqrt(t27);
    //Instruction 67452
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 67453
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 67454
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 67455
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 67456
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 67457
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 67458
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67459
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 67460
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 67461
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 67462
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 67463
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 67464
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 67465
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 67466
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 67467
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 67468
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 67469
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 67470
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 67471
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 67472
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 67473
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 67474
    //MUL
    t10_6.xyz = t3.xyz * t5.xyz;
    //Instruction 67475
    //MAD
    t10_6.xyz = t3.zxy * t5.yzx + (-t10_6.xyz);
    //Instruction 67476
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 67477
    //MUL
    t7.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 67478
    //MAD
    t7.xyz = _Object2World[0].xyz * t2.xxx + t7.xyz;
    //Instruction 67479
    //MAD
    t7.xyz = _Object2World[2].xyz * t2.www + t7.xyz;
    //Instruction 67480
    //ADD
    t7.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 67481
    //MOV
    vs_TEXCOORD0.w = t7.x;
    //Instruction 67482
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 67483
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 67484
    //MOV
    vs_TEXCOORD1.w = t7.y;
    //Instruction 67485
    //MOV
    vs_TEXCOORD2.w = t7.z;
    //Instruction 67486
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 67487
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 67488
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 67489
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 67490
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 67491
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 67492
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 67493
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 67494
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 67495
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67496
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67497
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 67498
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 67499
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 67500
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 67501
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 67502
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 67503
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 67504
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 67505
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 67506
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 67507
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 67508
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 67509
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 67510
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 67511
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 67512
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 67513
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 67514
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 67515
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 67516
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 67517
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 67518
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 67519
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 67520
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 67521
    //LT
    tb9 = t1.x<0.0;
    //Instruction 67522
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 67523
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 67524
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 67525
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67526
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 67527
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67528
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 67529
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 67530
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 67531
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67532
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 67533
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67534
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67535
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67536
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t3.xy;
    //Instruction 67537
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67538
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 67539
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 67540
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67541
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 67542
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 67543
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 67544
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 67545
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 67546
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 67547
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 67548
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 67381
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 67382
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 67383
    //MOV
    t1.x = t16_0.x;
    //Instruction 67384
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 67385
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67386
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 67387
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67388
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67389
    //SAMPLE
    t10_1.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 67390
    //MAD
    t10_2.x = t10_1.x * _Color.w + (-_Cutoff);
    //Instruction 67391
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 67392
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67393
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 67394
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 67395
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 67396
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 67397
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 67398
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 67399
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 67400
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  ZWrite Off
  Cull Off
  GpuProgramID 261440
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_5 = tmpvar_36;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 67280
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67281
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 67282
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67283
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67284
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67285
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67286
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67287
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67288
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67289
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67290
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67291
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67292
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67293
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67294
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 67295
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67296
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67297
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 67298
    //FTOU
    tu18 = uint(t18);
    //Instruction 67299
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 67300
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 67301
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67302
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 67303
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 67304
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 67305
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67306
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 67307
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67308
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 67309
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 67310
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 67311
    //LOG
    t1.x = log2(t6);
    //Instruction 67312
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67313
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67314
    //NE
    tb7 = t6!=0.0;
    //Instruction 67315
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 67316
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 67317
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67318
    //MOV
    t1.y = t2.w;
    //Instruction 67319
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67320
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67321
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67322
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67323
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67324
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67325
    //MUL
    t16_3.x = _WindEnabled * _WindQuality;
    //Instruction 67326
    //LT
    tb0 = 0.0<t16_3.x;
    //Instruction 67327
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67328
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67329
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67330
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67331
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67332
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 67333
    //MOV
    gl_Position = t2;
    //Instruction 67334
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67335
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 67336
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 67337
    //ADD
    vs_TEXCOORD0.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 67338
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67339
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 67340
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 67341
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 67342
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67343
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67344
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67345
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67346
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67347
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 67348
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 67349
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 67350
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 67351
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 67352
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 67353
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 67354
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67355
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67356
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67357
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67358
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67359
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67360
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67361
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67362
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67363
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67364
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67365
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67366
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 67367
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 67368
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 67369
    //MUL
    t16_3.x = t0.y * t0.y;
    //Instruction 67370
    //MAD
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    //Instruction 67371
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67372
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 67373
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 67374
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 67375
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_5.xyz;
    //Instruction 67376
    //MOV
    t0.w = 1.0;
    //Instruction 67377
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 67378
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 67379
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 67380
    //ADD
    t16_3.xyz = t16_3.xyz + t16_5.xyz;
    //Instruction 67381
    //MOV
    vs_TEXCOORD5.xyz = t16_3.xyz;
    //Instruction 67382
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 67266
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67267
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67268
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67269
    //LT
    tb0 = t10_1<0.0;
    //Instruction 67270
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 67271
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67272
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67273
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67274
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 67275
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 67276
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67277
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67278
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67279
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_5 = tmpvar_36;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 67396
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67397
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 67398
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67399
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67400
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67401
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67402
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67403
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67404
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67405
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67406
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67407
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67408
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67409
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67410
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 67411
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67412
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67413
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 67414
    //FTOU
    tu18 = uint(t18);
    //Instruction 67415
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 67416
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 67417
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67418
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 67419
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 67420
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 67421
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67422
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 67423
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67424
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 67425
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 67426
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 67427
    //LOG
    t1.x = log2(t6);
    //Instruction 67428
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67429
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67430
    //NE
    tb7 = t6!=0.0;
    //Instruction 67431
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 67432
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 67433
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67434
    //MOV
    t1.y = t2.w;
    //Instruction 67435
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67436
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67437
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67438
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67439
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67440
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67441
    //MUL
    t16_3.x = _WindEnabled * _WindQuality;
    //Instruction 67442
    //LT
    tb0 = 0.0<t16_3.x;
    //Instruction 67443
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67444
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67445
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67446
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67447
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67448
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 67449
    //MOV
    gl_Position = t2;
    //Instruction 67450
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67451
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 67452
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 67453
    //ADD
    vs_TEXCOORD0.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 67454
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67455
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 67456
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 67457
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 67458
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67459
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67460
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67461
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67462
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67463
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 67464
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 67465
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 67466
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 67467
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 67468
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 67469
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 67470
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67471
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67472
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67473
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67474
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67475
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67476
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67477
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67478
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67479
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67480
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67481
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67482
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 67483
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 67484
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 67485
    //MUL
    t16_3.x = t0.y * t0.y;
    //Instruction 67486
    //MAD
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    //Instruction 67487
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67488
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 67489
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 67490
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 67491
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_5.xyz;
    //Instruction 67492
    //MOV
    t0.w = 1.0;
    //Instruction 67493
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 67494
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 67495
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 67496
    //ADD
    t16_3.xyz = t16_3.xyz + t16_5.xyz;
    //Instruction 67497
    //MOV
    vs_TEXCOORD5.xyz = t16_3.xyz;
    //Instruction 67498
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 67383
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67384
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67385
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67386
    //LT
    tb0 = t10_1<0.0;
    //Instruction 67387
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 67388
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67389
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67390
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67391
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 67392
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67393
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67394
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67395
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_5 = tmpvar_37;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 67572
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67573
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67574
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67575
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67576
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67577
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67578
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67579
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67580
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67581
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67582
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67583
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67584
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 67585
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67586
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 67587
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67588
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67589
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 67590
    //FTOU
    tu9 = uint(t9);
    //Instruction 67591
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 67592
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67593
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67594
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 67595
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67596
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67597
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 67598
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67599
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 67600
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 67601
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 67602
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 67603
    //LOG
    t14.x = log2(t7.x);
    //Instruction 67604
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 67605
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 67606
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 67607
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 67608
    //MUL
    t7.x = t7.x * t21;
    //Instruction 67609
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 67610
    //MOV
    t4.y = t3.w;
    //Instruction 67611
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 67612
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 67613
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 67614
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 67615
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67616
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 67617
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 67618
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 67619
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 67620
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 67621
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 67622
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 67623
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 67624
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 67625
    //MOV
    gl_Position = t3;
    //Instruction 67626
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 67627
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 67628
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 67629
    //ADD
    vs_TEXCOORD0.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 67630
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67631
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 67632
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 67633
    //FRC
    t7.x = fract(t7.x);
    //Instruction 67634
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 67635
    //MOV
    vs_TEXCOORD2.z = t7.x;
    //Instruction 67636
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 67637
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67638
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 67639
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 67640
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67641
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67642
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67643
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67644
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 67645
    //MUL
    t0.x = t3.y * _ProjectionParams.x;
    //Instruction 67646
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 67647
    //MUL
    t0.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 67648
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 67649
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 67650
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67651
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67652
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67653
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67654
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67655
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67656
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67657
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67658
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67659
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67660
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67661
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67662
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 67663
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 67664
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 67665
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 67666
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 67667
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67668
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 67669
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 67670
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 67671
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 67672
    //MOV
    t0.w = 1.0;
    //Instruction 67673
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 67674
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 67675
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 67676
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 67677
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 67678
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 67549
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67550
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67551
    //LT
    tb12 = t10_1<0.0;
    //Instruction 67552
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 67553
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 67554
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 67555
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67556
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 67557
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 67558
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 67559
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 67560
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 67561
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 67562
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67563
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67564
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67565
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67566
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 67567
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 67568
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67569
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67570
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67571
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_5 = tmpvar_37;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 67701
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67702
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67703
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67704
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67705
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67706
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67707
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67708
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67709
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67710
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67711
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67712
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67713
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 67714
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67715
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 67716
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67717
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67718
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 67719
    //FTOU
    tu9 = uint(t9);
    //Instruction 67720
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 67721
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67722
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67723
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 67724
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67725
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67726
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 67727
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67728
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 67729
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 67730
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 67731
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 67732
    //LOG
    t14.x = log2(t7.x);
    //Instruction 67733
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 67734
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 67735
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 67736
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 67737
    //MUL
    t7.x = t7.x * t21;
    //Instruction 67738
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 67739
    //MOV
    t4.y = t3.w;
    //Instruction 67740
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 67741
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 67742
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 67743
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 67744
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67745
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 67746
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 67747
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 67748
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 67749
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 67750
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 67751
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 67752
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 67753
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 67754
    //MOV
    gl_Position = t3;
    //Instruction 67755
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 67756
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 67757
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 67758
    //ADD
    vs_TEXCOORD0.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 67759
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67760
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 67761
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 67762
    //FRC
    t7.x = fract(t7.x);
    //Instruction 67763
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 67764
    //MOV
    vs_TEXCOORD2.z = t7.x;
    //Instruction 67765
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 67766
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67767
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 67768
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 67769
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67770
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67771
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67772
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67773
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 67774
    //MUL
    t0.x = t3.y * _ProjectionParams.x;
    //Instruction 67775
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 67776
    //MUL
    t0.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 67777
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 67778
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 67779
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67780
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67781
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67782
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67783
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67784
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67785
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67786
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67787
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67788
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67789
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67790
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67791
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 67792
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 67793
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 67794
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 67795
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 67796
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67797
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 67798
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 67799
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 67800
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 67801
    //MOV
    t0.w = 1.0;
    //Instruction 67802
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 67803
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 67804
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 67805
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 67806
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 67807
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 67679
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67680
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67681
    //LT
    tb12 = t10_1<0.0;
    //Instruction 67682
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 67683
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 67684
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 67685
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67686
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 67687
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 67688
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 67689
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 67690
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 67691
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 67692
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67693
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67694
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67695
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67696
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 67697
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67698
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67699
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67700
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_5 = tmpvar_36;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 67822
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67823
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 67824
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67825
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67826
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67827
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67828
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67829
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67830
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67831
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67832
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67833
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67834
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67835
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67836
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 67837
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67838
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67839
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 67840
    //FTOU
    tu18 = uint(t18);
    //Instruction 67841
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 67842
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 67843
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67844
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 67845
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 67846
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 67847
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67848
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 67849
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67850
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 67851
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 67852
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 67853
    //LOG
    t1.x = log2(t6);
    //Instruction 67854
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67855
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67856
    //NE
    tb7 = t6!=0.0;
    //Instruction 67857
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 67858
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 67859
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67860
    //MOV
    t1.y = t2.w;
    //Instruction 67861
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67862
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67863
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67864
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67865
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67866
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67867
    //MUL
    t16_3.x = _WindEnabled * _WindQuality;
    //Instruction 67868
    //LT
    tb0 = 0.0<t16_3.x;
    //Instruction 67869
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67870
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67871
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67872
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67873
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67874
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 67875
    //MOV
    gl_Position = t2;
    //Instruction 67876
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67877
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 67878
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 67879
    //ADD
    vs_TEXCOORD0.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 67880
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67881
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 67882
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 67883
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 67884
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67885
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67886
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67887
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67888
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67889
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 67890
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 67891
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 67892
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 67893
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 67894
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 67895
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 67896
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67897
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67898
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67899
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67900
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67901
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67902
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67903
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67904
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67905
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67906
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67907
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67908
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 67909
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 67910
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 67911
    //MUL
    t16_3.x = t0.y * t0.y;
    //Instruction 67912
    //MAD
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    //Instruction 67913
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67914
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 67915
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 67916
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 67917
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_5.xyz;
    //Instruction 67918
    //MOV
    t0.w = 1.0;
    //Instruction 67919
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 67920
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 67921
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 67922
    //ADD
    t16_3.xyz = t16_3.xyz + t16_5.xyz;
    //Instruction 67923
    //MOV
    vs_TEXCOORD5.xyz = t16_3.xyz;
    //Instruction 67924
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 67808
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67809
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67810
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67811
    //LT
    tb0 = t10_1<0.0;
    //Instruction 67812
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 67813
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67814
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67815
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67816
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 67817
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 67818
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67819
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67820
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67821
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec4 tmpvar_35;
  tmpvar_35.w = 1.0;
  tmpvar_35.xyz = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_36;
  mediump vec4 normal_37;
  normal_37 = tmpvar_35;
  mediump vec3 x2_38;
  mediump vec3 x1_39;
  x1_39.x = dot (unity_SHAr, normal_37);
  x1_39.y = dot (unity_SHAg, normal_37);
  x1_39.z = dot (unity_SHAb, normal_37);
  mediump vec4 tmpvar_40;
  tmpvar_40 = (normal_37.xyzz * normal_37.yzzx);
  x2_38.x = dot (unity_SHBr, tmpvar_40);
  x2_38.y = dot (unity_SHBg, tmpvar_40);
  x2_38.z = dot (unity_SHBb, tmpvar_40);
  tmpvar_36 = ((x2_38 + (unity_SHC.xyz * 
    ((normal_37.x * normal_37.x) - (normal_37.y * normal_37.y))
  )) + x1_39);
  tmpvar_5 = tmpvar_36;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_29;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump vec3 t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 69709
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 69710
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 69711
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69712
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 69713
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 69714
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69715
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 69716
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69717
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 69718
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69719
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 69720
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 69721
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 69722
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69723
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 69724
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69725
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69726
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 69727
    //FTOU
    tu18 = uint(t18);
    //Instruction 69728
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 69729
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 69730
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69731
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69732
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 69733
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 69734
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69735
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 69736
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69737
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 69738
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 69739
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 69740
    //LOG
    t1.x = log2(t6);
    //Instruction 69741
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 69742
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 69743
    //NE
    tb7 = t6!=0.0;
    //Instruction 69744
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 69745
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 69746
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 69747
    //MOV
    t1.y = t2.w;
    //Instruction 69748
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 69749
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69750
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69751
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 69752
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 69753
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69754
    //MUL
    t16_3.x = _WindEnabled * _WindQuality;
    //Instruction 69755
    //LT
    tb0 = 0.0<t16_3.x;
    //Instruction 69756
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 69757
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 69758
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 69759
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 69760
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 69761
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 69762
    //MOV
    gl_Position = t2;
    //Instruction 69763
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 69764
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 69765
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 69766
    //ADD
    vs_TEXCOORD0.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 69767
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 69768
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 69769
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 69770
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 69771
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69772
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69773
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69774
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69775
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69776
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 69777
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 69778
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 69779
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 69780
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 69781
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 69782
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 69783
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69784
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69785
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69786
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 69787
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69788
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69789
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 69790
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 69791
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69792
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69793
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 69794
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 69795
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 69796
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 69797
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 69798
    //MUL
    t16_3.x = t0.y * t0.y;
    //Instruction 69799
    //MAD
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    //Instruction 69800
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 69801
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 69802
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 69803
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 69804
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_5.xyz;
    //Instruction 69805
    //MOV
    t0.w = 1.0;
    //Instruction 69806
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 69807
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 69808
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 69809
    //ADD
    t16_3.xyz = t16_3.xyz + t16_5.xyz;
    //Instruction 69810
    //MOV
    vs_TEXCOORD5.xyz = t16_3.xyz;
    //Instruction 69811
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69696
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 69697
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69698
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 69699
    //LT
    tb0 = t10_1<0.0;
    //Instruction 69700
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69701
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 69702
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 69703
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 69704
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 69705
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 69706
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69707
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69708
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_5 = tmpvar_37;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 67522
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67523
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67524
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67525
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67526
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67527
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67528
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67529
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67530
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67531
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67532
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67533
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67534
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 67535
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67536
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 67537
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67538
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67539
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 67540
    //FTOU
    tu9 = uint(t9);
    //Instruction 67541
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 67542
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67543
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67544
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 67545
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67546
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67547
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 67548
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67549
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 67550
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 67551
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 67552
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 67553
    //LOG
    t14.x = log2(t7.x);
    //Instruction 67554
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 67555
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 67556
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 67557
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 67558
    //MUL
    t7.x = t7.x * t21;
    //Instruction 67559
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 67560
    //MOV
    t4.y = t3.w;
    //Instruction 67561
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 67562
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 67563
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 67564
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 67565
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67566
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 67567
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 67568
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 67569
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 67570
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 67571
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 67572
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 67573
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 67574
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 67575
    //MOV
    gl_Position = t3;
    //Instruction 67576
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 67577
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 67578
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 67579
    //ADD
    vs_TEXCOORD0.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 67580
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67581
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 67582
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 67583
    //FRC
    t7.x = fract(t7.x);
    //Instruction 67584
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 67585
    //MOV
    vs_TEXCOORD2.z = t7.x;
    //Instruction 67586
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 67587
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67588
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 67589
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 67590
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67591
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67592
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67593
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67594
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 67595
    //MUL
    t0.x = t3.y * _ProjectionParams.x;
    //Instruction 67596
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 67597
    //MUL
    t0.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 67598
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 67599
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 67600
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67601
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67602
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67603
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67604
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67605
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67606
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67607
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67608
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67609
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67610
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67611
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 67612
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 67613
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 67614
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 67615
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 67616
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 67617
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67618
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 67619
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 67620
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 67621
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 67622
    //MOV
    t0.w = 1.0;
    //Instruction 67623
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 67624
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 67625
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 67626
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 67627
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 67628
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 67499
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67500
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67501
    //LT
    tb12 = t10_1<0.0;
    //Instruction 67502
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 67503
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 67504
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 67505
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67506
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 67507
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 67508
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 67509
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 67510
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 67511
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 67512
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67513
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67514
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67515
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67516
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 67517
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 67518
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67519
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67520
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67521
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_33;
  v_33.x = _World2Object[0].x;
  v_33.y = _World2Object[1].x;
  v_33.z = _World2Object[2].x;
  v_33.w = _World2Object[3].x;
  highp vec4 v_34;
  v_34.x = _World2Object[0].y;
  v_34.y = _World2Object[1].y;
  v_34.z = _World2Object[2].y;
  v_34.w = _World2Object[3].y;
  highp vec4 v_35;
  v_35.x = _World2Object[0].z;
  v_35.y = _World2Object[1].z;
  v_35.z = _World2Object[2].z;
  v_35.w = _World2Object[3].z;
  highp vec4 tmpvar_36;
  tmpvar_36.w = 1.0;
  tmpvar_36.xyz = normalize(((
    (v_33.xyz * _BillboardNormal.x)
   + 
    (v_34.xyz * _BillboardNormal.y)
  ) + (v_35.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_37;
  mediump vec4 normal_38;
  normal_38 = tmpvar_36;
  mediump vec3 x2_39;
  mediump vec3 x1_40;
  x1_40.x = dot (unity_SHAr, normal_38);
  x1_40.y = dot (unity_SHAg, normal_38);
  x1_40.z = dot (unity_SHAb, normal_38);
  mediump vec4 tmpvar_41;
  tmpvar_41 = (normal_38.xyzz * normal_38.yzzx);
  x2_39.x = dot (unity_SHBr, tmpvar_41);
  x2_39.y = dot (unity_SHBg, tmpvar_41);
  x2_39.z = dot (unity_SHBb, tmpvar_41);
  tmpvar_37 = ((x2_39 + (unity_SHC.xyz * 
    ((normal_38.x * normal_38.x) - (normal_38.y * normal_38.y))
  )) + x1_40);
  tmpvar_5 = tmpvar_37;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_30;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 67947
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67948
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67949
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67950
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67951
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67952
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67953
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67954
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67955
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67956
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67957
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67958
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67959
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 67960
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67961
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 67962
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67963
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67964
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 67965
    //FTOU
    tu9 = uint(t9);
    //Instruction 67966
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 67967
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67968
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67969
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 67970
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67971
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67972
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 67973
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67974
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 67975
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 67976
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 67977
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 67978
    //LOG
    t14.x = log2(t7.x);
    //Instruction 67979
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 67980
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 67981
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 67982
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 67983
    //MUL
    t7.x = t7.x * t21;
    //Instruction 67984
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 67985
    //MOV
    t4.y = t3.w;
    //Instruction 67986
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 67987
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 67988
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 67989
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 67990
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67991
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 67992
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 67993
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 67994
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 67995
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 67996
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 67997
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 67998
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 67999
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68000
    //MOV
    gl_Position = t3;
    //Instruction 68001
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 68002
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 68003
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 68004
    //ADD
    vs_TEXCOORD0.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 68005
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68006
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 68007
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 68008
    //FRC
    t7.x = fract(t7.x);
    //Instruction 68009
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 68010
    //MOV
    vs_TEXCOORD2.z = t7.x;
    //Instruction 68011
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 68012
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 68013
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 68014
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 68015
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 68016
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 68017
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68018
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68019
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 68020
    //MUL
    t0.x = t3.y * _ProjectionParams.x;
    //Instruction 68021
    //MUL
    t0.w = t0.x * 0.500000;
    //Instruction 68022
    //MUL
    t0.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 68023
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 68024
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 68025
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68026
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 68027
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 68028
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 68029
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 68030
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 68031
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 68032
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68033
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 68034
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 68035
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 68036
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68037
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 68038
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 68039
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 68040
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68041
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68042
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68043
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68044
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68045
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68046
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68047
    //MOV
    t0.w = 1.0;
    //Instruction 68048
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68049
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68050
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68051
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68052
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 68053
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 67925
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67926
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67927
    //LT
    tb12 = t10_1<0.0;
    //Instruction 67928
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 67929
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 67930
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 67931
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67932
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 67933
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 67934
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 67935
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 67936
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 67937
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 67938
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67939
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67940
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67941
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67942
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 67943
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67944
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67945
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67946
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_5 = tmpvar_47;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 69826
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 69827
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 69828
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69829
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69830
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69831
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 69832
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 69833
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69834
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69835
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69836
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69837
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69838
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69839
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69840
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69841
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69842
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69843
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 69844
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69845
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 69846
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 69847
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 69848
    //MUL
    t3.y = t0.y * t23;
    //Instruction 69849
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 69850
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 69851
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 69852
    //LOG
    t23 = log2(t9);
    //Instruction 69853
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 69854
    //EXP
    t23 = exp2(t23);
    //Instruction 69855
    //NE
    tb24 = t9!=0.0;
    //Instruction 69856
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 69857
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 69858
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69859
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 69860
    //MUL
    t9 = t0.x * t9;
    //Instruction 69861
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 69862
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 69863
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 69864
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69865
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 69866
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69867
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69868
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 69869
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 69870
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69871
    //MOV
    t4.y = t3.y;
    //Instruction 69872
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 69873
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69874
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 69875
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 69876
    //SQRT
    t22 = sqrt(t22);
    //Instruction 69877
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 69878
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69879
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69880
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69881
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69882
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69883
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 69884
    //MOV
    gl_Position = t3;
    //Instruction 69885
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69886
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 69887
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 69888
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 69889
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 69890
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 69891
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 69892
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 69893
    //MUL
    t1.x = t1.x * t22;
    //Instruction 69894
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 69895
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 69896
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 69897
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 69898
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 69899
    //MUL
    t2.x = t22 * t1.x;
    //Instruction 69900
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 69901
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 69902
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 69903
    //MAD
    t1.x = t1.x * t22 + t2.x;
    //Instruction 69904
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 69905
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 69906
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 69907
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 69908
    //LT
    tb22 = t22<(-t22);
    //Instruction 69909
    //MAX
    t2.x = max(t8.y, (-t8.x));
    //Instruction 69910
    //GE
    tb2 = t2.x>=(-t2.x);
    //Instruction 69911
    //AND
    ti22 = int(uint(tb22) & uint(tb2));
    //Instruction 69912
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 69913
    //LT
    tb22 = t1.x<0.0;
    //Instruction 69914
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 69915
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 69916
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 69917
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 69918
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 69919
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 69920
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 69921
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 69922
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 69923
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 69924
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 69925
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69926
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69927
    //MAD
    t16.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69928
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t2.xy : t16.xy;
    //Instruction 69929
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 69930
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 69931
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 69932
    //MUL
    t2.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 69933
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 69934
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 69935
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69936
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 69937
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 69938
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 69939
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 69940
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 69941
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 69942
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 69943
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 69944
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69945
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 69946
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 69947
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 69948
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 69949
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 69950
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 69951
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 69952
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 69953
    //MOV
    t0.w = 1.0;
    //Instruction 69954
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 69955
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 69956
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 69957
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 69958
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 69959
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69812
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 69813
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69814
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 69815
    //LT
    tb0 = t10_1<0.0;
    //Instruction 69816
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69817
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 69818
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 69819
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 69820
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 69821
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 69822
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 69823
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69824
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69825
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_5 = tmpvar_47;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 67642
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67643
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67644
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67645
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 67646
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67647
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 67648
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 67649
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 67650
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67651
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67652
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67653
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67654
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67655
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67656
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67657
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 67658
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67659
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 67660
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67661
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 67662
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 67663
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 67664
    //MUL
    t3.y = t0.y * t23;
    //Instruction 67665
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 67666
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 67667
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 67668
    //LOG
    t23 = log2(t9);
    //Instruction 67669
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 67670
    //EXP
    t23 = exp2(t23);
    //Instruction 67671
    //NE
    tb24 = t9!=0.0;
    //Instruction 67672
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 67673
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 67674
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 67675
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 67676
    //MUL
    t9 = t0.x * t9;
    //Instruction 67677
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 67678
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 67679
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 67680
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 67681
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 67682
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 67683
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 67684
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 67685
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 67686
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 67687
    //MOV
    t4.y = t3.y;
    //Instruction 67688
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 67689
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67690
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 67691
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 67692
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67693
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 67694
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 67695
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 67696
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 67697
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 67698
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 67699
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 67700
    //MOV
    gl_Position = t3;
    //Instruction 67701
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 67702
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 67703
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 67704
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 67705
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67706
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 67707
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 67708
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 67709
    //MUL
    t1.x = t1.x * t22;
    //Instruction 67710
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 67711
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 67712
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 67713
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 67714
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 67715
    //MUL
    t2.x = t22 * t1.x;
    //Instruction 67716
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 67717
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 67718
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 67719
    //MAD
    t1.x = t1.x * t22 + t2.x;
    //Instruction 67720
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 67721
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 67722
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 67723
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 67724
    //LT
    tb22 = t22<(-t22);
    //Instruction 67725
    //MAX
    t2.x = max(t8.y, (-t8.x));
    //Instruction 67726
    //GE
    tb2 = t2.x>=(-t2.x);
    //Instruction 67727
    //AND
    ti22 = int(uint(tb22) & uint(tb2));
    //Instruction 67728
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 67729
    //LT
    tb22 = t1.x<0.0;
    //Instruction 67730
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 67731
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 67732
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 67733
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 67734
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 67735
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 67736
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 67737
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 67738
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 67739
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 67740
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 67741
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67742
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67743
    //MAD
    t16.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67744
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t2.xy : t16.xy;
    //Instruction 67745
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 67746
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 67747
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 67748
    //MUL
    t2.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 67749
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 67750
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 67751
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67752
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 67753
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 67754
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 67755
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 67756
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 67757
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 67758
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 67759
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 67760
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67761
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 67762
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 67763
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 67764
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67765
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 67766
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 67767
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 67768
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 67769
    //MOV
    t0.w = 1.0;
    //Instruction 67770
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 67771
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 67772
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 67773
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 67774
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 67775
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 67629
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67630
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67631
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67632
    //LT
    tb0 = t10_1<0.0;
    //Instruction 67633
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 67634
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67635
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67636
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67637
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 67638
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67639
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67640
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67641
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_17.z) + (v_46.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_5 = tmpvar_48;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 67799
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67800
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67801
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 67802
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67803
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67804
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 67805
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 67806
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67807
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67808
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67809
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67810
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67811
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67812
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67813
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 67814
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67815
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 67816
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67817
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 67818
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 67819
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 67820
    //MUL
    t3.y = t0.y * t26;
    //Instruction 67821
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 67822
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 67823
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 67824
    //LOG
    t26 = log2(t10);
    //Instruction 67825
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 67826
    //EXP
    t26 = exp2(t26);
    //Instruction 67827
    //NE
    tb27 = t10!=0.0;
    //Instruction 67828
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 67829
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 67830
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 67831
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 67832
    //MUL
    t10 = t0.x * t10;
    //Instruction 67833
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 67834
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 67835
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 67836
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 67837
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 67838
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 67839
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 67840
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 67841
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 67842
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 67843
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 67844
    //MOV
    t5.y = t3.y;
    //Instruction 67845
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 67846
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 67847
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 67848
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 67849
    //SQRT
    t27 = sqrt(t27);
    //Instruction 67850
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 67851
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 67852
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 67853
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 67854
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 67855
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 67856
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 67857
    //MOV
    gl_Position = t3;
    //Instruction 67858
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 67859
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 67860
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 67861
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 67862
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 67863
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 67864
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 67865
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67866
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67867
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 67868
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 67869
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 67870
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 67871
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 67872
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 67873
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 67874
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 67875
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 67876
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 67877
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 67878
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 67879
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 67880
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 67881
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 67882
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 67883
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 67884
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 67885
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 67886
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 67887
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 67888
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 67889
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 67890
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 67891
    //LT
    tb9 = t1.x<0.0;
    //Instruction 67892
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 67893
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 67894
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 67895
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 67896
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 67897
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 67898
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 67899
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 67900
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 67901
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 67902
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 67903
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67904
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67905
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67906
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 67907
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 67908
    //MUL
    t1.w = t1.x * 0.500000;
    //Instruction 67909
    //MUL
    t1.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 67910
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 67911
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 67912
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 67913
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 67914
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 67915
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 67916
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 67917
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 67918
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 67919
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 67920
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 67921
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 67922
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 67923
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 67924
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 67925
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 67926
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 67927
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 67928
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 67929
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 67930
    //MOV
    t0.w = 1.0;
    //Instruction 67931
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 67932
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 67933
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 67934
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 67935
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 67936
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 67776
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67777
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67778
    //LT
    tb12 = t10_1<0.0;
    //Instruction 67779
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 67780
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 67781
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 67782
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67783
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 67784
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 67785
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 67786
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 67787
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 67788
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 67789
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67790
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67791
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67792
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67793
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 67794
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 67795
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67796
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67797
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67798
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_17.z) + (v_46.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_5 = tmpvar_48;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 69982
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 69983
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 69984
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 69985
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69986
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69987
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 69988
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 69989
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69990
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69991
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69992
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69993
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69994
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69995
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69996
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69997
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69998
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 69999
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70000
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 70001
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 70002
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 70003
    //MUL
    t3.y = t0.y * t26;
    //Instruction 70004
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 70005
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 70006
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 70007
    //LOG
    t26 = log2(t10);
    //Instruction 70008
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 70009
    //EXP
    t26 = exp2(t26);
    //Instruction 70010
    //NE
    tb27 = t10!=0.0;
    //Instruction 70011
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 70012
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 70013
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70014
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 70015
    //MUL
    t10 = t0.x * t10;
    //Instruction 70016
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70017
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 70018
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70019
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 70020
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70021
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 70022
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70023
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70024
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 70025
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 70026
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70027
    //MOV
    t5.y = t3.y;
    //Instruction 70028
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 70029
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 70030
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 70031
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 70032
    //SQRT
    t27 = sqrt(t27);
    //Instruction 70033
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 70034
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70035
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70036
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70037
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70038
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70039
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 70040
    //MOV
    gl_Position = t3;
    //Instruction 70041
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70042
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 70043
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 70044
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 70045
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70046
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 70047
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 70048
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70049
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70050
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 70051
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 70052
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70053
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 70054
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 70055
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 70056
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 70057
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 70058
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 70059
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 70060
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 70061
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 70062
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 70063
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 70064
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 70065
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 70066
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 70067
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70068
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 70069
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 70070
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 70071
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 70072
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 70073
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 70074
    //LT
    tb9 = t1.x<0.0;
    //Instruction 70075
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 70076
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70077
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70078
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 70079
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70080
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 70081
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 70082
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70083
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 70084
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 70085
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70086
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70087
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70088
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70089
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 70090
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 70091
    //MUL
    t1.w = t1.x * 0.500000;
    //Instruction 70092
    //MUL
    t1.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 70093
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 70094
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 70095
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70096
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 70097
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 70098
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 70099
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 70100
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 70101
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 70102
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 70103
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 70104
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 70105
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 70106
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 70107
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 70108
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 70109
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 70110
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 70111
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 70112
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 70113
    //MOV
    t0.w = 1.0;
    //Instruction 70114
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 70115
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 70116
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 70117
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 70118
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 70119
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69960
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 69961
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69962
    //LT
    tb12 = t10_1<0.0;
    //Instruction 69963
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69964
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69965
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69966
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69967
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69968
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69969
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69970
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69971
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69972
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69973
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 69974
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 69975
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 69976
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 69977
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 69978
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 69979
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69980
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69981
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_5 = tmpvar_47;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68068
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68069
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68070
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68071
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 68072
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68073
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 68074
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 68075
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68076
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68077
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68078
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68079
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68080
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68081
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68082
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68083
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68084
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68085
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 68086
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68087
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 68088
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 68089
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 68090
    //MUL
    t3.y = t0.y * t23;
    //Instruction 68091
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 68092
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 68093
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 68094
    //LOG
    t23 = log2(t9);
    //Instruction 68095
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 68096
    //EXP
    t23 = exp2(t23);
    //Instruction 68097
    //NE
    tb24 = t9!=0.0;
    //Instruction 68098
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 68099
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 68100
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68101
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 68102
    //MUL
    t9 = t0.x * t9;
    //Instruction 68103
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 68104
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 68105
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 68106
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68107
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 68108
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68109
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 68110
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 68111
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 68112
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68113
    //MOV
    t4.y = t3.y;
    //Instruction 68114
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 68115
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68116
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 68117
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 68118
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68119
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 68120
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68121
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68122
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68123
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68124
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68125
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68126
    //MOV
    gl_Position = t3;
    //Instruction 68127
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68128
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 68129
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 68130
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 68131
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68132
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 68133
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68134
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 68135
    //MUL
    t1.x = t1.x * t22;
    //Instruction 68136
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 68137
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 68138
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 68139
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 68140
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 68141
    //MUL
    t2.x = t22 * t1.x;
    //Instruction 68142
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 68143
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 68144
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 68145
    //MAD
    t1.x = t1.x * t22 + t2.x;
    //Instruction 68146
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 68147
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 68148
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68149
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 68150
    //LT
    tb22 = t22<(-t22);
    //Instruction 68151
    //MAX
    t2.x = max(t8.y, (-t8.x));
    //Instruction 68152
    //GE
    tb2 = t2.x>=(-t2.x);
    //Instruction 68153
    //AND
    ti22 = int(uint(tb22) & uint(tb2));
    //Instruction 68154
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 68155
    //LT
    tb22 = t1.x<0.0;
    //Instruction 68156
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 68157
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68158
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68159
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 68160
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68161
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 68162
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 68163
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68164
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 68165
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 68166
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68167
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68168
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68169
    //MAD
    t16.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68170
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t2.xy : t16.xy;
    //Instruction 68171
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68172
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 68173
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 68174
    //MUL
    t2.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 68175
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 68176
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 68177
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68178
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 68179
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 68180
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 68181
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 68182
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 68183
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 68184
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 68185
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68186
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68187
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 68188
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68189
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68190
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68191
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68192
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68193
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68194
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68195
    //MOV
    t0.w = 1.0;
    //Instruction 68196
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68197
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68198
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68199
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68200
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 68201
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 68054
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68055
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68056
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68057
    //LT
    tb0 = t10_1<0.0;
    //Instruction 68058
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 68059
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 68060
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 68061
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68062
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 68063
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 68064
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 68065
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 68066
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68067
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = normalize(((v_44.xyz * tmpvar_17.z) + (v_45.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_47;
  mediump vec4 normal_48;
  normal_48 = tmpvar_46;
  mediump vec3 x2_49;
  mediump vec3 x1_50;
  x1_50.x = dot (unity_SHAr, normal_48);
  x1_50.y = dot (unity_SHAg, normal_48);
  x1_50.z = dot (unity_SHAb, normal_48);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_51);
  x2_49.y = dot (unity_SHBg, tmpvar_51);
  x2_49.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_47 = ((x2_49 + (unity_SHC.xyz * 
    ((normal_48.x * normal_48.x) - (normal_48.y * normal_48.y))
  )) + x1_50);
  tmpvar_5 = tmpvar_47;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_41;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb9;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68215
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68216
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68217
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68218
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 68219
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68220
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 68221
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 68222
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68223
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68224
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68225
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68226
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68227
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68228
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68229
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68230
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68231
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68232
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 68233
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68234
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 68235
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 68236
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 68237
    //MUL
    t3.y = t0.y * t23;
    //Instruction 68238
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 68239
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 68240
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 68241
    //LOG
    t23 = log2(t9);
    //Instruction 68242
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 68243
    //EXP
    t23 = exp2(t23);
    //Instruction 68244
    //NE
    tb24 = t9!=0.0;
    //Instruction 68245
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 68246
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 68247
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68248
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 68249
    //MUL
    t9 = t0.x * t9;
    //Instruction 68250
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 68251
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 68252
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 68253
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68254
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 68255
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68256
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 68257
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 68258
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 68259
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68260
    //MOV
    t4.y = t3.y;
    //Instruction 68261
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 68262
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68263
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 68264
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 68265
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68266
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 68267
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68268
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68269
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68270
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68271
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68272
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68273
    //MOV
    gl_Position = t3;
    //Instruction 68274
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68275
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 68276
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 68277
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 68278
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68279
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 68280
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68281
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 68282
    //MUL
    t1.x = t1.x * t22;
    //Instruction 68283
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 68284
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 68285
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 68286
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 68287
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 68288
    //MUL
    t2.x = t22 * t1.x;
    //Instruction 68289
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 68290
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 68291
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 68292
    //MAD
    t1.x = t1.x * t22 + t2.x;
    //Instruction 68293
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 68294
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 68295
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68296
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 68297
    //LT
    tb22 = t22<(-t22);
    //Instruction 68298
    //MAX
    t2.x = max(t8.y, (-t8.x));
    //Instruction 68299
    //GE
    tb2 = t2.x>=(-t2.x);
    //Instruction 68300
    //AND
    ti22 = int(uint(tb22) & uint(tb2));
    //Instruction 68301
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 68302
    //LT
    tb22 = t1.x<0.0;
    //Instruction 68303
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 68304
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68305
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68306
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 68307
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68308
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 68309
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 68310
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68311
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 68312
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 68313
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68314
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68315
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68316
    //MAD
    t16.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68317
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t2.xy : t16.xy;
    //Instruction 68318
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68319
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 68320
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 68321
    //MUL
    t2.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 68322
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 68323
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 68324
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68325
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 68326
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 68327
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 68328
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 68329
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 68330
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 68331
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 68332
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68333
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68334
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 68335
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68336
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68337
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68338
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68339
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68340
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68341
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68342
    //MOV
    t0.w = 1.0;
    //Instruction 68343
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68344
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68345
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68346
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68347
    //MOV
    vs_TEXCOORD5.xyz = t16_5.xyz;
    //Instruction 68348
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 68202
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68203
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68204
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68205
    //LT
    tb0 = t10_1<0.0;
    //Instruction 68206
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 68207
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 68208
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 68209
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68210
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 68211
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 68212
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 68213
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68214
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_17.z) + (v_46.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_5 = tmpvar_48;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp 