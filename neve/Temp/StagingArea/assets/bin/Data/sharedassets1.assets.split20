 vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_8 = tmpvar_10;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_16.x)
   + 
    (v_104.xyz * tmpvar_16.y)
  ) + (v_105.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_106;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_6;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  highp vec3 lightColor0_111;
  lightColor0_111 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_112;
  lightColor1_112 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_113;
  lightColor2_113 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_114;
  lightColor3_114 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_115;
  lightAttenSq_115 = unity_4LightAtten0;
  highp vec3 normal_116;
  normal_116 = worldNormal_6;
  highp vec3 col_117;
  highp vec4 ndotl_118;
  highp vec4 lengthSq_119;
  highp vec4 tmpvar_120;
  tmpvar_120 = (unity_4LightPosX0 - tmpvar_102.x);
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosY0 - tmpvar_102.y);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosZ0 - tmpvar_102.z);
  lengthSq_119 = (tmpvar_120 * tmpvar_120);
  lengthSq_119 = (lengthSq_119 + (tmpvar_121 * tmpvar_121));
  lengthSq_119 = (lengthSq_119 + (tmpvar_122 * tmpvar_122));
  ndotl_118 = (tmpvar_120 * normal_116.x);
  ndotl_118 = (ndotl_118 + (tmpvar_121 * normal_116.y));
  ndotl_118 = (ndotl_118 + (tmpvar_122 * normal_116.z));
  highp vec4 tmpvar_123;
  tmpvar_123 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_118 * inversesqrt(lengthSq_119)));
  ndotl_118 = tmpvar_123;
  highp vec4 tmpvar_124;
  tmpvar_124 = (tmpvar_123 * (1.0/((1.0 + 
    (lengthSq_119 * lightAttenSq_115)
  ))));
  col_117 = (lightColor0_111 * tmpvar_124.x);
  col_117 = (col_117 + (lightColor1_112 * tmpvar_124.y));
  col_117 = (col_117 + (lightColor2_113 * tmpvar_124.z));
  col_117 = (col_117 + (lightColor3_114 * tmpvar_124.w));
  tmpvar_9 = ((x2_109 + (unity_SHC.xyz * 
    ((normal_108.x * normal_108.x) - (normal_108.y * normal_108.y))
  )) + col_117);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_102;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 18362
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18363
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18364
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 18365
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18366
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 18367
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 18368
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 18369
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 18370
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18371
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18372
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 18373
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18374
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18375
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18376
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 18377
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 18378
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 18379
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 18380
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 18381
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 18382
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 18383
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 18384
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 18385
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 18386
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 18387
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 18388
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 18389
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 18390
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 18391
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 18392
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 18393
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 18394
        //FRC
        t32.x = fract(t32.x);
        //Instruction 18395
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 18396
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 18397
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 18398
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 18399
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 18400
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 18401
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 18402
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 18403
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 18404
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 18405
        //IF
        if(tb48){
            //Instruction 18406
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 18407
            //FRC
            t5 = fract(t5);
            //Instruction 18408
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18409
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 18410
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 18411
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 18412
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 18413
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 18414
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 18415
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 18416
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18417
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 18418
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18419
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 18420
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 18421
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 18422
            //SQRT
            t49 = sqrt(t49);
            //Instruction 18423
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 18424
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 18425
            //MUL
            t51 = t51 * t52;
            //Instruction 18426
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 18427
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 18428
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 18429
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 18430
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 18431
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 18432
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 18433
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 18434
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 18435
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 18436
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 18437
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 18438
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 18439
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 18440
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 18441
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 18442
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 18443
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 18444
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 18445
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 18446
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 18447
            //SQRT
            t51 = sqrt(t51);
            //Instruction 18448
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 18449
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 18450
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 18451
            //MUL
            t6.x = t51 * t52;
            //Instruction 18452
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 18453
            //LT
            tb19 = t19<(-t19);
            //Instruction 18454
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 18455
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 18456
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 18457
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 18458
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 18459
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 18460
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 18461
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18462
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 18463
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18464
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 18465
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 18466
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 18467
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 18468
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 18469
            //LOG
            t48 = log2(t48);
            //Instruction 18470
            //MUL
            t48 = t48 * t7.y;
            //Instruction 18471
            //EXP
            t48 = exp2(t48);
            //Instruction 18472
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 18473
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 18474
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 18475
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 18476
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 18477
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 18478
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 18479
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 18480
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 18481
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 18482
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 18483
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 18484
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 18485
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 18486
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 18487
            //MOV
            t11.z = t12.x;
            //Instruction 18488
            //MOV
            t11.w = t10.x;
            //Instruction 18489
            //MOV
            t13.z = t9.y;
            //Instruction 18490
            //MOV
            t13.w = t14.y;
            //Instruction 18491
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 18492
            //MOV
            t14.w = t13.y;
            //Instruction 18493
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 18494
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 18495
            //MOV
            t10.w = t11.y;
            //Instruction 18496
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 18497
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 18498
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 18499
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 18500
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 18501
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 18502
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 18503
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 18504
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 18505
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 18506
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 18507
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 18508
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 18509
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 18510
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 18511
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 18512
        //ELSE
        } else {
            //Instruction 18513
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 18514
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 18515
        //ENDIF
        }
        //Instruction 18516
    //ELSE
    } else {
        //Instruction 18517
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 18518
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 18519
    //ENDIF
    }
    //Instruction 18520
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 18521
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 18522
    //IF
    if(tb49){
        //Instruction 18523
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 18524
        //IF
        if(tb49){
            //Instruction 18525
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18526
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 18527
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 18528
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 18529
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 18530
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 18531
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18532
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18533
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18534
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 18535
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 18536
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 18537
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18538
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18539
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 18540
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18541
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18542
            //FRC
            t2 = fract(t2);
            //Instruction 18543
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18544
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 18545
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18546
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18547
            //ADD
            t2 = t2 + t2;
            //Instruction 18548
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 18549
            //LT
            tb51 = t7.w<0.0;
            //Instruction 18550
            //MOV
            t7.y = (-t7.w);
            //Instruction 18551
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 18552
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 18553
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 18554
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 18555
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 18556
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 18557
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 18558
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18559
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18560
            //MUL
            t53 = t2.x * t53;
            //Instruction 18561
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 18562
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18563
            //MUL
            t51 = t51 * t52;
            //Instruction 18564
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 18565
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18566
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18567
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18568
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18569
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 18570
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 18571
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18572
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 18573
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18574
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 18575
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 18576
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 18577
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 18578
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18579
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 18580
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 18581
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 18582
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18583
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 18584
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 18585
        //ELSE
        } else {
            //Instruction 18586
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18587
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18588
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18589
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 18590
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18591
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18592
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18593
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 18594
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 18595
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18596
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18597
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18598
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 18599
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18600
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18601
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 18602
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 18603
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18604
            //MOV
            t2.y = (-t2.w);
            //Instruction 18605
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18606
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18607
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 18608
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 18609
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 18610
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 18611
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18612
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18613
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18614
            //MUL
            t51 = t51 * t6.x;
            //Instruction 18615
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 18616
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 18617
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18618
        //ENDIF
        }
        //Instruction 18619
    //ENDIF
    }
    //Instruction 18620
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 18621
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 18622
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18623
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 18624
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 18625
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 18626
    //NE
    tb51 = t49!=0.0;
    //Instruction 18627
    //LOG
    t52 = log2(t49);
    //Instruction 18628
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 18629
    //EXP
    t52 = exp2(t52);
    //Instruction 18630
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 18631
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18632
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18633
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 18634
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 18635
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18636
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 18637
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18638
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 18639
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 18640
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 18641
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18642
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 18643
    //MUL
    t49 = t49 * t51;
    //Instruction 18644
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 18645
    //MOV
    t5.y = t4.y;
    //Instruction 18646
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 18647
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 18648
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 18649
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 18650
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 18651
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 18652
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 18653
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 18654
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 18655
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 18656
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 18657
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 18658
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 18659
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 18660
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 18661
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 18662
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18663
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18664
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 18665
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 18666
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 18667
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 18668
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 18669
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 18670
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 18671
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 18672
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 18673
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 18674
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 18675
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 18676
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 18677
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 18678
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 18679
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 18680
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 18681
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 18682
    //ADD
    t4 = (-t3.zzzz) + unity_4LightPosY0;
    //Instruction 18683
    //ADD
    t5 = (-t3.wwww) + unity_4LightPosZ0;
    //Instruction 18684
    //MUL
    t6 = t4 * t4;
    //Instruction 18685
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 18686
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 18687
    //MUL
    t4 = t0.yyyy * t4;
    //Instruction 18688
    //MAD
    t2 = t2 * t0.xxxx + t4;
    //Instruction 18689
    //MAD
    t2 = t5 * t0.zzzz + t2;
    //Instruction 18690
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 18691
    //MUL
    t2 = t2 * t4;
    //Instruction 18692
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 18693
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 18694
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 18695
    //MUL
    t2 = t2 * t4;
    //Instruction 18696
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 18697
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 18698
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 18699
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 18700
    //ADD
    t4.xyz = t4.xyz + t16_15.xyz;
    //Instruction 18701
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 18702
    //MOV
    vs_TEXCOORD1.xyz = t3.xzw;
    //Instruction 18703
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18704
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 18705
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 18706
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 18707
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 18334
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 18335
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 18336
    //LT
    tb15 = t10_1<0.0;
    //Instruction 18337
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 18338
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 18339
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 18340
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 18341
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 18342
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 18343
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 18344
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 18345
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 18346
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 18347
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18348
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 18349
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18350
    //MOV
    t16_0.w = 1.0;
    //Instruction 18351
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 18352
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 18353
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 18354
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 18355
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 18356
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18357
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 18358
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 18359
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 18360
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18361
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_8 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_6 = tmpvar_107;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_6;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  highp vec3 lightColor0_112;
  lightColor0_112 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_113;
  lightColor1_113 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_114;
  lightColor2_114 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_115;
  lightColor3_115 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_116;
  lightAttenSq_116 = unity_4LightAtten0;
  highp vec3 normal_117;
  normal_117 = worldNormal_6;
  highp vec3 col_118;
  highp vec4 ndotl_119;
  highp vec4 lengthSq_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_120 = (tmpvar_121 * tmpvar_121);
  lengthSq_120 = (lengthSq_120 + (tmpvar_122 * tmpvar_122));
  lengthSq_120 = (lengthSq_120 + (tmpvar_123 * tmpvar_123));
  ndotl_119 = (tmpvar_121 * normal_117.x);
  ndotl_119 = (ndotl_119 + (tmpvar_122 * normal_117.y));
  ndotl_119 = (ndotl_119 + (tmpvar_123 * normal_117.z));
  highp vec4 tmpvar_124;
  tmpvar_124 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_119 * inversesqrt(lengthSq_120)));
  ndotl_119 = tmpvar_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (tmpvar_124 * (1.0/((1.0 + 
    (lengthSq_120 * lightAttenSq_116)
  ))));
  col_118 = (lightColor0_112 * tmpvar_125.x);
  col_118 = (col_118 + (lightColor1_113 * tmpvar_125.y));
  col_118 = (col_118 + (lightColor2_114 * tmpvar_125.z));
  col_118 = (col_118 + (lightColor3_115 * tmpvar_125.w));
  tmpvar_9 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + col_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_103;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 18740
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18741
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18742
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 18743
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18744
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 18745
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 18746
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 18747
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 18748
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18749
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18750
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 18751
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18752
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18753
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18754
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 18755
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 18756
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 18757
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 18758
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 18759
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 18760
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 18761
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 18762
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 18763
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 18764
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 18765
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 18766
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 18767
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 18768
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 18769
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 18770
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 18771
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 18772
        //FRC
        t32.x = fract(t32.x);
        //Instruction 18773
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 18774
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 18775
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 18776
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 18777
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 18778
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 18779
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 18780
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 18781
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 18782
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 18783
        //IF
        if(tb48){
            //Instruction 18784
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 18785
            //FRC
            t5 = fract(t5);
            //Instruction 18786
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18787
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 18788
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 18789
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 18790
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 18791
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 18792
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 18793
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 18794
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18795
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 18796
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18797
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 18798
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 18799
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 18800
            //SQRT
            t49 = sqrt(t49);
            //Instruction 18801
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 18802
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 18803
            //MUL
            t51 = t51 * t52;
            //Instruction 18804
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 18805
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 18806
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 18807
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 18808
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 18809
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 18810
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 18811
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 18812
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 18813
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 18814
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 18815
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 18816
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 18817
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 18818
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 18819
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 18820
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 18821
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 18822
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 18823
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 18824
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 18825
            //SQRT
            t51 = sqrt(t51);
            //Instruction 18826
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 18827
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 18828
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 18829
            //MUL
            t6.x = t51 * t52;
            //Instruction 18830
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 18831
            //LT
            tb19 = t19<(-t19);
            //Instruction 18832
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 18833
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 18834
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 18835
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 18836
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 18837
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 18838
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 18839
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18840
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 18841
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18842
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 18843
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 18844
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 18845
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 18846
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 18847
            //LOG
            t48 = log2(t48);
            //Instruction 18848
            //MUL
            t48 = t48 * t7.y;
            //Instruction 18849
            //EXP
            t48 = exp2(t48);
            //Instruction 18850
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 18851
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 18852
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 18853
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 18854
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 18855
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 18856
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 18857
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 18858
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 18859
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 18860
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 18861
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 18862
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 18863
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 18864
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 18865
            //MOV
            t11.z = t12.x;
            //Instruction 18866
            //MOV
            t11.w = t10.x;
            //Instruction 18867
            //MOV
            t13.z = t9.y;
            //Instruction 18868
            //MOV
            t13.w = t14.y;
            //Instruction 18869
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 18870
            //MOV
            t14.w = t13.y;
            //Instruction 18871
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 18872
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 18873
            //MOV
            t10.w = t11.y;
            //Instruction 18874
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 18875
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 18876
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 18877
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 18878
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 18879
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 18880
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 18881
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 18882
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 18883
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 18884
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 18885
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 18886
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 18887
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 18888
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 18889
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 18890
        //ELSE
        } else {
            //Instruction 18891
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 18892
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 18893
        //ENDIF
        }
        //Instruction 18894
    //ELSE
    } else {
        //Instruction 18895
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 18896
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 18897
    //ENDIF
    }
    //Instruction 18898
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 18899
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 18900
    //IF
    if(tb49){
        //Instruction 18901
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 18902
        //IF
        if(tb49){
            //Instruction 18903
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18904
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 18905
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 18906
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 18907
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 18908
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 18909
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18910
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18911
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18912
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 18913
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 18914
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 18915
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18916
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18917
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 18918
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18919
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18920
            //FRC
            t2 = fract(t2);
            //Instruction 18921
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18922
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 18923
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18924
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18925
            //ADD
            t2 = t2 + t2;
            //Instruction 18926
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 18927
            //LT
            tb51 = t7.w<0.0;
            //Instruction 18928
            //MOV
            t7.y = (-t7.w);
            //Instruction 18929
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 18930
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 18931
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 18932
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 18933
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 18934
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 18935
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 18936
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18937
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18938
            //MUL
            t53 = t2.x * t53;
            //Instruction 18939
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 18940
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18941
            //MUL
            t51 = t51 * t52;
            //Instruction 18942
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 18943
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18944
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18945
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18946
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18947
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 18948
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 18949
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18950
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 18951
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18952
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 18953
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 18954
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 18955
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 18956
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18957
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 18958
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 18959
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 18960
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18961
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 18962
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 18963
        //ELSE
        } else {
            //Instruction 18964
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18965
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18966
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18967
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 18968
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18969
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18970
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18971
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 18972
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 18973
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18974
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18975
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18976
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 18977
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18978
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18979
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 18980
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 18981
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18982
            //MOV
            t2.y = (-t2.w);
            //Instruction 18983
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18984
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18985
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 18986
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 18987
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 18988
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 18989
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18990
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18991
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18992
            //MUL
            t51 = t51 * t6.x;
            //Instruction 18993
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 18994
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 18995
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18996
        //ENDIF
        }
        //Instruction 18997
    //ENDIF
    }
    //Instruction 18998
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 18999
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19000
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19001
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 19002
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 19003
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 19004
    //NE
    tb51 = t49!=0.0;
    //Instruction 19005
    //LOG
    t52 = log2(t49);
    //Instruction 19006
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 19007
    //EXP
    t52 = exp2(t52);
    //Instruction 19008
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 19009
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19010
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19011
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 19012
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 19013
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19014
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 19015
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19016
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 19017
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 19018
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 19019
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19020
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 19021
    //MUL
    t49 = t49 * t51;
    //Instruction 19022
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 19023
    //MOV
    t5.y = t4.y;
    //Instruction 19024
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 19025
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 19026
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 19027
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 19028
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 19029
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 19030
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 19031
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 19032
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19033
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 19034
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 19035
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 19036
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 19037
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 19038
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 19039
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 19040
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 19041
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 19042
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 19043
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 19044
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 19045
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 19046
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 19047
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 19048
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 19049
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 19050
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 19051
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 19052
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 19053
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 19054
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 19055
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 19056
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 19057
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 19058
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 19059
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 19060
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 19061
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 19062
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 19063
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 19064
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 19065
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 19066
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 19067
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 19068
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19069
    //MOV
    vs_TEXCOORD5 = t2;
    //Instruction 19070
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19071
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 19072
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 18708
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 18709
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 18710
    //LT
    tb15 = t10_1<0.0;
    //Instruction 18711
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 18712
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 18713
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 18714
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 18715
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 18716
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 18717
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 18718
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 18719
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 18720
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 18721
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18722
    //SAMPLE_C_LZ
    vec3 txVec45 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec45, 0.0);
    //Instruction 18723
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 18724
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 18725
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 18726
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 18727
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18728
    //MOV
    t16_0.w = 1.0;
    //Instruction 18729
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 18730
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 18731
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 18732
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 18733
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 18734
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18735
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 18736
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 18737
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 18738
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18739
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_8 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_6 = tmpvar_107;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_6;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  highp vec3 lightColor0_112;
  lightColor0_112 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_113;
  lightColor1_113 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_114;
  lightColor2_114 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_115;
  lightColor3_115 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_116;
  lightAttenSq_116 = unity_4LightAtten0;
  highp vec3 normal_117;
  normal_117 = worldNormal_6;
  highp vec3 col_118;
  highp vec4 ndotl_119;
  highp vec4 lengthSq_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_120 = (tmpvar_121 * tmpvar_121);
  lengthSq_120 = (lengthSq_120 + (tmpvar_122 * tmpvar_122));
  lengthSq_120 = (lengthSq_120 + (tmpvar_123 * tmpvar_123));
  ndotl_119 = (tmpvar_121 * normal_117.x);
  ndotl_119 = (ndotl_119 + (tmpvar_122 * normal_117.y));
  ndotl_119 = (ndotl_119 + (tmpvar_123 * normal_117.z));
  highp vec4 tmpvar_124;
  tmpvar_124 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_119 * inversesqrt(lengthSq_120)));
  ndotl_119 = tmpvar_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (tmpvar_124 * (1.0/((1.0 + 
    (lengthSq_120 * lightAttenSq_116)
  ))));
  col_118 = (lightColor0_112 * tmpvar_125.x);
  col_118 = (col_118 + (lightColor1_113 * tmpvar_125.y));
  col_118 = (col_118 + (lightColor2_114 * tmpvar_125.z));
  col_118 = (col_118 + (lightColor3_115 * tmpvar_125.w));
  tmpvar_9 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + col_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_103;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 17442
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17443
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17444
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 17445
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17446
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 17447
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 17448
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 17449
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 17450
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17451
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 17452
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 17453
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17454
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17455
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17456
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 17457
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 17458
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 17459
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 17460
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 17461
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 17462
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 17463
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 17464
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 17465
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 17466
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 17467
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 17468
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 17469
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 17470
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 17471
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 17472
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 17473
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 17474
        //FRC
        t32.x = fract(t32.x);
        //Instruction 17475
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 17476
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 17477
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 17478
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 17479
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 17480
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 17481
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 17482
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 17483
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 17484
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 17485
        //IF
        if(tb48){
            //Instruction 17486
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 17487
            //FRC
            t5 = fract(t5);
            //Instruction 17488
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17489
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 17490
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 17491
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 17492
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 17493
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 17494
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17495
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 17496
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17497
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 17498
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17499
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 17500
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 17501
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 17502
            //SQRT
            t49 = sqrt(t49);
            //Instruction 17503
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 17504
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 17505
            //MUL
            t51 = t51 * t52;
            //Instruction 17506
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 17507
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 17508
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 17509
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 17510
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 17511
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 17512
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 17513
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 17514
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 17515
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 17516
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 17517
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 17518
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 17519
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 17520
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 17521
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 17522
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 17523
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 17524
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 17525
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 17526
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 17527
            //SQRT
            t51 = sqrt(t51);
            //Instruction 17528
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 17529
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 17530
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 17531
            //MUL
            t6.x = t51 * t52;
            //Instruction 17532
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 17533
            //LT
            tb19 = t19<(-t19);
            //Instruction 17534
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 17535
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 17536
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 17537
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 17538
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 17539
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17540
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 17541
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17542
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 17543
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17544
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 17545
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 17546
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 17547
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 17548
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 17549
            //LOG
            t48 = log2(t48);
            //Instruction 17550
            //MUL
            t48 = t48 * t7.y;
            //Instruction 17551
            //EXP
            t48 = exp2(t48);
            //Instruction 17552
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 17553
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 17554
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 17555
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 17556
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 17557
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 17558
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 17559
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 17560
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 17561
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 17562
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 17563
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 17564
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 17565
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 17566
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 17567
            //MOV
            t11.z = t12.x;
            //Instruction 17568
            //MOV
            t11.w = t10.x;
            //Instruction 17569
            //MOV
            t13.z = t9.y;
            //Instruction 17570
            //MOV
            t13.w = t14.y;
            //Instruction 17571
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 17572
            //MOV
            t14.w = t13.y;
            //Instruction 17573
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 17574
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 17575
            //MOV
            t10.w = t11.y;
            //Instruction 17576
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 17577
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 17578
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 17579
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 17580
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 17581
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 17582
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 17583
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 17584
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 17585
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 17586
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 17587
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 17588
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 17589
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 17590
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 17591
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 17592
        //ELSE
        } else {
            //Instruction 17593
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 17594
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 17595
        //ENDIF
        }
        //Instruction 17596
    //ELSE
    } else {
        //Instruction 17597
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 17598
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 17599
    //ENDIF
    }
    //Instruction 17600
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 17601
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 17602
    //IF
    if(tb49){
        //Instruction 17603
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 17604
        //IF
        if(tb49){
            //Instruction 17605
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17606
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 17607
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 17608
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 17609
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 17610
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 17611
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17612
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17613
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17614
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 17615
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 17616
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 17617
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17618
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17619
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 17620
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17621
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17622
            //FRC
            t2 = fract(t2);
            //Instruction 17623
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17624
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 17625
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17626
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17627
            //ADD
            t2 = t2 + t2;
            //Instruction 17628
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 17629
            //LT
            tb51 = t7.w<0.0;
            //Instruction 17630
            //MOV
            t7.y = (-t7.w);
            //Instruction 17631
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 17632
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 17633
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 17634
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 17635
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 17636
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 17637
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 17638
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17639
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17640
            //MUL
            t53 = t2.x * t53;
            //Instruction 17641
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 17642
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17643
            //MUL
            t51 = t51 * t52;
            //Instruction 17644
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 17645
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17646
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17647
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17648
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17649
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 17650
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 17651
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17652
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 17653
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17654
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 17655
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 17656
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 17657
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 17658
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17659
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 17660
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 17661
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 17662
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17663
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 17664
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 17665
        //ELSE
        } else {
            //Instruction 17666
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17667
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17668
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17669
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17670
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17671
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17672
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17673
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 17674
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 17675
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17676
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17677
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17678
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 17679
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17680
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17681
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 17682
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 17683
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17684
            //MOV
            t2.y = (-t2.w);
            //Instruction 17685
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17686
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17687
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 17688
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 17689
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 17690
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 17691
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17692
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17693
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17694
            //MUL
            t51 = t51 * t6.x;
            //Instruction 17695
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 17696
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 17697
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17698
        //ENDIF
        }
        //Instruction 17699
    //ENDIF
    }
    //Instruction 17700
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 17701
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17702
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17703
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 17704
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 17705
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 17706
    //NE
    tb51 = t49!=0.0;
    //Instruction 17707
    //LOG
    t52 = log2(t49);
    //Instruction 17708
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 17709
    //EXP
    t52 = exp2(t52);
    //Instruction 17710
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 17711
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17712
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17713
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 17714
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 17715
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17716
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 17717
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17718
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 17719
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 17720
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 17721
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17722
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 17723
    //MUL
    t49 = t49 * t51;
    //Instruction 17724
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 17725
    //MOV
    t5.y = t4.y;
    //Instruction 17726
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 17727
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 17728
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 17729
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 17730
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 17731
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 17732
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 17733
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 17734
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17735
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 17736
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 17737
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 17738
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 17739
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 17740
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 17741
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 17742
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 17743
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 17744
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 17745
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 17746
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 17747
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 17748
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 17749
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 17750
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 17751
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 17752
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 17753
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 17754
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 17755
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 17756
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 17757
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 17758
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 17759
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 17760
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 17761
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 17762
    //ADD
    t5 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 17763
    //ADD
    t6 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 17764
    //MUL
    t7 = t5 * t5;
    //Instruction 17765
    //MAD
    t7 = t2 * t2 + t7;
    //Instruction 17766
    //MAD
    t7 = t6 * t6 + t7;
    //Instruction 17767
    //MUL
    t5 = t0.yyyy * t5;
    //Instruction 17768
    //MAD
    t2 = t2 * t0.xxxx + t5;
    //Instruction 17769
    //MAD
    t2 = t6 * t0.zzzz + t2;
    //Instruction 17770
    //RSQ
    t5 = inversesqrt(t7);
    //Instruction 17771
    //MUL
    t2 = t2 * t5;
    //Instruction 17772
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 17773
    //MAD
    t5 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 17774
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 17775
    //MUL
    t2 = t2 * t5;
    //Instruction 17776
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 17777
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 17778
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 17779
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 17780
    //ADD
    t5.xyz = t5.xyz + t16_15.xyz;
    //Instruction 17781
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 17782
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 17783
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 17784
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 17785
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 17786
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 17787
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 17788
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 17789
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 17790
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 17791
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 17792
    //MOV
    vs_TEXCOORD5 = t2;
    //Instruction 17793
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17794
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 17795
    //MOV
    vs_TEXCOORD4.xyz = t5.xyz;
    //Instruction 17796
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17410
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 17411
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17412
    //LT
    tb15 = t10_1<0.0;
    //Instruction 17413
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17414
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17415
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17416
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17417
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17418
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17419
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17420
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17421
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17422
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17423
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 17424
    //SAMPLE_C_LZ
    vec3 txVec38 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec38, 0.0);
    //Instruction 17425
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 17426
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 17427
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 17428
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 17429
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 17430
    //MOV
    t16_0.w = 1.0;
    //Instruction 17431
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 17432
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 17433
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 17434
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 17435
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17436
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17437
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17438
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17439
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17440
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17441
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_16.x)
   + 
    (v_104.xyz * tmpvar_16.y)
  ) + (v_105.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_106;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = _Object2World[0].xyz;
  tmpvar_107[1] = _Object2World[1].xyz;
  tmpvar_107[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize((tmpvar_107 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_108;
  lowp vec3 tmpvar_109;
  tmpvar_109 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_109 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_110;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_7.x;
  tmpvar_111.y = worldBinormal_6.x;
  tmpvar_111.z = worldNormal_8.x;
  tmpvar_111.w = tmpvar_102.x;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.y;
  tmpvar_112.y = worldBinormal_6.y;
  tmpvar_112.z = worldNormal_8.y;
  tmpvar_112.w = tmpvar_102.y;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.z;
  tmpvar_113.y = worldBinormal_6.z;
  tmpvar_113.z = worldNormal_8.z;
  tmpvar_113.w = tmpvar_102.z;
  lowp vec4 tmpvar_114;
  tmpvar_114.w = 1.0;
  tmpvar_114.xyz = worldNormal_8;
  mediump vec4 normal_115;
  normal_115 = tmpvar_114;
  mediump vec3 x2_116;
  mediump vec4 tmpvar_117;
  tmpvar_117 = (normal_115.xyzz * normal_115.yzzx);
  x2_116.x = dot (unity_SHBr, tmpvar_117);
  x2_116.y = dot (unity_SHBg, tmpvar_117);
  x2_116.z = dot (unity_SHBb, tmpvar_117);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_111;
  xlv_TEXCOORD1 = tmpvar_112;
  xlv_TEXCOORD2 = tmpvar_113;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = (x2_116 + (unity_SHC.xyz * (
    (normal_115.x * normal_115.x)
   - 
    (normal_115.y * normal_115.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 16922
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16923
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16924
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 16925
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16926
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 16927
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 16928
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 16929
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 16930
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16931
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 16932
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 16933
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16934
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16935
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16936
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 16937
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 16938
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 16939
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 16940
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 16941
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 16942
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 16943
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 16944
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 16945
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 16946
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 16947
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 16948
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 16949
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 16950
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 16951
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 16952
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 16953
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 16954
        //FRC
        t34.x = fract(t34.x);
        //Instruction 16955
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 16956
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 16957
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 16958
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 16959
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 16960
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 16961
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 16962
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 16963
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 16964
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 16965
        //IF
        if(tb51){
            //Instruction 16966
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 16967
            //FRC
            t5 = fract(t5);
            //Instruction 16968
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16969
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 16970
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 16971
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 16972
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 16973
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 16974
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 16975
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 16976
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16977
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 16978
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16979
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 16980
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 16981
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 16982
            //SQRT
            t52 = sqrt(t52);
            //Instruction 16983
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 16984
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 16985
            //MUL
            t54 = t54 * t55;
            //Instruction 16986
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 16987
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 16988
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 16989
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 16990
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 16991
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 16992
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 16993
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 16994
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 16995
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 16996
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 16997
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 16998
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 16999
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 17000
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 17001
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 17002
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 17003
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 17004
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17005
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 17006
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 17007
            //SQRT
            t54 = sqrt(t54);
            //Instruction 17008
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 17009
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 17010
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 17011
            //MUL
            t6.x = t54 * t55;
            //Instruction 17012
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 17013
            //LT
            tb20 = t20<(-t20);
            //Instruction 17014
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 17015
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 17016
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 17017
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 17018
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 17019
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17020
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 17021
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17022
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 17023
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17024
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 17025
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 17026
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 17027
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 17028
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 17029
            //LOG
            t51 = log2(t51);
            //Instruction 17030
            //MUL
            t51 = t51 * t7.y;
            //Instruction 17031
            //EXP
            t51 = exp2(t51);
            //Instruction 17032
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 17033
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 17034
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 17035
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 17036
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 17037
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 17038
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 17039
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 17040
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 17041
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 17042
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 17043
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 17044
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 17045
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 17046
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 17047
            //MOV
            t11.z = t12.x;
            //Instruction 17048
            //MOV
            t11.w = t10.x;
            //Instruction 17049
            //MOV
            t13.z = t9.y;
            //Instruction 17050
            //MOV
            t13.w = t14.y;
            //Instruction 17051
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 17052
            //MOV
            t14.w = t13.y;
            //Instruction 17053
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 17054
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 17055
            //MOV
            t10.w = t11.y;
            //Instruction 17056
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 17057
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 17058
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 17059
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 17060
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 17061
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 17062
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 17063
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 17064
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 17065
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 17066
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 17067
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 17068
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 17069
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17070
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 17071
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 17072
        //ELSE
        } else {
            //Instruction 17073
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 17074
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 17075
        //ENDIF
        }
        //Instruction 17076
    //ELSE
    } else {
        //Instruction 17077
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 17078
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 17079
    //ENDIF
    }
    //Instruction 17080
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 17081
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 17082
    //IF
    if(tb52){
        //Instruction 17083
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 17084
        //IF
        if(tb52){
            //Instruction 17085
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17086
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 17087
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 17088
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 17089
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 17090
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 17091
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17092
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17093
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17094
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 17095
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 17096
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 17097
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17098
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17099
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 17100
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17101
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17102
            //FRC
            t2 = fract(t2);
            //Instruction 17103
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17104
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 17105
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17106
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17107
            //ADD
            t2 = t2 + t2;
            //Instruction 17108
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 17109
            //LT
            tb54 = t7.w<0.0;
            //Instruction 17110
            //MOV
            t7.y = (-t7.w);
            //Instruction 17111
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 17112
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 17113
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 17114
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 17115
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 17116
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 17117
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 17118
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17119
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17120
            //MUL
            t56 = t2.x * t56;
            //Instruction 17121
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 17122
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17123
            //MUL
            t54 = t54 * t55;
            //Instruction 17124
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 17125
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17126
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17127
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17128
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17129
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 17130
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 17131
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17132
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 17133
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17134
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 17135
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 17136
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 17137
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 17138
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17139
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 17140
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 17141
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 17142
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17143
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 17144
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 17145
        //ELSE
        } else {
            //Instruction 17146
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17147
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17148
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17149
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17150
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17151
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17152
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17153
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 17154
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 17155
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17156
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17157
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17158
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 17159
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17160
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17161
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 17162
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 17163
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17164
            //MOV
            t2.y = (-t2.w);
            //Instruction 17165
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17166
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17167
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 17168
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 17169
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 17170
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 17171
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17172
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17173
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17174
            //MUL
            t54 = t54 * t6.x;
            //Instruction 17175
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 17176
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 17177
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17178
        //ENDIF
        }
        //Instruction 17179
    //ENDIF
    }
    //Instruction 17180
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 17181
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17182
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17183
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 17184
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 17185
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 17186
    //NE
    tb54 = t52!=0.0;
    //Instruction 17187
    //LOG
    t55 = log2(t52);
    //Instruction 17188
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 17189
    //EXP
    t55 = exp2(t55);
    //Instruction 17190
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 17191
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17192
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17193
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 17194
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 17195
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17196
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 17197
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17198
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 17199
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 17200
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 17201
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17202
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 17203
    //MUL
    t52 = t52 * t54;
    //Instruction 17204
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 17205
    //MOV
    t5.y = t4.y;
    //Instruction 17206
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 17207
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17208
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 17209
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 17210
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 17211
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 17212
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 17213
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 17214
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17215
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 17216
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 17217
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 17218
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 17219
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17220
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17221
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17222
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 17223
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 17224
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 17225
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 17226
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 17227
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 17228
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 17229
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 17230
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 17231
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 17232
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17233
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 17234
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 17235
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 17236
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 17237
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 17238
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17239
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 17240
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 17241
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 17242
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 17243
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 17244
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 17245
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 17246
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 17247
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 17248
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 17249
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 17250
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 17251
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 17252
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 17253
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 17254
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 17255
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 17256
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 17257
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 17258
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 17259
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 17260
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 17261
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 17262
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 17263
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17264
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 17265
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 16890
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 16891
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16892
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 16893
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 16894
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 16895
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 16896
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 16897
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 16898
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 16899
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 16900
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 16901
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 16902
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 16903
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 16904
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 16905
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 16906
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 16907
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 16908
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 16909
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 16910
    //MOV
    t0.w = 1.0;
    //Instruction 16911
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 16912
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 16913
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 16914
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16915
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16916
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 16917
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16918
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 16919
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16920
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16921
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_111;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = worldBinormal_6.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = worldBinormal_6.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = worldBinormal_6.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_111;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = worldBinormal_6.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = worldBinormal_6.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = worldBinormal_6.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  highp vec3 lightColor0_119;
  lightColor0_119 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_120;
  lightColor1_120 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_121;
  lightColor2_121 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_122;
  lightColor3_122 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_123;
  lightAttenSq_123 = unity_4LightAtten0;
  highp vec3 normal_124;
  normal_124 = worldNormal_8;
  highp vec3 col_125;
  highp vec4 ndotl_126;
  highp vec4 lengthSq_127;
  highp vec4 tmpvar_128;
  tmpvar_128 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_127 = (tmpvar_128 * tmpvar_128);
  lengthSq_127 = (lengthSq_127 + (tmpvar_129 * tmpvar_129));
  lengthSq_127 = (lengthSq_127 + (tmpvar_130 * tmpvar_130));
  ndotl_126 = (tmpvar_128 * normal_124.x);
  ndotl_126 = (ndotl_126 + (tmpvar_129 * normal_124.y));
  ndotl_126 = (ndotl_126 + (tmpvar_130 * normal_124.z));
  highp vec4 tmpvar_131;
  tmpvar_131 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_126 * inversesqrt(lengthSq_127)));
  ndotl_126 = tmpvar_131;
  highp vec4 tmpvar_132;
  tmpvar_132 = (tmpvar_131 * (1.0/((1.0 + 
    (lengthSq_127 * lightAttenSq_123)
  ))));
  col_125 = (lightColor0_119 * tmpvar_132.x);
  col_125 = (col_125 + (lightColor1_120 * tmpvar_132.y));
  col_125 = (col_125 + (lightColor2_121 * tmpvar_132.z));
  col_125 = (col_125 + (lightColor3_122 * tmpvar_132.w));
  tmpvar_10 = ((x2_117 + (unity_SHC.xyz * 
    ((normal_116.x * normal_116.x) - (normal_116.y * normal_116.y))
  )) + col_125);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 17298
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17299
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17300
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 17301
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17302
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 17303
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 17304
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 17305
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 17306
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17307
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 17308
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 17309
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17310
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17311
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17312
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 17313
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 17314
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 17315
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 17316
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 17317
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 17318
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 17319
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 17320
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 17321
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 17322
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 17323
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 17324
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 17325
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 17326
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 17327
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 17328
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 17329
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 17330
        //FRC
        t34.x = fract(t34.x);
        //Instruction 17331
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 17332
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 17333
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 17334
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 17335
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 17336
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 17337
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 17338
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 17339
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 17340
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 17341
        //IF
        if(tb51){
            //Instruction 17342
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 17343
            //FRC
            t5 = fract(t5);
            //Instruction 17344
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17345
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 17346
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 17347
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 17348
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 17349
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 17350
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17351
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 17352
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17353
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 17354
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17355
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 17356
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 17357
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 17358
            //SQRT
            t52 = sqrt(t52);
            //Instruction 17359
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 17360
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 17361
            //MUL
            t54 = t54 * t55;
            //Instruction 17362
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 17363
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 17364
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 17365
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 17366
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 17367
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 17368
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 17369
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 17370
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 17371
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 17372
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 17373
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 17374
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 17375
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 17376
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 17377
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 17378
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 17379
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 17380
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17381
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 17382
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 17383
            //SQRT
            t54 = sqrt(t54);
            //Instruction 17384
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 17385
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 17386
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 17387
            //MUL
            t6.x = t54 * t55;
            //Instruction 17388
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 17389
            //LT
            tb20 = t20<(-t20);
            //Instruction 17390
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 17391
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 17392
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 17393
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 17394
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 17395
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17396
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 17397
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17398
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 17399
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17400
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 17401
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 17402
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 17403
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 17404
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 17405
            //LOG
            t51 = log2(t51);
            //Instruction 17406
            //MUL
            t51 = t51 * t7.y;
            //Instruction 17407
            //EXP
            t51 = exp2(t51);
            //Instruction 17408
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 17409
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 17410
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 17411
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 17412
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 17413
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 17414
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 17415
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 17416
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 17417
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 17418
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 17419
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 17420
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 17421
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 17422
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 17423
            //MOV
            t11.z = t12.x;
            //Instruction 17424
            //MOV
            t11.w = t10.x;
            //Instruction 17425
            //MOV
            t13.z = t9.y;
            //Instruction 17426
            //MOV
            t13.w = t14.y;
            //Instruction 17427
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 17428
            //MOV
            t14.w = t13.y;
            //Instruction 17429
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 17430
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 17431
            //MOV
            t10.w = t11.y;
            //Instruction 17432
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 17433
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 17434
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 17435
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 17436
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 17437
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 17438
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 17439
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 17440
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 17441
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 17442
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 17443
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 17444
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 17445
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17446
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 17447
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 17448
        //ELSE
        } else {
            //Instruction 17449
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 17450
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 17451
        //ENDIF
        }
        //Instruction 17452
    //ELSE
    } else {
        //Instruction 17453
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 17454
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 17455
    //ENDIF
    }
    //Instruction 17456
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 17457
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 17458
    //IF
    if(tb52){
        //Instruction 17459
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 17460
        //IF
        if(tb52){
            //Instruction 17461
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17462
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 17463
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 17464
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 17465
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 17466
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 17467
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17468
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17469
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17470
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 17471
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 17472
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 17473
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17474
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17475
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 17476
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17477
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17478
            //FRC
            t2 = fract(t2);
            //Instruction 17479
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17480
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 17481
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17482
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17483
            //ADD
            t2 = t2 + t2;
            //Instruction 17484
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 17485
            //LT
            tb54 = t7.w<0.0;
            //Instruction 17486
            //MOV
            t7.y = (-t7.w);
            //Instruction 17487
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 17488
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 17489
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 17490
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 17491
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 17492
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 17493
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 17494
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17495
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17496
            //MUL
            t56 = t2.x * t56;
            //Instruction 17497
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 17498
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17499
            //MUL
            t54 = t54 * t55;
            //Instruction 17500
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 17501
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17502
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17503
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17504
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17505
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 17506
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 17507
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17508
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 17509
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17510
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 17511
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 17512
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 17513
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 17514
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17515
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 17516
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 17517
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 17518
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17519
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 17520
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 17521
        //ELSE
        } else {
            //Instruction 17522
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17523
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17524
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17525
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17526
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17527
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17528
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17529
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 17530
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 17531
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17532
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17533
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17534
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 17535
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17536
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17537
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 17538
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 17539
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17540
            //MOV
            t2.y = (-t2.w);
            //Instruction 17541
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17542
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17543
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 17544
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 17545
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 17546
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 17547
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17548
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17549
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17550
            //MUL
            t54 = t54 * t6.x;
            //Instruction 17551
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 17552
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 17553
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17554
        //ENDIF
        }
        //Instruction 17555
    //ENDIF
    }
    //Instruction 17556
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 17557
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17558
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17559
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 17560
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 17561
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 17562
    //NE
    tb54 = t52!=0.0;
    //Instruction 17563
    //LOG
    t55 = log2(t52);
    //Instruction 17564
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 17565
    //EXP
    t55 = exp2(t55);
    //Instruction 17566
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 17567
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17568
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17569
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 17570
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 17571
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17572
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 17573
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17574
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 17575
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 17576
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 17577
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17578
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 17579
    //MUL
    t52 = t52 * t54;
    //Instruction 17580
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 17581
    //MOV
    t5.y = t4.y;
    //Instruction 17582
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 17583
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17584
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 17585
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 17586
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 17587
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 17588
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 17589
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 17590
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17591
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 17592
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 17593
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 17594
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 17595
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17596
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17597
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17598
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 17599
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 17600
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 17601
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 17602
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 17603
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 17604
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 17605
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 17606
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 17607
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 17608
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17609
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 17610
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 17611
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 17612
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 17613
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 17614
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17615
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 17616
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 17617
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 17618
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 17619
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 17620
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 17621
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 17622
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 17623
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 17624
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 17625
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 17626
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 17627
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosY0;
    //Instruction 17628
    //ADD
    t7 = (-t3.wwww) + unity_4LightPosZ0;
    //Instruction 17629
    //MUL
    t8 = t6 * t6;
    //Instruction 17630
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 17631
    //MAD
    t8 = t7 * t7 + t8;
    //Instruction 17632
    //MUL
    t6 = t0.yyyy * t6;
    //Instruction 17633
    //MAD
    t2 = t2 * t0.xxxx + t6;
    //Instruction 17634
    //MAD
    t2 = t7 * t0.wwww + t2;
    //Instruction 17635
    //RSQ
    t6 = inversesqrt(t8);
    //Instruction 17636
    //MUL
    t2 = t2 * t6;
    //Instruction 17637
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 17638
    //MAD
    t6 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 17639
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 17640
    //MUL
    t2 = t2 * t6;
    //Instruction 17641
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 17642
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 17643
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 17644
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 17645
    //ADD
    t6.xyz = t6.xyz + t16_16.xyz;
    //Instruction 17646
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 17647
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 17648
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 17649
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 17650
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 17651
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 17652
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 17653
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 17654
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 17655
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 17656
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 17657
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 17658
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 17659
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17660
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 17661
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 17662
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17266
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 17267
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17268
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 17269
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17270
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17271
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17272
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17273
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17274
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17275
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17276
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17277
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17278
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17279
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 17280
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 17281
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 17282
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 17283
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 17284
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 17285
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 17286
    //MOV
    t0.w = 1.0;
    //Instruction 17287
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 17288
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 17289
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 17290
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17291
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17292
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 17293
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17294
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17295
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17296
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17297
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  lowp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13.xy = tmpvar_3.xy;
  tmpvar_12.w = _Color.w;
  tmpvar_12.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].x;
  highp float tmpvar_16;
  tmpvar_16 = _Object2World[3].y;
  tmpvar_14 = clamp (((
    fract(((tmpvar_15 + tmpvar_16) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_13.z = tmpvar_14;
  highp vec4 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = tmpvar_1;
  tmpvar_18 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  FinalPosition_21 = tmpvar_1.xyz;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_4.w;
  tmpvar_25.y = tmpvar_5.x;
  tmpvar_25.z = tmpvar_5.y;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (FinalPosition_21, tmpvar_25, unity_LODFade.xxx);
  FinalPosition_21 = tmpvar_26;
  if (((tmpvar_22 > 1.0) && (tmpvar_22 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_22 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp float fOsc_46;
      highp vec3 vOriginPos_47;
      highp vec3 tmpvar_48;
      tmpvar_48 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_49;
      tmpvar_49 = ((tmpvar_48.x + tmpvar_48.y) + tmpvar_48.z);
      highp vec4 tmpvar_50;
      tmpvar_50.x = (tmpvar_38 + tmpvar_49);
      tmpvar_50.y = ((tmpvar_38 * 0.75) - tmpvar_49);
      tmpvar_50.z = ((tmpvar_38 * 0.01) + tmpvar_49);
      tmpvar_50.w = (tmpvar_38 + tmpvar_49);
      highp vec4 tmpvar_51;
      highp vec4 tmpvar_52;
      tmpvar_52 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      tmpvar_51 = (((
        (tmpvar_52 * tmpvar_52)
       * 
        (3.0 - (2.0 * tmpvar_52))
      ) - 0.5) * 2.0);
      vOriginPos_47 = vPos_34;
      highp float tmpvar_53;
      tmpvar_53 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_54;
      fAngle_54 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y)));
      highp vec2 vSinCos_55;
      vSinCos_55.x = sin(fAngle_54);
      vSinCos_55.y = cos(fAngle_54);
      highp float tmpvar_56;
      tmpvar_56 = (1.0 - vSinCos_55.y);
      highp mat3 tmpvar_57;
      tmpvar_57[0].x = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_55.y);
      tmpvar_57[0].y = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_55.x * tmpvar_37.z));
      tmpvar_57[0].z = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_55.x * tmpvar_37.y));
      tmpvar_57[1].x = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_55.x * tmpvar_37.z));
      tmpvar_57[1].y = (((tmpvar_56 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_55.y);
      tmpvar_57[1].z = (((tmpvar_56 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_55.x * tmpvar_37.x));
      tmpvar_57[2].x = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_55.x * tmpvar_37.y));
      tmpvar_57[2].y = (((tmpvar_56 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_55.x * tmpvar_37.x));
      tmpvar_57[2].z = (((tmpvar_56 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_55.y);
      highp vec3 tmpvar_58;
      tmpvar_58 = ((tmpvar_37.yzx * vRotatedWindVector_20.zxy) - (tmpvar_37.zxy * vRotatedWindVector_20.yzx));
      vAxis_45.xz = tmpvar_58.xz;
      highp float tmpvar_59;
      tmpvar_59 = clamp (dot (vRotatedWindVector_20, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_58.y + tmpvar_59);
      highp vec3 tmpvar_60;
      tmpvar_60 = normalize(vAxis_45);
      vAxis_45 = tmpvar_60;
      highp float tmpvar_61;
      tmpvar_61 = (1.570796 - (sign(tmpvar_59) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_59))) * (1.570796 + (abs(tmpvar_59) * (-0.2146018 + 
          (abs(tmpvar_59) * (0.08656672 + (abs(tmpvar_59) * -0.03102955)))
        ))))
      )));
      fOsc_46 = (tmpvar_51.y - (tmpvar_51.x * tmpvar_51.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_62;
        fTime_62 = (tmpvar_42.z + tmpvar_49);
        highp vec4 tmpvar_63;
        tmpvar_63.zw = vec2(0.0, 0.0);
        tmpvar_63.x = fTime_62;
        tmpvar_63.y = (0.87 * fTime_62);
        highp vec4 tmpvar_64;
        highp vec4 tmpvar_65;
        tmpvar_65 = abs(((
          fract((tmpvar_63 + 0.5))
         * 2.0) - 1.0));
        tmpvar_64 = (((
          (tmpvar_65 * tmpvar_65)
         * 
          (3.0 - (2.0 * tmpvar_65))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_64.x * tmpvar_64.y) * tmpvar_64.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_66;
      fAngle_66 = (_glesMultiTexCoord2.x * ((
        (tmpvar_61 * tmpvar_41)
       + 
        (fOsc_46 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_67;
      vSinCos_67.x = sin(fAngle_66);
      vSinCos_67.y = cos(fAngle_66);
      highp float tmpvar_68;
      tmpvar_68 = (1.0 - vSinCos_67.y);
      highp mat3 tmpvar_69;
      tmpvar_69[0].x = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.x) + vSinCos_67.y);
      tmpvar_69[0].y = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.y) + (vSinCos_67.x * tmpvar_60.z));
      tmpvar_69[0].z = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.z) - (vSinCos_67.x * tmpvar_60.y));
      tmpvar_69[1].x = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.y) - (vSinCos_67.x * tmpvar_60.z));
      tmpvar_69[1].y = (((tmpvar_68 * tmpvar_60.y) * tmpvar_60.y) + vSinCos_67.y);
      tmpvar_69[1].z = (((tmpvar_68 * tmpvar_60.y) * tmpvar_60.z) + (vSinCos_67.x * tmpvar_60.x));
      tmpvar_69[2].x = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.z) + (vSinCos_67.x * tmpvar_60.y));
      tmpvar_69[2].y = (((tmpvar_68 * tmpvar_60.y) * tmpvar_60.z) - (vSinCos_67.x * tmpvar_60.x));
      tmpvar_69[2].z = (((tmpvar_68 * tmpvar_60.z) * tmpvar_60.z) + vSinCos_67.y);
      highp mat3 tmpvar_70;
      tmpvar_70 = (tmpvar_57 * tmpvar_69);
      vOriginPos_47 = (normalize((tmpvar_70 * vPos_34)) * tmpvar_53);
      vDirection_31 = (tmpvar_70 * _glesNormal);
      vPos_30 = vOriginPos_47;
    };
    tmpvar_18 = vDirection_31;
    FinalPosition_21 = vPos_30;
  };
  FinalPosition_21 = (FinalPosition_21 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = FinalPosition_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = FinalPosition_21;
      highp float fTime_73;
      highp float fAdherenceScale_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_73 = (_ST_WindBranch.x + (tmpvar_15 + tmpvar_16));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (fTime_73 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_73 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((fTime_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_77 = (fOscillation_77 * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (FinalPosition_21 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((fTime_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_74 = (1.0 - ((tmpvar_84.x * tmpvar_84.y) * (
        (tmpvar_84.x * tmpvar_84.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_74 = (fAdherenceScale_74 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_19 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_74) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp float fTime_87;
      highp vec3 vWindVector_88;
      vWindVector_88 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_87 = (_ST_WindBranch.x + (tmpvar_15 + tmpvar_16));
      highp vec4 vOscillations_89;
      highp float fOscillation_90;
      fOscillation_90 = 1.0;
      highp float fAmount_91;
      highp float fTarget_92;
      highp vec4 tmpvar_93;
      tmpvar_93.w = 0.0;
      tmpvar_93.x = (fTime_87 + _glesMultiTexCoord0.w);
      tmpvar_93.y = ((fTime_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_93.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_94;
      tmpvar_94 = abs(((
        fract((tmpvar_93 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_94 * tmpvar_94)
       * 
        (3.0 - (2.0 * tmpvar_94))
      ) - 0.5) * 2.0);
      highp float tmpvar_95;
      tmpvar_95 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_92 = 1.0;
      fAmount_91 = tmpvar_95;
      if ((tmpvar_95 < 0.0)) {
        fTarget_92 = -1.0;
        fAmount_91 = -(tmpvar_95);
      };
      fOscillation_90 = (((
        mix (mix (tmpvar_95, fTarget_92, fAmount_91), fTarget_92, fAmount_91)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_86 = (vPos_71 + ((vWindVector_88 * fOscillation_90) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_21 = vPos_71;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_96;
    vPos_96 = FinalPosition_21;
    highp float fMoveAmount_97;
    highp float fAdjust_98;
    highp float fLength_99;
    fLength_99 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_100;
    tmpvar_100 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_98 = tmpvar_100;
    if ((tmpvar_100 != 0.0)) {
      fAdjust_98 = pow (tmpvar_100, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_101;
    tmpvar_101.zw = vec2(0.0, 0.0);
    tmpvar_101.x = (tmpvar_15 + _ST_WindGlobal.x);
    tmpvar_101.y = (tmpvar_16 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_102;
    highp vec4 tmpvar_103;
    tmpvar_103 = abs(((
      fract((tmpvar_101 + 0.5))
     * 2.0) - 1.0));
    tmpvar_102 = (((
      (tmpvar_103 * tmpvar_103)
     * 
      (3.0 - (2.0 * tmpvar_103))
    ) - 0.5) * 2.0);
    fMoveAmount_97 = ((_ST_WindGlobal.y * (tmpvar_102.x + 
      (tmpvar_102.y * tmpvar_102.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_97 = (fMoveAmount_97 * fAdjust_98);
    vPos_96.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * fMoveAmount_97));
    vPos_96 = (normalize(vPos_96) * fLength_99);
    FinalPosition_21 = vPos_96;
  };
  tmpvar_17.xyz = FinalPosition_21;
  tmpvar_9 = tmpvar_12;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_18.x)
   + 
    (v_106.xyz * tmpvar_18.y)
  ) + (v_107.xyz * tmpvar_18.z)));
  worldNormal_8 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_112;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.x;
  tmpvar_113.y = worldBinormal_6.x;
  tmpvar_113.z = worldNormal_8.x;
  tmpvar_113.w = tmpvar_104.x;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.y;
  tmpvar_114.y = worldBinormal_6.y;
  tmpvar_114.z = worldNormal_8.y;
  tmpvar_114.w = tmpvar_104.y;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_7.z;
  tmpvar_115.y = worldBinormal_6.z;
  tmpvar_115.z = worldNormal_8.z;
  tmpvar_115.w = tmpvar_104.z;
  lowp vec4 tmpvar_116;
  tmpvar_116.w = 1.0;
  tmpvar_116.xyz = worldNormal_8;
  mediump vec4 normal_117;
  normal_117 = tmpvar_116;
  mediump vec3 x2_118;
  mediump vec4 tmpvar_119;
  tmpvar_119 = (normal_117.xyzz * normal_117.yzzx);
  x2_118.x = dot (unity_SHBr, tmpvar_119);
  x2_118.y = dot (unity_SHBg, tmpvar_119);
  x2_118.z = dot (unity_SHBb, tmpvar_119);
  highp vec3 lightColor0_120;
  lightColor0_120 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_121;
  lightColor1_121 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_122;
  lightColor2_122 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_123;
  lightColor3_123 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_124;
  lightAttenSq_124 = unity_4LightAtten0;
  highp vec3 normal_125;
  normal_125 = worldNormal_8;
  highp vec3 col_126;
  highp vec4 ndotl_127;
  highp vec4 lengthSq_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_4LightPosX0 - tmpvar_104.x);
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosY0 - tmpvar_104.y);
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosZ0 - tmpvar_104.z);
  lengthSq_128 = (tmpvar_129 * tmpvar_129);
  lengthSq_128 = (lengthSq_128 + (tmpvar_130 * tmpvar_130));
  lengthSq_128 = (lengthSq_128 + (tmpvar_131 * tmpvar_131));
  ndotl_127 = (tmpvar_129 * normal_125.x);
  ndotl_127 = (ndotl_127 + (tmpvar_130 * normal_125.y));
  ndotl_127 = (ndotl_127 + (tmpvar_131 * normal_125.z));
  highp vec4 tmpvar_132;
  tmpvar_132 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_127 * inversesqrt(lengthSq_128)));
  ndotl_127 = tmpvar_132;
  highp vec4 tmpvar_133;
  tmpvar_133 = (tmpvar_132 * (1.0/((1.0 + 
    (lengthSq_128 * lightAttenSq_124)
  ))));
  col_126 = (lightColor0_120 * tmpvar_133.x);
  col_126 = (col_126 + (lightColor1_121 * tmpvar_133.y));
  col_126 = (col_126 + (lightColor2_122 * tmpvar_133.z));
  col_126 = (col_126 + (lightColor3_123 * tmpvar_133.w));
  tmpvar_10 = ((x2_118 + (unity_SHC.xyz * 
    ((normal_117.x * normal_117.x) - (normal_117.y * normal_117.y))
  )) + col_126);
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_111;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = worldBinormal_6.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = worldBinormal_6.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = worldBinormal_6.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 17699
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17700
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17701
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 17702
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17703
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 17704
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 17705
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 17706
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 17707
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17708
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 17709
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 17710
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17711
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17712
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17713
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 17714
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 17715
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 17716
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 17717
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 17718
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 17719
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 17720
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 17721
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 17722
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 17723
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 17724
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 17725
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 17726
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 17727
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 17728
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 17729
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 17730
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 17731
        //FRC
        t34.x = fract(t34.x);
        //Instruction 17732
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 17733
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 17734
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 17735
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 17736
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 17737
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 17738
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 17739
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 17740
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 17741
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 17742
        //IF
        if(tb51){
            //Instruction 17743
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 17744
            //FRC
            t5 = fract(t5);
            //Instruction 17745
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17746
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 17747
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 17748
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 17749
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 17750
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 17751
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17752
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 17753
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17754
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 17755
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17756
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 17757
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 17758
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 17759
            //SQRT
            t52 = sqrt(t52);
            //Instruction 17760
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 17761
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 17762
            //MUL
            t54 = t54 * t55;
            //Instruction 17763
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 17764
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 17765
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 17766
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 17767
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 17768
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 17769
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 17770
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 17771
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 17772
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 17773
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 17774
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 17775
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 17776
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 17777
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 17778
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 17779
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 17780
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 17781
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17782
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 17783
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 17784
            //SQRT
            t54 = sqrt(t54);
            //Instruction 17785
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 17786
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 17787
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 17788
            //MUL
            t6.x = t54 * t55;
            //Instruction 17789
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 17790
            //LT
            tb20 = t20<(-t20);
            //Instruction 17791
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 17792
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 17793
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 17794
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 17795
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 17796
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17797
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 17798
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17799
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 17800
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17801
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 17802
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 17803
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 17804
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 17805
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 17806
            //LOG
            t51 = log2(t51);
            //Instruction 17807
            //MUL
            t51 = t51 * t7.y;
            //Instruction 17808
            //EXP
            t51 = exp2(t51);
            //Instruction 17809
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 17810
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 17811
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 17812
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 17813
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 17814
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 17815
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 17816
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 17817
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 17818
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 17819
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 17820
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 17821
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 17822
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 17823
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 17824
            //MOV
            t11.z = t12.x;
            //Instruction 17825
            //MOV
            t11.w = t10.x;
            //Instruction 17826
            //MOV
            t13.z = t9.y;
            //Instruction 17827
            //MOV
            t13.w = t14.y;
            //Instruction 17828
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 17829
            //MOV
            t14.w = t13.y;
            //Instruction 17830
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 17831
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 17832
            //MOV
            t10.w = t11.y;
            //Instruction 17833
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 17834
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 17835
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 17836
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 17837
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 17838
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 17839
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 17840
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 17841
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 17842
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 17843
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 17844
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 17845
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 17846
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17847
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 17848
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 17849
        //ELSE
        } else {
            //Instruction 17850
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 17851
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 17852
        //ENDIF
        }
        //Instruction 17853
    //ELSE
    } else {
        //Instruction 17854
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 17855
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 17856
    //ENDIF
    }
    //Instruction 17857
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 17858
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 17859
    //IF
    if(tb52){
        //Instruction 17860
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 17861
        //IF
        if(tb52){
            //Instruction 17862
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17863
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 17864
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 17865
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 17866
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 17867
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 17868
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17869
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17870
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17871
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 17872
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 17873
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 17874
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17875
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17876
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 17877
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17878
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17879
            //FRC
            t2 = fract(t2);
            //Instruction 17880
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17881
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 17882
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17883
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17884
            //ADD
            t2 = t2 + t2;
            //Instruction 17885
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 17886
            //LT
            tb54 = t7.w<0.0;
            //Instruction 17887
            //MOV
            t7.y = (-t7.w);
            //Instruction 17888
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 17889
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 17890
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 17891
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 17892
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 17893
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 17894
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 17895
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17896
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17897
            //MUL
            t56 = t2.x * t56;
            //Instruction 17898
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 17899
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17900
            //MUL
            t54 = t54 * t55;
            //Instruction 17901
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 17902
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17903
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17904
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17905
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17906
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 17907
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 17908
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17909
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 17910
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17911
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 17912
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 17913
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 17914
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 17915
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17916
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 17917
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 17918
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 17919
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17920
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 17921
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 17922
        //ELSE
        } else {
            //Instruction 17923
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17924
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17925
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17926
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17927
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17928
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17929
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17930
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 17931
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 17932
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17933
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 17934
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17935
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 17936
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17937
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17938
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 17939
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 17940
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17941
            //MOV
            t2.y = (-t2.w);
            //Instruction 17942
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17943
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17944
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 17945
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 17946
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 17947
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 17948
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17949
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17950
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17951
            //MUL
            t54 = t54 * t6.x;
            //Instruction 17952
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 17953
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 17954
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 17955
        //ENDIF
        }
        //Instruction 17956
    //ENDIF
    }
    //Instruction 17957
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 17958
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17959
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17960
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 17961
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 17962
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 17963
    //NE
    tb54 = t52!=0.0;
    //Instruction 17964
    //LOG
    t55 = log2(t52);
    //Instruction 17965
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 17966
    //EXP
    t55 = exp2(t55);
    //Instruction 17967
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 17968
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17969
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17970
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 17971
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 17972
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17973
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 17974
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17975
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 17976
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 17977
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 17978
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17979
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 17980
    //MUL
    t52 = t52 * t54;
    //Instruction 17981
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 17982
    //MOV
    t5.y = t4.y;
    //Instruction 17983
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 17984
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 17985
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 17986
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 17987
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 17988
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 17989
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 17990
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 17991
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17992
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 17993
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 17994
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 17995
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 17996
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17997
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17998
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17999
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18000
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18001
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 18002
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 18003
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 18004
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 18005
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 18006
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 18007
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 18008
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 18009
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 18010
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 18011
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 18012
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 18013
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 18014
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 18015
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 18016
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 18017
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 18018
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 18019
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 18020
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 18021
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 18022
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 18023
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 18024
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 18025
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 18026
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 18027
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 18028
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 18029
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 18030
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 18031
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 18032
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 18033
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 18034
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 18035
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 18036
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 18037
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 18038
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 18039
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 18040
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 18041
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 18042
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 18043
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 18044
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 18045
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 18046
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 18047
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 18048
    //MOV
    vs_TEXCOORD6 = t2;
    //Instruction 18049
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 18050
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 18051
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17663
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 17664
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17665
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 17666
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17667
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17668
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17669
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17670
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17671
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17672
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17673
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17674
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17675
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17676
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 17677
    //SAMPLE_C_LZ
    vec3 txVec52 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec52, 0.0);
    //Instruction 17678
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 17679
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 17680
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 17681
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 17682
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 17683
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 17684
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 17685
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 17686
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 17687
    //MOV
    t0.w = 1.0;
    //Instruction 17688
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 17689
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 17690
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 17691
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17692
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17693
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 17694
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17695
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17696
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17697
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17698
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  lowp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13.xy = tmpvar_3.xy;
  tmpvar_12.w = _Color.w;
  tmpvar_12.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].x;
  highp float tmpvar_16;
  tmpvar_16 = _Object2World[3].y;
  tmpvar_14 = clamp (((
    fract(((tmpvar_15 + tmpvar_16) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_13.z = tmpvar_14;
  highp vec4 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = tmpvar_1;
  tmpvar_18 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_19;
  highp vec3 vRotatedWindVector_20;
  highp vec3 FinalPosition_21;
  FinalPosition_21 = tmpvar_1.xyz;
  mediump float tmpvar_22;
  tmpvar_22 = (_WindQuality * _WindEnabled);
  if ((tmpvar_22 > 0.0)) {
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedWindVector_20 = normalize((tmpvar_23 * _ST_WindVector.xyz));
    highp mat3 tmpvar_24;
    tmpvar_24[0] = _World2Object[0].xyz;
    tmpvar_24[1] = _World2Object[1].xyz;
    tmpvar_24[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_19 = (normalize((tmpvar_24 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_20 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_19 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_21 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_4.w;
  tmpvar_25.y = tmpvar_5.x;
  tmpvar_25.z = tmpvar_5.y;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix (FinalPosition_21, tmpvar_25, unity_LODFade.xxx);
  FinalPosition_21 = tmpvar_26;
  if (((tmpvar_22 > 1.0) && (tmpvar_22 < 5.0))) {
    highp float tmpvar_27;
    tmpvar_27 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_28;
    isBestWind_28 = (tmpvar_22 == 4.0);
    bool bLeaf2_29;
    bLeaf2_29 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_30;
    vPos_30 = tmpvar_26;
    highp vec3 vDirection_31;
    vDirection_31 = tmpvar_2;
    highp float tmpvar_32;
    if (bLeaf2_29) {
      tmpvar_32 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_33;
    if (bLeaf2_29) {
      tmpvar_33 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_33 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_34;
    highp vec4 tmpvar_35;
    tmpvar_35.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_35.x = (tmpvar_32 + tmpvar_27);
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    vPos_34 = (tmpvar_26 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_33 * (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_31 = tmpvar_2;
    vPos_30 = vPos_34;
    if (isBestWind_28) {
      highp vec3 tmpvar_37;
      tmpvar_37 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_38;
      if (bLeaf2_29) {
        tmpvar_38 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_39;
      if (bLeaf2_29) {
        tmpvar_39 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_40;
      if (bLeaf2_29) {
        tmpvar_40 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_41;
      if (bLeaf2_29) {
        tmpvar_41 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_41 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_42;
      if (bLeaf2_29) {
        tmpvar_42 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_42 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_43;
      if (bLeaf2_29) {
        tmpvar_43 = bool(1);
      } else {
        tmpvar_43 = bool(1);
      };
      highp float fTwitch_44;
      highp vec3 vAxis_45;
      highp float fOsc_46;
      highp vec3 vOriginPos_47;
      highp vec3 tmpvar_48;
      tmpvar_48 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_49;
      tmpvar_49 = ((tmpvar_48.x + tmpvar_48.y) + tmpvar_48.z);
      highp vec4 tmpvar_50;
      tmpvar_50.x = (tmpvar_38 + tmpvar_49);
      tmpvar_50.y = ((tmpvar_38 * 0.75) - tmpvar_49);
      tmpvar_50.z = ((tmpvar_38 * 0.01) + tmpvar_49);
      tmpvar_50.w = (tmpvar_38 + tmpvar_49);
      highp vec4 tmpvar_51;
      highp vec4 tmpvar_52;
      tmpvar_52 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      tmpvar_51 = (((
        (tmpvar_52 * tmpvar_52)
       * 
        (3.0 - (2.0 * tmpvar_52))
      ) - 0.5) * 2.0);
      vOriginPos_47 = vPos_34;
      highp float tmpvar_53;
      tmpvar_53 = sqrt(dot (vPos_34, vPos_34));
      highp float fAngle_54;
      fAngle_54 = ((_glesMultiTexCoord2.x * tmpvar_40) * (tmpvar_51.x + (tmpvar_51.y * tmpvar_51.y)));
      highp vec2 vSinCos_55;
      vSinCos_55.x = sin(fAngle_54);
      vSinCos_55.y = cos(fAngle_54);
      highp float tmpvar_56;
      tmpvar_56 = (1.0 - vSinCos_55.y);
      highp mat3 tmpvar_57;
      tmpvar_57[0].x = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.x) + vSinCos_55.y);
      tmpvar_57[0].y = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.y) + (vSinCos_55.x * tmpvar_37.z));
      tmpvar_57[0].z = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.z) - (vSinCos_55.x * tmpvar_37.y));
      tmpvar_57[1].x = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.y) - (vSinCos_55.x * tmpvar_37.z));
      tmpvar_57[1].y = (((tmpvar_56 * tmpvar_37.y) * tmpvar_37.y) + vSinCos_55.y);
      tmpvar_57[1].z = (((tmpvar_56 * tmpvar_37.y) * tmpvar_37.z) + (vSinCos_55.x * tmpvar_37.x));
      tmpvar_57[2].x = (((tmpvar_56 * tmpvar_37.x) * tmpvar_37.z) + (vSinCos_55.x * tmpvar_37.y));
      tmpvar_57[2].y = (((tmpvar_56 * tmpvar_37.y) * tmpvar_37.z) - (vSinCos_55.x * tmpvar_37.x));
      tmpvar_57[2].z = (((tmpvar_56 * tmpvar_37.z) * tmpvar_37.z) + vSinCos_55.y);
      highp vec3 tmpvar_58;
      tmpvar_58 = ((tmpvar_37.yzx * vRotatedWindVector_20.zxy) - (tmpvar_37.zxy * vRotatedWindVector_20.yzx));
      vAxis_45.xz = tmpvar_58.xz;
      highp float tmpvar_59;
      tmpvar_59 = clamp (dot (vRotatedWindVector_20, tmpvar_37), -1.0, 1.0);
      vAxis_45.y = (tmpvar_58.y + tmpvar_59);
      highp vec3 tmpvar_60;
      tmpvar_60 = normalize(vAxis_45);
      vAxis_45 = tmpvar_60;
      highp float tmpvar_61;
      tmpvar_61 = (1.570796 - (sign(tmpvar_59) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_59))) * (1.570796 + (abs(tmpvar_59) * (-0.2146018 + 
          (abs(tmpvar_59) * (0.08656672 + (abs(tmpvar_59) * -0.03102955)))
        ))))
      )));
      fOsc_46 = (tmpvar_51.y - (tmpvar_51.x * tmpvar_51.x));
      fTwitch_44 = 0.0;
      if (tmpvar_43) {
        highp float fTime_62;
        fTime_62 = (tmpvar_42.z + tmpvar_49);
        highp vec4 tmpvar_63;
        tmpvar_63.zw = vec2(0.0, 0.0);
        tmpvar_63.x = fTime_62;
        tmpvar_63.y = (0.87 * fTime_62);
        highp vec4 tmpvar_64;
        highp vec4 tmpvar_65;
        tmpvar_65 = abs(((
          fract((tmpvar_63 + 0.5))
         * 2.0) - 1.0));
        tmpvar_64 = (((
          (tmpvar_65 * tmpvar_65)
         * 
          (3.0 - (2.0 * tmpvar_65))
        ) - 0.5) * 2.0);
        fTwitch_44 = (tmpvar_42.x * pow (clamp (
          ((((tmpvar_64.x * tmpvar_64.y) * tmpvar_64.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_42.y));
      };
      highp float fAngle_66;
      fAngle_66 = (_glesMultiTexCoord2.x * ((
        (tmpvar_61 * tmpvar_41)
       + 
        (fOsc_46 * tmpvar_39)
      ) + fTwitch_44));
      highp vec2 vSinCos_67;
      vSinCos_67.x = sin(fAngle_66);
      vSinCos_67.y = cos(fAngle_66);
      highp float tmpvar_68;
      tmpvar_68 = (1.0 - vSinCos_67.y);
      highp mat3 tmpvar_69;
      tmpvar_69[0].x = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.x) + vSinCos_67.y);
      tmpvar_69[0].y = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.y) + (vSinCos_67.x * tmpvar_60.z));
      tmpvar_69[0].z = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.z) - (vSinCos_67.x * tmpvar_60.y));
      tmpvar_69[1].x = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.y) - (vSinCos_67.x * tmpvar_60.z));
      tmpvar_69[1].y = (((tmpvar_68 * tmpvar_60.y) * tmpvar_60.y) + vSinCos_67.y);
      tmpvar_69[1].z = (((tmpvar_68 * tmpvar_60.y) * tmpvar_60.z) + (vSinCos_67.x * tmpvar_60.x));
      tmpvar_69[2].x = (((tmpvar_68 * tmpvar_60.x) * tmpvar_60.z) + (vSinCos_67.x * tmpvar_60.y));
      tmpvar_69[2].y = (((tmpvar_68 * tmpvar_60.y) * tmpvar_60.z) - (vSinCos_67.x * tmpvar_60.x));
      tmpvar_69[2].z = (((tmpvar_68 * tmpvar_60.z) * tmpvar_60.z) + vSinCos_67.y);
      highp mat3 tmpvar_70;
      tmpvar_70 = (tmpvar_57 * tmpvar_69);
      vOriginPos_47 = (normalize((tmpvar_70 * vPos_34)) * tmpvar_53);
      vDirection_31 = (tmpvar_70 * _glesNormal);
      vPos_30 = vOriginPos_47;
    };
    tmpvar_18 = vDirection_31;
    FinalPosition_21 = vPos_30;
  };
  FinalPosition_21 = (FinalPosition_21 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_22 >= 3.0)) {
    highp vec3 vPos_71;
    vPos_71 = FinalPosition_21;
    if ((tmpvar_22 == 5.0)) {
      highp vec3 vPos_72;
      vPos_72 = FinalPosition_21;
      highp float fTime_73;
      highp float fAdherenceScale_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_73 = (_ST_WindBranch.x + (tmpvar_15 + tmpvar_16));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.x = (fTime_73 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_73 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_73 + _glesMultiTexCoord0.w));
      tmpvar_80.w = ((fTime_73 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_77 = (fOscillation_77 * (1.0 + (vOscillations_76.w * _ST_WindBranchWhip.x)));
      vPos_72 = (FinalPosition_21 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      highp vec4 tmpvar_83;
      tmpvar_83.zw = vec2(0.0, 0.0);
      tmpvar_83.x = ((fTime_73 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_83.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_84;
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_83 + 0.5))
       * 2.0) - 1.0));
      tmpvar_84 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      fAdherenceScale_74 = (1.0 - ((tmpvar_84.x * tmpvar_84.y) * (
        (tmpvar_84.x * tmpvar_84.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_74 = (fAdherenceScale_74 + ((vOscillations_76.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_72 = (vPos_72 + ((
        ((vRotatedBranchAnchor_19 - vPos_72) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_74) * _glesMultiTexCoord0.z));
      vPos_71 = vPos_72;
    } else {
      highp vec3 vPos_86;
      vPos_86 = vPos_71;
      highp float fTime_87;
      highp vec3 vWindVector_88;
      vWindVector_88 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_87 = (_ST_WindBranch.x + (tmpvar_15 + tmpvar_16));
      highp vec4 vOscillations_89;
      highp float fOscillation_90;
      fOscillation_90 = 1.0;
      highp float fAmount_91;
      highp float fTarget_92;
      highp vec4 tmpvar_93;
      tmpvar_93.w = 0.0;
      tmpvar_93.x = (fTime_87 + _glesMultiTexCoord0.w);
      tmpvar_93.y = ((fTime_87 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_93.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_87 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_94;
      tmpvar_94 = abs(((
        fract((tmpvar_93 + 0.5))
       * 2.0) - 1.0));
      vOscillations_89 = (((
        (tmpvar_94 * tmpvar_94)
       * 
        (3.0 - (2.0 * tmpvar_94))
      ) - 0.5) * 2.0);
      highp float tmpvar_95;
      tmpvar_95 = (vOscillations_89.y * vOscillations_89.z);
      fTarget_92 = 1.0;
      fAmount_91 = tmpvar_95;
      if ((tmpvar_95 < 0.0)) {
        fTarget_92 = -1.0;
        fAmount_91 = -(tmpvar_95);
      };
      fOscillation_90 = (((
        mix (mix (tmpvar_95, fTarget_92, fAmount_91), fTarget_92, fAmount_91)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_89.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_86 = (vPos_71 + ((vWindVector_88 * fOscillation_90) * _ST_WindBranch.y));
      vPos_71 = vPos_86;
    };
    FinalPosition_21 = vPos_71;
  };
  if ((tmpvar_22 > 0.0)) {
    highp vec3 vPos_96;
    vPos_96 = FinalPosition_21;
    highp float fMoveAmount_97;
    highp float fAdjust_98;
    highp float fLength_99;
    fLength_99 = sqrt(dot (FinalPosition_21, FinalPosition_21));
    highp float tmpvar_100;
    tmpvar_100 = (max ((FinalPosition_21.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_98 = tmpvar_100;
    if ((tmpvar_100 != 0.0)) {
      fAdjust_98 = pow (tmpvar_100, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_101;
    tmpvar_101.zw = vec2(0.0, 0.0);
    tmpvar_101.x = (tmpvar_15 + _ST_WindGlobal.x);
    tmpvar_101.y = (tmpvar_16 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_102;
    highp vec4 tmpvar_103;
    tmpvar_103 = abs(((
      fract((tmpvar_101 + 0.5))
     * 2.0) - 1.0));
    tmpvar_102 = (((
      (tmpvar_103 * tmpvar_103)
     * 
      (3.0 - (2.0 * tmpvar_103))
    ) - 0.5) * 2.0);
    fMoveAmount_97 = ((_ST_WindGlobal.y * (tmpvar_102.x + 
      (tmpvar_102.y * tmpvar_102.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_97 = (fMoveAmount_97 * fAdjust_98);
    vPos_96.xz = (FinalPosition_21.xz + (vRotatedWindVector_20.xz * fMoveAmount_97));
    vPos_96 = (normalize(vPos_96) * fLength_99);
    FinalPosition_21 = vPos_96;
  };
  tmpvar_17.xyz = FinalPosition_21;
  tmpvar_9 = tmpvar_12;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_17).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_18.x)
   + 
    (v_106.xyz * tmpvar_18.y)
  ) + (v_107.xyz * tmpvar_18.z)));
  worldNormal_8 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_112;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.x;
  tmpvar_113.y = worldBinormal_6.x;
  tmpvar_113.z = worldNormal_8.x;
  tmpvar_113.w = tmpvar_104.x;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.y;
  tmpvar_114.y = worldBinormal_6.y;
  tmpvar_114.z = worldNormal_8.y;
  tmpvar_114.w = tmpvar_104.y;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_7.z;
  tmpvar_115.y = worldBinormal_6.z;
  tmpvar_115.z = worldNormal_8.z;
  tmpvar_115.w = tmpvar_104.z;
  lowp vec4 tmpvar_116;
  tmpvar_116.w = 1.0;
  tmpvar_116.xyz = worldNormal_8;
  mediump vec4 normal_117;
  normal_117 = tmpvar_116;
  mediump vec3 x2_118;
  mediump vec4 tmpvar_119;
  tmpvar_119 = (normal_117.xyzz * normal_117.yzzx);
  x2_118.x = dot (unity_SHBr, tmpvar_119);
  x2_118.y = dot (unity_SHBg, tmpvar_119);
  x2_118.z = dot (unity_SHBb, tmpvar_119);
  highp vec3 lightColor0_120;
  lightColor0_120 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_121;
  lightColor1_121 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_122;
  lightColor2_122 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_123;
  lightColor3_123 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_124;
  lightAttenSq_124 = unity_4LightAtten0;
  highp vec3 normal_125;
  normal_125 = worldNormal_8;
  highp vec3 col_126;
  highp vec4 ndotl_127;
  highp vec4 lengthSq_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (unity_4LightPosX0 - tmpvar_104.x);
  highp vec4 tmpvar_130;
  tmpvar_130 = (unity_4LightPosY0 - tmpvar_104.y);
  highp vec4 tmpvar_131;
  tmpvar_131 = (unity_4LightPosZ0 - tmpvar_104.z);
  lengthSq_128 = (tmpvar_129 * tmpvar_129);
  lengthSq_128 = (lengthSq_128 + (tmpvar_130 * tmpvar_130));
  lengthSq_128 = (lengthSq_128 + (tmpvar_131 * tmpvar_131));
  ndotl_127 = (tmpvar_129 * normal_125.x);
  ndotl_127 = (ndotl_127 + (tmpvar_130 * normal_125.y));
  ndotl_127 = (ndotl_127 + (tmpvar_131 * normal_125.z));
  highp vec4 tmpvar_132;
  tmpvar_132 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_127 * inversesqrt(lengthSq_128)));
  ndotl_127 = tmpvar_132;
  highp vec4 tmpvar_133;
  tmpvar_133 = (tmpvar_132 * (1.0/((1.0 + 
    (lengthSq_128 * lightAttenSq_124)
  ))));
  col_126 = (lightColor0_120 * tmpvar_133.x);
  col_126 = (col_126 + (lightColor1_121 * tmpvar_133.y));
  col_126 = (col_126 + (lightColor2_122 * tmpvar_133.z));
  col_126 = (col_126 + (lightColor3_123 * tmpvar_133.w));
  tmpvar_10 = ((x2_118 + (unity_SHC.xyz * 
    ((normal_117.x * normal_117.x) - (normal_117.y * normal_117.y))
  )) + col_126);
  tmpvar_11 = (unity_World2Shadow[0] * (_Object2World * tmpvar_17));
  gl_Position = (glstate_matrix_mvp * tmpvar_17);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 17833
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17834
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17835
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 17836
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17837
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 17838
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 17839
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 17840
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 17841
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17842
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 17843
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 17844
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17845
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17846
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17847
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 17848
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 17849
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 17850
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 17851
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 17852
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 17853
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 17854
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 17855
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 17856
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 17857
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 17858
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 17859
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 17860
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 17861
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 17862
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 17863
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 17864
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 17865
        //FRC
        t34.x = fract(t34.x);
        //Instruction 17866
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 17867
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 17868
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 17869
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 17870
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 17871
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 17872
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 17873
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 17874
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 17875
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 17876
        //IF
        if(tb51){
            //Instruction 17877
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 17878
            //FRC
            t5 = fract(t5);
            //Instruction 17879
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17880
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 17881
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 17882
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 17883
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 17884
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 17885
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17886
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 17887
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17888
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 17889
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17890
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 17891
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 17892
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 17893
            //SQRT
            t52 = sqrt(t52);
            //Instruction 17894
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 17895
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 17896
            //MUL
            t54 = t54 * t55;
            //Instruction 17897
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 17898
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 17899
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 17900
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 17901
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 17902
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 17903
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 17904
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 17905
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 17906
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 17907
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 17908
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 17909
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 17910
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 17911
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 17912
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 17913
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 17914
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 17915
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17916
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 17917
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 17918
            //SQRT
            t54 = sqrt(t54);
            //Instruction 17919
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 17920
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 17921
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 17922
            //MUL
            t6.x = t54 * t55;
            //Instruction 17923
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 17924
            //LT
            tb20 = t20<(-t20);
            //Instruction 17925
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 17926
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 17927
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 17928
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 17929
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 17930
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 17931
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 17932
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17933
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 17934
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17935
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 17936
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 17937
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 17938
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 17939
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 17940
            //LOG
            t51 = log2(t51);
            //Instruction 17941
            //MUL
            t51 = t51 * t7.y;
            //Instruction 17942
            //EXP
            t51 = exp2(t51);
            //Instruction 17943
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 17944
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 17945
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 17946
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 17947
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 17948
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 17949
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 17950
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 17951
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 17952
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 17953
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 17954
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 17955
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 17956
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 17957
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 17958
            //MOV
            t11.z = t12.x;
            //Instruction 17959
            //MOV
            t11.w = t10.x;
            //Instruction 17960
            //MOV
            t13.z = t9.y;
            //Instruction 17961
            //MOV
            t13.w = t14.y;
            //Instruction 17962
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 17963
            //MOV
            t14.w = t13.y;
            //Instruction 17964
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 17965
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 17966
            //MOV
            t10.w = t11.y;
            //Instruction 17967
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 17968
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 17969
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 17970
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 17971
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 17972
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 17973
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 17974
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 17975
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 17976
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 17977
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 17978
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 17979
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 17980
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 17981
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 17982
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 17983
        //ELSE
        } else {
            //Instruction 17984
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 17985
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 17986
        //ENDIF
        }
        //Instruction 17987
    //ELSE
    } else {
        //Instruction 17988
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 17989
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 17990
    //ENDIF
    }
    //Instruction 17991
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 17992
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 17993
    //IF
    if(tb52){
        //Instruction 17994
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 17995
        //IF
        if(tb52){
            //Instruction 17996
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17997
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 17998
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 17999
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 18000
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 18001
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 18002
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18003
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18004
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18005
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 18006
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 18007
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 18008
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18009
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18010
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 18011
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18012
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18013
            //FRC
            t2 = fract(t2);
            //Instruction 18014
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18015
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 18016
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18017
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18018
            //ADD
            t2 = t2 + t2;
            //Instruction 18019
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 18020
            //LT
            tb54 = t7.w<0.0;
            //Instruction 18021
            //MOV
            t7.y = (-t7.w);
            //Instruction 18022
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 18023
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 18024
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 18025
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 18026
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 18027
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 18028
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 18029
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18030
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18031
            //MUL
            t56 = t2.x * t56;
            //Instruction 18032
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 18033
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18034
            //MUL
            t54 = t54 * t55;
            //Instruction 18035
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 18036
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18037
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18038
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18039
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18040
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 18041
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 18042
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18043
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 18044
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18045
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 18046
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 18047
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 18048
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 18049
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18050
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 18051
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 18052
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 18053
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18054
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 18055
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 18056
        //ELSE
        } else {
            //Instruction 18057
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18058
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18059
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18060
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 18061
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18062
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18063
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18064
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 18065
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 18066
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18067
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18068
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18069
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 18070
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18071
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18072
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 18073
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 18074
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18075
            //MOV
            t2.y = (-t2.w);
            //Instruction 18076
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18077
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18078
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 18079
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 18080
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 18081
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 18082
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18083
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18084
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18085
            //MUL
            t54 = t54 * t6.x;
            //Instruction 18086
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 18087
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 18088
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18089
        //ENDIF
        }
        //Instruction 18090
    //ENDIF
    }
    //Instruction 18091
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 18092
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 18093
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18094
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 18095
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 18096
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 18097
    //NE
    tb54 = t52!=0.0;
    //Instruction 18098
    //LOG
    t55 = log2(t52);
    //Instruction 18099
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 18100
    //EXP
    t55 = exp2(t55);
    //Instruction 18101
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 18102
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18103
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18104
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 18105
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 18106
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18107
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 18108
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18109
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 18110
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 18111
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 18112
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18113
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 18114
    //MUL
    t52 = t52 * t54;
    //Instruction 18115
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 18116
    //MOV
    t5.y = t4.y;
    //Instruction 18117
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 18118
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 18119
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 18120
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 18121
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 18122
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 18123
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 18124
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 18125
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 18126
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 18127
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 18128
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 18129
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 18130
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 18131
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 18132
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 18133
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18134
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18135
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 18136
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 18137
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 18138
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 18139
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 18140
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 18141
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 18142
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 18143
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 18144
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 18145
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 18146
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 18147
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 18148
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 18149
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 18150
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 18151
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 18152
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 18153
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 18154
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 18155
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 18156
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 18157
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 18158
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 18159
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 18160
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 18161
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 18162
    //ADD
    t7 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 18163
    //ADD
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 18164
    //MUL
    t9 = t7 * t7;
    //Instruction 18165
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 18166
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 18167
    //MUL
    t7 = t0.yyyy * t7;
    //Instruction 18168
    //MAD
    t2 = t2 * t0.xxxx + t7;
    //Instruction 18169
    //MAD
    t2 = t8 * t0.wwww + t2;
    //Instruction 18170
    //RSQ
    t7 = inversesqrt(t9);
    //Instruction 18171
    //MUL
    t2 = t2 * t7;
    //Instruction 18172
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 18173
    //MAD
    t7 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 18174
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 18175
    //MUL
    t2 = t2 * t7;
    //Instruction 18176
    //MUL
    t7.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 18177
    //MAD
    t7.xyz = unity_LightColor[0].xyz * t2.xxx + t7.xyz;
    //Instruction 18178
    //MAD
    t7.xyz = unity_LightColor[2].xyz * t2.zzz + t7.xyz;
    //Instruction 18179
    //MAD
    t7.xyz = unity_LightColor[3].xyz * t2.www + t7.xyz;
    //Instruction 18180
    //ADD
    t7.xyz = t7.xyz + t16_16.xyz;
    //Instruction 18181
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 18182
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 18183
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 18184
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 18185
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 18186
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 18187
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 18188
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 18189
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 18190
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 18191
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 18192
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 18193
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 18194
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 18195
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 18196
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 18197
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 18198
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 18199
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 18200
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 18201
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 18202
    //MOV
    vs_TEXCOORD6 = t2;
    //Instruction 18203
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 18204
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 18205
    //MOV
    vs_TEXCOORD5.xyz = t7.xyz;
    //Instruction 18206
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17797
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 17798
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17799
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 17800
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17801
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17802
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17803
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17804
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17805
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17806
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17807
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17808
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17809
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17810
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 17811
    //SAMPLE_C_LZ
    vec3 txVec39 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec39, 0.0);
    //Instruction 17812
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 17813
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 17814
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 17815
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 17816
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 17817
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 17818
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 17819
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 17820
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 17821
    //MOV
    t0.w = 1.0;
    //Instruction 17822
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 17823
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 17824
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 17825
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17826
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17827
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 17828
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17829
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17830
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17831
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17832
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_3;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
  xlv_TEXCOORD5 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD5 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 18231
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18232
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 18233
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 18234
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18235
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 18236
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 18237
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 18238
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 18239
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 18240
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 18241
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 18242
    //IF
    if(tb22){
        //Instruction 18243
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 18244
        //IF
        if(tb22){
            //Instruction 18245
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18246
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 18247
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 18248
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 18249
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 18250
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 18251
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18252
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18253
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18254
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18255
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18256
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 18257
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 18258
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18259
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 18260
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 18261
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 18262
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18263
            //FRC
            t0 = fract(t0);
            //Instruction 18264
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18265
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 18266
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18267
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18268
            //ADD
            t0 = t0 + t0;
            //Instruction 18269
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 18270
            //LT
            tb23 = t4.w<0.0;
            //Instruction 18271
            //MOV
            t4.y = (-t4.w);
            //Instruction 18272
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 18273
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 18274
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 18275
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 18276
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 18277
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 18278
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 18279
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18280
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18281
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 18282
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 18283
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18284
            //MUL
            t23 = t23 * t24;
            //Instruction 18285
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 18286
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18287
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18288
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18289
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18290
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 18291
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 18292
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18293
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 18294
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18295
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 18296
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 18297
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 18298
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 18299
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18300
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 18301
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 18302
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 18303
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18304
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 18305
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 18306
        //ELSE
        } else {
            //Instruction 18307
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18308
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18309
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18310
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18311
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18312
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 18313
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 18314
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18315
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 18316
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 18317
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18318
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18319
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18320
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 18321
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18322
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18323
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 18324
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 18325
            //LT
            tb22 = t0.w<0.0;
            //Instruction 18326
            //MOV
            t0.y = (-t0.w);
            //Instruction 18327
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 18328
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 18329
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 18330
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 18331
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 18332
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 18333
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 18334
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18335
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18336
            //MUL
            t24 = t24 * t4.x;
            //Instruction 18337
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 18338
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 18339
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18340
        //ENDIF
        }
        //Instruction 18341
    //ELSE
    } else {
        //Instruction 18342
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 18343
    //ENDIF
    }
    //Instruction 18344
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 18345
    //SQRT
    t22 = sqrt(t22);
    //Instruction 18346
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18347
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 18348
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 18349
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 18350
    //NE
    tb3 = t23!=0.0;
    //Instruction 18351
    //LOG
    t10 = log2(t23);
    //Instruction 18352
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 18353
    //EXP
    t10 = exp2(t10);
    //Instruction 18354
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 18355
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18356
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18357
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 18358
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 18359
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18360
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 18361
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18362
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 18363
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 18364
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 18365
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18366
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 18367
    //MUL
    t23 = t23 * t3.x;
    //Instruction 18368
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 18369
    //MOV
    t3.y = t2.y;
    //Instruction 18370
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 18371
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 18372
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 18373
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 18374
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 18375
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18376
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 18377
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 18378
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 18379
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 18380
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 18381
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 18382
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 18383
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 18384
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 18385
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 18386
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 18387
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 18388
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 18389
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 18390
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 18391
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 18392
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 18393
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 18394
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 18395
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 18396
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 18397
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 18398
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 18399
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 18400
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 18401
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 18402
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 18403
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 18404
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 18405
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 18406
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 18407
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 18408
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 18409
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 18410
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 18411
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 18412
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 18413
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 18414
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 18415
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 18416
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18417
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 18418
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 18419
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 18420
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 18207
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18208
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 18209
    //MOV
    t1.x = t16_0.x;
    //Instruction 18210
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 18211
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18212
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18213
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18214
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18215
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18216
    //MOV
    t16_0.w = 1.0;
    //Instruction 18217
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18218
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18219
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18220
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18221
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18222
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18223
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18224
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 18225
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18226
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 18227
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 18228
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18229
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18230
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_9).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_3;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  highp vec3 lightColor0_66;
  lightColor0_66 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_67;
  lightColor1_67 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_68;
  lightColor2_68 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_69;
  lightColor3_69 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_70;
  lightAttenSq_70 = unity_4LightAtten0;
  highp vec3 normal_71;
  normal_71 = worldNormal_3;
  highp vec3 col_72;
  highp vec4 ndotl_73;
  highp vec4 lengthSq_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_74 = (tmpvar_75 * tmpvar_75);
  lengthSq_74 = (lengthSq_74 + (tmpvar_76 * tmpvar_76));
  lengthSq_74 = (lengthSq_74 + (tmpvar_77 * tmpvar_77));
  ndotl_73 = (tmpvar_75 * normal_71.x);
  ndotl_73 = (ndotl_73 + (tmpvar_76 * normal_71.y));
  ndotl_73 = (ndotl_73 + (tmpvar_77 * normal_71.z));
  highp vec4 tmpvar_78;
  tmpvar_78 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_73 * inversesqrt(lengthSq_74)));
  ndotl_73 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (tmpvar_78 * (1.0/((1.0 + 
    (lengthSq_74 * lightAttenSq_70)
  ))));
  col_72 = (lightColor0_66 * tmpvar_79.x);
  col_72 = (col_72 + (lightColor1_67 * tmpvar_79.y));
  col_72 = (col_72 + (lightColor2_68 * tmpvar_79.z));
  col_72 = (col_72 + (lightColor3_69 * tmpvar_79.w));
  tmpvar_6 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + col_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD5 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 18445
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18446
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 18447
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 18448
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18449
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 18450
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 18451
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 18452
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 18453
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 18454
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 18455
    //GE
    tb25 = t16_0.x>=3.000000;
    //Instruction 18456
    //IF
    if(tb25){
        //Instruction 18457
        //EQ
        tb25 = t16_0.x==5.000000;
        //Instruction 18458
        //IF
        if(tb25){
            //Instruction 18459
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18460
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 18461
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 18462
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 18463
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 18464
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 18465
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18466
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18467
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18468
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18469
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18470
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 18471
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 18472
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18473
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 18474
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 18475
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 18476
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18477
            //FRC
            t0 = fract(t0);
            //Instruction 18478
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18479
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 18480
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18481
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18482
            //ADD
            t0 = t0 + t0;
            //Instruction 18483
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 18484
            //LT
            tb26 = t4.w<0.0;
            //Instruction 18485
            //MOV
            t4.y = (-t4.w);
            //Instruction 18486
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 18487
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 18488
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 18489
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 18490
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 18491
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 18492
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 18493
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18494
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18495
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 18496
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 18497
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18498
            //MUL
            t26 = t26 * t27;
            //Instruction 18499
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 18500
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18501
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18502
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18503
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18504
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 18505
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 18506
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18507
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 18508
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18509
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 18510
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 18511
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 18512
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 18513
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18514
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 18515
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 18516
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 18517
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18518
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 18519
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 18520
        //ELSE
        } else {
            //Instruction 18521
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18522
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18523
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18524
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18525
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18526
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 18527
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 18528
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18529
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 18530
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 18531
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18532
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18533
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18534
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 18535
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18536
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18537
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 18538
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 18539
            //LT
            tb25 = t0.w<0.0;
            //Instruction 18540
            //MOV
            t0.y = (-t0.w);
            //Instruction 18541
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 18542
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 18543
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 18544
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 18545
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 18546
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 18547
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 18548
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18549
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18550
            //MUL
            t27 = t27 * t4.x;
            //Instruction 18551
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 18552
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 18553
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18554
        //ENDIF
        }
        //Instruction 18555
    //ELSE
    } else {
        //Instruction 18556
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 18557
    //ENDIF
    }
    //Instruction 18558
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 18559
    //SQRT
    t25 = sqrt(t25);
    //Instruction 18560
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18561
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 18562
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 18563
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 18564
    //NE
    tb3 = t26!=0.0;
    //Instruction 18565
    //LOG
    t11 = log2(t26);
    //Instruction 18566
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 18567
    //EXP
    t11 = exp2(t11);
    //Instruction 18568
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 18569
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18570
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18571
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 18572
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 18573
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18574
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 18575
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18576
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 18577
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 18578
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 18579
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18580
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 18581
    //MUL
    t26 = t26 * t3.x;
    //Instruction 18582
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 18583
    //MOV
    t3.y = t2.y;
    //Instruction 18584
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 18585
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 18586
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 18587
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 18588
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 18589
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18590
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 18591
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 18592
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 18593
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 18594
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 18595
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 18596
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 18597
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 18598
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 18599
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 18600
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 18601
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 18602
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 18603
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 18604
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 18605
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 18606
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 18607
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 18608
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 18609
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 18610
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 18611
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 18612
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 18613
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 18614
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 18615
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 18616
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 18617
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 18618
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 18619
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 18620
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 18621
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 18622
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 18623
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 18624
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 18625
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 18626
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 18627
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 18628
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 18629
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 18630
    //ADD
    t4 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 18631
    //ADD
    t5 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 18632
    //MUL
    t7 = t4 * t4;
    //Instruction 18633
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 18634
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 18635
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 18636
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 18637
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 18638
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 18639
    //MUL
    t0 = t0 * t4;
    //Instruction 18640
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 18641
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 18642
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 18643
    //MUL
    t0 = t0 * t4;
    //Instruction 18644
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 18645
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 18646
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 18647
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 18648
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 18649
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 18650
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 18651
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18652
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 18653
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 18654
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 18655
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 18656
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 18421
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18422
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 18423
    //MOV
    t1.x = t16_0.x;
    //Instruction 18424
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 18425
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18426
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18427
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18428
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18429
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18430
    //MOV
    t16_0.w = 1.0;
    //Instruction 18431
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18432
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18433
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18434
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18435
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18436
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18437
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18438
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 18439
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18440
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 18441
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 18442
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18443
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18444
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_3;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_6 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD5 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 18685
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18686
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 18687
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 18688
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18689
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 18690
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 18691
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 18692
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 18693
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 18694
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 18695
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 18696
    //IF
    if(tb22){
        //Instruction 18697
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 18698
        //IF
        if(tb22){
            //Instruction 18699
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18700
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 18701
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 18702
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 18703
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 18704
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 18705
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18706
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18707
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18708
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18709
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18710
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 18711
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 18712
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18713
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 18714
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 18715
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 18716
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18717
            //FRC
            t0 = fract(t0);
            //Instruction 18718
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18719
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 18720
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18721
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18722
            //ADD
            t0 = t0 + t0;
            //Instruction 18723
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 18724
            //LT
            tb23 = t4.w<0.0;
            //Instruction 18725
            //MOV
            t4.y = (-t4.w);
            //Instruction 18726
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 18727
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 18728
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 18729
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 18730
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 18731
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 18732
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 18733
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18734
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18735
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 18736
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 18737
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18738
            //MUL
            t23 = t23 * t24;
            //Instruction 18739
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 18740
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18741
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18742
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18743
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18744
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 18745
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 18746
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18747
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 18748
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18749
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 18750
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 18751
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 18752
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 18753
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18754
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 18755
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 18756
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 18757
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18758
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 18759
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 18760
        //ELSE
        } else {
            //Instruction 18761
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18762
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18763
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18764
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18765
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18766
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 18767
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 18768
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18769
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 18770
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 18771
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18772
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18773
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18774
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 18775
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18776
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18777
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 18778
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 18779
            //LT
            tb22 = t0.w<0.0;
            //Instruction 18780
            //MOV
            t0.y = (-t0.w);
            //Instruction 18781
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 18782
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 18783
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 18784
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 18785
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 18786
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 18787
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 18788
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18789
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18790
            //MUL
            t24 = t24 * t4.x;
            //Instruction 18791
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 18792
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 18793
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18794
        //ENDIF
        }
        //Instruction 18795
    //ELSE
    } else {
        //Instruction 18796
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 18797
    //ENDIF
    }
    //Instruction 18798
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 18799
    //SQRT
    t22 = sqrt(t22);
    //Instruction 18800
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18801
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 18802
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 18803
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 18804
    //NE
    tb3 = t23!=0.0;
    //Instruction 18805
    //LOG
    t10 = log2(t23);
    //Instruction 18806
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 18807
    //EXP
    t10 = exp2(t10);
    //Instruction 18808
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 18809
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18810
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18811
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 18812
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 18813
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18814
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 18815
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18816
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 18817
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 18818
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 18819
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18820
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 18821
    //MUL
    t23 = t23 * t3.x;
    //Instruction 18822
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 18823
    //MOV
    t3.y = t2.y;
    //Instruction 18824
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 18825
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 18826
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 18827
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 18828
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 18829
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18830
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 18831
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 18832
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 18833
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 18834
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 18835
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 18836
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 18837
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 18838
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 18839
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 18840
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 18841
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 18842
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 18843
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 18844
    //MAD
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 18845
    //MAD
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    //Instruction 18846
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 18847
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 18848
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 18849
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 18850
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 18851
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 18852
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 18853
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 18854
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 18855
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 18856
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 18857
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 18858
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 18859
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 18860
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 18861
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 18862
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 18863
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 18864
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 18865
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 18866
    //MUL
    t16_27 = t3.y * t3.y;
    //Instruction 18867
    //MAD
    t16_27 = t3.x * t3.x + (-t16_27);
    //Instruction 18868
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 18869
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 18870
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 18871
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 18872
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 18873
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 18874
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 18875
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 18876
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 18877
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 18878
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18879
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 18880
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 18881
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 18882
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 18883
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    //Instruction 18657
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18658
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 18659
    //MOV
    t1.x = t16_0.x;
    //Instruction 18660
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 18661
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18662
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18663
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18664
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18665
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18666
    //MOV
    t16_0.w = 1.0;
    //Instruction 18667
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18668
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18669
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18670
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18671
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18672
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18673
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18674
    //SAMPLE_C_LZ
    vec3 txVec40 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec40, 0.0);
    //Instruction 18675
    //ADD
    t16_14 = (-_LightShadowData.x) + 1.0;
    //Instruction 18676
    //MAD
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    //Instruction 18677
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 18678
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 18679
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18680
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 18681
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 18682
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18683
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18684
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_3;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_6 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec4 t8;
highp vec3 t10;
highp float t12;
highp float t19;
highp vec2 t21;
highp vec2 t22;
highp float t28;
bool tb28;
highp float t29;
bool tb29;
highp float t30;
mediump float t16_33;
void main()
{
    //Instruction 18080
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18081
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 18082
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 18083
    //MUL
    t10.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18084
    //MAD
    t10.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t10.xyz;
    //Instruction 18085
    //MAD
    t10.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t10.xyz;
    //Instruction 18086
    //DP3
    t19 = dot(t10.xyz, t10.xyz);
    //Instruction 18087
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 18088
    //MUL
    t10.xy = vec2(t19) * t10.xz;
    //Instruction 18089
    //AND
    t10.xy = mix(vec2(0.0, 0.0), t10.xy, bvec2(tb1));
    //Instruction 18090
    //GE
    tb28 = t16_0.x>=3.000000;
    //Instruction 18091
    //IF
    if(tb28){
        //Instruction 18092
        //EQ
        tb28 = t16_0.x==5.000000;
        //Instruction 18093
        //IF
        if(tb28){
            //Instruction 18094
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18095
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 18096
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 18097
            //DP3
            t28 = dot(t2.xyz, t2.xyz);
            //Instruction 18098
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 18099
            //MUL
            t2.xyz = vec3(t28) * t2.xyz;
            //Instruction 18100
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18101
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18102
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18103
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18104
            //ADD
            t28 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18105
            //ADD
            t28 = t28 + _ST_WindBranch.x;
            //Instruction 18106
            //ADD
            t0.x = t28 + in_TEXCOORD0.w;
            //Instruction 18107
            //MAD
            t0.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18108
            //MUL
            t29 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 18109
            //MUL
            t0.z = t29 * 0.500000;
            //Instruction 18110
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 18111
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18112
            //FRC
            t0 = fract(t0);
            //Instruction 18113
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18114
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 18115
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18116
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18117
            //ADD
            t0 = t0 + t0;
            //Instruction 18118
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 18119
            //LT
            tb29 = t4.w<0.0;
            //Instruction 18120
            //MOV
            t4.y = (-t4.w);
            //Instruction 18121
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 18122
            //MOVC
            t4.xy = (bool(tb29)) ? t4.xy : t4.zw;
            //Instruction 18123
            //MAD
            t29 = (-t0.y) * t0.z + t4.x;
            //Instruction 18124
            //MAD
            t29 = t4.y * t29 + t4.w;
            //Instruction 18125
            //ADD
            t30 = (-t29) + t4.x;
            //Instruction 18126
            //MAD
            t29 = t4.y * t30 + t29;
            //Instruction 18127
            //MUL
            t29 = t29 * _ST_WindBranchTwitch.x;
            //Instruction 18128
            //ADD
            t30 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18129
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18130
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 18131
            //MAD
            t29 = t29 * t30 + t4.x;
            //Instruction 18132
            //MAD
            t30 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18133
            //MUL
            t29 = t29 * t30;
            //Instruction 18134
            //MUL
            t3.xyz = vec3(t29) * t3.xyz;
            //Instruction 18135
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18136
            //MAD
            t4.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18137
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18138
            //MAD
            t4.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18139
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 18140
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 18141
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18142
            //MUL
            t22.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 18143
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18144
            //MAD
            t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 18145
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 18146
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 18147
            //MUL
            t28 = t4.x * t4.y;
            //Instruction 18148
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18149
            //MUL
            t29 = t0.w * _ST_WindVector.w;
            //Instruction 18150
            //MAD
            t28 = t29 * _ST_WindBranchWhip.x + t28;
            //Instruction 18151
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 18152
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18153
            //MUL
            t2.xyz = vec3(t28) * t2.xyz;
            //Instruction 18154
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 18155
        //ELSE
        } else {
            //Instruction 18156
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18157
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 18158
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18159
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 18160
            //ADD
            t28 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 18161
            //ADD
            t28 = t28 + _ST_WindBranch.x;
            //Instruction 18162
            //ADD
            t4.x = t28 + in_TEXCOORD0.w;
            //Instruction 18163
            //MAD
            t4.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18164
            //MUL
            t28 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 18165
            //MUL
            t4.z = t28 * 0.500000;
            //Instruction 18166
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18167
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18168
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18169
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 18170
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18171
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18172
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 18173
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 18174
            //LT
            tb28 = t0.w<0.0;
            //Instruction 18175
            //MOV
            t0.y = (-t0.w);
            //Instruction 18176
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 18177
            //MOVC
            t5.xy = (bool(tb28)) ? t0.xy : t0.zw;
            //Instruction 18178
            //MAD
            t28 = (-t4.y) * t4.z + t5.x;
            //Instruction 18179
            //MAD
            t28 = t5.y * t28 + t0.w;
            //Instruction 18180
            //ADD
            t29 = (-t28) + t5.x;
            //Instruction 18181
            //MAD
            t28 = t5.y * t29 + t28;
            //Instruction 18182
            //MUL
            t28 = t28 * _ST_WindBranchTwitch.x;
            //Instruction 18183
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18184
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18185
            //MUL
            t30 = t30 * t4.x;
            //Instruction 18186
            //MAD
            t28 = t28 * t29 + t30;
            //Instruction 18187
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 18188
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18189
        //ENDIF
        }
        //Instruction 18190
    //ELSE
    } else {
        //Instruction 18191
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 18192
    //ENDIF
    }
    //Instruction 18193
    //DP3
    t28 = dot(t2.xyz, t2.xyz);
    //Instruction 18194
    //SQRT
    t28 = sqrt(t28);
    //Instruction 18195
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18196
    //MAD
    t29 = (-t29) * 0.250000 + t2.y;
    //Instruction 18197
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 18198
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 18199
    //NE
    tb3 = t29!=0.0;
    //Instruction 18200
    //LOG
    t12 = log2(t29);
    //Instruction 18201
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 18202
    //EXP
    t12 = exp2(t12);
    //Instruction 18203
    //MOVC
    t29 = (tb3) ? t12 : t29;
    //Instruction 18204
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18205
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18206
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 18207
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 18208
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18209
    //MUL
    t21.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 18210
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18211
    //MAD
    t3.xy = t21.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 18212
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 18213
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 18214
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18215
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t12;
    //Instruction 18216
    //MUL
    t29 = t29 * t3.x;
    //Instruction 18217
    //MAD
    t3.xz = t10.xy * vec2(t29) + t2.xz;
    //Instruction 18218
    //MOV
    t3.y = t2.y;
    //Instruction 18219
    //DP3
    t10.x = dot(t3.xyz, t3.xyz);
    //Instruction 18220
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 18221
    //MUL
    t3.xyz = t10.xxx * t3.xyz;
    //Instruction 18222
    //MUL
    t10.xyz = vec3(t28) * t3.xyz;
    //Instruction 18223
    //MOVC
    t1.xyz = (bool(tb1)) ? t10.xyz : t2.xyz;
    //Instruction 18224
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18225
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 18226
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 18227
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 18228
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 18229
    //MUL
    t28 = t2.y * _ProjectionParams.x;
    //Instruction 18230
    //MUL
    t3.w = t28 * 0.500000;
    //Instruction 18231
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 18232
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 18233
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 18234
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 18235
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 18236
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 18237
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 18238
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 18239
    //MAD
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 18240
    //MAD
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    //Instruction 18241
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 18242
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 18243
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 18244
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 18245
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18246
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18247
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 18248
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 18249
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 18250
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 18251
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 18252
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 18253
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 18254
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 18255
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 18256
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 18257
    //MUL
    t16_0 = t4.yzzx * t4.xyzz;
    //Instruction 18258
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 18259
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 18260
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 18261
    //MUL
    t16_33 = t4.y * t4.y;
    //Instruction 18262
    //MAD
    t16_33 = t4.x * t4.x + (-t16_33);
    //Instruction 18263
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_33) + t16_6.xyz;
    //Instruction 18264
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 18265
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 18266
    //ADD
    t7 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 18267
    //MUL
    t8 = t5 * t5;
    //Instruction 18268
    //MAD
    t8 = t0 * t0 + t8;
    //Instruction 18269
    //MAD
    t8 = t7 * t7 + t8;
    //Instruction 18270
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 18271
    //MAD
    t0 = t0 * t4.xxxx + t5;
    //Instruction 18272
    //MAD
    t0 = t7 * t4.zzzz + t0;
    //Instruction 18273
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 18274
    //MUL
    t0 = t0 * t5;
    //Instruction 18275
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 18276
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 18277
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 18278
    //MUL
    t0 = t0 * t5;
    //Instruction 18279
    //MUL
    t5.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 18280
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t0.xxx + t5.xyz;
    //Instruction 18281
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t0.zzz + t5.xyz;
    //Instruction 18282
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t0.www + t5.xyz;
    //Instruction 18283
    //ADD
    t5.xyz = t5.xyz + t16_6.xyz;
    //Instruction 18284
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 18285
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 18286
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 18287
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 18288
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 18289
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 18290
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 18291
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 18292
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 18293
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 18294
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18295
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 18296
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 18297
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 18298
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 18299
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 18300
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    //Instruction 18052
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18053
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 18054
    //MOV
    t1.x = t16_0.x;
    //Instruction 18055
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 18056
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18057
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18058
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18059
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18060
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18061
    //MOV
    t16_0.w = 1.0;
    //Instruction 18062
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18063
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18064
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18065
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18066
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18067
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18068
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18069
    //SAMPLE_C_LZ
    vec3 txVec53 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec53, 0.0);
    //Instruction 18070
    //ADD
    t16_14 = (-_LightShadowData.x) + 1.0;
    //Instruction 18071
    //MAD
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    //Instruction 18072
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 18073
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 18074
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18075
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 18076
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 18077
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18078
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18079
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_3;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
  xlv_TEXCOORD5 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 18334
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18335
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18336
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 18337
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18338
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 18339
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 18340
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 18341
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 18342
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18343
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18344
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 18345
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18346
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18347
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18348
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 18349
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 18350
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 18351
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 18352
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 18353
    //IF
    if(tb25){
        //Instruction 18354
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 18355
        //IF
        if(tb25){
            //Instruction 18356
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18357
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 18358
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 18359
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 18360
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 18361
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 18362
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18363
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18364
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18365
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18366
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 18367
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 18368
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18369
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18370
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 18371
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18372
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18373
            //FRC
            t2 = fract(t2);
            //Instruction 18374
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18375
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 18376
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18377
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18378
            //ADD
            t2 = t2 + t2;
            //Instruction 18379
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 18380
            //LT
            tb27 = t5.w<0.0;
            //Instruction 18381
            //MOV
            t5.y = (-t5.w);
            //Instruction 18382
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 18383
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 18384
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 18385
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 18386
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 18387
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 18388
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 18389
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18390
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18391
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 18392
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 18393
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18394
            //MUL
            t27 = t27 * t28;
            //Instruction 18395
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 18396
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18397
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18398
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18399
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18400
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 18401
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 18402
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18403
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 18404
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18405
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 18406
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 18407
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 18408
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 18409
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18410
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 18411
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 18412
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 18413
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18414
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 18415
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 18416
        //ELSE
        } else {
            //Instruction 18417
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18418
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18419
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18420
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18421
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18422
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18423
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18424
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 18425
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 18426
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18427
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18428
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18429
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 18430
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18431
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18432
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 18433
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 18434
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18435
            //MOV
            t2.y = (-t2.w);
            //Instruction 18436
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18437
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18438
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 18439
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 18440
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 18441
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 18442
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18443
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18444
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18445
            //MUL
            t27 = t27 * t5.x;
            //Instruction 18446
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 18447
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 18448
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18449
        //ENDIF
        }
        //Instruction 18450
    //ELSE
    } else {
        //Instruction 18451
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 18452
    //ENDIF
    }
    //Instruction 18453
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 18454
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 18455
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18456
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 18457
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 18458
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 18459
    //NE
    tb27 = t25!=0.0;
    //Instruction 18460
    //LOG
    t4.x = log2(t25);
    //Instruction 18461
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 18462
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 18463
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 18464
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18465
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18466
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 18467
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 18468
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18469
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 18470
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18471
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 18472
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 18473
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 18474
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18475
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 18476
    //MUL
    t25 = t25 * t27;
    //Instruction 18477
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 18478
    //MOV
    t4.y = t3.y;
    //Instruction 18479
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 18480
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 18481
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 18482
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 18483
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 18484
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18485
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 18486
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 18487
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 18488
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 18489
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 18490
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 18491
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 18492
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 18493
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 18494
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 18495
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 18496
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 18497
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 18498
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 18499
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 18500
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 18501
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 18502
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 18503
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 18504
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 18505
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 18506
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 18507
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 18508
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 18509
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 18510
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 18511
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 18512
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 18513
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 18514
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 18515
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 18516
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 18517
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 18518
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 18519
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 18520
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 18521
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 18522
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 18523
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 18524
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 18525
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18526
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 18527
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 18528
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 18529
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
mediump float t16_11;
void main()
{
    //Instruction 18301
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18302
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 18303
    //MOV
    t1.x = t16_0.x;
    //Instruction 18304
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 18305
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18306
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18307
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18308
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18309
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18310
    //MOV
    t16_0.w = 1.0;
    //Instruction 18311
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18312
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18313
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18314
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18315
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18316
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 18317
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 18318
    //MAX
    t16_9 = max(t16_2.z, t16_2.y);
    //Instruction 18319
    //MAX
    t16_9 = max(t16_9, t16_2.x);
    //Instruction 18320
    //MAX
    t16_11 = max(t10_1.z, t10_1.y);
    //Instruction 18321
    //MAX
    t16_11 = max(t10_1.x, t16_11);
    //Instruction 18322
    //DIV
    t16_9 = t16_11 / t16_9;
    //Instruction 18323
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 18324
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 18325
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18326
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18327
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 18328
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18329
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 18330
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 18331
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18332
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18333
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_3;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_3;
  highp vec3 col_74;
  highp vec4 ndotl_75;
  highp vec4 lengthSq_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_76 = (tmpvar_77 * tmpvar_77);
  lengthSq_76 = (lengthSq_76 + (tmpvar_78 * tmpvar_78));
  lengthSq_76 = (lengthSq_76 + (tmpvar_79 * tmpvar_79));
  ndotl_75 = (tmpvar_77 * normal_73.x);
  ndotl_75 = (ndotl_75 + (tmpvar_78 * normal_73.y));
  ndotl_75 = (ndotl_75 + (tmpvar_79 * normal_73.z));
  highp vec4 tmpvar_80;
  tmpvar_80 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_75 * inversesqrt(lengthSq_76)));
  ndotl_75 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (tmpvar_80 * (1.0/((1.0 + 
    (lengthSq_76 * lightAttenSq_72)
  ))));
  col_74 = (lightColor0_68 * tmpvar_81.x);
  col_74 = (col_74 + (lightColor1_69 * tmpvar_81.y));
  col_74 = (col_74 + (lightColor2_70 * tmpvar_81.z));
  col_74 = (col_74 + (lightColor3_71 * tmpvar_81.w));
  tmpvar_6 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + col_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 18563
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18564
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18565
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 18566
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18567
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 18568
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 18569
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 18570
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 18571
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18572
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18573
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 18574
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18575
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18576
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18577
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 18578
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 18579
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 18580
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 18581
    //GE
    tb28 = t16_2.x>=3.000000;
    //Instruction 18582
    //IF
    if(tb28){
        //Instruction 18583
        //EQ
        tb28 = t16_2.x==5.000000;
        //Instruction 18584
        //IF
        if(tb28){
            //Instruction 18585
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18586
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 18587
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 18588
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 18589
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 18590
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 18591
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18592
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18593
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18594
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18595
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 18596
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 18597
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18598
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18599
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 18600
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18601
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18602
            //FRC
            t2 = fract(t2);
            //Instruction 18603
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18604
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 18605
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18606
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18607
            //ADD
            t2 = t2 + t2;
            //Instruction 18608
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 18609
            //LT
            tb30 = t5.w<0.0;
            //Instruction 18610
            //MOV
            t5.y = (-t5.w);
            //Instruction 18611
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 18612
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 18613
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 18614
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 18615
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 18616
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 18617
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 18618
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18619
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18620
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 18621
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 18622
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18623
            //MUL
            t30 = t30 * t31;
            //Instruction 18624
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 18625
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18626
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18627
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18628
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18629
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 18630
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 18631
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18632
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 18633
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18634
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 18635
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 18636
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 18637
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 18638
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18639
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 18640
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 18641
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 18642
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18643
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 18644
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 18645
        //ELSE
        } else {
            //Instruction 18646
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18647
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18648
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18649
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18650
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18651
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18652
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18653
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 18654
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 18655
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18656
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18657
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18658
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 18659
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18660
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18661
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 18662
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 18663
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18664
            //MOV
            t2.y = (-t2.w);
            //Instruction 18665
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18666
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18667
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 18668
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 18669
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 18670
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 18671
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18672
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18673
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18674
            //MUL
            t30 = t30 * t5.x;
            //Instruction 18675
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 18676
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 18677
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18678
        //ENDIF
        }
        //Instruction 18679
    //ELSE
    } else {
        //Instruction 18680
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 18681
    //ENDIF
    }
    //Instruction 18682
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 18683
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 18684
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18685
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 18686
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 18687
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 18688
    //NE
    tb30 = t28!=0.0;
    //Instruction 18689
    //LOG
    t4.x = log2(t28);
    //Instruction 18690
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 18691
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 18692
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 18693
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18694
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18695
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 18696
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 18697
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18698
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 18699
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18700
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 18701
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 18702
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 18703
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18704
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 18705
    //MUL
    t28 = t28 * t30;
    //Instruction 18706
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 18707
    //MOV
    t4.y = t3.y;
    //Instruction 18708
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 18709
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 18710
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 18711
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 18712
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 18713
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18714
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 18715
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 18716
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 18717
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 18718
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 18719
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 18720
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 18721
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 18722
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 18723
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 18724
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 18725
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 18726
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 18727
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 18728
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 18729
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 18730
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 18731
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 18732
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 18733
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 18734
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18735
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18736
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 18737
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 18738
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 18739
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 18740
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 18741
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 18742
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 18743
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 18744
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 18745
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 18746
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 18747
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 18748
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 18749
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 18750
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 18751
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 18752
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 18753
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 18754
    //ADD
    t5 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 18755
    //ADD
    t6 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 18756
    //MUL
    t8 = t5 * t5;
    //Instruction 18757
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 18758
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 18759
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 18760
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 18761
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 18762
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 18763
    //MUL
    t2 = t2 * t5;
    //Instruction 18764
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 18765
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 18766
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 18767
    //MUL
    t2 = t2 * t5;
    //Instruction 18768
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 18769
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 18770
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 18771
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 18772
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 18773
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 18774
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 18775
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18776
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 18777
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 18778
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 18779
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 18780
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
mediump float t16_11;
void main()
{
    //Instruction 18530
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18531
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 18532
    //MOV
    t1.x = t16_0.x;
    //Instruction 18533
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 18534
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18535
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18536
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18537
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18538
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18539
    //MOV
    t16_0.w = 1.0;
    //Instruction 18540
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18541
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18542
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18543
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18544
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18545
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 18546
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 18547
    //MAX
    t16_9 = max(t16_2.z, t16_2.y);
    //Instruction 18548
    //MAX
    t16_9 = max(t16_9, t16_2.x);
    //Instruction 18549
    //MAX
    t16_11 = max(t10_1.z, t10_1.y);
    //Instruction 18550
    //MAX
    t16_11 = max(t10_1.x, t16_11);
    //Instruction 18551
    //DIV
    t16_9 = t16_11 / t16_9;
    //Instruction 18552
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 18553
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 18554
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18555
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18556
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 18557
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18558
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 18559
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 18560
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18561
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18562
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_3;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_6 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_55;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD5 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 18818
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18819
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18820
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 18821
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18822
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 18823
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 18824
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 18825
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 18826
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18827
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18828
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 18829
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18830
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18831
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18832
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 18833
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 18834
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 18835
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 18836
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 18837
    //IF
    if(tb25){
        //Instruction 18838
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 18839
        //IF
        if(tb25){
            //Instruction 18840
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18841
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 18842
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 18843
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 18844
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 18845
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 18846
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18847
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18848
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18849
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18850
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 18851
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 18852
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18853
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18854
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 18855
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18856
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18857
            //FRC
            t2 = fract(t2);
            //Instruction 18858
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18859
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 18860
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18861
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18862
            //ADD
            t2 = t2 + t2;
            //Instruction 18863
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 18864
            //LT
            tb27 = t5.w<0.0;
            //Instruction 18865
            //MOV
            t5.y = (-t5.w);
            //Instruction 18866
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 18867
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 18868
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 18869
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 18870
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 18871
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 18872
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 18873
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18874
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18875
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 18876
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 18877
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18878
            //MUL
            t27 = t27 * t28;
            //Instruction 18879
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 18880
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18881
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18882
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18883
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18884
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 18885
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 18886
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18887
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 18888
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18889
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 18890
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 18891
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 18892
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 18893
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18894
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 18895
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 18896
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 18897
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18898
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 18899
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 18900
        //ELSE
        } else {
            //Instruction 18901
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18902
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18903
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18904
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18905
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18906
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18907
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18908
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 18909
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 18910
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18911
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18912
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18913
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 18914
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18915
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18916
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 18917
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 18918
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18919
            //MOV
            t2.y = (-t2.w);
            //Instruction 18920
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18921
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18922
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 18923
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 18924
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 18925
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 18926
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18927
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18928
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18929
            //MUL
            t27 = t27 * t5.x;
            //Instruction 18930
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 18931
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 18932
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18933
        //ENDIF
        }
        //Instruction 18934
    //ELSE
    } else {
        //Instruction 18935
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 18936
    //ENDIF
    }
    //Instruction 18937
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 18938
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 18939
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18940
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 18941
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 18942
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 18943
    //NE
    tb27 = t25!=0.0;
    //Instruction 18944
    //LOG
    t4.x = log2(t25);
    //Instruction 18945
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 18946
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 18947
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 18948
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18949
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18950
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 18951
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 18952
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18953
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 18954
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18955
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 18956
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 18957
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 18958
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18959
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 18960
    //MUL
    t25 = t25 * t27;
    //Instruction 18961
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 18962
    //MOV
    t4.y = t3.y;
    //Instruction 18963
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 18964
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 18965
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 18966
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 18967
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 18968
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 18969
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 18970
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 18971
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 18972
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 18973
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 18974
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 18975
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 18976
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 18977
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 18978
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 18979
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 18980
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 18981
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 18982
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 18983
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 18984
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 18985
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 18986
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 18987
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 18988
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 18989
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18990
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18991
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 18992
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 18993
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 18994
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 18995
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 18996
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 18997
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 18998
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 18999
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 19000
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 19001
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 19002
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 19003
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 19004
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 19005
    //MUL
    t16_31 = t4.y * t4.y;
    //Instruction 19006
    //MAD
    t16_31 = t4.x * t4.x + (-t16_31);
    //Instruction 19007
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 19008
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 19009
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 19010
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 19011
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 19012
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 19013
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 19014
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 19015
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 19016
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 19017
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19018
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 19019
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19020
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 19021
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 19022
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    //Instruction 18781
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18782
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 18783
    //MOV
    t1.x = t16_0.x;
    //Instruction 18784
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 18785
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18786
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18787
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18788
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18789
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18790
    //MOV
    t16_0.w = 1.0;
    //Instruction 18791
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18792
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18793
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18794
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18795
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18796
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 18797
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 18798
    //MAX
    t16_12 = max(t16_2.z, t16_2.y);
    //Instruction 18799
    //MAX
    t16_12 = max(t16_12, t16_2.x);
    //Instruction 18800
    //MAX
    t16_14 = max(t10_1.z, t10_1.y);
    //Instruction 18801
    //MAX
    t16_14 = max(t10_1.x, t16_14);
    //Instruction 18802
    //DIV
    t16_12 = t16_14 / t16_12;
    //Instruction 18803
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 18804
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 18805
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18806
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18807
    //SAMPLE_C_LZ
    vec3 txVec54 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec54, 0.0);
    //Instruction 18808
    //ADD
    t16_14 = (-_LightShadowData.x) + 1.0;
    //Instruction 18809
    //MAD
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    //Instruction 18810
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 18811
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 18812
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18813
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 18814
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 18815
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18816
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18817
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_3;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_6 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_55;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t25;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
mediump float t16_37;
void main()
{
    //Instruction 18921
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18922
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18923
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 18924
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18925
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 18926
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 18927
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 18928
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 18929
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18930
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18931
    //LT
    tb10 = 0.0<t16_2.x;
    //Instruction 18932
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18933
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18934
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18935
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 18936
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 18937
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 18938
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 18939
    //GE
    tb31 = t16_2.x>=3.000000;
    //Instruction 18940
    //IF
    if(tb31){
        //Instruction 18941
        //EQ
        tb31 = t16_2.x==5.000000;
        //Instruction 18942
        //IF
        if(tb31){
            //Instruction 18943
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18944
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 18945
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 18946
            //DP3
            t31 = dot(t3.xyz, t3.xyz);
            //Instruction 18947
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 18948
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 18949
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18950
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 18951
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18952
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 18953
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 18954
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 18955
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18956
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18957
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 18958
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18959
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18960
            //FRC
            t2 = fract(t2);
            //Instruction 18961
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18962
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 18963
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18964
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18965
            //ADD
            t2 = t2 + t2;
            //Instruction 18966
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 18967
            //LT
            tb33 = t5.w<0.0;
            //Instruction 18968
            //MOV
            t5.y = (-t5.w);
            //Instruction 18969
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 18970
            //MOVC
            t5.xy = (bool(tb33)) ? t5.xy : t5.zw;
            //Instruction 18971
            //MAD
            t33 = (-t2.y) * t2.z + t5.x;
            //Instruction 18972
            //MAD
            t33 = t5.y * t33 + t5.w;
            //Instruction 18973
            //ADD
            t34 = (-t33) + t5.x;
            //Instruction 18974
            //MAD
            t33 = t5.y * t34 + t33;
            //Instruction 18975
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 18976
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18977
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18978
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 18979
            //MAD
            t33 = t33 * t34 + t5.x;
            //Instruction 18980
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18981
            //MUL
            t33 = t33 * t34;
            //Instruction 18982
            //MUL
            t4.xyz = vec3(t33) * t4.xyz;
            //Instruction 18983
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 18984
            //MAD
            t5.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18985
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18986
            //MAD
            t5.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18987
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 18988
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 18989
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18990
            //MUL
            t25.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 18991
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18992
            //MAD
            t5.xy = t25.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 18993
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 18994
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 18995
            //MUL
            t31 = t5.x * t5.y;
            //Instruction 18996
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18997
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 18998
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 18999
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19000
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19001
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 19002
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19003
        //ELSE
        } else {
            //Instruction 19004
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19005
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19006
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19007
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19008
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19009
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19010
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19011
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19012
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19013
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19014
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19015
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19016
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19017
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19018
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19019
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19020
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19021
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19022
            //MOV
            t2.y = (-t2.w);
            //Instruction 19023
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19024
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19025
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19026
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19027
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 19028
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 19029
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19030
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19031
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19032
            //MUL
            t33 = t33 * t5.x;
            //Instruction 19033
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 19034
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19035
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19036
        //ENDIF
        }
        //Instruction 19037
    //ELSE
    } else {
        //Instruction 19038
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19039
    //ENDIF
    }
    //Instruction 19040
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19041
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19042
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19043
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 19044
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 19045
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 19046
    //NE
    tb33 = t31!=0.0;
    //Instruction 19047
    //LOG
    t4.x = log2(t31);
    //Instruction 19048
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19049
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19050
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 19051
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19052
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19053
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19054
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19055
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19056
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19057
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19058
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19059
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19060
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 19061
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19062
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 19063
    //MUL
    t31 = t31 * t33;
    //Instruction 19064
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 19065
    //MOV
    t4.y = t3.y;
    //Instruction 19066
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 19067
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 19068
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 19069
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19070
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 19071
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19072
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19073
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19074
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19075
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19076
    //MUL
    t30 = t3.y * _ProjectionParams.x;
    //Instruction 19077
    //MUL
    t4.w = t30 * 0.500000;
    //Instruction 19078
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19079
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19080
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19081
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19082
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19083
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19084
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19085
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19086
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19087
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 19088
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 19089
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 19090
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 19091
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 19092
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 19093
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 19094
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 19095
    //MUL
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    //Instruction 19096
    //MAD
    t5.xyz = t5.xyz * in_NORMAL0.xxx + t6.xyz;
    //Instruction 19097
    //MOV
    t6.x = _World2Object[0].z;
    //Instruction 19098
    //MOV
    t6.y = _World2Object[1].z;
    //Instruction 19099
    //MOV
    t6.z = _World2Object[2].z;
    //Instruction 19100
    //MAD
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 19101
    //DP3
    t30 = dot(t5.xyz, t5.xyz);
    //Instruction 19102
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 19103
    //MUL
    t5.xyz = vec3(t30) * t5.xyz;
    //Instruction 19104
    //MUL
    t16_2 = t5.yzzx * t5.xyzz;
    //Instruction 19105
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 19106
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 19107
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 19108
    //MUL
    t16_37 = t5.y * t5.y;
    //Instruction 19109
    //MAD
    t16_37 = t5.x * t5.x + (-t16_37);
    //Instruction 19110
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_37) + t16_7.xyz;
    //Instruction 19111
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 19112
    //ADD
    t6 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 19113
    //ADD
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 19114
    //MUL
    t9 = t6 * t6;
    //Instruction 19115
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 19116
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 19117
    //MUL
    t6 = t5.yyyy * t6;
    //Instruction 19118
    //MAD
    t2 = t2 * t5.xxxx + t6;
    //Instruction 19119
    //MAD
    t2 = t8 * t5.zzzz + t2;
    //Instruction 19120
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 19121
    //MUL
    t2 = t2 * t6;
    //Instruction 19122
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 19123
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 19124
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 19125
    //MUL
    t2 = t2 * t6;
    //Instruction 19126
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 19127
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 19128
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 19129
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 19130
    //ADD
    t6.xyz = t6.xyz + t16_7.xyz;
    //Instruction 19131
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 19132
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 19133
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 19134
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 19135
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 19136
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 19137
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 19138
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 19139
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 19140
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 19141
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19142
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 19143
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19144
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 19145
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 19146
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 19147
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
mediump float t16_14;
void main()
{
    //Instruction 18884
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 18885
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 18886
    //MOV
    t1.x = t16_0.x;
    //Instruction 18887
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 18888
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 18889
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 18890
    //LT
    tb1 = t16_1<0.0;
    //Instruction 18891
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 18892
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 18893
    //MOV
    t16_0.w = 1.0;
    //Instruction 18894
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 18895
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 18896
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 18897
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 18898
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 18899
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 18900
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 18901
    //MAX
    t16_12 = max(t16_2.z, t16_2.y);
    //Instruction 18902
    //MAX
    t16_12 = max(t16_12, t16_2.x);
    //Instruction 18903
    //MAX
    t16_14 = max(t10_1.z, t10_1.y);
    //Instruction 18904
    //MAX
    t16_14 = max(t10_1.x, t16_14);
    //Instruction 18905
    //DIV
    t16_12 = t16_14 / t16_12;
    //Instruction 18906
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 18907
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 18908
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 18909
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 18910
    //SAMPLE_C_LZ
    vec3 txVec41 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec41, 0.0);
    //Instruction 18911
    //ADD
    t16_14 = (-_LightShadowData.x) + 1.0;
    //Instruction 18912
    //MAD
    t16_12 = t16_12 * t16_14 + _LightShadowData.x;
    //Instruction 18913
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 18914
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 18915
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18916
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 18917
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 18918
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 18919
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18920
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = worldBinormal_3.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = worldBinormal_3.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = worldBinormal_3.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_5;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_8 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 19110
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19111
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19112
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 19113
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19114
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 19115
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 19116
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 19117
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 19118
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19119
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 19120
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 19121
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19122
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19123
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19124
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 19125
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 19126
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 19127
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 19128
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 19129
    //IF
    if(tb28){
        //Instruction 19130
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 19131
        //IF
        if(tb28){
            //Instruction 19132
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19133
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19134
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19135
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 19136
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 19137
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19138
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19139
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19140
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19141
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19142
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 19143
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 19144
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19145
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19146
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 19147
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19148
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19149
            //FRC
            t2 = fract(t2);
            //Instruction 19150
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19151
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19152
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19153
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19154
            //ADD
            t2 = t2 + t2;
            //Instruction 19155
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19156
            //LT
            tb30 = t5.w<0.0;
            //Instruction 19157
            //MOV
            t5.y = (-t5.w);
            //Instruction 19158
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19159
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 19160
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 19161
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 19162
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 19163
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 19164
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 19165
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19166
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19167
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19168
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 19169
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19170
            //MUL
            t30 = t30 * t31;
            //Instruction 19171
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 19172
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19173
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19174
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19175
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19176
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19177
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19178
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19179
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19180
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19181
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19182
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19183
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19184
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 19185
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19186
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 19187
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 19188
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19189
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19190
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19191
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19192
        //ELSE
        } else {
            //Instruction 19193
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19194
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19195
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19196
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19197
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19198
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19199
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19200
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19201
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19202
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19203
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19204
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19205
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19206
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19207
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19208
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19209
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19210
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19211
            //MOV
            t2.y = (-t2.w);
            //Instruction 19212
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19213
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19214
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19215
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19216
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 19217
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 19218
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19219
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19220
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19221
            //MUL
            t30 = t30 * t5.x;
            //Instruction 19222
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 19223
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19224
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19225
        //ENDIF
        }
        //Instruction 19226
    //ELSE
    } else {
        //Instruction 19227
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19228
    //ENDIF
    }
    //Instruction 19229
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19230
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19231
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19232
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 19233
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 19234
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 19235
    //NE
    tb30 = t28!=0.0;
    //Instruction 19236
    //LOG
    t4.x = log2(t28);
    //Instruction 19237
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19238
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19239
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 19240
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19241
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19242
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19243
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19244
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19245
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19246
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19247
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19248
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19249
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 19250
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19251
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 19252
    //MUL
    t28 = t28 * t30;
    //Instruction 19253
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 19254
    //MOV
    t4.y = t3.y;
    //Instruction 19255
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 19256
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 19257
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 19258
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19259
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 19260
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19261
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19262
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19263
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19264
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19265
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 19266
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 19267
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19268
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19269
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19270
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19271
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19272
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19273
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19274
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19275
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19276
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 19277
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 19278
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 19279
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 19280
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 19281
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 19282
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 19283
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 19284
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 19285
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 19286
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 19287
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 19288
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 19289
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 19290
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 19291
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 19292
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 19293
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 19294
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 19295
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 19296
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 19297
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 19298
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 19299
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 19300
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 19301
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 19302
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 19303
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 19304
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 19305
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 19306
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 19307
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 19308
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 19309
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 19310
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 19311
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 19312
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 19313
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 19314
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 19315
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 19316
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 19317
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 19318
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 19319
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 19320
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 19321
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 19322
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19323
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19324
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 19325
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 19073
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19074
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 19075
    //MOV
    t1.x = t16_0.x;
    //Instruction 19076
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 19077
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19078
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19079
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19080
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19081
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19082
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 19083
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 19084
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 19085
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 19086
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 19087
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 19088
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 19089
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 19090
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19091
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 19092
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 19093
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 19094
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 19095
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 19096
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 19097
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 19098
    //MOV
    t1.w = 1.0;
    //Instruction 19099
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 19100
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 19101
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 19102
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19103
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19104
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19105
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 19106
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 19107
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19108
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19109
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_5;
  highp vec3 col_82;
  highp vec4 ndotl_83;
  highp vec4 lengthSq_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_84 = (tmpvar_85 * tmpvar_85);
  lengthSq_84 = (lengthSq_84 + (tmpvar_86 * tmpvar_86));
  lengthSq_84 = (lengthSq_84 + (tmpvar_87 * tmpvar_87));
  ndotl_83 = (tmpvar_85 * normal_81.x);
  ndotl_83 = (ndotl_83 + (tmpvar_86 * normal_81.y));
  ndotl_83 = (ndotl_83 + (tmpvar_87 * normal_81.z));
  highp vec4 tmpvar_88;
  tmpvar_88 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_83 * inversesqrt(lengthSq_84)));
  ndotl_83 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (tmpvar_88 * (1.0/((1.0 + 
    (lengthSq_84 * lightAttenSq_80)
  ))));
  col_82 = (lightColor0_76 * tmpvar_89.x);
  col_82 = (col_82 + (lightColor1_77 * tmpvar_89.y));
  col_82 = (col_82 + (lightColor2_78 * tmpvar_89.z));
  col_82 = (col_82 + (lightColor3_79 * tmpvar_89.w));
  tmpvar_7 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + col_82);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_3.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_3.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_3.z = tmpvar_20;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_3;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_21;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_8 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_9;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_8 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t27;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
mediump float t16_41;
void main()
{
    //Instruction 19363
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19364
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19365
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 19366
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19367
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 19368
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 19369
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 19370
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 19371
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19372
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 19373
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 19374
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19375
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19376
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19377
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 19378
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 19379
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 19380
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 19381
    //GE
    tb34 = t16_2>=3.000000;
    //Instruction 19382
    //IF
    if(tb34){
        //Instruction 19383
        //EQ
        tb34 = t16_2==5.000000;
        //Instruction 19384
        //IF
        if(tb34){
            //Instruction 19385
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19386
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19387
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19388
            //DP3
            t34 = dot(t3.xyz, t3.xyz);
            //Instruction 19389
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 19390
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 19391
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19392
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19393
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19394
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19395
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 19396
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 19397
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19398
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19399
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 19400
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19401
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19402
            //FRC
            t2 = fract(t2);
            //Instruction 19403
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19404
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19405
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19406
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19407
            //ADD
            t2 = t2 + t2;
            //Instruction 19408
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19409
            //LT
            tb36 = t5.w<0.0;
            //Instruction 19410
            //MOV
            t5.y = (-t5.w);
            //Instruction 19411
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19412
            //MOVC
            t5.xy = (bool(tb36)) ? t5.xy : t5.zw;
            //Instruction 19413
            //MAD
            t36 = (-t2.y) * t2.z + t5.x;
            //Instruction 19414
            //MAD
            t36 = t5.y * t36 + t5.w;
            //Instruction 19415
            //ADD
            t37 = (-t36) + t5.x;
            //Instruction 19416
            //MAD
            t36 = t5.y * t37 + t36;
            //Instruction 19417
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 19418
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19419
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19420
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19421
            //MAD
            t36 = t36 * t37 + t5.x;
            //Instruction 19422
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19423
            //MUL
            t36 = t36 * t37;
            //Instruction 19424
            //MUL
            t4.xyz = vec3(t36) * t4.xyz;
            //Instruction 19425
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19426
            //MAD
            t5.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19427
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19428
            //MAD
            t5.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19429
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19430
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19431
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19432
            //MUL
            t27.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19433
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19434
            //MAD
            t5.xy = t27.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19435
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19436
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19437
            //MUL
            t34 = t5.x * t5.y;
            //Instruction 19438
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19439
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 19440
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 19441
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19442
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19443
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 19444
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19445
        //ELSE
        } else {
            //Instruction 19446
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19447
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19448
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19449
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19450
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19451
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19452
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19453
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19454
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19455
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19456
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19457
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19458
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19459
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19460
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19461
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19462
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19463
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19464
            //MOV
            t2.y = (-t2.w);
            //Instruction 19465
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19466
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19467
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19468
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19469
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 19470
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 19471
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19472
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19473
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19474
            //MUL
            t36 = t36 * t5.x;
            //Instruction 19475
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 19476
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19477
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19478
        //ENDIF
        }
        //Instruction 19479
    //ELSE
    } else {
        //Instruction 19480
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19481
    //ENDIF
    }
    //Instruction 19482
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19483
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19484
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19485
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 19486
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 19487
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 19488
    //NE
    tb36 = t34!=0.0;
    //Instruction 19489
    //LOG
    t4.x = log2(t34);
    //Instruction 19490
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19491
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19492
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 19493
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19494
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19495
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19496
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19497
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19498
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19499
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19500
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19501
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19502
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 19503
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19504
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 19505
    //MUL
    t34 = t34 * t36;
    //Instruction 19506
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 19507
    //MOV
    t4.y = t3.y;
    //Instruction 19508
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 19509
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 19510
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 19511
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19512
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 19513
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19514
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19515
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19516
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19517
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19518
    //MUL
    t33 = t3.y * _ProjectionParams.x;
    //Instruction 19519
    //MUL
    t4.w = t33 * 0.500000;
    //Instruction 19520
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19521
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19522
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19523
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19524
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19525
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19526
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19527
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19528
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19529
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 19530
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 19531
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 19532
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 19533
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 19534
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 19535
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 19536
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 19537
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 19538
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 19539
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 19540
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 19541
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 19542
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 19543
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 19544
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 19545
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 19546
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 19547
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 19548
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 19549
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 19550
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 19551
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 19552
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 19553
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 19554
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 19555
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 19556
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 19557
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 19558
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 19559
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 19560
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 19561
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 19562
    //ADD
    t6 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 19563
    //ADD
    t7 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 19564
    //ADD
    t9 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 19565
    //MUL
    t10 = t7 * t7;
    //Instruction 19566
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 19567
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 19568
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 19569
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 19570
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 19571
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 19572
    //MUL
    t6 = t6 * t7;
    //Instruction 19573
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 19574
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 19575
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 19576
    //MUL
    t6 = t6 * t7;
    //Instruction 19577
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 19578
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 19579
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 19580
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 19581
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 19582
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 19583
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 19584
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 19585
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 19586
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 19587
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 19588
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 19589
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 19590
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 19591
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 19592
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 19593
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 19594
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 19595
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19596
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19597
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 19598
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 19599
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 19326
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19327
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 19328
    //MOV
    t1.x = t16_0.x;
    //Instruction 19329
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 19330
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19331
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19332
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19333
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19334
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19335
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 19336
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 19337
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 19338
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 19339
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 19340
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 19341
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 19342
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 19343
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19344
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 19345
    //MUL
    t16_2.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 19346
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 19347
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 19348
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 19349
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 19350
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 19351
    //MOV
    t1.w = 1.0;
    //Instruction 19352
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 19353
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 19354
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 19355
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19356
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19357
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19358
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 19359
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 19360
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19361
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19362
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.x;
  tmpvar_70.y = worldBinormal_3.x;
  tmpvar_70.z = worldNormal_5.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.y;
  tmpvar_71.y = worldBinormal_3.y;
  tmpvar_71.z = worldNormal_5.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.z;
  tmpvar_72.y = worldBinormal_3.z;
  tmpvar_72.z = worldNormal_5.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_5;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_7 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  m