IRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  ZWrite Off
  Cull Off
  Blend One One
  GpuProgramID 115647
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 62968
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 62969
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 62970
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62971
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 62972
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 62973
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62974
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 62975
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62976
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 62977
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62978
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 62979
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 62980
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 62981
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62982
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 62983
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62984
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62985
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 62986
    //FTOU
    tu15 = uint(t15);
    //Instruction 62987
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 62988
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 62989
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62990
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 62991
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 62992
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 62993
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 62994
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 62995
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 62996
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 62997
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 62998
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 62999
    //LOG
    t1.x = log2(t5);
    //Instruction 63000
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63001
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63002
    //NE
    tb6 = t5!=0.0;
    //Instruction 63003
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 63004
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 63005
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63006
    //MOV
    t1.y = t2.w;
    //Instruction 63007
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63008
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63009
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63010
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63011
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63012
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63013
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63014
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63015
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63016
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63017
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63018
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63019
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63020
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63021
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63022
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63023
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63024
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63025
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63026
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63027
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63028
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63029
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63030
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63031
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63032
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63033
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63034
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63035
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 63036
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63037
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63038
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63039
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63040
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63041
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 63042
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 63043
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 63044
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 63045
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63046
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63047
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63048
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63049
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 63050
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 63051
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 62945
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62946
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62947
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62948
    //LT
    tb0 = t10_1<0.0;
    //Instruction 62949
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 62950
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 62951
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 62952
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 62953
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 62954
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 62955
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 62956
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 62957
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 62958
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 62959
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 62960
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 62961
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 62962
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 62963
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 62964
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 62965
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 62966
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62967
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 63064
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63065
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 63066
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63067
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63068
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63069
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63070
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63071
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63072
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63073
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63074
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63075
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63076
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63077
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63078
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 63079
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63080
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63081
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 63082
    //FTOU
    tu15 = uint(t15);
    //Instruction 63083
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 63084
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 63085
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63086
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 63087
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 63088
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 63089
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 63090
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 63091
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 63092
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 63093
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 63094
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 63095
    //LOG
    t1.x = log2(t5);
    //Instruction 63096
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63097
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63098
    //NE
    tb6 = t5!=0.0;
    //Instruction 63099
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 63100
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 63101
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63102
    //MOV
    t1.y = t2.w;
    //Instruction 63103
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63104
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63105
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63106
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63107
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63108
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63109
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63110
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63111
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63112
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63113
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63114
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63115
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63116
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63117
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63118
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63119
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63120
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63121
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63122
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63123
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63124
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63125
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63126
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63127
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63128
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63129
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63130
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63131
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 63132
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63133
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63134
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63135
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63136
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63137
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 63138
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 63139
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 63140
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 63141
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63142
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63143
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63144
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63145
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 63146
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 63147
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 63052
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63053
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63054
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63055
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 63056
    //LT
    tb0 = t10_1<0.0;
    //Instruction 63057
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63058
    //DP3
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63059
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 63060
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 63061
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63062
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63063
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 64879
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 64880
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 64881
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64882
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 64883
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 64884
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64885
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 64886
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64887
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 64888
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64889
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 64890
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 64891
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 64892
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64893
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 64894
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64895
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 64896
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 64897
    //FTOU
    tu15 = uint(t15);
    //Instruction 64898
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 64899
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 64900
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 64901
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 64902
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 64903
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 64904
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 64905
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 64906
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 64907
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 64908
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 64909
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 64910
    //LOG
    t1.x = log2(t5);
    //Instruction 64911
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 64912
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 64913
    //NE
    tb6 = t5!=0.0;
    //Instruction 64914
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 64915
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 64916
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 64917
    //MOV
    t1.y = t2.w;
    //Instruction 64918
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 64919
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64920
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64921
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 64922
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 64923
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64924
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 64925
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 64926
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 64927
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 64928
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 64929
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 64930
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 64931
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 64932
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 64933
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 64934
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 64935
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 64936
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 64937
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 64938
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64939
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 64940
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 64941
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 64942
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64943
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 64944
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64945
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 64946
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 64947
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 64948
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 64949
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 64950
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 64951
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64952
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 64953
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 64954
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 64955
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 64956
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 64957
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 64958
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64959
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64960
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 64961
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 64962
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 64849
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64850
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64851
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64852
    //LT
    tb0 = t10_1<0.0;
    //Instruction 64853
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 64854
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 64855
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 64856
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 64857
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 64858
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 64859
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 64860
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 64861
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 64862
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 64863
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 64864
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 64865
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 64866
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 64867
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 64868
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64869
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64870
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 64871
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 64872
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 64873
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 64874
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 64875
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 64876
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64877
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64878
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 64988
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 64989
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 64990
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64991
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 64992
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 64993
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64994
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 64995
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64996
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 64997
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64998
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 64999
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 65000
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 65001
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65002
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 65003
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65004
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65005
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 65006
    //FTOU
    tu15 = uint(t15);
    //Instruction 65007
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 65008
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 65009
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65010
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 65011
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 65012
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 65013
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 65014
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 65015
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 65016
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 65017
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 65018
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 65019
    //LOG
    t1.x = log2(t5);
    //Instruction 65020
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 65021
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 65022
    //NE
    tb6 = t5!=0.0;
    //Instruction 65023
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 65024
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 65025
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 65026
    //MOV
    t1.y = t2.w;
    //Instruction 65027
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 65028
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65029
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65030
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 65031
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 65032
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65033
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 65034
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 65035
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 65036
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 65037
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 65038
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 65039
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 65040
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 65041
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65042
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65043
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65044
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65045
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65046
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65047
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65048
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65049
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65050
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65051
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65052
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 65053
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65054
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 65055
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 65056
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 65057
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 65058
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 65059
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 65060
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65061
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 65062
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 65063
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 65064
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 65065
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65066
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65067
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65068
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65069
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 65070
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65071
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 64963
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64964
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64965
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64966
    //LT
    tb0 = t10_1<0.0;
    //Instruction 64967
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 64968
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 64969
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 64970
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 64971
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 64972
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 64973
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 64974
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 64975
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 64976
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 64977
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64978
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64979
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 64980
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 64981
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 64982
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 64983
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 64984
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 64985
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64986
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64987
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_28;
  v_28.x = _World2Object[0].x;
  v_28.y = _World2Object[1].x;
  v_28.z = _World2Object[2].x;
  v_28.w = _World2Object[3].x;
  highp vec4 v_29;
  v_29.x = _World2Object[0].y;
  v_29.y = _World2Object[1].y;
  v_29.z = _World2Object[2].y;
  v_29.w = _World2Object[3].y;
  highp vec4 v_30;
  v_30.x = _World2Object[0].z;
  v_30.y = _World2Object[1].z;
  v_30.z = _World2Object[2].z;
  v_30.w = _World2Object[3].z;
  highp vec3 tmpvar_31;
  tmpvar_31 = normalize(((
    (v_28.xyz * _BillboardNormal.x)
   + 
    (v_29.xyz * _BillboardNormal.y)
  ) + (v_30.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_31;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 63166
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63167
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 63168
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63169
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63170
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63171
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63172
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63173
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63174
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63175
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63176
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63177
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63178
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63179
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63180
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 63181
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63182
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63183
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 63184
    //FTOU
    tu15 = uint(t15);
    //Instruction 63185
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 63186
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 63187
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63188
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 63189
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 63190
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 63191
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 63192
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 63193
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 63194
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 63195
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 63196
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 63197
    //LOG
    t1.x = log2(t5);
    //Instruction 63198
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63199
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63200
    //NE
    tb6 = t5!=0.0;
    //Instruction 63201
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 63202
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 63203
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63204
    //MOV
    t1.y = t2.w;
    //Instruction 63205
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63206
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63207
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63208
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63209
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63210
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63211
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63212
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63213
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63214
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63215
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63216
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63217
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63218
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63219
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63220
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63221
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63222
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63223
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63224
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63225
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63226
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63227
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63228
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63229
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63230
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63231
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63232
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63233
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 63234
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63235
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63236
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63237
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63238
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63239
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 63240
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 63241
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 63242
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 63243
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63244
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63245
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63246
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63247
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 63248
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 63249
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 63148
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63149
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63150
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63151
    //LT
    tb0 = t10_1<0.0;
    //Instruction 63152
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63153
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 63154
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 63155
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 63156
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 63157
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 63158
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 63159
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63160
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63161
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 63162
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 63163
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63164
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63165
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
bool tb6;
highp float t8;
highp uint tu8;
highp vec2 t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 62825
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 62826
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62827
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62828
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 62829
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 62830
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62831
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62832
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62833
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62834
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62835
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62836
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62837
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 62838
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62839
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 62840
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62841
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62842
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 62843
    //FTOU
    tu8 = uint(t8);
    //Instruction 62844
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 62845
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 62846
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62847
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 62848
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 62849
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 62850
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 62851
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 62852
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 62853
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 62854
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 62855
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 62856
    //LOG
    t12.x = log2(t6.x);
    //Instruction 62857
    //MUL
    t12.x = t12.x * _ST_WindGlobal.w;
    //Instruction 62858
    //EXP
    t12.x = exp2(t12.x);
    //Instruction 62859
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 62860
    //MOVC
    t6.x = (tb19) ? t12.x : t6.x;
    //Instruction 62861
    //MUL
    t6.x = t6.x * t18;
    //Instruction 62862
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 62863
    //MOV
    t4.y = t3.w;
    //Instruction 62864
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 62865
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 62866
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 62867
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 62868
    //SQRT
    t19 = sqrt(t19);
    //Instruction 62869
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 62870
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 62871
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 62872
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 62873
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 62874
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 62875
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 62876
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 62877
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62878
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 62879
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 62880
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 62881
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 62882
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 62883
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 62884
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 62885
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 62886
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 62887
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 62888
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 62889
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 62890
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 62891
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 62892
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 62893
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 62894
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 62895
    //MAD
    t6.xyz = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 62896
    //ADD
    vs_TEXCOORD1.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 62897
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62898
    //ADD
    t6.x = t1.y + t1.x;
    //Instruction 62899
    //ADD
    t6.x = t1.z + t6.x;
    //Instruction 62900
    //FRC
    t6.x = fract(t6.x);
    //Instruction 62901
    //MUL
    t6.x = t6.x * _HueVariation.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 62902
    //MOV
    vs_TEXCOORD3.z = t6.x;
    //Instruction 62903
    //GE
    tb6 = t0.x>=(-t0.x);
    //Instruction 62904
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 62905
    //MOVC
    t0.x = (tb6) ? t0.x : (-t0.x);
    //Instruction 62906
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 62907
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 62908
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 62909
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62910
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62911
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 62912
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 62793
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62794
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62795
    //LT
    tb12 = t10_1<0.0;
    //Instruction 62796
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 62797
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 62798
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 62799
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62800
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 62801
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 62802
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 62803
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 62804
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 62805
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 62806
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62807
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 62808
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 62809
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 62810
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 62811
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 62812
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 62813
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 62814
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 62815
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 62816
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 62817
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 62818
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 62819
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 62820
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 62821
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 62822
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 62823
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62824
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
bool tb6;
highp float t8;
highp uint tu8;
highp vec2 t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 65093
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65094
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65095
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65096
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65097
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65098
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65099
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65100
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65101
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65102
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65103
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65104
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65105
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 65106
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65107
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 65108
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65109
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65110
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 65111
    //FTOU
    tu8 = uint(t8);
    //Instruction 65112
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 65113
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65114
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65115
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 65116
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65117
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65118
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 65119
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65120
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 65121
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 65122
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 65123
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 65124
    //LOG
    t12.x = log2(t6.x);
    //Instruction 65125
    //MUL
    t12.x = t12.x * _ST_WindGlobal.w;
    //Instruction 65126
    //EXP
    t12.x = exp2(t12.x);
    //Instruction 65127
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 65128
    //MOVC
    t6.x = (tb19) ? t12.x : t6.x;
    //Instruction 65129
    //MUL
    t6.x = t6.x * t18;
    //Instruction 65130
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 65131
    //MOV
    t4.y = t3.w;
    //Instruction 65132
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 65133
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65134
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 65135
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 65136
    //SQRT
    t19 = sqrt(t19);
    //Instruction 65137
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 65138
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65139
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 65140
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 65141
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 65142
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 65143
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 65144
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 65145
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65146
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65147
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65148
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65149
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65150
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65151
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65152
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65153
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65154
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65155
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65156
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65157
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 65158
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 65159
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 65160
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 65161
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 65162
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 65163
    //MAD
    t6.xyz = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 65164
    //ADD
    vs_TEXCOORD1.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 65165
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65166
    //ADD
    t6.x = t1.y + t1.x;
    //Instruction 65167
    //ADD
    t6.x = t1.z + t6.x;
    //Instruction 65168
    //FRC
    t6.x = fract(t6.x);
    //Instruction 65169
    //MUL
    t6.x = t6.x * _HueVariation.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 65170
    //MOV
    vs_TEXCOORD3.z = t6.x;
    //Instruction 65171
    //GE
    tb6 = t0.x>=(-t0.x);
    //Instruction 65172
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65173
    //MOVC
    t0.x = (tb6) ? t0.x : (-t0.x);
    //Instruction 65174
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 65175
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65176
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65177
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65178
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65179
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 65180
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 65072
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65073
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65074
    //LT
    tb12 = t10_1<0.0;
    //Instruction 65075
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 65076
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 65077
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 65078
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65079
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 65080
    //MAX
    t16_3 = max(t16_6.z, t16_6.y);
    //Instruction 65081
    //MAX
    t16_3 = max(t16_6.x, t16_3);
    //Instruction 65082
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 65083
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 65084
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 65085
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65086
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 65087
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65088
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 65089
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 65090
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65091
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65092
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
bool tb6;
highp float t8;
highp uint tu8;
highp vec2 t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 63289
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63290
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63291
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63292
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63293
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63294
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63295
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63296
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63297
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63298
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63299
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63300
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63301
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 63302
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63303
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 63304
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63305
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63306
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 63307
    //FTOU
    tu8 = uint(t8);
    //Instruction 63308
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 63309
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63310
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63311
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 63312
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63313
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63314
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 63315
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63316
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 63317
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 63318
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 63319
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 63320
    //LOG
    t12.x = log2(t6.x);
    //Instruction 63321
    //MUL
    t12.x = t12.x * _ST_WindGlobal.w;
    //Instruction 63322
    //EXP
    t12.x = exp2(t12.x);
    //Instruction 63323
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 63324
    //MOVC
    t6.x = (tb19) ? t12.x : t6.x;
    //Instruction 63325
    //MUL
    t6.x = t6.x * t18;
    //Instruction 63326
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 63327
    //MOV
    t4.y = t3.w;
    //Instruction 63328
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 63329
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 63330
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 63331
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 63332
    //SQRT
    t19 = sqrt(t19);
    //Instruction 63333
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 63334
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63335
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 63336
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 63337
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 63338
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 63339
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 63340
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 63341
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63342
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63343
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63344
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63345
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63346
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63347
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63348
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 63349
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63350
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63351
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63352
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 63353
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 63354
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 63355
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 63356
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 63357
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 63358
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 63359
    //MAD
    t6.xyz = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 63360
    //ADD
    vs_TEXCOORD1.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 63361
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63362
    //ADD
    t6.x = t1.y + t1.x;
    //Instruction 63363
    //ADD
    t6.x = t1.z + t6.x;
    //Instruction 63364
    //FRC
    t6.x = fract(t6.x);
    //Instruction 63365
    //MUL
    t6.x = t6.x * _HueVariation.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 63366
    //MOV
    vs_TEXCOORD3.z = t6.x;
    //Instruction 63367
    //GE
    tb6 = t0.x>=(-t0.x);
    //Instruction 63368
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63369
    //MOVC
    t0.x = (tb6) ? t0.x : (-t0.x);
    //Instruction 63370
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 63371
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63372
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63373
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63374
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63375
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 63376
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 63250
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63251
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63252
    //LT
    tb15 = t10_1<0.0;
    //Instruction 63253
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 63254
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 63255
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 63256
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63257
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 63258
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 63259
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 63260
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 63261
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 63262
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 63263
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63264
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 63265
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 63266
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 63267
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 63268
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 63269
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 63270
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 63271
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 63272
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 63273
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 63274
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 63275
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 63276
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 63277
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 63278
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63279
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63280
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 63281
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 63282
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 63283
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 63284
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 63285
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 63286
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63287
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63288
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
bool tb6;
highp float t8;
highp uint tu8;
highp vec2 t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 62947
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 62948
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62949
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62950
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 62951
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 62952
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62953
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62954
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62955
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62956
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62957
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62958
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62959
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 62960
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62961
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 62962
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62963
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62964
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 62965
    //FTOU
    tu8 = uint(t8);
    //Instruction 62966
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 62967
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 62968
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62969
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 62970
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 62971
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 62972
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 62973
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 62974
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 62975
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 62976
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 62977
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 62978
    //LOG
    t12.x = log2(t6.x);
    //Instruction 62979
    //MUL
    t12.x = t12.x * _ST_WindGlobal.w;
    //Instruction 62980
    //EXP
    t12.x = exp2(t12.x);
    //Instruction 62981
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 62982
    //MOVC
    t6.x = (tb19) ? t12.x : t6.x;
    //Instruction 62983
    //MUL
    t6.x = t6.x * t18;
    //Instruction 62984
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 62985
    //MOV
    t4.y = t3.w;
    //Instruction 62986
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 62987
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 62988
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 62989
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 62990
    //SQRT
    t19 = sqrt(t19);
    //Instruction 62991
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 62992
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 62993
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 62994
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 62995
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 62996
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 62997
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 62998
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 62999
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63000
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63001
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63002
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63003
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63004
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63005
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63006
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 63007
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63008
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63009
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63010
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 63011
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 63012
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 63013
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 63014
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 63015
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 63016
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 63017
    //MAD
    t6.xyz = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 63018
    //ADD
    vs_TEXCOORD1.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 63019
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63020
    //ADD
    t6.x = t1.y + t1.x;
    //Instruction 63021
    //ADD
    t6.x = t1.z + t6.x;
    //Instruction 63022
    //FRC
    t6.x = fract(t6.x);
    //Instruction 63023
    //MUL
    t6.x = t6.x * _HueVariation.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 63024
    //MOV
    vs_TEXCOORD3.z = t6.x;
    //Instruction 63025
    //GE
    tb6 = t0.x>=(-t0.x);
    //Instruction 63026
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63027
    //MOVC
    t0.x = (tb6) ? t0.x : (-t0.x);
    //Instruction 63028
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 63029
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63030
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63031
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63032
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63033
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 63034
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 62913
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62914
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62915
    //LT
    tb12 = t10_1<0.0;
    //Instruction 62916
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 62917
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 62918
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 62919
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62920
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 62921
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 62922
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 62923
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 62924
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 62925
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 62926
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62927
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 62928
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 62929
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 62930
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 62931
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 62932
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 62933
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 62934
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 62935
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 62936
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 62937
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 62938
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 62939
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 62940
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 62941
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 62942
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 62943
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 62944
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 62945
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62946
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
bool tb6;
highp float t8;
highp uint tu8;
highp vec2 t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 65208
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65209
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65210
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65211
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65212
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65213
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65214
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65215
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65216
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65217
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65218
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65219
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65220
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 65221
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65222
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 65223
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65224
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65225
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 65226
    //FTOU
    tu8 = uint(t8);
    //Instruction 65227
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 65228
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65229
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65230
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 65231
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65232
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65233
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 65234
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65235
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 65236
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 65237
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 65238
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 65239
    //LOG
    t12.x = log2(t6.x);
    //Instruction 65240
    //MUL
    t12.x = t12.x * _ST_WindGlobal.w;
    //Instruction 65241
    //EXP
    t12.x = exp2(t12.x);
    //Instruction 65242
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 65243
    //MOVC
    t6.x = (tb19) ? t12.x : t6.x;
    //Instruction 65244
    //MUL
    t6.x = t6.x * t18;
    //Instruction 65245
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 65246
    //MOV
    t4.y = t3.w;
    //Instruction 65247
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 65248
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65249
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 65250
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 65251
    //SQRT
    t19 = sqrt(t19);
    //Instruction 65252
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 65253
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65254
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 65255
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 65256
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 65257
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 65258
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 65259
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 65260
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65261
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65262
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65263
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65264
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65265
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65266
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65267
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65268
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65269
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65270
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65271
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65272
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 65273
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 65274
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 65275
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 65276
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 65277
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 65278
    //MAD
    t6.xyz = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 65279
    //ADD
    vs_TEXCOORD1.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 65280
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65281
    //ADD
    t6.x = t1.y + t1.x;
    //Instruction 65282
    //ADD
    t6.x = t1.z + t6.x;
    //Instruction 65283
    //FRC
    t6.x = fract(t6.x);
    //Instruction 65284
    //MUL
    t6.x = t6.x * _HueVariation.w;
    t6.x = clamp(t6.x, 0.0, 1.0);
    //Instruction 65285
    //MOV
    vs_TEXCOORD3.z = t6.x;
    //Instruction 65286
    //GE
    tb6 = t0.x>=(-t0.x);
    //Instruction 65287
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65288
    //MOVC
    t0.x = (tb6) ? t0.x : (-t0.x);
    //Instruction 65289
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 65290
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65291
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65292
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65293
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65294
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 65295
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 65181
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65182
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65183
    //LT
    tb12 = t10_1<0.0;
    //Instruction 65184
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 65185
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 65186
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 65187
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65188
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 65189
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 65190
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 65191
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 65192
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 65193
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 65194
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65195
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 65196
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 65197
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 65198
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 65199
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 65200
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 65201
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 65202
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65203
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 65204
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 65205
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65206
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65207
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_3 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_36;
  tmpvar_36 = -(tmpvar_35);
  worldBinormal_2 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_3.x;
  tmpvar_37.y = worldBinormal_2.x;
  tmpvar_37.z = worldNormal_4.x;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.y;
  tmpvar_38.y = worldBinormal_2.y;
  tmpvar_38.z = worldNormal_4.y;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.z;
  tmpvar_39.y = worldBinormal_2.z;
  tmpvar_39.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 63405
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63406
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 63407
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63408
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63409
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63410
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63411
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63412
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63413
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63414
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63415
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63416
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63417
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63418
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63419
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 63420
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63421
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63422
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 63423
    //FTOU
    tu21 = uint(t21);
    //Instruction 63424
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 63425
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 63426
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63427
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 63428
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 63429
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 63430
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 63431
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 63432
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 63433
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 63434
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63435
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63436
    //LOG
    t1.x = log2(t7);
    //Instruction 63437
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63438
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63439
    //NE
    tb8 = t7!=0.0;
    //Instruction 63440
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 63441
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 63442
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63443
    //MOV
    t1.y = t2.w;
    //Instruction 63444
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63445
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63446
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63447
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63448
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63449
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63450
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63451
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63452
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63453
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63454
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63455
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63456
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63457
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63458
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63459
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63460
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63461
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63462
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63463
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63464
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63465
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63466
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63467
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63468
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63469
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63470
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63471
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63472
    //MOV
    t4.z = t2.y;
    //Instruction 63473
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63474
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 63475
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 63476
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 63477
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63478
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 63479
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 63480
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 63481
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 63482
    //MOV
    t4.x = t5.z;
    //Instruction 63483
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 63484
    //MOV
    t5.z = t2.x;
    //Instruction 63485
    //MOV
    t2.x = t5.y;
    //Instruction 63486
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 63487
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 63488
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 63489
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 63490
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63491
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63492
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63493
    //ADD
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63494
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63495
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 63496
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 63497
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 63498
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 63499
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63500
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63501
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63502
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63503
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63504
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 63505
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_20;
void main()
{
    //Instruction 63377
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63378
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63379
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63380
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 63381
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63382
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 63383
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 63384
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 63385
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 63386
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 63387
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 63388
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 63389
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63390
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63391
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 63392
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 63393
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 63394
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63395
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63396
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63397
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63398
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63399
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 63400
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 63401
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 63402
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63403
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63404
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_3 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_36;
  tmpvar_36 = -(tmpvar_35);
  worldBinormal_2 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_3.x;
  tmpvar_37.y = worldBinormal_2.x;
  tmpvar_37.z = worldNormal_4.x;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.y;
  tmpvar_38.y = worldBinormal_2.y;
  tmpvar_38.z = worldNormal_4.y;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.z;
  tmpvar_39.y = worldBinormal_2.z;
  tmpvar_39.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 63052
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63053
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 63054
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63055
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63056
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63057
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63058
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63059
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63060
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63061
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63062
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63063
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63064
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63065
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63066
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 63067
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63068
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63069
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 63070
    //FTOU
    tu21 = uint(t21);
    //Instruction 63071
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 63072
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 63073
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63074
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 63075
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 63076
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 63077
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 63078
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 63079
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 63080
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 63081
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63082
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63083
    //LOG
    t1.x = log2(t7);
    //Instruction 63084
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63085
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63086
    //NE
    tb8 = t7!=0.0;
    //Instruction 63087
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 63088
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 63089
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63090
    //MOV
    t1.y = t2.w;
    //Instruction 63091
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63092
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63093
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63094
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63095
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63096
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63097
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63098
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63099
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63100
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63101
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63102
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63103
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63104
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63105
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63106
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63107
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63108
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63109
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63110
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63111
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63112
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63113
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63114
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63115
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63116
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63117
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63118
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63119
    //MOV
    t4.z = t2.y;
    //Instruction 63120
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63121
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 63122
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 63123
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 63124
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63125
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 63126
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 63127
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 63128
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 63129
    //MOV
    t4.x = t5.z;
    //Instruction 63130
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 63131
    //MOV
    t5.z = t2.x;
    //Instruction 63132
    //MOV
    t2.x = t5.y;
    //Instruction 63133
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 63134
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 63135
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 63136
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 63137
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63138
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63139
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63140
    //ADD
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63141
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63142
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 63143
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 63144
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 63145
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 63146
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63147
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63148
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63149
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63150
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63151
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 63152
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_14;
void main()
{
    //Instruction 63035
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63036
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63037
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63038
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 63039
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 63040
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63041
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63042
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63043
    //DP3
    t10_3.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63044
    //DP3
    t10_3.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63045
    //DP3
    t10_3.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63046
    //DP3
    t16_14 = dot(t10_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63047
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 63048
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 63049
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63050
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63051
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_3 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_36;
  tmpvar_36 = -(tmpvar_35);
  worldBinormal_2 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_3.x;
  tmpvar_37.y = worldBinormal_2.x;
  tmpvar_37.z = worldNormal_4.x;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.y;
  tmpvar_38.y = worldBinormal_2.y;
  tmpvar_38.z = worldNormal_4.y;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.z;
  tmpvar_39.y = worldBinormal_2.z;
  tmpvar_39.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_6.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_5 = tmpvar_23;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 65331
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 65332
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 65333
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65334
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 65335
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 65336
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65337
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 65338
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65339
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 65340
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65341
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 65342
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 65343
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 65344
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65345
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 65346
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65347
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65348
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 65349
    //FTOU
    tu21 = uint(t21);
    //Instruction 65350
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 65351
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 65352
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65353
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 65354
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 65355
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 65356
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 65357
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 65358
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 65359
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 65360
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65361
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65362
    //LOG
    t1.x = log2(t7);
    //Instruction 65363
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 65364
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 65365
    //NE
    tb8 = t7!=0.0;
    //Instruction 65366
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 65367
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 65368
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 65369
    //MOV
    t1.y = t2.w;
    //Instruction 65370
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 65371
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65372
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65373
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 65374
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 65375
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65376
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 65377
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 65378
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 65379
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 65380
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 65381
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 65382
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 65383
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 65384
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65385
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65386
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65387
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65388
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65389
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65390
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65391
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65392
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65393
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65394
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65395
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 65396
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65397
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 65398
    //MOV
    t4.z = t2.y;
    //Instruction 65399
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65400
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 65401
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 65402
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 65403
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65404
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 65405
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 65406
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 65407
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 65408
    //MOV
    t4.x = t5.z;
    //Instruction 65409
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 65410
    //MOV
    t5.z = t2.x;
    //Instruction 65411
    //MOV
    t2.x = t5.y;
    //Instruction 65412
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 65413
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 65414
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 65415
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 65416
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 65417
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 65418
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 65419
    //ADD
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 65420
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65421
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 65422
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 65423
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 65424
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 65425
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65426
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65427
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65428
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65429
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 65430
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 65431
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
bool tb11;
mediump float t16_18;
lowp float t10_18;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 65296
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65297
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65298
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65299
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 65300
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 65301
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 65302
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 65303
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 65304
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 65305
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 65306
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 65307
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 65308
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 65309
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 65310
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 65311
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 65312
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 65313
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 65314
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 65315
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 65316
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65317
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 65318
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 65319
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 65320
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65321
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65322
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 65323
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 65324
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 65325
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 65326
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 65327
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 65328
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65329
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65330
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_3 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_36;
  tmpvar_36 = -(tmpvar_35);
  worldBinormal_2 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_3.x;
  tmpvar_37.y = worldBinormal_2.x;
  tmpvar_37.z = worldNormal_4.x;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.y;
  tmpvar_38.y = worldBinormal_2.y;
  tmpvar_38.z = worldNormal_4.y;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.z;
  tmpvar_39.y = worldBinormal_2.z;
  tmpvar_39.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 63536
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63537
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 63538
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63539
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63540
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63541
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63542
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63543
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63544
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63545
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63546
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63547
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63548
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63549
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63550
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 63551
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63552
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63553
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 63554
    //FTOU
    tu21 = uint(t21);
    //Instruction 63555
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 63556
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 63557
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63558
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 63559
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 63560
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 63561
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 63562
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 63563
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 63564
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 63565
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63566
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63567
    //LOG
    t1.x = log2(t7);
    //Instruction 63568
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63569
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63570
    //NE
    tb8 = t7!=0.0;
    //Instruction 63571
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 63572
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 63573
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63574
    //MOV
    t1.y = t2.w;
    //Instruction 63575
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63576
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63577
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63578
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63579
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63580
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63581
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63582
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63583
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63584
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63585
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63586
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63587
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63588
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63589
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63590
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63591
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63592
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63593
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63594
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63595
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63596
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63597
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63598
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63599
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63600
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63601
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63602
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63603
    //MOV
    t4.z = t2.y;
    //Instruction 63604
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63605
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 63606
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 63607
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 63608
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63609
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 63610
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 63611
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 63612
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 63613
    //MOV
    t4.x = t5.z;
    //Instruction 63614
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 63615
    //MOV
    t5.z = t2.x;
    //Instruction 63616
    //MOV
    t2.x = t5.y;
    //Instruction 63617
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 63618
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 63619
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 63620
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 63621
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63622
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63623
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63624
    //ADD
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63625
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63626
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 63627
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 63628
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 63629
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 63630
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63631
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63632
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63633
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63634
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63635
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 63636
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_20;
void main()
{
    //Instruction 63506
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63507
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63508
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63509
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 63510
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63511
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 63512
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 63513
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 63514
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 63515
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 63516
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 63517
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 63518
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 63519
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 63520
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63521
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63522
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 63523
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 63524
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 63525
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63526
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63527
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63528
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63529
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63530
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 63531
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 63532
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 63533
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63534
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63535
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_32;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = _Object2World[0].xyz;
  tmpvar_33[1] = _Object2World[1].xyz;
  tmpvar_33[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize((tmpvar_33 * _BillboardTangent));
  worldTangent_3 = tmpvar_34;
  lowp vec3 tmpvar_35;
  tmpvar_35 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_36;
  tmpvar_36 = -(tmpvar_35);
  worldBinormal_2 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37.x = worldTangent_3.x;
  tmpvar_37.y = worldBinormal_2.x;
  tmpvar_37.z = worldNormal_4.x;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.y;
  tmpvar_38.y = worldBinormal_2.y;
  tmpvar_38.z = worldNormal_4.y;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.z;
  tmpvar_39.y = worldBinormal_2.z;
  tmpvar_39.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_37;
  xlv_TEXCOORD1 = tmpvar_38;
  xlv_TEXCOORD2 = tmpvar_39;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec2 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 63176
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63177
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 63178
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63179
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63180
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63181
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63182
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63183
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63184
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63185
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63186
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63187
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63188
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63189
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63190
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 63191
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63192
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63193
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 63194
    //FTOU
    tu21 = uint(t21);
    //Instruction 63195
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 63196
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 63197
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63198
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 63199
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 63200
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 63201
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 63202
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 63203
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 63204
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 63205
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63206
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63207
    //LOG
    t1.x = log2(t7);
    //Instruction 63208
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63209
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63210
    //NE
    tb8 = t7!=0.0;
    //Instruction 63211
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 63212
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 63213
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63214
    //MOV
    t1.y = t2.w;
    //Instruction 63215
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63216
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63217
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63218
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63219
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63220
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63221
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63222
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63223
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63224
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63225
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63226
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63227
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63228
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63229
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63230
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63231
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63232
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63233
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63234
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63235
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63236
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63237
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63238
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63239
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 63240
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 63241
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63242
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 63243
    //MOV
    t4.z = t2.y;
    //Instruction 63244
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63245
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 63246
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 63247
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 63248
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63249
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 63250
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 63251
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 63252
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 63253
    //MOV
    t4.x = t5.z;
    //Instruction 63254
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 63255
    //MOV
    t5.z = t2.x;
    //Instruction 63256
    //MOV
    t2.x = t5.y;
    //Instruction 63257
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 63258
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 63259
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 63260
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 63261
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63262
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63263
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 63264
    //ADD
    vs_TEXCOORD3.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 63265
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63266
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 63267
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 63268
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 63269
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 63270
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63271
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63272
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63273
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63274
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63275
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 63276
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_17;
void main()
{
    //Instruction 63153
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63154
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63155
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63156
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 63157
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63158
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 63159
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 63160
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 63161
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 63162
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 63163
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 63164
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63165
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63166
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63167
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63168
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63169
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63170
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63171
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 63172
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 63173
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63174
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63175
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  lowp vec3 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 65469
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65470
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65471
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65472
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65473
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65474
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65475
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65476
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65477
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65478
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65479
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65480
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65481
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 65482
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65483
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 65484
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65485
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65486
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 65487
    //FTOU
    tu9 = uint(t9);
    //Instruction 65488
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 65489
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65490
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65491
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 65492
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65493
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65494
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 65495
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65496
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 65497
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 65498
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 65499
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 65500
    //LOG
    t14.x = log2(t7.x);
    //Instruction 65501
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 65502
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 65503
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 65504
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 65505
    //MUL
    t7.x = t7.x * t21;
    //Instruction 65506
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 65507
    //MOV
    t4.y = t3.w;
    //Instruction 65508
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 65509
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 65510
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 65511
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 65512
    //SQRT
    t22 = sqrt(t22);
    //Instruction 65513
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 65514
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65515
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 65516
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 65517
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 65518
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 65519
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 65520
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 65521
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65522
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65523
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65524
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65525
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65526
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65527
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65528
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65529
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65530
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65531
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65532
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65533
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 65534
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65535
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 65536
    //MOV
    t3.z = t2.z;
    //Instruction 65537
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65538
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 65539
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 65540
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 65541
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65542
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 65543
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 65544
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 65545
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 65546
    //MOV
    t3.x = t4.z;
    //Instruction 65547
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65548
    //MOV
    t4.z = t2.x;
    //Instruction 65549
    //MOV
    t2.x = t4.y;
    //Instruction 65550
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 65551
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 65552
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 65553
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 65554
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 65555
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 65556
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 65557
    //ADD
    vs_TEXCOORD3.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 65558
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65559
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 65560
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 65561
    //FRC
    t7.x = fract(t7.x);
    //Instruction 65562
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 65563
    //MOV
    vs_TEXCOORD5.z = t7.x;
    //Instruction 65564
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 65565
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65566
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 65567
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 65568
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65569
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65570
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65571
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65572
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 65573
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 65432
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65433
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65434
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 65435
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 65436
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 65437
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 65438
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65439
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 65440
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 65441
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 65442
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 65443
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 65444
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 65445
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65446
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 65447
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 65448
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 65449
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 65450
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 65451
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 65452
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 65453
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 65454
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65455
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 65456
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 65457
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 65458
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65459
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65460
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 65461
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 65462
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 65463
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 65464
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 65465
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 65466
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65467
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65468
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  lowp vec3 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 63663
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63664
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63665
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63666
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63667
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63668
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63669
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63670
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63671
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63672
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63673
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63674
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63675
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 63676
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63677
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 63678
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63679
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63680
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 63681
    //FTOU
    tu9 = uint(t9);
    //Instruction 63682
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 63683
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63684
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63685
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 63686
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63687
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63688
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 63689
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63690
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 63691
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 63692
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 63693
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 63694
    //LOG
    t14.x = log2(t7.x);
    //Instruction 63695
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 63696
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 63697
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 63698
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 63699
    //MUL
    t7.x = t7.x * t21;
    //Instruction 63700
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 63701
    //MOV
    t4.y = t3.w;
    //Instruction 63702
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 63703
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 63704
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 63705
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 63706
    //SQRT
    t22 = sqrt(t22);
    //Instruction 63707
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 63708
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63709
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 63710
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 63711
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 63712
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 63713
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 63714
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 63715
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63716
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63717
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63718
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63719
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63720
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63721
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63722
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 63723
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63724
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63725
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63726
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 63727
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 63728
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63729
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 63730
    //MOV
    t3.z = t2.z;
    //Instruction 63731
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63732
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63733
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63734
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 63735
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63736
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 63737
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 63738
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 63739
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 63740
    //MOV
    t3.x = t4.z;
    //Instruction 63741
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63742
    //MOV
    t4.z = t2.x;
    //Instruction 63743
    //MOV
    t2.x = t4.y;
    //Instruction 63744
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 63745
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 63746
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 63747
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 63748
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 63749
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 63750
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 63751
    //ADD
    vs_TEXCOORD3.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 63752
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63753
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 63754
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 63755
    //FRC
    t7.x = fract(t7.x);
    //Instruction 63756
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 63757
    //MOV
    vs_TEXCOORD5.z = t7.x;
    //Instruction 63758
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 63759
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63760
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 63761
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 63762
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63763
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63764
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63765
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63766
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63767
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 63637
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63638
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63639
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 63640
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 63641
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 63642
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 63643
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63644
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 63645
    //MAX
    t16_3 = max(t16_7.z, t16_7.y);
    //Instruction 63646
    //MAX
    t16_3 = max(t16_7.x, t16_3);
    //Instruction 63647
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 63648
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 63649
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 63650
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63651
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 63652
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63653
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63654
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63655
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63656
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63657
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63658
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 63659
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 63660
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63661
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63662
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  lowp vec3 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 63321
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63322
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63323
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63324
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63325
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63326
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63327
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63328
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63329
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63330
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63331
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63332
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63333
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 63334
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63335
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 63336
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63337
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63338
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 63339
    //FTOU
    tu9 = uint(t9);
    //Instruction 63340
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 63341
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63342
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63343
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 63344
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63345
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63346
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 63347
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63348
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 63349
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 63350
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 63351
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 63352
    //LOG
    t14.x = log2(t7.x);
    //Instruction 63353
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 63354
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 63355
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 63356
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 63357
    //MUL
    t7.x = t7.x * t21;
    //Instruction 63358
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 63359
    //MOV
    t4.y = t3.w;
    //Instruction 63360
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 63361
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 63362
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 63363
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 63364
    //SQRT
    t22 = sqrt(t22);
    //Instruction 63365
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 63366
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63367
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 63368
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 63369
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 63370
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 63371
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 63372
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 63373
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63374
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63375
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63376
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63377
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63378
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63379
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63380
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 63381
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63382
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63383
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63384
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 63385
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 63386
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63387
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 63388
    //MOV
    t3.z = t2.z;
    //Instruction 63389
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63390
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63391
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63392
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 63393
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63394
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 63395
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 63396
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 63397
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 63398
    //MOV
    t3.x = t4.z;
    //Instruction 63399
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63400
    //MOV
    t4.z = t2.x;
    //Instruction 63401
    //MOV
    t2.x = t4.y;
    //Instruction 63402
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 63403
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 63404
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 63405
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 63406
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 63407
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 63408
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 63409
    //ADD
    vs_TEXCOORD3.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 63410
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63411
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 63412
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 63413
    //FRC
    t7.x = fract(t7.x);
    //Instruction 63414
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 63415
    //MOV
    vs_TEXCOORD5.z = t7.x;
    //Instruction 63416
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 63417
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63418
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 63419
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 63420
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63421
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63422
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63423
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63424
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63425
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 63277
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63278
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63279
    //LT
    tb21 = t10_1.x<0.0;
    //Instruction 63280
    //DISCARD
    if((int(tb21))!=0){discard;}
    //Instruction 63281
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 63282
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 63283
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63284
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 63285
    //MAX
    t16_3.x = max(t16_9.z, t16_9.y);
    //Instruction 63286
    //MAX
    t16_3.x = max(t16_9.x, t16_3.x);
    //Instruction 63287
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 63288
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 63289
    //MUL
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 63290
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63291
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 63292
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 63293
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 63294
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 63295
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 63296
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 63297
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 63298
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 63299
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 63300
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 63301
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 63302
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 63303
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 63304
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 63305
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63306
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63307
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 63308
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 63309
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 63310
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63311
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63312
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63313
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63314
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63315
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 63316
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 63317
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 63318
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63319
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63320
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  lowp vec3 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 65613
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65614
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65615
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65616
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65617
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65618
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65619
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65620
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65621
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65622
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65623
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65624
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65625
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 65626
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65627
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 65628
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65629
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65630
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 65631
    //FTOU
    tu9 = uint(t9);
    //Instruction 65632
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 65633
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65634
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65635
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 65636
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65637
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65638
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 65639
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65640
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 65641
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 65642
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 65643
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 65644
    //LOG
    t14.x = log2(t7.x);
    //Instruction 65645
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 65646
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 65647
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 65648
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 65649
    //MUL
    t7.x = t7.x * t21;
    //Instruction 65650
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 65651
    //MOV
    t4.y = t3.w;
    //Instruction 65652
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 65653
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 65654
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 65655
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 65656
    //SQRT
    t22 = sqrt(t22);
    //Instruction 65657
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 65658
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65659
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 65660
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 65661
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 65662
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 65663
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 65664
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 65665
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65666
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65667
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65668
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65669
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65670
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65671
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65672
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65673
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65674
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65675
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65676
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65677
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 65678
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65679
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 65680
    //MOV
    t3.z = t2.z;
    //Instruction 65681
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65682
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 65683
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 65684
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 65685
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65686
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 65687
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 65688
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 65689
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 65690
    //MOV
    t3.x = t4.z;
    //Instruction 65691
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65692
    //MOV
    t4.z = t2.x;
    //Instruction 65693
    //MOV
    t2.x = t4.y;
    //Instruction 65694
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 65695
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 65696
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 65697
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 65698
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 65699
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 65700
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 65701
    //ADD
    vs_TEXCOORD3.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 65702
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65703
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 65704
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 65705
    //FRC
    t7.x = fract(t7.x);
    //Instruction 65706
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 65707
    //MOV
    vs_TEXCOORD5.z = t7.x;
    //Instruction 65708
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 65709
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65710
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 65711
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 65712
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65713
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65714
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65715
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65716
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 65717
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 65574
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65575
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65576
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 65577
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 65578
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 65579
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 65580
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65581
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 65582
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 65583
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 65584
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 65585
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 65586
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 65587
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65588
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 65589
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 65590
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 65591
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 65592
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 65593
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 65594
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 65595
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 65596
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 65597
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 65598
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65599
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 65600
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 65601
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 65602
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65603
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65604
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 65605
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 65606
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 65607
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 65608
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 65609
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 65610
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65611
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65612
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_5 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_33;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = _Object2World[0].xyz;
  tmpvar_34[1] = _Object2World[1].xyz;
  tmpvar_34[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34 * _BillboardTangent));
  worldTangent_3 = tmpvar_35;
  lowp vec3 tmpvar_36;
  tmpvar_36 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_37;
  tmpvar_37 = -(tmpvar_36);
  worldBinormal_2 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38.x = worldTangent_3.x;
  tmpvar_38.y = worldBinormal_2.x;
  tmpvar_38.z = worldNormal_4.x;
  lowp vec3 tmpvar_39;
  tmpvar_39.x = worldTangent_3.y;
  tmpvar_39.y = worldBinormal_2.y;
  tmpvar_39.z = worldNormal_4.y;
  lowp vec3 tmpvar_40;
  tmpvar_40.x = worldTangent_3.z;
  tmpvar_40.y = worldBinormal_2.z;
  tmpvar_40.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_38;
  xlv_TEXCOORD1 = tmpvar_39;
  xlv_TEXCOORD2 = tmpvar_40;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 63800
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63801
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63802
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63803
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63804
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63805
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63806
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63807
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63808
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63809
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63810
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63811
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63812
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 63813
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63814
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 63815
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63816
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63817
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 63818
    //FTOU
    tu9 = uint(t9);
    //Instruction 63819
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 63820
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63821
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63822
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 63823
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63824
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63825
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 63826
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63827
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 63828
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 63829
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 63830
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 63831
    //LOG
    t14.x = log2(t7.x);
    //Instruction 63832
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 63833
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 63834
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 63835
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 63836
    //MUL
    t7.x = t7.x * t21;
    //Instruction 63837
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 63838
    //MOV
    t4.y = t3.w;
    //Instruction 63839
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 63840
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 63841
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 63842
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 63843
    //SQRT
    t22 = sqrt(t22);
    //Instruction 63844
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 63845
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63846
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 63847
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 63848
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 63849
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 63850
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 63851
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 63852
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63853
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63854
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63855
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 63856
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63857
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63858
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 63859
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 63860
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63861
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63862
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 63863
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 63864
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 63865
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63866
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 63867
    //MOV
    t3.z = t2.z;
    //Instruction 63868
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63869
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63870
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63871
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 63872
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63873
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 63874
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 63875
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 63876
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 63877
    //MOV
    t3.x = t4.z;
    //Instruction 63878
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63879
    //MOV
    t4.z = t2.x;
    //Instruction 63880
    //MOV
    t2.x = t4.y;
    //Instruction 63881
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 63882
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 63883
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 63884
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 63885
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 63886
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 63887
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 63888
    //ADD
    vs_TEXCOORD3.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 63889
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63890
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 63891
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 63892
    //FRC
    t7.x = fract(t7.x);
    //Instruction 63893
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 63894
    //MOV
    vs_TEXCOORD5.z = t7.x;
    //Instruction 63895
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 63896
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63897
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 63898
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 63899
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63900
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63901
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63902
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63903
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 63904
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 63768
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63769
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63770
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 63771
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 63772
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 63773
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 63774
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63775
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 63776
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 63777
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 63778
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 63779
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 63780
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 63781
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63782
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 63783
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 63784
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 63785
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 63786
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 63787
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 63788
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63789
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63790
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63791
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63792
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63793
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63794
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63795
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 63796
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 63797
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63798
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63799
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 63449
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 63450
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 63451
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63452
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 63453
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63454
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 63455
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 63456
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 63457
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63458
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63459
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63460
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63461
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63462
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63463
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63464
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 63465
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63466
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 63467
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63468
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 63469
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 63470
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 63471
    //MUL
    t3.y = t0.y * t17;
    //Instruction 63472
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 63473
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63474
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63475
    //LOG
    t17 = log2(t7);
    //Instruction 63476
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 63477
    //EXP
    t17 = exp2(t17);
    //Instruction 63478
    //NE
    tb18 = t7!=0.0;
    //Instruction 63479
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 63480
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 63481
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 63482
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 63483
    //MUL
    t7 = t0.x * t7;
    //Instruction 63484
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 63485
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 63486
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 63487
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 63488
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 63489
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 63490
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 63491
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 63492
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 63493
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 63494
    //MOV
    t4.y = t3.y;
    //Instruction 63495
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 63496
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 63497
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 63498
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 63499
    //SQRT
    t16 = sqrt(t16);
    //Instruction 63500
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 63501
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 63502
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 63503
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 63504
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 63505
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 63506
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63507
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 63508
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 63509
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 63510
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 63511
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 63512
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 63513
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 63514
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 63515
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 63516
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 63517
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63518
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 63519
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 63520
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 63521
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 63522
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63523
    //MAX
    t1 = max(abs(t6.y), abs(t6.x));
    //Instruction 63524
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 63525
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 63526
    //MUL
    t1 = t1 * t16;
    //Instruction 63527
    //MUL
    t16 = t1 * t1;
    //Instruction 63528
    //MAD
    t2.x = t16 * 0.020835 + -0.085133;
    //Instruction 63529
    //MAD
    t2.x = t16 * t2.x + 0.180141;
    //Instruction 63530
    //MAD
    t2.x = t16 * t2.x + -0.330299;
    //Instruction 63531
    //MAD
    t16 = t16 * t2.x + 0.999866;
    //Instruction 63532
    //MUL
    t2.x = t16 * t1;
    //Instruction 63533
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 63534
    //LT
    tb7 = abs(t6.y)<abs(t6.x);
    //Instruction 63535
    //AND
    t2.x = tb7 ? t2.x : float(0.0);
    //Instruction 63536
    //MAD
    t1 = t1 * t16 + t2.x;
    //Instruction 63537
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 63538
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 63539
    //ADD
    t1 = t16 + t1;
    //Instruction 63540
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 63541
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 63542
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 63543
    //LT
    tb11 = t16<(-t16);
    //Instruction 63544
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 63545
    //MOVC
    t1 = (ti6 != 0) ? (-t1) : t1;
    //Instruction 63546
    //LT
    tb6 = t1<0.0;
    //Instruction 63547
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 63548
    //ADD
    t1 = t6.x + t1;
    //Instruction 63549
    //ADD
    t1 = t0.z + t1;
    //Instruction 63550
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 63551
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 63552
    //DIV
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    //Instruction 63553
    //GE
    tb6 = t1>=(-t1);
    //Instruction 63554
    //FRC
    t1 = fract(abs(t1));
    //Instruction 63555
    //MOVC
    t1 = (tb6) ? t1 : (-t1);
    //Instruction 63556
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 63557
    //FTOU
    tu1 = uint(t1);
    //Instruction 63558
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 63559
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63560
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63561
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    //Instruction 63562
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 63563
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 63426
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63427
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63428
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63429
    //LT
    tb0 = t10_1<0.0;
    //Instruction 63430
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63431
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 63432
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 63433
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 63434
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 63435
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 63436
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 63437
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 63438
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63439
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63440
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 63441
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 63442
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 63443
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 63444
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 63445
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 63446
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63447
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63448
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 65730
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 65731
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 65732
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65733
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 65734
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65735
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 65736
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 65737
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 65738
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65739
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65740
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65741
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65742
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65743
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65744
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65745
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 65746
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65747
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 65748
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65749
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 65750
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 65751
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 65752
    //MUL
    t3.y = t0.y * t17;
    //Instruction 65753
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 65754
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65755
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65756
    //LOG
    t17 = log2(t7);
    //Instruction 65757
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 65758
    //EXP
    t17 = exp2(t17);
    //Instruction 65759
    //NE
    tb18 = t7!=0.0;
    //Instruction 65760
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 65761
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 65762
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 65763
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 65764
    //MUL
    t7 = t0.x * t7;
    //Instruction 65765
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 65766
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 65767
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 65768
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 65769
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 65770
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 65771
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65772
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 65773
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 65774
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 65775
    //MOV
    t4.y = t3.y;
    //Instruction 65776
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 65777
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65778
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 65779
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 65780
    //SQRT
    t16 = sqrt(t16);
    //Instruction 65781
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 65782
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 65783
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 65784
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 65785
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 65786
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 65787
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65788
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 65789
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 65790
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 65791
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 65792
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 65793
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 65794
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 65795
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 65796
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 65797
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 65798
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65799
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 65800
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 65801
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 65802
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 65803
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65804
    //MAX
    t1 = max(abs(t6.y), abs(t6.x));
    //Instruction 65805
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 65806
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 65807
    //MUL
    t1 = t1 * t16;
    //Instruction 65808
    //MUL
    t16 = t1 * t1;
    //Instruction 65809
    //MAD
    t2.x = t16 * 0.020835 + -0.085133;
    //Instruction 65810
    //MAD
    t2.x = t16 * t2.x + 0.180141;
    //Instruction 65811
    //MAD
    t2.x = t16 * t2.x + -0.330299;
    //Instruction 65812
    //MAD
    t16 = t16 * t2.x + 0.999866;
    //Instruction 65813
    //MUL
    t2.x = t16 * t1;
    //Instruction 65814
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 65815
    //LT
    tb7 = abs(t6.y)<abs(t6.x);
    //Instruction 65816
    //AND
    t2.x = tb7 ? t2.x : float(0.0);
    //Instruction 65817
    //MAD
    t1 = t1 * t16 + t2.x;
    //Instruction 65818
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 65819
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 65820
    //ADD
    t1 = t16 + t1;
    //Instruction 65821
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 65822
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 65823
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 65824
    //LT
    tb11 = t16<(-t16);
    //Instruction 65825
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 65826
    //MOVC
    t1 = (ti6 != 0) ? (-t1) : t1;
    //Instruction 65827
    //LT
    tb6 = t1<0.0;
    //Instruction 65828
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 65829
    //ADD
    t1 = t6.x + t1;
    //Instruction 65830
    //ADD
    t1 = t0.z + t1;
    //Instruction 65831
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 65832
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 65833
    //DIV
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    //Instruction 65834
    //GE
    tb6 = t1>=(-t1);
    //Instruction 65835
    //FRC
    t1 = fract(abs(t1));
    //Instruction 65836
    //MOVC
    t1 = (tb6) ? t1 : (-t1);
    //Instruction 65837
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 65838
    //FTOU
    tu1 = uint(t1);
    //Instruction 65839
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 65840
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65841
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65842
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    //Instruction 65843
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65844
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 65718
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65719
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65720
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65721
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 65722
    //LT
    tb0 = t10_1<0.0;
    //Instruction 65723
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 65724
    //DP3
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65725
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 65726
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 65727
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65728
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65729
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 63935
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 63936
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 63937
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63938
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 63939
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63940
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 63941
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 63942
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 63943
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63944
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63945
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63946
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63947
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63948
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63949
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63950
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 63951
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63952
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 63953
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63954
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 63955
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 63956
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 63957
    //MUL
    t3.y = t0.y * t17;
    //Instruction 63958
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 63959
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63960
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63961
    //LOG
    t17 = log2(t7);
    //Instruction 63962
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 63963
    //EXP
    t17 = exp2(t17);
    //Instruction 63964
    //NE
    tb18 = t7!=0.0;
    //Instruction 63965
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 63966
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 63967
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 63968
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 63969
    //MUL
    t7 = t0.x * t7;
    //Instruction 63970
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 63971
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 63972
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 63973
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 63974
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 63975
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 63976
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 63977
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 63978
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 63979
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 63980
    //MOV
    t4.y = t3.y;
    //Instruction 63981
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 63982
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 63983
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 63984
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 63985
    //SQRT
    t16 = sqrt(t16);
    //Instruction 63986
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 63987
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 63988
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 63989
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 63990
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 63991
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 63992
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63993
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 63994
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 63995
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 63996
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 63997
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 63998
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 63999
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 64000
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64001
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64002
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 64003
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 64004
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64005
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64006
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64007
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64008
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64009
    //MAX
    t1 = max(abs(t6.y), abs(t6.x));
    //Instruction 64010
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64011
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 64012
    //MUL
    t1 = t1 * t16;
    //Instruction 64013
    //MUL
    t16 = t1 * t1;
    //Instruction 64014
    //MAD
    t2.x = t16 * 0.020835 + -0.085133;
    //Instruction 64015
    //MAD
    t2.x = t16 * t2.x + 0.180141;
    //Instruction 64016
    //MAD
    t2.x = t16 * t2.x + -0.330299;
    //Instruction 64017
    //MAD
    t16 = t16 * t2.x + 0.999866;
    //Instruction 64018
    //MUL
    t2.x = t16 * t1;
    //Instruction 64019
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 64020
    //LT
    tb7 = abs(t6.y)<abs(t6.x);
    //Instruction 64021
    //AND
    t2.x = tb7 ? t2.x : float(0.0);
    //Instruction 64022
    //MAD
    t1 = t1 * t16 + t2.x;
    //Instruction 64023
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 64024
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 64025
    //ADD
    t1 = t16 + t1;
    //Instruction 64026
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 64027
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 64028
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 64029
    //LT
    tb11 = t16<(-t16);
    //Instruction 64030
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 64031
    //MOVC
    t1 = (ti6 != 0) ? (-t1) : t1;
    //Instruction 64032
    //LT
    tb6 = t1<0.0;
    //Instruction 64033
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 64034
    //ADD
    t1 = t6.x + t1;
    //Instruction 64035
    //ADD
    t1 = t0.z + t1;
    //Instruction 64036
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 64037
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64038
    //DIV
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    //Instruction 64039
    //GE
    tb6 = t1>=(-t1);
    //Instruction 64040
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64041
    //MOVC
    t1 = (tb6) ? t1 : (-t1);
    //Instruction 64042
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 64043
    //FTOU
    tu1 = uint(t1);
    //Instruction 64044
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64045
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64046
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64047
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    //Instruction 64048
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 64049
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 63905
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63906
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63907
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63908
    //LT
    tb0 = t10_1<0.0;
    //Instruction 63909
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63910
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 63911
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 63912
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 63913
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 63914
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 63915
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 63916
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 63917
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 63918
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 63919
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 63920
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 63921
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 63922
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 63923
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 63924
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63925
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63926
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 63927
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 63928
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 63929
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 63930
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 63931
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 63932
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63933
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63934
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 63589
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 63590
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 63591
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63592
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 63593
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63594
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 63595
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 63596
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 63597
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63598
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63599
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63600
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63601
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63602
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63603
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63604
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 63605
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63606
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 63607
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63608
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 63609
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 63610
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 63611
    //MUL
    t3.y = t0.y * t17;
    //Instruction 63612
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 63613
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 63614
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 63615
    //LOG
    t17 = log2(t7);
    //Instruction 63616
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 63617
    //EXP
    t17 = exp2(t17);
    //Instruction 63618
    //NE
    tb18 = t7!=0.0;
    //Instruction 63619
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 63620
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 63621
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 63622
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 63623
    //MUL
    t7 = t0.x * t7;
    //Instruction 63624
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 63625
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 63626
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 63627
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 63628
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 63629
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 63630
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 63631
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 63632
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 63633
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 63634
    //MOV
    t4.y = t3.y;
    //Instruction 63635
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 63636
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 63637
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 63638
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 63639
    //SQRT
    t16 = sqrt(t16);
    //Instruction 63640
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 63641
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 63642
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 63643
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 63644
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 63645
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 63646
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63647
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 63648
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 63649
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 63650
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 63651
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 63652
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 63653
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 63654
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 63655
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 63656
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 63657
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63658
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 63659
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 63660
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 63661
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 63662
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63663
    //MAX
    t1 = max(abs(t6.y), abs(t6.x));
    //Instruction 63664
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 63665
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 63666
    //MUL
    t1 = t1 * t16;
    //Instruction 63667
    //MUL
    t16 = t1 * t1;
    //Instruction 63668
    //MAD
    t2.x = t16 * 0.020835 + -0.085133;
    //Instruction 63669
    //MAD
    t2.x = t16 * t2.x + 0.180141;
    //Instruction 63670
    //MAD
    t2.x = t16 * t2.x + -0.330299;
    //Instruction 63671
    //MAD
    t16 = t16 * t2.x + 0.999866;
    //Instruction 63672
    //MUL
    t2.x = t16 * t1;
    //Instruction 63673
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 63674
    //LT
    tb7 = abs(t6.y)<abs(t6.x);
    //Instruction 63675
    //AND
    t2.x = tb7 ? t2.x : float(0.0);
    //Instruction 63676
    //MAD
    t1 = t1 * t16 + t2.x;
    //Instruction 63677
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 63678
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 63679
    //ADD
    t1 = t16 + t1;
    //Instruction 63680
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 63681
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 63682
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 63683
    //LT
    tb11 = t16<(-t16);
    //Instruction 63684
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 63685
    //MOVC
    t1 = (ti6 != 0) ? (-t1) : t1;
    //Instruction 63686
    //LT
    tb6 = t1<0.0;
    //Instruction 63687
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 63688
    //ADD
    t1 = t6.x + t1;
    //Instruction 63689
    //ADD
    t1 = t0.z + t1;
    //Instruction 63690
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 63691
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 63692
    //DIV
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    //Instruction 63693
    //GE
    tb6 = t1>=(-t1);
    //Instruction 63694
    //FRC
    t1 = fract(abs(t1));
    //Instruction 63695
    //MOVC
    t1 = (tb6) ? t1 : (-t1);
    //Instruction 63696
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 63697
    //FTOU
    tu1 = uint(t1);
    //Instruction 63698
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 63699
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63700
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63701
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    //Instruction 63702
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 63703
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 63564
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63565
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63566
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63567
    //LT
    tb0 = t10_1<0.0;
    //Instruction 63568
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63569
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 63570
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 63571
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 63572
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 63573
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 63574
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 63575
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 63576
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 63577
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 63578
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63579
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63580
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 63581
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 63582
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 63583
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 63584
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 63585
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 63586
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63587
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63588
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_40;
  v_40.x = _World2Object[0].x;
  v_40.y = _World2Object[1].x;
  v_40.z = _World2Object[2].x;
  v_40.w = _World2Object[3].x;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((v_40.xyz * tmpvar_16.z) + (v_41.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_42;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb7;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 65863
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 65864
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 65865
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65866
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 65867
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65868
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 65869
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 65870
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 65871
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65872
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65873
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65874
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65875
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65876
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65877
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65878
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 65879
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65880
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 65881
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65882
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 65883
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 65884
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 65885
    //MUL
    t3.y = t0.y * t17;
    //Instruction 65886
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 65887
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65888
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65889
    //LOG
    t17 = log2(t7);
    //Instruction 65890
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 65891
    //EXP
    t17 = exp2(t17);
    //Instruction 65892
    //NE
    tb18 = t7!=0.0;
    //Instruction 65893
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 65894
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 65895
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 65896
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 65897
    //MUL
    t7 = t0.x * t7;
    //Instruction 65898
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 65899
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 65900
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 65901
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 65902
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 65903
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 65904
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65905
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 65906
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 65907
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 65908
    //MOV
    t4.y = t3.y;
    //Instruction 65909
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 65910
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65911
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 65912
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 65913
    //SQRT
    t16 = sqrt(t16);
    //Instruction 65914
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 65915
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 65916
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 65917
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 65918
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 65919
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 65920
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65921
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 65922
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 65923
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 65924
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 65925
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 65926
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 65927
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 65928
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 65929
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 65930
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 65931
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65932
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 65933
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 65934
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 65935
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 65936
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65937
    //MAX
    t1 = max(abs(t6.y), abs(t6.x));
    //Instruction 65938
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 65939
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 65940
    //MUL
    t1 = t1 * t16;
    //Instruction 65941
    //MUL
    t16 = t1 * t1;
    //Instruction 65942
    //MAD
    t2.x = t16 * 0.020835 + -0.085133;
    //Instruction 65943
    //MAD
    t2.x = t16 * t2.x + 0.180141;
    //Instruction 65944
    //MAD
    t2.x = t16 * t2.x + -0.330299;
    //Instruction 65945
    //MAD
    t16 = t16 * t2.x + 0.999866;
    //Instruction 65946
    //MUL
    t2.x = t16 * t1;
    //Instruction 65947
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 65948
    //LT
    tb7 = abs(t6.y)<abs(t6.x);
    //Instruction 65949
    //AND
    t2.x = tb7 ? t2.x : float(0.0);
    //Instruction 65950
    //MAD
    t1 = t1 * t16 + t2.x;
    //Instruction 65951
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 65952
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 65953
    //ADD
    t1 = t16 + t1;
    //Instruction 65954
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 65955
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 65956
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 65957
    //LT
    tb11 = t16<(-t16);
    //Instruction 65958
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 65959
    //MOVC
    t1 = (ti6 != 0) ? (-t1) : t1;
    //Instruction 65960
    //LT
    tb6 = t1<0.0;
    //Instruction 65961
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 65962
    //ADD
    t1 = t6.x + t1;
    //Instruction 65963
    //ADD
    t1 = t0.z + t1;
    //Instruction 65964
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 65965
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 65966
    //DIV
    t1 = t1 / _TreeInfo[int(tu12) + 0].x;
    //Instruction 65967
    //GE
    tb6 = t1>=(-t1);
    //Instruction 65968
    //FRC
    t1 = fract(abs(t1));
    //Instruction 65969
    //MOVC
    t1 = (tb6) ? t1 : (-t1);
    //Instruction 65970
    //MAD
    t1 = t1 * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 65971
    //FTOU
    tu1 = uint(t1);
    //Instruction 65972
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 65973
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65974
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65975
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t2.xy;
    //Instruction 65976
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65977
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 65845
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65846
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65847
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65848
    //LT
    tb0 = t10_1<0.0;
    //Instruction 65849
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 65850
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 65851
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 65852
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 65853
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 65854
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 65855
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 65856
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 65857
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65858
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 65859
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 65860
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 65861
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65862
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 64082
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64083
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64084
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 64085
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64086
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64087
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 64088
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 64089
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64090
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64091
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64092
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64093
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64094
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64095
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64096
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64097
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64098
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 64099
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64100
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 64101
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 64102
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 64103
    //MUL
    t3.y = t0.y * t20;
    //Instruction 64104
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 64105
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 64106
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 64107
    //LOG
    t20 = log2(t8);
    //Instruction 64108
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 64109
    //EXP
    t20 = exp2(t20);
    //Instruction 64110
    //NE
    tb21 = t8!=0.0;
    //Instruction 64111
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 64112
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 64113
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64114
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 64115
    //MUL
    t8 = t0.x * t8;
    //Instruction 64116
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64117
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 64118
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 64119
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 64120
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64121
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 64122
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64123
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 64124
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 64125
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 64126
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64127
    //MOV
    t5.y = t3.y;
    //Instruction 64128
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64129
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64130
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64131
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 64132
    //SQRT
    t21 = sqrt(t21);
    //Instruction 64133
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 64134
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64135
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64136
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64137
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64138
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64139
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64140
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 64141
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 64142
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 64143
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 64144
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 64145
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 64146
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 64147
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64148
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64149
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 64150
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 64151
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64152
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64153
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64154
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64155
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64156
    //ADD
    t1 = t7.y + t7.x;
    //Instruction 64157
    //ADD
    t1 = t7.z + t1;
    //Instruction 64158
    //FRC
    t1 = fract(t1);
    //Instruction 64159
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 64160
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 64161
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 64162
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64163
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64164
    //MUL
    t1 = t1 * t7.x;
    //Instruction 64165
    //MUL
    t7.x = t1 * t1;
    //Instruction 64166
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 64167
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 64168
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 64169
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 64170
    //MUL
    t13.x = t7.x * t1;
    //Instruction 64171
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 64172
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 64173
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 64174
    //MAD
    t1 = t1 * t7.x + t13.x;
    //Instruction 64175
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 64176
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 64177
    //ADD
    t1 = t7.x + t1;
    //Instruction 64178
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 64179
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 64180
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 64181
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 64182
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 64183
    //MOVC
    t1 = (ti7 != 0) ? (-t1) : t1;
    //Instruction 64184
    //LT
    tb7 = t1<0.0;
    //Instruction 64185
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 64186
    //ADD
    t1 = t7.x + t1;
    //Instruction 64187
    //ADD
    t1 = t0.z + t1;
    //Instruction 64188
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 64189
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64190
    //DIV
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    //Instruction 64191
    //GE
    tb7 = t1>=(-t1);
    //Instruction 64192
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64193
    //MOVC
    t1 = (tb7) ? t1 : (-t1);
    //Instruction 64194
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 64195
    //FTOU
    tu1 = uint(t1);
    //Instruction 64196
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64197
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64198
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64199
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    //Instruction 64200
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 64050
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64051
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64052
    //LT
    tb12 = t10_1<0.0;
    //Instruction 64053
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 64054
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 64055
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 64056
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64057
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 64058
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 64059
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 64060
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 64061
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 64062
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 64063
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64064
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 64065
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 64066
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 64067
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 64068
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 64069
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 64070
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 64071
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64072
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64073
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 64074
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 64075
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 64076
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 64077
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 64078
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 64079
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64080
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64081
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 64222
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64223
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64224
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 64225
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64226
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64227
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 64228
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 64229
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64230
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64231
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64232
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64233
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64234
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64235
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64236
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64237
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64238
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 64239
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64240
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 64241
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 64242
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 64243
    //MUL
    t3.y = t0.y * t20;
    //Instruction 64244
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 64245
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 64246
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 64247
    //LOG
    t20 = log2(t8);
    //Instruction 64248
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 64249
    //EXP
    t20 = exp2(t20);
    //Instruction 64250
    //NE
    tb21 = t8!=0.0;
    //Instruction 64251
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 64252
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 64253
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64254
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 64255
    //MUL
    t8 = t0.x * t8;
    //Instruction 64256
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64257
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 64258
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 64259
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 64260
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64261
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 64262
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64263
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 64264
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 64265
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 64266
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64267
    //MOV
    t5.y = t3.y;
    //Instruction 64268
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64269
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64270
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64271
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 64272
    //SQRT
    t21 = sqrt(t21);
    //Instruction 64273
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 64274
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64275
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64276
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64277
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64278
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64279
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64280
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 64281
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 64282
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 64283
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 64284
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 64285
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 64286
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 64287
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64288
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64289
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 64290
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 64291
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64292
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64293
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64294
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64295
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64296
    //ADD
    t1 = t7.y + t7.x;
    //Instruction 64297
    //ADD
    t1 = t7.z + t1;
    //Instruction 64298
    //FRC
    t1 = fract(t1);
    //Instruction 64299
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 64300
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 64301
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 64302
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64303
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64304
    //MUL
    t1 = t1 * t7.x;
    //Instruction 64305
    //MUL
    t7.x = t1 * t1;
    //Instruction 64306
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 64307
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 64308
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 64309
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 64310
    //MUL
    t13.x = t7.x * t1;
    //Instruction 64311
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 64312
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 64313
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 64314
    //MAD
    t1 = t1 * t7.x + t13.x;
    //Instruction 64315
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 64316
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 64317
    //ADD
    t1 = t7.x + t1;
    //Instruction 64318
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 64319
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 64320
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 64321
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 64322
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 64323
    //MOVC
    t1 = (ti7 != 0) ? (-t1) : t1;
    //Instruction 64324
    //LT
    tb7 = t1<0.0;
    //Instruction 64325
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 64326
    //ADD
    t1 = t7.x + t1;
    //Instruction 64327
    //ADD
    t1 = t0.z + t1;
    //Instruction 64328
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 64329
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64330
    //DIV
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    //Instruction 64331
    //GE
    tb7 = t1>=(-t1);
    //Instruction 64332
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64333
    //MOVC
    t1 = (tb7) ? t1 : (-t1);
    //Instruction 64334
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 64335
    //FTOU
    tu1 = uint(t1);
    //Instruction 64336
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64337
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64338
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64339
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    //Instruction 64340
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 64201
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64202
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64203
    //LT
    tb12 = t10_1<0.0;
    //Instruction 64204
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 64205
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 64206
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 64207
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64208
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 64209
    //MAX
    t16_3 = max(t16_6.z, t16_6.y);
    //Instruction 64210
    //MAX
    t16_3 = max(t16_6.x, t16_3);
    //Instruction 64211
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 64212
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 64213
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 64214
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64215
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 64216
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64217
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 64218
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 64219
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64220
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64221
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 66017
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66018
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66019
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 66020
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66021
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66022
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 66023
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 66024
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66025
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66026
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66027
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66028
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66029
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66030
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66031
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66032
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66033
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 66034
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66035
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 66036
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 66037
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 66038
    //MUL
    t3.y = t0.y * t20;
    //Instruction 66039
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 66040
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 66041
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 66042
    //LOG
    t20 = log2(t8);
    //Instruction 66043
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 66044
    //EXP
    t20 = exp2(t20);
    //Instruction 66045
    //NE
    tb21 = t8!=0.0;
    //Instruction 66046
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 66047
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 66048
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66049
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 66050
    //MUL
    t8 = t0.x * t8;
    //Instruction 66051
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66052
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 66053
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 66054
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 66055
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66056
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 66057
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66058
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 66059
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 66060
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 66061
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66062
    //MOV
    t5.y = t3.y;
    //Instruction 66063
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66064
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66065
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66066
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 66067
    //SQRT
    t21 = sqrt(t21);
    //Instruction 66068
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 66069
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66070
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66071
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66072
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66073
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66074
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66075
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 66076
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 66077
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 66078
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 66079
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 66080
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 66081
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66082
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66083
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66084
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 66085
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 66086
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66087
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66088
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66089
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 66090
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 66091
    //ADD
    t1 = t7.y + t7.x;
    //Instruction 66092
    //ADD
    t1 = t7.z + t1;
    //Instruction 66093
    //FRC
    t1 = fract(t1);
    //Instruction 66094
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 66095
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 66096
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 66097
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66098
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66099
    //MUL
    t1 = t1 * t7.x;
    //Instruction 66100
    //MUL
    t7.x = t1 * t1;
    //Instruction 66101
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 66102
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 66103
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 66104
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 66105
    //MUL
    t13.x = t7.x * t1;
    //Instruction 66106
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 66107
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 66108
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 66109
    //MAD
    t1 = t1 * t7.x + t13.x;
    //Instruction 66110
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 66111
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 66112
    //ADD
    t1 = t7.x + t1;
    //Instruction 66113
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 66114
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 66115
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 66116
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 66117
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 66118
    //MOVC
    t1 = (ti7 != 0) ? (-t1) : t1;
    //Instruction 66119
    //LT
    tb7 = t1<0.0;
    //Instruction 66120
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 66121
    //ADD
    t1 = t7.x + t1;
    //Instruction 66122
    //ADD
    t1 = t0.z + t1;
    //Instruction 66123
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 66124
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 66125
    //DIV
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    //Instruction 66126
    //GE
    tb7 = t1>=(-t1);
    //Instruction 66127
    //FRC
    t1 = fract(abs(t1));
    //Instruction 66128
    //MOVC
    t1 = (tb7) ? t1 : (-t1);
    //Instruction 66129
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 66130
    //FTOU
    tu1 = uint(t1);
    //Instruction 66131
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66132
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66133
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66134
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    //Instruction 66135
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 65978
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65979
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65980
    //LT
    tb15 = t10_1<0.0;
    //Instruction 65981
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 65982
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 65983
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 65984
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65985
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 65986
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 65987
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 65988
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 65989
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 65990
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 65991
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65992
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 65993
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 65994
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 65995
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 65996
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 65997
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 65998
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 65999
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 66000
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 66001
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 66002
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 66003
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 66004
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 66005
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 66006
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 66007
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66008
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 66009
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 66010
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 66011
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 66012
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 66013
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 66014
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 66015
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66016
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 63738
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 63739
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 63740
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 63741
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63742
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63743
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 63744
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 63745
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63746
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63747
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63748
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63749
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63750
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63751
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63752
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 63753
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63754
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 63755
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63756
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 63757
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 63758
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 63759
    //MUL
    t3.y = t0.y * t20;
    //Instruction 63760
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 63761
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 63762
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 63763
    //LOG
    t20 = log2(t8);
    //Instruction 63764
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 63765
    //EXP
    t20 = exp2(t20);
    //Instruction 63766
    //NE
    tb21 = t8!=0.0;
    //Instruction 63767
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 63768
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 63769
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 63770
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 63771
    //MUL
    t8 = t0.x * t8;
    //Instruction 63772
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 63773
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 63774
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 63775
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 63776
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 63777
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 63778
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 63779
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 63780
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 63781
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 63782
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 63783
    //MOV
    t5.y = t3.y;
    //Instruction 63784
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 63785
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 63786
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 63787
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 63788
    //SQRT
    t21 = sqrt(t21);
    //Instruction 63789
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 63790
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 63791
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 63792
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 63793
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 63794
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 63795
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63796
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 63797
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 63798
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 63799
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 63800
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 63801
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 63802
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 63803
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 63804
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 63805
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 63806
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63807
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 63808
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 63809
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 63810
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 63811
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63812
    //ADD
    t1 = t7.y + t7.x;
    //Instruction 63813
    //ADD
    t1 = t7.z + t1;
    //Instruction 63814
    //FRC
    t1 = fract(t1);
    //Instruction 63815
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 63816
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 63817
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 63818
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 63819
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 63820
    //MUL
    t1 = t1 * t7.x;
    //Instruction 63821
    //MUL
    t7.x = t1 * t1;
    //Instruction 63822
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 63823
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 63824
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 63825
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 63826
    //MUL
    t13.x = t7.x * t1;
    //Instruction 63827
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 63828
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 63829
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 63830
    //MAD
    t1 = t1 * t7.x + t13.x;
    //Instruction 63831
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 63832
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 63833
    //ADD
    t1 = t7.x + t1;
    //Instruction 63834
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 63835
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 63836
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 63837
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 63838
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 63839
    //MOVC
    t1 = (ti7 != 0) ? (-t1) : t1;
    //Instruction 63840
    //LT
    tb7 = t1<0.0;
    //Instruction 63841
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 63842
    //ADD
    t1 = t7.x + t1;
    //Instruction 63843
    //ADD
    t1 = t0.z + t1;
    //Instruction 63844
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 63845
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 63846
    //DIV
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    //Instruction 63847
    //GE
    tb7 = t1>=(-t1);
    //Instruction 63848
    //FRC
    t1 = fract(abs(t1));
    //Instruction 63849
    //MOVC
    t1 = (tb7) ? t1 : (-t1);
    //Instruction 63850
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 63851
    //FTOU
    tu1 = uint(t1);
    //Instruction 63852
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 63853
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63854
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63855
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    //Instruction 63856
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 63704
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63705
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63706
    //LT
    tb12 = t10_1<0.0;
    //Instruction 63707
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 63708
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 63709
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 63710
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63711
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 63712
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 63713
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 63714
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 63715
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 63716
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 63717
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63718
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 63719
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 63720
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 63721
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 63722
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 63723
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 63724
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 63725
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 63726
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 63727
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 63728
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 63729
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 63730
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 63731
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 63732
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 63733
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 63734
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 63735
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63736
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63737
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_16.z) + (v_42.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 64368
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64369
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64370
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 64371
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64372
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64373
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 64374
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 64375
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64376
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64377
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64378
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64379
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64380
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64381
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64382
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64383
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64384
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 64385
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64386
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 64387
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 64388
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 64389
    //MUL
    t3.y = t0.y * t20;
    //Instruction 64390
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 64391
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 64392
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 64393
    //LOG
    t20 = log2(t8);
    //Instruction 64394
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 64395
    //EXP
    t20 = exp2(t20);
    //Instruction 64396
    //NE
    tb21 = t8!=0.0;
    //Instruction 64397
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 64398
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 64399
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64400
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 64401
    //MUL
    t8 = t0.x * t8;
    //Instruction 64402
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64403
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 64404
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 64405
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 64406
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64407
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 64408
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64409
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 64410
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 64411
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 64412
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64413
    //MOV
    t5.y = t3.y;
    //Instruction 64414
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64415
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64416
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64417
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 64418
    //SQRT
    t21 = sqrt(t21);
    //Instruction 64419
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 64420
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64421
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64422
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64423
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64424
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64425
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64426
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 64427
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 64428
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 64429
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 64430
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 64431
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 64432
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 64433
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64434
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64435
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 64436
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 64437
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64438
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64439
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64440
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64441
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64442
    //ADD
    t1 = t7.y + t7.x;
    //Instruction 64443
    //ADD
    t1 = t7.z + t1;
    //Instruction 64444
    //FRC
    t1 = fract(t1);
    //Instruction 64445
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 64446
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 64447
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 64448
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64449
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64450
    //MUL
    t1 = t1 * t7.x;
    //Instruction 64451
    //MUL
    t7.x = t1 * t1;
    //Instruction 64452
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 64453
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 64454
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 64455
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 64456
    //MUL
    t13.x = t7.x * t1;
    //Instruction 64457
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 64458
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 64459
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 64460
    //MAD
    t1 = t1 * t7.x + t13.x;
    //Instruction 64461
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 64462
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 64463
    //ADD
    t1 = t7.x + t1;
    //Instruction 64464
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 64465
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 64466
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 64467
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 64468
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 64469
    //MOVC
    t1 = (ti7 != 0) ? (-t1) : t1;
    //Instruction 64470
    //LT
    tb7 = t1<0.0;
    //Instruction 64471
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 64472
    //ADD
    t1 = t7.x + t1;
    //Instruction 64473
    //ADD
    t1 = t0.z + t1;
    //Instruction 64474
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 64475
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64476
    //DIV
    t1 = t1 / _TreeInfo[int(tu14) + 0].x;
    //Instruction 64477
    //GE
    tb7 = t1>=(-t1);
    //Instruction 64478
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64479
    //MOVC
    t1 = (tb7) ? t1 : (-t1);
    //Instruction 64480
    //MAD
    t1 = t1 * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 64481
    //FTOU
    tu1 = uint(t1);
    //Instruction 64482
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64483
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64484
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64485
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t2.xy;
    //Instruction 64486
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 64341
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64342
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64343
    //LT
    tb12 = t10_1<0.0;
    //Instruction 64344
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 64345
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 64346
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 64347
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64348
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 64349
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 64350
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 64351
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 64352
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 64353
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 64354
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64355
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 64356
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 64357
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 64358
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 64359
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 64360
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 64361
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64362
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64363
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 64364
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 64365
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64366
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64367
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_3 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_47;
  tmpvar_47 = -(tmpvar_46);
  worldBinormal_2 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_3.x;
  tmpvar_48.y = worldBinormal_2.x;
  tmpvar_48.z = worldNormal_4.x;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.y;
  tmpvar_49.y = worldBinormal_2.y;
  tmpvar_49.z = worldNormal_4.y;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.z;
  tmpvar_50.y = worldBinormal_2.z;
  tmpvar_50.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 66164
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66165
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66166
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66167
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66168
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66169
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 66170
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 66171
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66172
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66173
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66174
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66175
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66176
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66177
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66178
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66179
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66180
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66181
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 66182
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66183
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 66184
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 66185
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 66186
    //MUL
    t3.y = t0.y * t23;
    //Instruction 66187
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 66188
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 66189
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 66190
    //LOG
    t23 = log2(t9);
    //Instruction 66191
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 66192
    //EXP
    t23 = exp2(t23);
    //Instruction 66193
    //NE
    tb24 = t9!=0.0;
    //Instruction 66194
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 66195
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 66196
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66197
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 66198
    //MUL
    t9 = t0.x * t9;
    //Instruction 66199
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 66200
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 66201
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 66202
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66203
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 66204
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66205
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 66206
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 66207
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 66208
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66209
    //MOV
    t4.y = t3.y;
    //Instruction 66210
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 66211
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66212
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 66213
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 66214
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66215
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 66216
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66217
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66218
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66219
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66220
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66221
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66222
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 66223
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 66224
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 66225
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 66226
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 66227
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 66228
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66229
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66230
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66231
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 66232
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 66233
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 66234
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 66235
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66236
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 66237
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 66238
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 66239
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 66240
    //MOV
    t6.z = t3.x;
    //Instruction 66241
    //MOV
    t6.x = t4.z;
    //Instruction 66242
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 66243
    //MOV
    t6.z = t3.y;
    //Instruction 66244
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 66245
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 66246
    //MOV
    t6.x = t4.x;
    //Instruction 66247
    //MOV
    t3.x = t4.y;
    //Instruction 66248
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66249
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 66250
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66251
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66252
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66253
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 66254
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66255
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 66256
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66257
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 66258
    //MUL
    t1 = t1 * t22;
    //Instruction 66259
    //MUL
    t22 = t1 * t1;
    //Instruction 66260
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 66261
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 66262
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 66263
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 66264
    //MUL
    t2.x = t22 * t1;
    //Instruction 66265
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 66266
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 66267
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 66268
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 66269
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 66270
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 66271
    //ADD
    t1 = t22 + t1;
    //Instruction 66272
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 66273
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 66274
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 66275
    //LT
    tb15 = t22<(-t22);
    //Instruction 66276
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 66277
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 66278
    //LT
    tb8 = t1<0.0;
    //Instruction 66279
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 66280
    //ADD
    t1 = t8.x + t1;
    //Instruction 66281
    //ADD
    t1 = t0.z + t1;
    //Instruction 66282
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 66283
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 66284
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 66285
    //GE
    tb8 = t1>=(-t1);
    //Instruction 66286
    //FRC
    t1 = fract(abs(t1));
    //Instruction 66287
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 66288
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 66289
    //FTOU
    tu1 = uint(t1);
    //Instruction 66290
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66291
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66292
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66293
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 66294
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 66295
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_20;
void main()
{
    //Instruction 66136
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66137
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66138
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66139
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 66140
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 66141
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 66142
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 66143
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 66144
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 66145
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 66146
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 66147
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 66148
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 66149
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66150
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 66151
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 66152
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 66153
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66154
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66155
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66156
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66157
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66158
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 66159
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 66160
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 66161
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 66162
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66163
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_3 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_47;
  tmpvar_47 = -(tmpvar_46);
  worldBinormal_2 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_3.x;
  tmpvar_48.y = worldBinormal_2.x;
  tmpvar_48.z = worldNormal_4.x;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.y;
  tmpvar_49.y = worldBinormal_2.y;
  tmpvar_49.z = worldNormal_4.y;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.z;
  tmpvar_50.y = worldBinormal_2.z;
  tmpvar_50.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_4.xyz = c_14.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 63874
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 63875
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 63876
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63877
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 63878
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63879
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 63880
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 63881
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 63882
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63883
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63884
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63885
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63886
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63887
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63888
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63889
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 63890
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63891
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 63892
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63893
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 63894
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 63895
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 63896
    //MUL
    t3.y = t0.y * t23;
    //Instruction 63897
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 63898
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 63899
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 63900
    //LOG
    t23 = log2(t9);
    //Instruction 63901
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 63902
    //EXP
    t23 = exp2(t23);
    //Instruction 63903
    //NE
    tb24 = t9!=0.0;
    //Instruction 63904
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 63905
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 63906
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 63907
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 63908
    //MUL
    t9 = t0.x * t9;
    //Instruction 63909
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 63910
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 63911
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 63912
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 63913
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 63914
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 63915
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 63916
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 63917
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 63918
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 63919
    //MOV
    t4.y = t3.y;
    //Instruction 63920
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 63921
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 63922
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 63923
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 63924
    //SQRT
    t22 = sqrt(t22);
    //Instruction 63925
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 63926
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 63927
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 63928
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 63929
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 63930
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 63931
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63932
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 63933
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 63934
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 63935
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 63936
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 63937
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 63938
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 63939
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 63940
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 63941
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 63942
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 63943
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 63944
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 63945
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 63946
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 63947
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 63948
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 63949
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 63950
    //MOV
    t6.z = t3.x;
    //Instruction 63951
    //MOV
    t6.x = t4.z;
    //Instruction 63952
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 63953
    //MOV
    t6.z = t3.y;
    //Instruction 63954
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 63955
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 63956
    //MOV
    t6.x = t4.x;
    //Instruction 63957
    //MOV
    t3.x = t4.y;
    //Instruction 63958
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 63959
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 63960
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 63961
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 63962
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 63963
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 63964
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 63965
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 63966
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 63967
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 63968
    //MUL
    t1 = t1 * t22;
    //Instruction 63969
    //MUL
    t22 = t1 * t1;
    //Instruction 63970
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 63971
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 63972
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 63973
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 63974
    //MUL
    t2.x = t22 * t1;
    //Instruction 63975
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 63976
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 63977
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 63978
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 63979
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 63980
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 63981
    //ADD
    t1 = t22 + t1;
    //Instruction 63982
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 63983
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 63984
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 63985
    //LT
    tb15 = t22<(-t22);
    //Instruction 63986
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 63987
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 63988
    //LT
    tb8 = t1<0.0;
    //Instruction 63989
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 63990
    //ADD
    t1 = t8.x + t1;
    //Instruction 63991
    //ADD
    t1 = t0.z + t1;
    //Instruction 63992
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 63993
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 63994
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 63995
    //GE
    tb8 = t1>=(-t1);
    //Instruction 63996
    //FRC
    t1 = fract(abs(t1));
    //Instruction 63997
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 63998
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 63999
    //FTOU
    tu1 = uint(t1);
    //Instruction 64000
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64001
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64002
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64003
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 64004
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 64005
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_14;
void main()
{
    //Instruction 63857
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 63858
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63859
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 63860
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 63861
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 63862
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 63863
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 63864
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63865
    //DP3
    t10_3.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 63866
    //DP3
    t10_3.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 63867
    //DP3
    t10_3.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 63868
    //DP3
    t16_14 = dot(t10_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63869
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 63870
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 63871
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 63872
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63873
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_3 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_47;
  tmpvar_47 = -(tmpvar_46);
  worldBinormal_2 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_3.x;
  tmpvar_48.y = worldBinormal_2.x;
  tmpvar_48.z = worldNormal_4.x;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.y;
  tmpvar_49.y = worldBinormal_2.y;
  tmpvar_49.z = worldNormal_4.y;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.z;
  tmpvar_50.y = worldBinormal_2.z;
  tmpvar_50.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_6.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_5 = tmpvar_23;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 64522
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64523
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64524
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64525
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 64526
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64527
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 64528
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 64529
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64530
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64531
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64532
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64533
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64534
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64535
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64536
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64537
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64538
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64539
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 64540
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64541
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 64542
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 64543
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 64544
    //MUL
    t3.y = t0.y * t23;
    //Instruction 64545
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 64546
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 64547
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 64548
    //LOG
    t23 = log2(t9);
    //Instruction 64549
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 64550
    //EXP
    t23 = exp2(t23);
    //Instruction 64551
    //NE
    tb24 = t9!=0.0;
    //Instruction 64552
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 64553
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 64554
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64555
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 64556
    //MUL
    t9 = t0.x * t9;
    //Instruction 64557
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 64558
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 64559
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 64560
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64561
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 64562
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64563
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 64564
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 64565
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 64566
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64567
    //MOV
    t4.y = t3.y;
    //Instruction 64568
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 64569
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 64570
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 64571
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 64572
    //SQRT
    t22 = sqrt(t22);
    //Instruction 64573
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 64574
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64575
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64576
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64577
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64578
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64579
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64580
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 64581
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 64582
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 64583
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 64584
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 64585
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 64586
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 64587
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64588
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64589
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 64590
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 64591
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 64592
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 64593
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64594
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 64595
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 64596
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 64597
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 64598
    //MOV
    t6.z = t3.x;
    //Instruction 64599
    //MOV
    t6.x = t4.z;
    //Instruction 64600
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 64601
    //MOV
    t6.z = t3.y;
    //Instruction 64602
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 64603
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 64604
    //MOV
    t6.x = t4.x;
    //Instruction 64605
    //MOV
    t3.x = t4.y;
    //Instruction 64606
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 64607
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 64608
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64609
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64610
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64611
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64612
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 64613
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 64614
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64615
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 64616
    //MUL
    t1 = t1 * t22;
    //Instruction 64617
    //MUL
    t22 = t1 * t1;
    //Instruction 64618
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 64619
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 64620
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 64621
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 64622
    //MUL
    t2.x = t22 * t1;
    //Instruction 64623
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 64624
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 64625
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 64626
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 64627
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 64628
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 64629
    //ADD
    t1 = t22 + t1;
    //Instruction 64630
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 64631
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 64632
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 64633
    //LT
    tb15 = t22<(-t22);
    //Instruction 64634
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 64635
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 64636
    //LT
    tb8 = t1<0.0;
    //Instruction 64637
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 64638
    //ADD
    t1 = t8.x + t1;
    //Instruction 64639
    //ADD
    t1 = t0.z + t1;
    //Instruction 64640
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 64641
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64642
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 64643
    //GE
    tb8 = t1>=(-t1);
    //Instruction 64644
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64645
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 64646
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 64647
    //FTOU
    tu1 = uint(t1);
    //Instruction 64648
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64649
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64650
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64651
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 64652
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 64653
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
bool tb11;
mediump float t16_18;
lowp float t10_18;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 64487
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 64488
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64489
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 64490
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 64491
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 64492
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 64493
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 64494
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 64495
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 64496
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 64497
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 64498
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 64499
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 64500
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 64501
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 64502
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 64503
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 64504
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 64505
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 64506
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64507
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64508
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 64509
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 64510
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 64511
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 64512
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64513
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 64514
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 64515
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 64516
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 64517
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 64518
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 64519
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64520
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64521
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_3 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_47;
  tmpvar_47 = -(tmpvar_46);
  worldBinormal_2 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_3.x;
  tmpvar_48.y = worldBinormal_2.x;
  tmpvar_48.z = worldNormal_4.x;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.y;
  tmpvar_49.y = worldBinormal_2.y;
  tmpvar_49.z = worldNormal_4.y;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.z;
  tmpvar_50.y = worldBinormal_2.z;
  tmpvar_50.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = (texture2D (_LightTextureB0, vec2(tmpvar_16)).w * textureCube (_LightTexture0, tmpvar_15).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 66326
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66327
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66328
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66329
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66330
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66331
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 66332
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 66333
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66334
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66335
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66336
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66337
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66338
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66339
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66340
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66341
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66342
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66343
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 66344
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66345
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 66346
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 66347
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 66348
    //MUL
    t3.y = t0.y * t23;
    //Instruction 66349
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 66350
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 66351
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 66352
    //LOG
    t23 = log2(t9);
    //Instruction 66353
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 66354
    //EXP
    t23 = exp2(t23);
    //Instruction 66355
    //NE
    tb24 = t9!=0.0;
    //Instruction 66356
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 66357
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 66358
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66359
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 66360
    //MUL
    t9 = t0.x * t9;
    //Instruction 66361
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 66362
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 66363
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 66364
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66365
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 66366
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66367
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 66368
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 66369
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 66370
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66371
    //MOV
    t4.y = t3.y;
    //Instruction 66372
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 66373
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66374
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 66375
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 66376
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66377
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 66378
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66379
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66380
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66381
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66382
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66383
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66384
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 66385
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 66386
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 66387
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 66388
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 66389
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 66390
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66391
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66392
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66393
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 66394
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 66395
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 66396
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 66397
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66398
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 66399
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 66400
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 66401
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 66402
    //MOV
    t6.z = t3.x;
    //Instruction 66403
    //MOV
    t6.x = t4.z;
    //Instruction 66404
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 66405
    //MOV
    t6.z = t3.y;
    //Instruction 66406
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 66407
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 66408
    //MOV
    t6.x = t4.x;
    //Instruction 66409
    //MOV
    t3.x = t4.y;
    //Instruction 66410
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66411
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 66412
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66413
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66414
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66415
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 66416
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66417
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 66418
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66419
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 66420
    //MUL
    t1 = t1 * t22;
    //Instruction 66421
    //MUL
    t22 = t1 * t1;
    //Instruction 66422
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 66423
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 66424
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 66425
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 66426
    //MUL
    t2.x = t22 * t1;
    //Instruction 66427
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 66428
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 66429
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 66430
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 66431
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 66432
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 66433
    //ADD
    t1 = t22 + t1;
    //Instruction 66434
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 66435
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 66436
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 66437
    //LT
    tb15 = t22<(-t22);
    //Instruction 66438
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 66439
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 66440
    //LT
    tb8 = t1<0.0;
    //Instruction 66441
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 66442
    //ADD
    t1 = t8.x + t1;
    //Instruction 66443
    //ADD
    t1 = t0.z + t1;
    //Instruction 66444
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 66445
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 66446
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 66447
    //GE
    tb8 = t1>=(-t1);
    //Instruction 66448
    //FRC
    t1 = fract(abs(t1));
    //Instruction 66449
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 66450
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 66451
    //FTOU
    tu1 = uint(t1);
    //Instruction 66452
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66453
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66454
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66455
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 66456
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 66457
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
highp float t18;
mediump float t16_20;
void main()
{
    //Instruction 66296
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66297
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66298
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66299
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 66300
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 66301
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 66302
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 66303
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 66304
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 66305
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 66306
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 66307
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 66308
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 66309
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 66310
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 66311
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66312
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 66313
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 66314
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 66315
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66316
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66317
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66318
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66319
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66320
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 66321
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 66322
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 66323
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 66324
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66325
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_43;
  highp mat3 tmpvar_44;
  tmpvar_44[0] = _Object2World[0].xyz;
  tmpvar_44[1] = _Object2World[1].xyz;
  tmpvar_44[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44 * tmpvar_17));
  worldTangent_3 = tmpvar_45;
  lowp vec3 tmpvar_46;
  tmpvar_46 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_47;
  tmpvar_47 = -(tmpvar_46);
  worldBinormal_2 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48.x = worldTangent_3.x;
  tmpvar_48.y = worldBinormal_2.x;
  tmpvar_48.z = worldNormal_4.x;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.y;
  tmpvar_49.y = worldBinormal_2.y;
  tmpvar_49.z = worldNormal_4.y;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.z;
  tmpvar_50.y = worldBinormal_2.z;
  tmpvar_50.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_48;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_50;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xy;
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, tmpvar_15).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 64029
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64030
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64031
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64032
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 64033
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64034
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 64035
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 64036
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64037
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64038
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64039
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64040
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64041
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64042
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64043
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64044
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64045
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64046
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 64047
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64048
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 64049
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 64050
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 64051
    //MUL
    t3.y = t0.y * t23;
    //Instruction 64052
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 64053
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 64054
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 64055
    //LOG
    t23 = log2(t9);
    //Instruction 64056
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 64057
    //EXP
    t23 = exp2(t23);
    //Instruction 64058
    //NE
    tb24 = t9!=0.0;
    //Instruction 64059
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 64060
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 64061
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64062
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 64063
    //MUL
    t9 = t0.x * t9;
    //Instruction 64064
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 64065
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 64066
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 64067
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64068
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 64069
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64070
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 64071
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 64072
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 64073
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64074
    //MOV
    t4.y = t3.y;
    //Instruction 64075
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 64076
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 64077
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 64078
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 64079
    //SQRT
    t22 = sqrt(t22);
    //Instruction 64080
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 64081
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64082
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64083
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64084
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64085
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64086
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64087
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 64088
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 64089
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 64090
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 64091
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 64092
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 64093
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 64094
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64095
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64096
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 64097
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 64098
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 64099
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 64100
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64101
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 64102
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 64103
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 64104
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 64105
    //MOV
    t6.z = t3.x;
    //Instruction 64106
    //MOV
    t6.x = t4.z;
    //Instruction 64107
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 64108
    //MOV
    t6.z = t3.y;
    //Instruction 64109
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 64110
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 64111
    //MOV
    t6.x = t4.x;
    //Instruction 64112
    //MOV
    t3.x = t4.y;
    //Instruction 64113
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 64114
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 64115
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64116
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64117
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64118
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64119
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 64120
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 64121
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64122
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 64123
    //MUL
    t1 = t1 * t22;
    //Instruction 64124
    //MUL
    t22 = t1 * t1;
    //Instruction 64125
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 64126
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 64127
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 64128
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 64129
    //MUL
    t2.x = t22 * t1;
    //Instruction 64130
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 64131
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 64132
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 64133
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 64134
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 64135
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 64136
    //ADD
    t1 = t22 + t1;
    //Instruction 64137
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 64138
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 64139
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 64140
    //LT
    tb15 = t22<(-t22);
    //Instruction 64141
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 64142
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 64143
    //LT
    tb8 = t1<0.0;
    //Instruction 64144
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 64145
    //ADD
    t1 = t8.x + t1;
    //Instruction 64146
    //ADD
    t1 = t0.z + t1;
    //Instruction 64147
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 64148
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64149
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 64150
    //GE
    tb8 = t1>=(-t1);
    //Instruction 64151
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64152
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 64153
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 64154
    //FTOU
    tu1 = uint(t1);
    //Instruction 64155
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64156
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64157
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64158
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 64159
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 64160
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_17;
void main()
{
    //Instruction 64006
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 64007
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64008
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 64009
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 64010
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 64011
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 64012
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 64013
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 64014
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 64015
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 64016
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 64017
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64018
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 64019
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64020
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 64021
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 64022
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 64023
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64024
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 64025
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 64026
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64027
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64028
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 64691
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64692
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64693
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 64694
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64695
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64696
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 64697
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 64698
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64699
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64700
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64701
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64702
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64703
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64704
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64705
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64706
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64707
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 64708
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64709
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 64710
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 64711
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 64712
    //MUL
    t3.y = t0.y * t26;
    //Instruction 64713
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 64714
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 64715
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 64716
    //LOG
    t26 = log2(t10);
    //Instruction 64717
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 64718
    //EXP
    t26 = exp2(t26);
    //Instruction 64719
    //NE
    tb27 = t10!=0.0;
    //Instruction 64720
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 64721
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 64722
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64723
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 64724
    //MUL
    t10 = t0.x * t10;
    //Instruction 64725
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64726
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 64727
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 64728
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 64729
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64730
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 64731
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64732
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 64733
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 64734
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 64735
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64736
    //MOV
    t5.y = t3.y;
    //Instruction 64737
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64738
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64739
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64740
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 64741
    //SQRT
    t27 = sqrt(t27);
    //Instruction 64742
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 64743
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64744
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64745
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64746
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64747
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64748
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64749
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 64750
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 64751
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 64752
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 64753
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 64754
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 64755
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 64756
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64757
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64758
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 64759
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 64760
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 64761
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 64762
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64763
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 64764
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 64765
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 64766
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 64767
    //MOV
    t7.z = t3.x;
    //Instruction 64768
    //MOV
    t7.x = t5.z;
    //Instruction 64769
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 64770
    //MOV
    t7.z = t3.y;
    //Instruction 64771
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 64772
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 64773
    //MOV
    t7.x = t5.x;
    //Instruction 64774
    //MOV
    t3.x = t5.y;
    //Instruction 64775
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 64776
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 64777
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64778
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64779
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64780
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64781
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 64782
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 64783
    //ADD
    t1 = t9.z + t1;
    //Instruction 64784
    //FRC
    t1 = fract(t1);
    //Instruction 64785
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 64786
    //MOV
    vs_TEXCOORD5.z = t1;
    //Instruction 64787
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 64788
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64789
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64790
    //MUL
    t1 = t1 * t9.x;
    //Instruction 64791
    //MUL
    t9.x = t1 * t1;
    //Instruction 64792
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 64793
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 64794
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 64795
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 64796
    //MUL
    t17.x = t9.x * t1;
    //Instruction 64797
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 64798
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 64799
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 64800
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 64801
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 64802
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 64803
    //ADD
    t1 = t9.x + t1;
    //Instruction 64804
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 64805
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 64806
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 64807
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 64808
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 64809
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 64810
    //LT
    tb9 = t1<0.0;
    //Instruction 64811
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 64812
    //ADD
    t1 = t9.x + t1;
    //Instruction 64813
    //ADD
    t1 = t0.z + t1;
    //Instruction 64814
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 64815
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64816
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 64817
    //GE
    tb9 = t1>=(-t1);
    //Instruction 64818
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64819
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 64820
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 64821
    //FTOU
    tu1 = uint(t1);
    //Instruction 64822
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64823
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64824
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64825
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 64826
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 64654
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 64655
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64656
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 64657
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 64658
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 64659
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 64660
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64661
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 64662
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 64663
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 64664
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 64665
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 64666
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 64667
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 64668
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 64669
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 64670
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 64671
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 64672
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 64673
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 64674
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 64675
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64676
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64677
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 64678
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 64679
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 64680
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 64681
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64682
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 64683
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 64684
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 64685
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 64686
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 64687
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 64688
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64689
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64690
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 66484
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66485
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66486
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 66487
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66488
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66489
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 66490
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 66491
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66492
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66493
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66494
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66495
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66496
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66497
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66498
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66499
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66500
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 66501
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66502
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 66503
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 66504
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66505
    //MUL
    t3.y = t0.y * t26;
    //Instruction 66506
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 66507
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 66508
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 66509
    //LOG
    t26 = log2(t10);
    //Instruction 66510
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 66511
    //EXP
    t26 = exp2(t26);
    //Instruction 66512
    //NE
    tb27 = t10!=0.0;
    //Instruction 66513
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 66514
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 66515
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66516
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 66517
    //MUL
    t10 = t0.x * t10;
    //Instruction 66518
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66519
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 66520
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66521
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 66522
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66523
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 66524
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66525
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66526
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 66527
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 66528
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66529
    //MOV
    t5.y = t3.y;
    //Instruction 66530
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66531
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66532
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66533
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 66534
    //SQRT
    t27 = sqrt(t27);
    //Instruction 66535
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 66536
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66537
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66538
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66539
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66540
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66541
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66542
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 66543
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 66544
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 66545
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 66546
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 66547
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 66548
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66549
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66550
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66551
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 66552
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 66553
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 66554
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 66555
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66556
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 66557
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 66558
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 66559
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 66560
    //MOV
    t7.z = t3.x;
    //Instruction 66561
    //MOV
    t7.x = t5.z;
    //Instruction 66562
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 66563
    //MOV
    t7.z = t3.y;
    //Instruction 66564
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 66565
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 66566
    //MOV
    t7.x = t5.x;
    //Instruction 66567
    //MOV
    t3.x = t5.y;
    //Instruction 66568
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66569
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 66570
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66571
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66572
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66573
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 66574
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66575
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 66576
    //ADD
    t1 = t9.z + t1;
    //Instruction 66577
    //FRC
    t1 = fract(t1);
    //Instruction 66578
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 66579
    //MOV
    vs_TEXCOORD5.z = t1;
    //Instruction 66580
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 66581
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66582
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66583
    //MUL
    t1 = t1 * t9.x;
    //Instruction 66584
    //MUL
    t9.x = t1 * t1;
    //Instruction 66585
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 66586
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 66587
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 66588
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 66589
    //MUL
    t17.x = t9.x * t1;
    //Instruction 66590
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 66591
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 66592
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 66593
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 66594
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 66595
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 66596
    //ADD
    t1 = t9.x + t1;
    //Instruction 66597
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 66598
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 66599
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 66600
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 66601
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 66602
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 66603
    //LT
    tb9 = t1<0.0;
    //Instruction 66604
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 66605
    //ADD
    t1 = t9.x + t1;
    //Instruction 66606
    //ADD
    t1 = t0.z + t1;
    //Instruction 66607
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 66608
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 66609
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 66610
    //GE
    tb9 = t1>=(-t1);
    //Instruction 66611
    //FRC
    t1 = fract(abs(t1));
    //Instruction 66612
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 66613
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 66614
    //FTOU
    tu1 = uint(t1);
    //Instruction 66615
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66616
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66617
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66618
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 66619
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 66458
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66459
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66460
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 66461
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 66462
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 66463
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 66464
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66465
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 66466
    //MAX
    t16_3 = max(t16_7.z, t16_7.y);
    //Instruction 66467
    //MAX
    t16_3 = max(t16_7.x, t16_3);
    //Instruction 66468
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 66469
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 66470
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 66471
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66472
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 66473
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66474
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66475
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66476
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66477
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66478
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 66479
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 66480
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 66481
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 66482
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66483
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 64205
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64206
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64207
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 64208
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64209
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64210
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 64211
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 64212
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64213
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64214
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64215
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64216
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64217
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64218
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64219
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64220
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64221
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 64222
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64223
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 64224
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 64225
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 64226
    //MUL
    t3.y = t0.y * t26;
    //Instruction 64227
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 64228
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 64229
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 64230
    //LOG
    t26 = log2(t10);
    //Instruction 64231
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 64232
    //EXP
    t26 = exp2(t26);
    //Instruction 64233
    //NE
    tb27 = t10!=0.0;
    //Instruction 64234
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 64235
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 64236
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64237
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 64238
    //MUL
    t10 = t0.x * t10;
    //Instruction 64239
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64240
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 64241
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 64242
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 64243
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64244
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 64245
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64246
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 64247
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 64248
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 64249
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64250
    //MOV
    t5.y = t3.y;
    //Instruction 64251
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64252
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64253
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64254
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 64255
    //SQRT
    t27 = sqrt(t27);
    //Instruction 64256
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 64257
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64258
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64259
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64260
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64261
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64262
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64263
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 64264
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 64265
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 64266
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 64267
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 64268
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 64269
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 64270
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64271
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64272
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 64273
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 64274
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 64275
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 64276
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64277
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 64278
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 64279
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 64280
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 64281
    //MOV
    t7.z = t3.x;
    //Instruction 64282
    //MOV
    t7.x = t5.z;
    //Instruction 64283
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 64284
    //MOV
    t7.z = t3.y;
    //Instruction 64285
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 64286
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 64287
    //MOV
    t7.x = t5.x;
    //Instruction 64288
    //MOV
    t3.x = t5.y;
    //Instruction 64289
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 64290
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 64291
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64292
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64293
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64294
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64295
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 64296
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 64297
    //ADD
    t1 = t9.z + t1;
    //Instruction 64298
    //FRC
    t1 = fract(t1);
    //Instruction 64299
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 64300
    //MOV
    vs_TEXCOORD5.z = t1;
    //Instruction 64301
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 64302
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64303
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64304
    //MUL
    t1 = t1 * t9.x;
    //Instruction 64305
    //MUL
    t9.x = t1 * t1;
    //Instruction 64306
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 64307
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 64308
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 64309
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 64310
    //MUL
    t17.x = t9.x * t1;
    //Instruction 64311
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 64312
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 64313
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 64314
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 64315
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 64316
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 64317
    //ADD
    t1 = t9.x + t1;
    //Instruction 64318
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 64319
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 64320
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 64321
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 64322
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 64323
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 64324
    //LT
    tb9 = t1<0.0;
    //Instruction 64325
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 64326
    //ADD
    t1 = t9.x + t1;
    //Instruction 64327
    //ADD
    t1 = t0.z + t1;
    //Instruction 64328
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 64329
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64330
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 64331
    //GE
    tb9 = t1>=(-t1);
    //Instruction 64332
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64333
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 64334
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 64335
    //FTOU
    tu1 = uint(t1);
    //Instruction 64336
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64337
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64338
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64339
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 64340
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 64161
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 64162
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64163
    //LT
    tb21 = t10_1.x<0.0;
    //Instruction 64164
    //DISCARD
    if((int(tb21))!=0){discard;}
    //Instruction 64165
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 64166
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 64167
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64168
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 64169
    //MAX
    t16_3.x = max(t16_9.z, t16_9.y);
    //Instruction 64170
    //MAX
    t16_3.x = max(t16_9.x, t16_3.x);
    //Instruction 64171
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 64172
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 64173
    //MUL
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 64174
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 64175
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 64176
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 64177
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 64178
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 64179
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 64180
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 64181
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 64182
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 64183
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 64184
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 64185
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 64186
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 64187
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 64188
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 64189
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64190
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64191
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 64192
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 64193
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 64194
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 64195
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64196
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 64197
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 64198
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 64199
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 64200
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 64201
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 64202
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64203
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64204
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
 