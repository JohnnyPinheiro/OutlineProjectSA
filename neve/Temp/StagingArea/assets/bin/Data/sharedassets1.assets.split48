vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 70143
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 70144
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 70145
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 70146
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70147
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70148
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 70149
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 70150
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70151
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70152
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70153
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70154
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70155
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70156
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70157
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70158
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70159
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 70160
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70161
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 70162
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 70163
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 70164
    //MUL
    t3.y = t0.y * t26;
    //Instruction 70165
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 70166
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 70167
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 70168
    //LOG
    t26 = log2(t10);
    //Instruction 70169
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 70170
    //EXP
    t26 = exp2(t26);
    //Instruction 70171
    //NE
    tb27 = t10!=0.0;
    //Instruction 70172
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 70173
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 70174
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70175
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 70176
    //MUL
    t10 = t0.x * t10;
    //Instruction 70177
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70178
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 70179
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70180
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 70181
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70182
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 70183
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70184
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70185
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 70186
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 70187
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70188
    //MOV
    t5.y = t3.y;
    //Instruction 70189
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 70190
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 70191
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 70192
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 70193
    //SQRT
    t27 = sqrt(t27);
    //Instruction 70194
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 70195
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70196
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70197
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70198
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70199
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70200
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 70201
    //MOV
    gl_Position = t3;
    //Instruction 70202
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70203
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 70204
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 70205
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 70206
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70207
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 70208
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 70209
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70210
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70211
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 70212
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 70213
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70214
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 70215
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 70216
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 70217
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 70218
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 70219
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 70220
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 70221
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 70222
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 70223
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 70224
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 70225
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 70226
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 70227
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 70228
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70229
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 70230
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 70231
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 70232
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 70233
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 70234
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 70235
    //LT
    tb9 = t1.x<0.0;
    //Instruction 70236
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 70237
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70238
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70239
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 70240
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70241
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 70242
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 70243
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70244
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 70245
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 70246
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70247
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70248
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70249
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70250
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 70251
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 70252
    //MUL
    t1.w = t1.x * 0.500000;
    //Instruction 70253
    //MUL
    t1.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 70254
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 70255
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 70256
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70257
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 70258
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 70259
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 70260
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 70261
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 70262
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 70263
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 70264
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 70265
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 70266
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 70267
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 70268
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 70269
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 70270
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 70271
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 70272
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 70273
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 70274
    //MOV
    t0.w = 1.0;
    //Instruction 70275
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 70276
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 70277
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 70278
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 70279
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 70280
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 70120
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70121
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70122
    //LT
    tb12 = t10_1<0.0;
    //Instruction 70123
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 70124
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 70125
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 70126
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70127
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 70128
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 70129
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 70130
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 70131
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 70132
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 70133
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70134
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 70135
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 70136
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 70137
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 70138
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 70139
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 70140
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 70141
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70142
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_45;
  v_45.x = _World2Object[0].x;
  v_45.y = _World2Object[1].x;
  v_45.z = _World2Object[2].x;
  v_45.w = _World2Object[3].x;
  highp vec4 v_46;
  v_46.x = _World2Object[0].z;
  v_46.y = _World2Object[1].z;
  v_46.z = _World2Object[2].z;
  v_46.w = _World2Object[3].z;
  highp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = normalize(((v_45.xyz * tmpvar_17.z) + (v_46.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_48;
  mediump vec4 normal_49;
  normal_49 = tmpvar_47;
  mediump vec3 x2_50;
  mediump vec3 x1_51;
  x1_51.x = dot (unity_SHAr, normal_49);
  x1_51.y = dot (unity_SHAg, normal_49);
  x1_51.z = dot (unity_SHAb, normal_49);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_52);
  x2_50.y = dot (unity_SHBg, tmpvar_52);
  x2_50.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_48 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + x1_51);
  tmpvar_5 = tmpvar_48;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = o_42;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 67959
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67960
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67961
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 67962
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67963
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67964
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 67965
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 67966
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67967
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67968
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67969
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67970
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67971
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67972
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67973
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 67974
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67975
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 67976
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67977
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 67978
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 67979
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 67980
    //MUL
    t3.y = t0.y * t26;
    //Instruction 67981
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 67982
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 67983
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 67984
    //LOG
    t26 = log2(t10);
    //Instruction 67985
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 67986
    //EXP
    t26 = exp2(t26);
    //Instruction 67987
    //NE
    tb27 = t10!=0.0;
    //Instruction 67988
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 67989
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 67990
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 67991
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 67992
    //MUL
    t10 = t0.x * t10;
    //Instruction 67993
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 67994
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 67995
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 67996
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 67997
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 67998
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 67999
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68000
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68001
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 68002
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 68003
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68004
    //MOV
    t5.y = t3.y;
    //Instruction 68005
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68006
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68007
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68008
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 68009
    //SQRT
    t27 = sqrt(t27);
    //Instruction 68010
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 68011
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68012
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68013
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68014
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68015
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68016
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68017
    //MOV
    gl_Position = t3;
    //Instruction 68018
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68019
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 68020
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 68021
    //ADD
    vs_TEXCOORD0.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 68022
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68023
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 68024
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 68025
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68026
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68027
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 68028
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68029
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68030
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68031
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 68032
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 68033
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 68034
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 68035
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 68036
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 68037
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 68038
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 68039
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 68040
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 68041
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 68042
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 68043
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 68044
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68045
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 68046
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 68047
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 68048
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 68049
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 68050
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 68051
    //LT
    tb9 = t1.x<0.0;
    //Instruction 68052
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 68053
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68054
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68055
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 68056
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68057
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 68058
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 68059
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68060
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 68061
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 68062
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68063
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68064
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68065
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68066
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 68067
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 68068
    //MUL
    t1.w = t1.x * 0.500000;
    //Instruction 68069
    //MUL
    t1.xz = t3.xw * vec2(0.500000, 0.500000);
    //Instruction 68070
    //MOV
    vs_TEXCOORD3.zw = t3.zw;
    //Instruction 68071
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 68072
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68073
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 68074
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 68075
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 68076
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 68077
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 68078
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 68079
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 68080
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 68081
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 68082
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 68083
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 68084
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 68085
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68086
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 68087
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 68088
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 68089
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 68090
    //MOV
    t0.w = 1.0;
    //Instruction 68091
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 68092
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 68093
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 68094
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 68095
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 68096
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 67937
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 67938
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67939
    //LT
    tb12 = t10_1<0.0;
    //Instruction 67940
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 67941
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 67942
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 67943
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67944
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 67945
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 67946
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 67947
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 67948
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 67949
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 67950
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 67951
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 67952
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 67953
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 67954
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 67955
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 67956
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 67957
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67958
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_42;
  mediump vec4 normal_43;
  normal_43 = tmpvar_41;
  mediump vec3 x2_44;
  mediump vec3 x1_45;
  x1_45.x = dot (unity_SHAr, normal_43);
  x1_45.y = dot (unity_SHAg, normal_43);
  x1_45.z = dot (unity_SHAb, normal_43);
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_46);
  x2_44.y = dot (unity_SHBg, tmpvar_46);
  x2_44.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_42 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + x1_45);
  tmpvar_5 = tmpvar_42;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_30;
  xlv_TEXCOORD4 = o_35;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 68371
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 68372
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 68373
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68374
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 68375
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 68376
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68377
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 68378
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68379
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 68380
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68381
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 68382
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 68383
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 68384
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68385
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 68386
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68387
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 68388
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 68389
    //FTOU
    tu21 = uint(t21);
    //Instruction 68390
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 68391
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 68392
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 68393
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 68394
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 68395
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 68396
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 68397
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 68398
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 68399
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 68400
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 68401
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 68402
    //LOG
    t1.x = log2(t7);
    //Instruction 68403
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 68404
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 68405
    //NE
    tb8 = t7!=0.0;
    //Instruction 68406
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 68407
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 68408
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 68409
    //MOV
    t1.y = t2.w;
    //Instruction 68410
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 68411
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 68412
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 68413
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 68414
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 68415
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 68416
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 68417
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 68418
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 68419
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 68420
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 68421
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 68422
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 68423
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 68424
    //MOV
    gl_Position = t2;
    //Instruction 68425
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 68426
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 68427
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 68428
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 68429
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68430
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 68431
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 68432
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 68433
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 68434
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 68435
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 68436
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68437
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68438
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t4.xy;
    //Instruction 68439
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68440
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68441
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 68442
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 68443
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68444
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 68445
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 68446
    //MUL
    t3.xyz = t0.xyz * t1.xyz;
    //Instruction 68447
    //MUL
    t1.xyz = t1.xyz * t2.xyw;
    //Instruction 68448
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 68449
    //MUL
    t3.w = t3.y * 0.500000;
    //Instruction 68450
    //ADD
    t2.xy = t3.zz + t3.xw;
    //Instruction 68451
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68452
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68453
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 68454
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 68455
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 68456
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68457
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 68458
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 68459
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 68460
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 68461
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 68462
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 68463
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68464
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 68465
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 68466
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 68467
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68468
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 68469
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 68470
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 68471
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68472
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68473
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68474
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68475
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68476
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68477
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68478
    //MOV
    t0.w = 1.0;
    //Instruction 68479
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68480
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68481
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68482
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68483
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68484
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 68349
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68350
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68351
    //MOV
    t1.x = t16_0.x;
    //Instruction 68352
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68353
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68354
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68355
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68356
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68357
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68358
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68359
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68360
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68361
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68362
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68363
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68364
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68365
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 68366
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 68367
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68368
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68369
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68370
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_42;
  mediump vec4 normal_43;
  normal_43 = tmpvar_41;
  mediump vec3 x2_44;
  mediump vec3 x1_45;
  x1_45.x = dot (unity_SHAr, normal_43);
  x1_45.y = dot (unity_SHAg, normal_43);
  x1_45.z = dot (unity_SHAb, normal_43);
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_46);
  x2_44.y = dot (unity_SHBg, tmpvar_46);
  x2_44.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_42 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + x1_45);
  tmpvar_5 = tmpvar_42;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_30;
  xlv_TEXCOORD4 = o_35;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 68118
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 68119
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 68120
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68121
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 68122
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 68123
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68124
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 68125
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68126
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 68127
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68128
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 68129
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 68130
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 68131
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68132
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 68133
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68134
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 68135
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 68136
    //FTOU
    tu21 = uint(t21);
    //Instruction 68137
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 68138
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 68139
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 68140
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 68141
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 68142
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 68143
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 68144
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 68145
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 68146
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 68147
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 68148
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 68149
    //LOG
    t1.x = log2(t7);
    //Instruction 68150
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 68151
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 68152
    //NE
    tb8 = t7!=0.0;
    //Instruction 68153
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 68154
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 68155
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 68156
    //MOV
    t1.y = t2.w;
    //Instruction 68157
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 68158
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 68159
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 68160
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 68161
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 68162
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 68163
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 68164
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 68165
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 68166
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 68167
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 68168
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 68169
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 68170
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 68171
    //MOV
    gl_Position = t2;
    //Instruction 68172
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 68173
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 68174
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 68175
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 68176
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68177
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 68178
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 68179
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 68180
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 68181
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 68182
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 68183
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68184
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68185
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t4.xy;
    //Instruction 68186
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68187
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68188
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 68189
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 68190
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68191
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 68192
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 68193
    //MUL
    t3.xyz = t0.xyz * t1.xyz;
    //Instruction 68194
    //MUL
    t1.xyz = t1.xyz * t2.xyw;
    //Instruction 68195
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 68196
    //MUL
    t3.w = t3.y * 0.500000;
    //Instruction 68197
    //ADD
    t2.xy = t3.zz + t3.xw;
    //Instruction 68198
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68199
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68200
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 68201
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 68202
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 68203
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68204
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 68205
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 68206
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 68207
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 68208
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 68209
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 68210
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68211
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 68212
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 68213
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 68214
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68215
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 68216
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 68217
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 68218
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68219
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68220
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68221
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68222
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68223
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68224
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68225
    //MOV
    t0.w = 1.0;
    //Instruction 68226
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68227
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68228
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68229
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68230
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68231
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 68097
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68098
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68099
    //MOV
    t1.x = t16_0.x;
    //Instruction 68100
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68101
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68102
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68103
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68104
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68105
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68106
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68107
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68108
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68109
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68110
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68111
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68112
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68113
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 68114
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68115
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68116
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68117
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_5 = tmpvar_43;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_31;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 68263
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 68264
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68265
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68266
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 68267
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 68268
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68269
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68270
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68271
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68272
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68273
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68274
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68275
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 68276
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68277
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 68278
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68279
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 68280
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 68281
    //FTOU
    tu9 = uint(t9);
    //Instruction 68282
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 68283
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 68284
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 68285
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 68286
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 68287
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 68288
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 68289
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 68290
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 68291
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 68292
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 68293
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 68294
    //LOG
    t14 = log2(t7.x);
    //Instruction 68295
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 68296
    //EXP
    t14 = exp2(t14);
    //Instruction 68297
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 68298
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 68299
    //MUL
    t7.x = t7.x * t21;
    //Instruction 68300
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 68301
    //MOV
    t4.y = t3.w;
    //Instruction 68302
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 68303
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 68304
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 68305
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 68306
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68307
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 68308
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 68309
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 68310
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 68311
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 68312
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 68313
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 68314
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 68315
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68316
    //MOV
    gl_Position = t3;
    //Instruction 68317
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 68318
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 68319
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 68320
    //ADD
    vs_TEXCOORD0.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 68321
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68322
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 68323
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 68324
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68325
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68326
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 68327
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 68328
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 68329
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 68330
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 68331
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 68332
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 68333
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68334
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68335
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 68336
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68337
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 68338
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 68339
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68340
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 68341
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 68342
    //MUL
    t2.xyz = t0.xyz * t1.xyz;
    //Instruction 68343
    //MUL
    t1.xyz = t1.xyz * t3.xyw;
    //Instruction 68344
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 68345
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 68346
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68347
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68348
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68349
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 68350
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 68351
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 68352
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68353
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 68354
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 68355
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 68356
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 68357
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 68358
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 68359
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68360
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 68361
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 68362
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 68363
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68364
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 68365
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 68366
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 68367
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68368
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68369
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68370
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68371
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68372
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68373
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68374
    //MOV
    t0.w = 1.0;
    //Instruction 68375
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68376
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68377
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68378
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68379
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68380
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 68232
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68233
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68234
    //MOV
    t1.x = t16_0.x;
    //Instruction 68235
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68236
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68237
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68238
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68239
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68240
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68241
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68242
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68243
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68244
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68245
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68246
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68247
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 68248
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 68249
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 68250
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68251
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68252
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68253
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68254
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68255
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68256
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68257
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 68258
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 68259
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68260
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68261
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68262
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_5 = tmpvar_43;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_31;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 70311
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 70312
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70313
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70314
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 70315
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 70316
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70317
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70318
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70319
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70320
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70321
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70322
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70323
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 70324
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70325
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 70326
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70327
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70328
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 70329
    //FTOU
    tu9 = uint(t9);
    //Instruction 70330
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 70331
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 70332
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70333
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 70334
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 70335
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 70336
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 70337
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 70338
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 70339
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 70340
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 70341
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 70342
    //LOG
    t14 = log2(t7.x);
    //Instruction 70343
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 70344
    //EXP
    t14 = exp2(t14);
    //Instruction 70345
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 70346
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 70347
    //MUL
    t7.x = t7.x * t21;
    //Instruction 70348
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 70349
    //MOV
    t4.y = t3.w;
    //Instruction 70350
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 70351
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 70352
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 70353
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 70354
    //SQRT
    t22 = sqrt(t22);
    //Instruction 70355
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 70356
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 70357
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 70358
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 70359
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 70360
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 70361
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 70362
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 70363
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 70364
    //MOV
    gl_Position = t3;
    //Instruction 70365
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 70366
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 70367
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 70368
    //ADD
    vs_TEXCOORD0.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 70369
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70370
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 70371
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 70372
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70373
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70374
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 70375
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 70376
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 70377
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 70378
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 70379
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70380
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70381
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70382
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70383
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 70384
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70385
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 70386
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 70387
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70388
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 70389
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 70390
    //MUL
    t2.xyz = t0.xyz * t1.xyz;
    //Instruction 70391
    //MUL
    t1.xyz = t1.xyz * t3.xyw;
    //Instruction 70392
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 70393
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 70394
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70395
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70396
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70397
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 70398
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 70399
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 70400
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70401
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70402
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70403
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 70404
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70405
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70406
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 70407
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 70408
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70409
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70410
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 70411
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 70412
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 70413
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 70414
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 70415
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 70416
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 70417
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 70418
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 70419
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 70420
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 70421
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 70422
    //MOV
    t0.w = 1.0;
    //Instruction 70423
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 70424
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 70425
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 70426
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 70427
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 70428
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 70281
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 70282
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70283
    //MOV
    t1.x = t16_0.x;
    //Instruction 70284
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70285
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70286
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70287
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70288
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70289
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70290
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70291
    //LT
    tb1 = t10_2<0.0;
    //Instruction 70292
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70293
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 70294
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 70295
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70296
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 70297
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 70298
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 70299
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 70300
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 70301
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 70302
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70303
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 70304
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 70305
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 70306
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 70307
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 70308
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70309
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70310
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_42;
  mediump vec4 normal_43;
  normal_43 = tmpvar_41;
  mediump vec3 x2_44;
  mediump vec3 x1_45;
  x1_45.x = dot (unity_SHAr, normal_43);
  x1_45.y = dot (unity_SHAg, normal_43);
  x1_45.z = dot (unity_SHAb, normal_43);
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_46);
  x2_44.y = dot (unity_SHBg, tmpvar_46);
  x2_44.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_42 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + x1_45);
  tmpvar_5 = tmpvar_42;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_30;
  xlv_TEXCOORD4 = o_35;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 70451
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 70452
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 70453
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70454
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 70455
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 70456
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70457
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 70458
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70459
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 70460
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70461
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 70462
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 70463
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 70464
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70465
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 70466
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70467
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70468
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 70469
    //FTOU
    tu21 = uint(t21);
    //Instruction 70470
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 70471
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 70472
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70473
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 70474
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 70475
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 70476
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 70477
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 70478
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 70479
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 70480
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 70481
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 70482
    //LOG
    t1.x = log2(t7);
    //Instruction 70483
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 70484
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 70485
    //NE
    tb8 = t7!=0.0;
    //Instruction 70486
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 70487
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 70488
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 70489
    //MOV
    t1.y = t2.w;
    //Instruction 70490
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 70491
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70492
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70493
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 70494
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 70495
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70496
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 70497
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 70498
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 70499
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 70500
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 70501
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 70502
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 70503
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 70504
    //MOV
    gl_Position = t2;
    //Instruction 70505
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 70506
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 70507
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 70508
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 70509
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70510
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 70511
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 70512
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 70513
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 70514
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70515
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70516
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70517
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70518
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t4.xy;
    //Instruction 70519
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 70520
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70521
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 70522
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 70523
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70524
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 70525
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 70526
    //MUL
    t3.xyz = t0.xyz * t1.xyz;
    //Instruction 70527
    //MUL
    t1.xyz = t1.xyz * t2.xyw;
    //Instruction 70528
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 70529
    //MUL
    t3.w = t3.y * 0.500000;
    //Instruction 70530
    //ADD
    t2.xy = t3.zz + t3.xw;
    //Instruction 70531
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70532
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70533
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 70534
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 70535
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 70536
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70537
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70538
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70539
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 70540
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70541
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70542
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 70543
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 70544
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70545
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70546
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 70547
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 70548
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 70549
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 70550
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 70551
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 70552
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 70553
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 70554
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 70555
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 70556
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 70557
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 70558
    //MOV
    t0.w = 1.0;
    //Instruction 70559
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 70560
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 70561
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 70562
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 70563
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 70564
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70429
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 70430
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70431
    //MOV
    t1.x = t16_0.x;
    //Instruction 70432
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70433
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70434
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70435
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70436
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70437
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70438
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70439
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70440
    //LT
    tb1 = t10_2<0.0;
    //Instruction 70441
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70442
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 70443
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 70444
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 70445
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 70446
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 70447
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 70448
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70449
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70450
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_37;
  tmpvar_37.x = tmpvar_36.x;
  tmpvar_37.y = (tmpvar_36.y * _ProjectionParams.x);
  o_35.xy = (tmpvar_37 + tmpvar_36.w);
  o_35.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_42;
  mediump vec4 normal_43;
  normal_43 = tmpvar_41;
  mediump vec3 x2_44;
  mediump vec3 x1_45;
  x1_45.x = dot (unity_SHAr, normal_43);
  x1_45.y = dot (unity_SHAg, normal_43);
  x1_45.z = dot (unity_SHAb, normal_43);
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_46);
  x2_44.y = dot (unity_SHBg, tmpvar_46);
  x2_44.z = dot (unity_SHBb, tmpvar_46);
  tmpvar_42 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + x1_45);
  tmpvar_5 = tmpvar_42;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_30;
  xlv_TEXCOORD4 = o_35;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 68402
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 68403
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 68404
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68405
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 68406
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 68407
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68408
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 68409
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68410
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 68411
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68412
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 68413
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 68414
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 68415
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68416
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 68417
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68418
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 68419
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 68420
    //FTOU
    tu21 = uint(t21);
    //Instruction 68421
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 68422
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 68423
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 68424
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 68425
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 68426
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 68427
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 68428
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 68429
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 68430
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 68431
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 68432
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 68433
    //LOG
    t1.x = log2(t7);
    //Instruction 68434
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 68435
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 68436
    //NE
    tb8 = t7!=0.0;
    //Instruction 68437
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 68438
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 68439
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 68440
    //MOV
    t1.y = t2.w;
    //Instruction 68441
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 68442
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 68443
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 68444
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 68445
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 68446
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 68447
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 68448
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 68449
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 68450
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 68451
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 68452
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 68453
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 68454
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 68455
    //MOV
    gl_Position = t2;
    //Instruction 68456
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 68457
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 68458
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 68459
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 68460
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68461
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 68462
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 68463
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 68464
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 68465
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 68466
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 68467
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68468
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68469
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t4.xy;
    //Instruction 68470
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68471
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68472
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 68473
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 68474
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68475
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 68476
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 68477
    //MUL
    t3.xyz = t0.xyz * t1.xyz;
    //Instruction 68478
    //MUL
    t1.xyz = t1.xyz * t2.xyw;
    //Instruction 68479
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 68480
    //MUL
    t3.w = t3.y * 0.500000;
    //Instruction 68481
    //ADD
    t2.xy = t3.zz + t3.xw;
    //Instruction 68482
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68483
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68484
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 68485
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 68486
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 68487
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68488
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 68489
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 68490
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 68491
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 68492
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 68493
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 68494
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68495
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 68496
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 68497
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 68498
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68499
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 68500
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 68501
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 68502
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68503
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68504
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68505
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68506
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68507
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68508
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68509
    //MOV
    t0.w = 1.0;
    //Instruction 68510
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68511
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68512
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68513
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68514
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68515
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 68381
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68382
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68383
    //MOV
    t1.x = t16_0.x;
    //Instruction 68384
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68385
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68386
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68387
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68388
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68389
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68390
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68391
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68392
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68393
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68394
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68395
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68396
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68397
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 68398
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68399
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68400
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68401
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_5 = tmpvar_43;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_31;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 68516
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 68517
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68518
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68519
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 68520
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 68521
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68522
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68523
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68524
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68525
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68526
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68527
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68528
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 68529
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68530
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 68531
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68532
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 68533
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 68534
    //FTOU
    tu9 = uint(t9);
    //Instruction 68535
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 68536
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 68537
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 68538
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 68539
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 68540
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 68541
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 68542
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 68543
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 68544
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 68545
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 68546
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 68547
    //LOG
    t14 = log2(t7.x);
    //Instruction 68548
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 68549
    //EXP
    t14 = exp2(t14);
    //Instruction 68550
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 68551
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 68552
    //MUL
    t7.x = t7.x * t21;
    //Instruction 68553
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 68554
    //MOV
    t4.y = t3.w;
    //Instruction 68555
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 68556
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 68557
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 68558
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 68559
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68560
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 68561
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 68562
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 68563
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 68564
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 68565
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 68566
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 68567
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 68568
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68569
    //MOV
    gl_Position = t3;
    //Instruction 68570
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 68571
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 68572
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 68573
    //ADD
    vs_TEXCOORD0.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 68574
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68575
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 68576
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 68577
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68578
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68579
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 68580
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 68581
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 68582
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 68583
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 68584
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 68585
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 68586
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68587
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 68588
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 68589
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68590
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 68591
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 68592
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68593
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 68594
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 68595
    //MUL
    t2.xyz = t0.xyz * t1.xyz;
    //Instruction 68596
    //MUL
    t1.xyz = t1.xyz * t3.xyw;
    //Instruction 68597
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 68598
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 68599
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68600
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68601
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68602
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 68603
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 68604
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 68605
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68606
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 68607
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 68608
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 68609
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 68610
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 68611
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 68612
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68613
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 68614
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 68615
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 68616
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 68617
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 68618
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 68619
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 68620
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68621
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68622
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68623
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68624
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68625
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68626
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68627
    //MOV
    t0.w = 1.0;
    //Instruction 68628
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68629
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68630
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68631
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68632
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68633
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 68485
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68486
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68487
    //MOV
    t1.x = t16_0.x;
    //Instruction 68488
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68489
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68490
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68491
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68492
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68493
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68494
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68495
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68496
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68497
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68498
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68499
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68500
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 68501
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 68502
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 68503
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68504
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68505
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68506
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68507
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68508
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68509
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68510
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 68511
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 68512
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68513
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68514
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68515
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_36;
  highp vec4 tmpvar_37;
  tmpvar_37 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_38;
  tmpvar_38.x = tmpvar_37.x;
  tmpvar_38.y = (tmpvar_37.y * _ProjectionParams.x);
  o_36.xy = (tmpvar_38 + tmpvar_37.w);
  o_36.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  mediump vec3 tmpvar_43;
  mediump vec4 normal_44;
  normal_44 = tmpvar_42;
  mediump vec3 x2_45;
  mediump vec3 x1_46;
  x1_46.x = dot (unity_SHAr, normal_44);
  x1_46.y = dot (unity_SHAg, normal_44);
  x1_46.z = dot (unity_SHAb, normal_44);
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_47);
  x2_45.y = dot (unity_SHBg, tmpvar_47);
  x2_45.z = dot (unity_SHBb, tmpvar_47);
  tmpvar_43 = ((x2_45 + (unity_SHC.xyz * 
    ((normal_44.x * normal_44.x) - (normal_44.y * normal_44.y))
  )) + x1_46);
  tmpvar_5 = tmpvar_43;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_31;
  xlv_TEXCOORD4 = o_36;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 70595
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 70596
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70597
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70598
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 70599
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 70600
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70601
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70602
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70603
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70604
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70605
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70606
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70607
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 70608
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70609
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 70610
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70611
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70612
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 70613
    //FTOU
    tu9 = uint(t9);
    //Instruction 70614
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 70615
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 70616
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70617
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 70618
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 70619
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 70620
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 70621
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 70622
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 70623
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 70624
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 70625
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 70626
    //LOG
    t14 = log2(t7.x);
    //Instruction 70627
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 70628
    //EXP
    t14 = exp2(t14);
    //Instruction 70629
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 70630
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 70631
    //MUL
    t7.x = t7.x * t21;
    //Instruction 70632
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 70633
    //MOV
    t4.y = t3.w;
    //Instruction 70634
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 70635
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 70636
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 70637
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 70638
    //SQRT
    t22 = sqrt(t22);
    //Instruction 70639
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 70640
    //MUL
    t16_5.x = _WindEnabled * _WindQuality;
    //Instruction 70641
    //LT
    tb22 = 0.0<t16_5.x;
    //Instruction 70642
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 70643
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 70644
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 70645
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 70646
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 70647
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 70648
    //MOV
    gl_Position = t3;
    //Instruction 70649
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 70650
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 70651
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 70652
    //ADD
    vs_TEXCOORD0.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 70653
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70654
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 70655
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 70656
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70657
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70658
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 70659
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 70660
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 70661
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 70662
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 70663
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70664
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70665
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70666
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70667
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 70668
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70669
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 70670
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 70671
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70672
    //MOV
    t1.xz = vec2(0.500000, 0.500000);
    //Instruction 70673
    //MOV
    t1.y = _ProjectionParams.x;
    //Instruction 70674
    //MUL
    t2.xyz = t0.xyz * t1.xyz;
    //Instruction 70675
    //MUL
    t1.xyz = t1.xyz * t3.xyw;
    //Instruction 70676
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 70677
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 70678
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70679
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70680
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70681
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 70682
    //MUL
    t1.w = t1.y * 0.500000;
    //Instruction 70683
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 70684
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70685
    //MUL
    t0.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70686
    //MUL
    t0.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70687
    //MUL
    t0.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 70688
    //MUL
    t1.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70689
    //MUL
    t1.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70690
    //MUL
    t1.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 70691
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 70692
    //MUL
    t1.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70693
    //MUL
    t1.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70694
    //MUL
    t1.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 70695
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 70696
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 70697
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 70698
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 70699
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 70700
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 70701
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 70702
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 70703
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 70704
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 70705
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 70706
    //MOV
    t0.w = 1.0;
    //Instruction 70707
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 70708
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 70709
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 70710
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 70711
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 70712
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 70565
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 70566
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70567
    //MOV
    t1.x = t16_0.x;
    //Instruction 70568
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70569
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70570
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70571
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70572
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70573
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70574
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70575
    //LT
    tb1 = t10_2<0.0;
    //Instruction 70576
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70577
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 70578
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 70579
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70580
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 70581
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 70582
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 70583
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 70584
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 70585
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 70586
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70587
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 70588
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 70589
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 70590
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 70591
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 70592
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70593
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70594
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_47;
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49.x = tmpvar_48.x;
  tmpvar_49.y = (tmpvar_48.y * _ProjectionParams.x);
  o_47.xy = (tmpvar_49 + tmpvar_48.w);
  o_47.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = normalize(((v_50.xyz * tmpvar_17.z) + (v_51.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_53;
  mediump vec4 normal_54;
  normal_54 = tmpvar_52;
  mediump vec3 x2_55;
  mediump vec3 x1_56;
  x1_56.x = dot (unity_SHAr, normal_54);
  x1_56.y = dot (unity_SHAg, normal_54);
  x1_56.z = dot (unity_SHAb, normal_54);
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_57);
  x2_55.y = dot (unity_SHBg, tmpvar_57);
  x2_55.z = dot (unity_SHBb, tmpvar_57);
  tmpvar_53 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + x1_56);
  tmpvar_5 = tmpvar_53;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_42;
  xlv_TEXCOORD4 = o_47;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb11;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp vec2 t18;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68538
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68539
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68540
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68541
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 68542
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68543
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 68544
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 68545
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68546
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68547
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68548
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68549
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68550
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68551
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68552
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68553
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68554
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68555
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 68556
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68557
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 68558
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 68559
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 68560
    //MUL
    t3.y = t0.y * t23;
    //Instruction 68561
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 68562
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 68563
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 68564
    //LOG
    t23 = log2(t9);
    //Instruction 68565
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 68566
    //EXP
    t23 = exp2(t23);
    //Instruction 68567
    //NE
    tb24 = t9!=0.0;
    //Instruction 68568
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 68569
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 68570
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68571
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 68572
    //MUL
    t9 = t0.x * t9;
    //Instruction 68573
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 68574
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 68575
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 68576
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68577
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 68578
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68579
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 68580
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 68581
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 68582
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68583
    //MOV
    t4.y = t3.y;
    //Instruction 68584
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 68585
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68586
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 68587
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 68588
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68589
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 68590
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68591
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68592
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68593
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68594
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68595
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68596
    //MOV
    gl_Position = t3;
    //Instruction 68597
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68598
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 68599
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 68600
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 68601
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68602
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 68603
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68604
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 68605
    //MUL
    t1.x = t1.x * t22;
    //Instruction 68606
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 68607
    //MAD
    t4.x = t22 * 0.020835 + -0.085133;
    //Instruction 68608
    //MAD
    t4.x = t22 * t4.x + 0.180141;
    //Instruction 68609
    //MAD
    t4.x = t22 * t4.x + -0.330299;
    //Instruction 68610
    //MAD
    t22 = t22 * t4.x + 0.999866;
    //Instruction 68611
    //MUL
    t4.x = t22 * t1.x;
    //Instruction 68612
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 68613
    //LT
    tb11 = abs(t8.y)<abs(t8.x);
    //Instruction 68614
    //AND
    t4.x = tb11 ? t4.x : float(0.0);
    //Instruction 68615
    //MAD
    t1.x = t1.x * t22 + t4.x;
    //Instruction 68616
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 68617
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 68618
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68619
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 68620
    //LT
    tb22 = t22<(-t22);
    //Instruction 68621
    //MAX
    t4.x = max(t8.y, (-t8.x));
    //Instruction 68622
    //GE
    tb4 = t4.x>=(-t4.x);
    //Instruction 68623
    //AND
    ti22 = int(uint(tb22) & uint(tb4));
    //Instruction 68624
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 68625
    //LT
    tb22 = t1.x<0.0;
    //Instruction 68626
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 68627
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68628
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68629
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 68630
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68631
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 68632
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 68633
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68634
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 68635
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 68636
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68637
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68638
    //MAD
    t4.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68639
    //MAD
    t18.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68640
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t4.xy : t18.xy;
    //Instruction 68641
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68642
    //MUL
    t4.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68643
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t4.xyz;
    //Instruction 68644
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t2.www + t2.xyz;
    //Instruction 68645
    //ADD
    t2.xyz = t2.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68646
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 68647
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 68648
    //MUL
    t0.xyz = t2.xyz * t4.xyz;
    //Instruction 68649
    //MUL
    t4.xyz = t3.xyw * t4.xyz;
    //Instruction 68650
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 68651
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 68652
    //ADD
    t1.xw = t0.zz + t0.xw;
    //Instruction 68653
    //MUL
    t1.xw = t1.xw * _ScreenParams.xy;
    //Instruction 68654
    //MUL
    t2.xy = t1.xw * vec2(0.250000, 0.250000);
    //Instruction 68655
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 68656
    //MUL
    t4.w = t4.y * 0.500000;
    //Instruction 68657
    //ADD
    vs_TEXCOORD4.xy = t4.zz + t4.xw;
    //Instruction 68658
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68659
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 68660
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 68661
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 68662
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 68663
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 68664
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 68665
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 68666
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68667
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68668
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 68669
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68670
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68671
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68672
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68673
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68674
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68675
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68676
    //MOV
    t0.w = 1.0;
    //Instruction 68677
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68678
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68679
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68680
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68681
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68682
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 68516
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68517
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68518
    //MOV
    t1.x = t16_0.x;
    //Instruction 68519
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68520
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68521
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68522
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68523
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68524
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68525
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68526
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68527
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68528
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68529
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68530
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68531
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68532
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 68533
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 68534
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68535
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68536
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68537
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_47;
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49.x = tmpvar_48.x;
  tmpvar_49.y = (tmpvar_48.y * _ProjectionParams.x);
  o_47.xy = (tmpvar_49 + tmpvar_48.w);
  o_47.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = normalize(((v_50.xyz * tmpvar_17.z) + (v_51.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_53;
  mediump vec4 normal_54;
  normal_54 = tmpvar_52;
  mediump vec3 x2_55;
  mediump vec3 x1_56;
  x1_56.x = dot (unity_SHAr, normal_54);
  x1_56.y = dot (unity_SHAg, normal_54);
  x1_56.z = dot (unity_SHAb, normal_54);
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_57);
  x2_55.y = dot (unity_SHBg, tmpvar_57);
  x2_55.z = dot (unity_SHBb, tmpvar_57);
  tmpvar_53 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + x1_56);
  tmpvar_5 = tmpvar_53;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_42;
  xlv_TEXCOORD4 = o_47;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb11;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp vec2 t18;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68655
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68656
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68657
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68658
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 68659
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68660
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 68661
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 68662
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68663
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68664
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68665
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68666
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68667
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68668
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68669
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68670
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68671
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68672
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 68673
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68674
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 68675
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 68676
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 68677
    //MUL
    t3.y = t0.y * t23;
    //Instruction 68678
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 68679
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 68680
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 68681
    //LOG
    t23 = log2(t9);
    //Instruction 68682
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 68683
    //EXP
    t23 = exp2(t23);
    //Instruction 68684
    //NE
    tb24 = t9!=0.0;
    //Instruction 68685
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 68686
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 68687
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68688
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 68689
    //MUL
    t9 = t0.x * t9;
    //Instruction 68690
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 68691
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 68692
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 68693
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68694
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 68695
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68696
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 68697
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 68698
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 68699
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68700
    //MOV
    t4.y = t3.y;
    //Instruction 68701
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 68702
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68703
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 68704
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 68705
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68706
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 68707
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68708
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68709
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68710
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68711
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68712
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68713
    //MOV
    gl_Position = t3;
    //Instruction 68714
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68715
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 68716
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 68717
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 68718
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68719
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 68720
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68721
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 68722
    //MUL
    t1.x = t1.x * t22;
    //Instruction 68723
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 68724
    //MAD
    t4.x = t22 * 0.020835 + -0.085133;
    //Instruction 68725
    //MAD
    t4.x = t22 * t4.x + 0.180141;
    //Instruction 68726
    //MAD
    t4.x = t22 * t4.x + -0.330299;
    //Instruction 68727
    //MAD
    t22 = t22 * t4.x + 0.999866;
    //Instruction 68728
    //MUL
    t4.x = t22 * t1.x;
    //Instruction 68729
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 68730
    //LT
    tb11 = abs(t8.y)<abs(t8.x);
    //Instruction 68731
    //AND
    t4.x = tb11 ? t4.x : float(0.0);
    //Instruction 68732
    //MAD
    t1.x = t1.x * t22 + t4.x;
    //Instruction 68733
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 68734
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 68735
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68736
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 68737
    //LT
    tb22 = t22<(-t22);
    //Instruction 68738
    //MAX
    t4.x = max(t8.y, (-t8.x));
    //Instruction 68739
    //GE
    tb4 = t4.x>=(-t4.x);
    //Instruction 68740
    //AND
    ti22 = int(uint(tb22) & uint(tb4));
    //Instruction 68741
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 68742
    //LT
    tb22 = t1.x<0.0;
    //Instruction 68743
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 68744
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68745
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68746
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 68747
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68748
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 68749
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 68750
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68751
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 68752
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 68753
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68754
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68755
    //MAD
    t4.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68756
    //MAD
    t18.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68757
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t4.xy : t18.xy;
    //Instruction 68758
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68759
    //MUL
    t4.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68760
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t4.xyz;
    //Instruction 68761
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t2.www + t2.xyz;
    //Instruction 68762
    //ADD
    t2.xyz = t2.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68763
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 68764
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 68765
    //MUL
    t0.xyz = t2.xyz * t4.xyz;
    //Instruction 68766
    //MUL
    t4.xyz = t3.xyw * t4.xyz;
    //Instruction 68767
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 68768
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 68769
    //ADD
    t1.xw = t0.zz + t0.xw;
    //Instruction 68770
    //MUL
    t1.xw = t1.xw * _ScreenParams.xy;
    //Instruction 68771
    //MUL
    t2.xy = t1.xw * vec2(0.250000, 0.250000);
    //Instruction 68772
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 68773
    //MUL
    t4.w = t4.y * 0.500000;
    //Instruction 68774
    //ADD
    vs_TEXCOORD4.xy = t4.zz + t4.xw;
    //Instruction 68775
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68776
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 68777
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 68778
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 68779
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 68780
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 68781
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 68782
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 68783
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68784
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68785
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 68786
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68787
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68788
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68789
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68790
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68791
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68792
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68793
    //MOV
    t0.w = 1.0;
    //Instruction 68794
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68795
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68796
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68797
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68798
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68799
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 68634
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68635
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68636
    //MOV
    t1.x = t16_0.x;
    //Instruction 68637
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68638
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68639
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68640
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68641
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68642
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68643
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68644
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68645
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68646
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68647
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68648
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68649
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68650
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 68651
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68652
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68653
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68654
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_17.z) + (v_52.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_5 = tmpvar_54;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_43;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 70744
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 70745
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 70746
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 70747
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70748
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70749
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 70750
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 70751
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70752
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70753
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70754
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70755
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70756
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70757
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70758
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70759
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70760
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 70761
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70762
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 70763
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 70764
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 70765
    //MUL
    t3.y = t0.y * t26;
    //Instruction 70766
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 70767
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 70768
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 70769
    //LOG
    t26 = log2(t10);
    //Instruction 70770
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 70771
    //EXP
    t26 = exp2(t26);
    //Instruction 70772
    //NE
    tb27 = t10!=0.0;
    //Instruction 70773
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 70774
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 70775
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70776
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 70777
    //MUL
    t10 = t0.x * t10;
    //Instruction 70778
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70779
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 70780
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70781
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 70782
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70783
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 70784
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70785
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70786
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 70787
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 70788
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70789
    //MOV
    t5.y = t3.y;
    //Instruction 70790
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 70791
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 70792
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 70793
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 70794
    //SQRT
    t27 = sqrt(t27);
    //Instruction 70795
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 70796
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70797
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70798
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70799
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70800
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70801
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 70802
    //MOV
    gl_Position = t3;
    //Instruction 70803
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70804
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 70805
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 70806
    //ADD
    vs_TEXCOORD0.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 70807
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70808
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 70809
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 70810
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70811
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70812
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 70813
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 70814
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70815
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 70816
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 70817
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 70818
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 70819
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 70820
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 70821
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 70822
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 70823
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 70824
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 70825
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 70826
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 70827
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 70828
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 70829
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70830
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 70831
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 70832
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 70833
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 70834
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 70835
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 70836
    //LT
    tb9 = t1.x<0.0;
    //Instruction 70837
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 70838
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70839
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70840
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 70841
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70842
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 70843
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 70844
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70845
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 70846
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 70847
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70848
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70849
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70850
    //MAD
    t20.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70851
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t20.xy;
    //Instruction 70852
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70853
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70854
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70855
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70856
    //MOV
    t2.xz = vec2(0.500000, 0.500000);
    //Instruction 70857
    //MOV
    t2.y = _ProjectionParams.x;
    //Instruction 70858
    //MUL
    t0.xyz = t1.xyz * t2.xyz;
    //Instruction 70859
    //MUL
    t2.xyz = t2.xyz * t3.xyw;
    //Instruction 70860
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 70861
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 70862
    //ADD
    t3.xy = t0.zz + t0.xw;
    //Instruction 70863
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 70864
    //MUL
    t1.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 70865
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 70866
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 70867
    //ADD
    vs_TEXCOORD4.xy = t2.zz + t2.xw;
    //Instruction 70868
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70869
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 70870
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 70871
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 70872
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 70873
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 70874
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 70875
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 70876
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 70877
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 70878
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 70879
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 70880
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 70881
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 70882
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 70883
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 70884
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 70885
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 70886
    //MOV
    t0.w = 1.0;
    //Instruction 70887
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 70888
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 70889
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 70890
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 70891
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 70892
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 70713
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 70714
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70715
    //MOV
    t1.x = t16_0.x;
    //Instruction 70716
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70717
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70718
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70719
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70720
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70721
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70722
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70723
    //LT
    tb1 = t10_2<0.0;
    //Instruction 70724
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70725
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 70726
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 70727
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70728
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 70729
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 70730
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 70731
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 70732
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 70733
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 70734
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70735
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 70736
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 70737
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 70738
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 70739
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 70740
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 70741
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70742
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70743
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_17.z) + (v_52.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_5 = tmpvar_54;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_43;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 68713
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68714
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68715
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 68716
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68717
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68718
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 68719
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 68720
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68721
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68722
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68723
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68724
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68725
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68726
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68727
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68728
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68729
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 68730
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68731
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 68732
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 68733
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 68734
    //MUL
    t3.y = t0.y * t26;
    //Instruction 68735
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 68736
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 68737
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 68738
    //LOG
    t26 = log2(t10);
    //Instruction 68739
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 68740
    //EXP
    t26 = exp2(t26);
    //Instruction 68741
    //NE
    tb27 = t10!=0.0;
    //Instruction 68742
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 68743
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 68744
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68745
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 68746
    //MUL
    t10 = t0.x * t10;
    //Instruction 68747
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68748
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 68749
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68750
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 68751
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68752
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 68753
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68754
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68755
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 68756
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 68757
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68758
    //MOV
    t5.y = t3.y;
    //Instruction 68759
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68760
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68761
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68762
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 68763
    //SQRT
    t27 = sqrt(t27);
    //Instruction 68764
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 68765
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68766
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68767
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68768
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68769
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68770
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68771
    //MOV
    gl_Position = t3;
    //Instruction 68772
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68773
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 68774
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 68775
    //ADD
    vs_TEXCOORD0.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 68776
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68777
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 68778
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 68779
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68780
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68781
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 68782
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68783
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68784
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68785
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 68786
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 68787
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 68788
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 68789
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 68790
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 68791
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 68792
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 68793
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 68794
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 68795
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 68796
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 68797
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 68798
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68799
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 68800
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 68801
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 68802
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 68803
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 68804
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 68805
    //LT
    tb9 = t1.x<0.0;
    //Instruction 68806
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 68807
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68808
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68809
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 68810
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68811
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 68812
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 68813
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68814
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 68815
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 68816
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68817
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68818
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68819
    //MAD
    t20.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68820
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t20.xy;
    //Instruction 68821
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68822
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 68823
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 68824
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68825
    //MOV
    t2.xz = vec2(0.500000, 0.500000);
    //Instruction 68826
    //MOV
    t2.y = _ProjectionParams.x;
    //Instruction 68827
    //MUL
    t0.xyz = t1.xyz * t2.xyz;
    //Instruction 68828
    //MUL
    t2.xyz = t2.xyz * t3.xyw;
    //Instruction 68829
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 68830
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 68831
    //ADD
    t3.xy = t0.zz + t0.xw;
    //Instruction 68832
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 68833
    //MUL
    t1.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 68834
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 68835
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 68836
    //ADD
    vs_TEXCOORD4.xy = t2.zz + t2.xw;
    //Instruction 68837
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68838
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 68839
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 68840
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 68841
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 68842
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 68843
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 68844
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 68845
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 68846
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 68847
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 68848
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 68849
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 68850
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68851
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 68852
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 68853
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 68854
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 68855
    //MOV
    t0.w = 1.0;
    //Instruction 68856
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 68857
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 68858
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 68859
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 68860
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 68861
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 68683
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68684
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68685
    //MOV
    t1.x = t16_0.x;
    //Instruction 68686
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68687
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68688
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68689
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68690
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68691
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68692
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68693
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68694
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68695
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68696
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68697
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68698
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 68699
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 68700
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 68701
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68702
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68703
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68704
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68705
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68706
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68707
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68708
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 68709
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68710
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68711
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68712
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_47;
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49.x = tmpvar_48.x;
  tmpvar_49.y = (tmpvar_48.y * _ProjectionParams.x);
  o_47.xy = (tmpvar_49 + tmpvar_48.w);
  o_47.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = normalize(((v_50.xyz * tmpvar_17.z) + (v_51.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_53;
  mediump vec4 normal_54;
  normal_54 = tmpvar_52;
  mediump vec3 x2_55;
  mediump vec3 x1_56;
  x1_56.x = dot (unity_SHAr, normal_54);
  x1_56.y = dot (unity_SHAg, normal_54);
  x1_56.z = dot (unity_SHAb, normal_54);
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_57);
  x2_55.y = dot (unity_SHBg, tmpvar_57);
  x2_55.z = dot (unity_SHBb, tmpvar_57);
  tmpvar_53 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + x1_56);
  tmpvar_5 = tmpvar_53;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_42;
  xlv_TEXCOORD4 = o_47;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb11;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp vec2 t18;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68822
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68823
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68824
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68825
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 68826
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68827
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 68828
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 68829
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68830
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68831
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68832
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68833
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68834
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68835
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68836
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68837
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68838
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68839
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 68840
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68841
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 68842
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 68843
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 68844
    //MUL
    t3.y = t0.y * t23;
    //Instruction 68845
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 68846
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 68847
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 68848
    //LOG
    t23 = log2(t9);
    //Instruction 68849
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 68850
    //EXP
    t23 = exp2(t23);
    //Instruction 68851
    //NE
    tb24 = t9!=0.0;
    //Instruction 68852
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 68853
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 68854
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68855
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 68856
    //MUL
    t9 = t0.x * t9;
    //Instruction 68857
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 68858
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 68859
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 68860
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68861
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 68862
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68863
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 68864
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 68865
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 68866
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68867
    //MOV
    t4.y = t3.y;
    //Instruction 68868
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 68869
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68870
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 68871
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 68872
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68873
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 68874
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68875
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68876
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68877
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68878
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68879
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68880
    //MOV
    gl_Position = t3;
    //Instruction 68881
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68882
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 68883
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 68884
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 68885
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68886
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 68887
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68888
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 68889
    //MUL
    t1.x = t1.x * t22;
    //Instruction 68890
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 68891
    //MAD
    t4.x = t22 * 0.020835 + -0.085133;
    //Instruction 68892
    //MAD
    t4.x = t22 * t4.x + 0.180141;
    //Instruction 68893
    //MAD
    t4.x = t22 * t4.x + -0.330299;
    //Instruction 68894
    //MAD
    t22 = t22 * t4.x + 0.999866;
    //Instruction 68895
    //MUL
    t4.x = t22 * t1.x;
    //Instruction 68896
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 68897
    //LT
    tb11 = abs(t8.y)<abs(t8.x);
    //Instruction 68898
    //AND
    t4.x = tb11 ? t4.x : float(0.0);
    //Instruction 68899
    //MAD
    t1.x = t1.x * t22 + t4.x;
    //Instruction 68900
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 68901
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 68902
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68903
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 68904
    //LT
    tb22 = t22<(-t22);
    //Instruction 68905
    //MAX
    t4.x = max(t8.y, (-t8.x));
    //Instruction 68906
    //GE
    tb4 = t4.x>=(-t4.x);
    //Instruction 68907
    //AND
    ti22 = int(uint(tb22) & uint(tb4));
    //Instruction 68908
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 68909
    //LT
    tb22 = t1.x<0.0;
    //Instruction 68910
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 68911
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68912
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68913
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 68914
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68915
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 68916
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 68917
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68918
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 68919
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 68920
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68921
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68922
    //MAD
    t4.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68923
    //MAD
    t18.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68924
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t4.xy : t18.xy;
    //Instruction 68925
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 68926
    //MUL
    t4.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68927
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t4.xyz;
    //Instruction 68928
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t2.www + t2.xyz;
    //Instruction 68929
    //ADD
    t2.xyz = t2.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68930
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 68931
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 68932
    //MUL
    t0.xyz = t2.xyz * t4.xyz;
    //Instruction 68933
    //MUL
    t4.xyz = t3.xyw * t4.xyz;
    //Instruction 68934
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 68935
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 68936
    //ADD
    t1.xw = t0.zz + t0.xw;
    //Instruction 68937
    //MUL
    t1.xw = t1.xw * _ScreenParams.xy;
    //Instruction 68938
    //MUL
    t2.xy = t1.xw * vec2(0.250000, 0.250000);
    //Instruction 68939
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 68940
    //MUL
    t4.w = t4.y * 0.500000;
    //Instruction 68941
    //ADD
    vs_TEXCOORD4.xy = t4.zz + t4.xw;
    //Instruction 68942
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 68943
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 68944
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 68945
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 68946
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 68947
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 68948
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 68949
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 68950
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68951
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68952
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 68953
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 68954
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 68955
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 68956
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 68957
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 68958
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 68959
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 68960
    //MOV
    t0.w = 1.0;
    //Instruction 68961
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 68962
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 68963
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 68964
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 68965
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 68966
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 68800
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68801
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68802
    //MOV
    t1.x = t16_0.x;
    //Instruction 68803
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68804
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68805
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68806
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68807
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68808
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68809
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68810
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68811
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68812
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68813
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68814
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68815
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68816
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 68817
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 68818
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68819
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68820
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68821
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_47;
  highp vec4 tmpvar_48;
  tmpvar_48 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_49;
  tmpvar_49.x = tmpvar_48.x;
  tmpvar_49.y = (tmpvar_48.y * _ProjectionParams.x);
  o_47.xy = (tmpvar_49 + tmpvar_48.w);
  o_47.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = normalize(((v_50.xyz * tmpvar_17.z) + (v_51.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_53;
  mediump vec4 normal_54;
  normal_54 = tmpvar_52;
  mediump vec3 x2_55;
  mediump vec3 x1_56;
  x1_56.x = dot (unity_SHAr, normal_54);
  x1_56.y = dot (unity_SHAg, normal_54);
  x1_56.z = dot (unity_SHAb, normal_54);
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_57);
  x2_55.y = dot (unity_SHBg, tmpvar_57);
  x2_55.z = dot (unity_SHBb, tmpvar_57);
  tmpvar_53 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + x1_56);
  tmpvar_5 = tmpvar_53;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_42;
  xlv_TEXCOORD4 = o_47;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
bool tb11;
highp vec2 t15;
highp vec2 t16;
highp uint tu16;
highp vec2 t18;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 70914
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 70915
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 70916
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70917
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 70918
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70919
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 70920
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 70921
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70922
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70923
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70924
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70925
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70926
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70927
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70928
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70929
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70930
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70931
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 70932
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70933
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 70934
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 70935
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 70936
    //MUL
    t3.y = t0.y * t23;
    //Instruction 70937
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 70938
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 70939
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 70940
    //LOG
    t23 = log2(t9);
    //Instruction 70941
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 70942
    //EXP
    t23 = exp2(t23);
    //Instruction 70943
    //NE
    tb24 = t9!=0.0;
    //Instruction 70944
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 70945
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 70946
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70947
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 70948
    //MUL
    t9 = t0.x * t9;
    //Instruction 70949
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 70950
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 70951
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 70952
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70953
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 70954
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70955
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 70956
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 70957
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 70958
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70959
    //MOV
    t4.y = t3.y;
    //Instruction 70960
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 70961
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 70962
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 70963
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 70964
    //SQRT
    t22 = sqrt(t22);
    //Instruction 70965
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 70966
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70967
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70968
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70969
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70970
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70971
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 70972
    //MOV
    gl_Position = t3;
    //Instruction 70973
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70974
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 70975
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 70976
    //ADD
    vs_TEXCOORD0.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 70977
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 70978
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 70979
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70980
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 70981
    //MUL
    t1.x = t1.x * t22;
    //Instruction 70982
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 70983
    //MAD
    t4.x = t22 * 0.020835 + -0.085133;
    //Instruction 70984
    //MAD
    t4.x = t22 * t4.x + 0.180141;
    //Instruction 70985
    //MAD
    t4.x = t22 * t4.x + -0.330299;
    //Instruction 70986
    //MAD
    t22 = t22 * t4.x + 0.999866;
    //Instruction 70987
    //MUL
    t4.x = t22 * t1.x;
    //Instruction 70988
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 70989
    //LT
    tb11 = abs(t8.y)<abs(t8.x);
    //Instruction 70990
    //AND
    t4.x = tb11 ? t4.x : float(0.0);
    //Instruction 70991
    //MAD
    t1.x = t1.x * t22 + t4.x;
    //Instruction 70992
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 70993
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 70994
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 70995
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 70996
    //LT
    tb22 = t22<(-t22);
    //Instruction 70997
    //MAX
    t4.x = max(t8.y, (-t8.x));
    //Instruction 70998
    //GE
    tb4 = t4.x>=(-t4.x);
    //Instruction 70999
    //AND
    ti22 = int(uint(tb22) & uint(tb4));
    //Instruction 71000
    //MOVC
    t1.x = (ti22 != 0) ? (-t1.x) : t1.x;
    //Instruction 71001
    //LT
    tb22 = t1.x<0.0;
    //Instruction 71002
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 71003
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 71004
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 71005
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 71006
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 71007
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 71008
    //GE
    tb22 = t1.x>=(-t1.x);
    //Instruction 71009
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 71010
    //MOVC
    t1.x = (tb22) ? t1.x : (-t1.x);
    //Instruction 71011
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 71012
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71013
    //LT
    tb22 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 71014
    //MAD
    t4.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 71015
    //MAD
    t18.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 71016
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb22)) ? t4.xy : t18.xy;
    //Instruction 71017
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 71018
    //MUL
    t4.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 71019
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t4.xyz;
    //Instruction 71020
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t2.www + t2.xyz;
    //Instruction 71021
    //ADD
    t2.xyz = t2.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 71022
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 71023
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 71024
    //MUL
    t0.xyz = t2.xyz * t4.xyz;
    //Instruction 71025
    //MUL
    t4.xyz = t3.xyw * t4.xyz;
    //Instruction 71026
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 71027
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 71028
    //ADD
    t1.xw = t0.zz + t0.xw;
    //Instruction 71029
    //MUL
    t1.xw = t1.xw * _ScreenParams.xy;
    //Instruction 71030
    //MUL
    t2.xy = t1.xw * vec2(0.250000, 0.250000);
    //Instruction 71031
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 71032
    //MUL
    t4.w = t4.y * 0.500000;
    //Instruction 71033
    //ADD
    vs_TEXCOORD4.xy = t4.zz + t4.xw;
    //Instruction 71034
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71035
    //MUL
    t2.x = t8.y * _World2Object[0].x;
    //Instruction 71036
    //MUL
    t2.y = t8.y * _World2Object[1].x;
    //Instruction 71037
    //MUL
    t2.z = t8.y * _World2Object[2].x;
    //Instruction 71038
    //MUL
    t3.x = (-t8.x) * _World2Object[0].z;
    //Instruction 71039
    //MUL
    t3.y = (-t8.x) * _World2Object[1].z;
    //Instruction 71040
    //MUL
    t3.z = (-t8.x) * _World2Object[2].z;
    //Instruction 71041
    //ADD
    t1.xyz = t2.xyz + t3.xyz;
    //Instruction 71042
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 71043
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 71044
    //MUL
    t0.xyz = vec3(t22) * t1.xyz;
    //Instruction 71045
    //MUL
    t16_5.x = t0.y * t0.y;
    //Instruction 71046
    //MAD
    t16_5.x = t0.x * t0.x + (-t16_5.x);
    //Instruction 71047
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 71048
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 71049
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 71050
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 71051
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 71052
    //MOV
    t0.w = 1.0;
    //Instruction 71053
    //DP4
    t16_6.x = dot(unity_SHAr, t0);
    //Instruction 71054
    //DP4
    t16_6.y = dot(unity_SHAg, t0);
    //Instruction 71055
    //DP4
    t16_6.z = dot(unity_SHAb, t0);
    //Instruction 71056
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 71057
    //MOV
    vs_TEXCOORD6.xyz = t16_5.xyz;
    //Instruction 71058
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70893
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 70894
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70895
    //MOV
    t1.x = t16_0.x;
    //Instruction 70896
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70897
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70898
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70899
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70900
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70901
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70902
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70903
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70904
    //LT
    tb1 = t10_2<0.0;
    //Instruction 70905
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70906
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 70907
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 70908
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 70909
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 70910
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 70911
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70912
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70913
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_17.z) + (v_52.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_5 = tmpvar_54;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_43;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 68893
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68894
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68895
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 68896
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68897
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68898
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 68899
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 68900
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68901
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68902
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68903
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68904
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68905
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68906
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68907
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68908
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68909
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 68910
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68911
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 68912
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 68913
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 68914
    //MUL
    t3.y = t0.y * t26;
    //Instruction 68915
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 68916
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 68917
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 68918
    //LOG
    t26 = log2(t10);
    //Instruction 68919
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 68920
    //EXP
    t26 = exp2(t26);
    //Instruction 68921
    //NE
    tb27 = t10!=0.0;
    //Instruction 68922
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 68923
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 68924
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68925
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 68926
    //MUL
    t10 = t0.x * t10;
    //Instruction 68927
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68928
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 68929
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68930
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 68931
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68932
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 68933
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68934
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 68935
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 68936
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 68937
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68938
    //MOV
    t5.y = t3.y;
    //Instruction 68939
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68940
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68941
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68942
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 68943
    //SQRT
    t27 = sqrt(t27);
    //Instruction 68944
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 68945
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68946
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68947
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68948
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68949
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68950
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 68951
    //MOV
    gl_Position = t3;
    //Instruction 68952
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68953
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 68954
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 68955
    //ADD
    vs_TEXCOORD0.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 68956
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 68957
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 68958
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 68959
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68960
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68961
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 68962
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68963
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68964
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68965
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 68966
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 68967
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 68968
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 68969
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 68970
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 68971
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 68972
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 68973
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 68974
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 68975
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 68976
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 68977
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 68978
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68979
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 68980
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 68981
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 68982
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 68983
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 68984
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 68985
    //LT
    tb9 = t1.x<0.0;
    //Instruction 68986
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 68987
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 68988
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68989
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 68990
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68991
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 68992
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 68993
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68994
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 68995
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 68996
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68997
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68998
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68999
    //MAD
    t20.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69000
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t20.xy;
    //Instruction 69001
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 69002
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 69003
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 69004
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 69005
    //MOV
    t2.xz = vec2(0.500000, 0.500000);
    //Instruction 69006
    //MOV
    t2.y = _ProjectionParams.x;
    //Instruction 69007
    //MUL
    t0.xyz = t1.xyz * t2.xyz;
    //Instruction 69008
    //MUL
    t2.xyz = t2.xyz * t3.xyw;
    //Instruction 69009
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 69010
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 69011
    //ADD
    t3.xy = t0.zz + t0.xw;
    //Instruction 69012
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 69013
    //MUL
    t1.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 69014
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 69015
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 69016
    //ADD
    vs_TEXCOORD4.xy = t2.zz + t2.xw;
    //Instruction 69017
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69018
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 69019
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 69020
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 69021
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 69022
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 69023
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 69024
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 69025
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 69026
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 69027
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 69028
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 69029
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 69030
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 69031
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 69032
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 69033
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 69034
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 69035
    //MOV
    t0.w = 1.0;
    //Instruction 69036
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 69037
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 69038
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 69039
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 69040
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 69041
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 68862
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68863
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68864
    //MOV
    t1.x = t16_0.x;
    //Instruction 68865
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68866
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68867
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68868
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68869
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68870
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68871
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68872
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68873
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68874
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68875
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68876
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68877
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 68878
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 68879
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 68880
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68881
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68882
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68883
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68884
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68885
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68886
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68887
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 68888
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 68889
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68890
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68891
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68892
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  highp vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3 = _Color;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_6);
  highp vec4 o_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = (tmpvar_49.y * _ProjectionParams.x);
  o_48.xy = (tmpvar_50 + tmpvar_49.w);
  o_48.zw = tmpvar_2.zw;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = vec2(0.0, 0.0);
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = normalize(((v_51.xyz * tmpvar_17.z) + (v_52.xyz * tmpvar_18.z)));
  mediump vec3 tmpvar_54;
  mediump vec4 normal_55;
  normal_55 = tmpvar_53;
  mediump vec3 x2_56;
  mediump vec3 x1_57;
  x1_57.x = dot (unity_SHAr, normal_55);
  x1_57.y = dot (unity_SHAg, normal_55);
  x1_57.z = dot (unity_SHAb, normal_55);
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_58);
  x2_56.y = dot (unity_SHBg, tmpvar_58);
  x2_56.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_54 = ((x2_56 + (unity_SHC.xyz * 
    ((normal_55.x * normal_55.x) - (normal_55.y * normal_55.y))
  )) + x1_57);
  tmpvar_5 = tmpvar_54;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = screenPos_43;
  xlv_TEXCOORD4 = o_48;
  xlv_TEXCOORD5 = tmpvar_4;
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 68997
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68998
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68999
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 69000
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69001
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69002
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 69003
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 69004
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69005
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69006
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69007
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69008
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69009
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69010
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69011
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69012
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69013
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 69014
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69015
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 69016
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 69017
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69018
    //MUL
    t3.y = t0.y * t26;
    //Instruction 69019
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 69020
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 69021
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 69022
    //LOG
    t26 = log2(t10);
    //Instruction 69023
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 69024
    //EXP
    t26 = exp2(t26);
    //Instruction 69025
    //NE
    tb27 = t10!=0.0;
    //Instruction 69026
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 69027
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 69028
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69029
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 69030
    //MUL
    t10 = t0.x * t10;
    //Instruction 69031
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69032
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 69033
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 69034
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 69035
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69036
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 69037
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69038
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 69039
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 69040
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 69041
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69042
    //MOV
    t5.y = t3.y;
    //Instruction 69043
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 69044
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 69045
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 69046
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 69047
    //SQRT
    t27 = sqrt(t27);
    //Instruction 69048
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 69049
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69050
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69051
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69052
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69053
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69054
    //ADD
    t3 = t3 + glstate_matrix_mvp[3];
    //Instruction 69055
    //MOV
    gl_Position = t3;
    //Instruction 69056
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69057
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 69058
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 69059
    //ADD
    vs_TEXCOORD0.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 69060
    //MOV
    vs_TEXCOORD1 = _Color;
    //Instruction 69061
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 69062
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 69063
    //FRC
    t1.x = fract(t1.x);
    //Instruction 69064
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 69065
    //MOV
    vs_TEXCOORD2.z = t1.x;
    //Instruction 69066
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 69067
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 69068
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 69069
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 69070
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 69071
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 69072
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 69073
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 69074
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 69075
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 69076
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 69077
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 69078
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 69079
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 69080
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 69081
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 69082
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 69083
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 69084
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 69085
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 69086
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 69087
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 69088
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 69089
    //LT
    tb9 = t1.x<0.0;
    //Instruction 69090
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 69091
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 69092
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 69093
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69094
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 69095
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69096
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 69097
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 69098
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 69099
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69100
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 69101
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69102
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69103
    //MAD
    t20.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69104
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb9)) ? t17.xy : t20.xy;
    //Instruction 69105
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 69106
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 69107
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 69108
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 69109
    //MOV
    t2.xz = vec2(0.500000, 0.500000);
    //Instruction 69110
    //MOV
    t2.y = _ProjectionParams.x;
    //Instruction 69111
    //MUL
    t0.xyz = t1.xyz * t2.xyz;
    //Instruction 69112
    //MUL
    t2.xyz = t2.xyz * t3.xyw;
    //Instruction 69113
    //MOV
    vs_TEXCOORD4.zw = t3.zw;
    //Instruction 69114
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 69115
    //ADD
    t3.xy = t0.zz + t0.xw;
    //Instruction 69116
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 69117
    //MUL
    t1.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 69118
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 69119
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 69120
    //ADD
    vs_TEXCOORD4.xy = t2.zz + t2.xw;
    //Instruction 69121
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69122
    //MUL
    t1.x = t4.y * _World2Object[0].x;
    //Instruction 69123
    //MUL
    t1.y = t4.y * _World2Object[1].x;
    //Instruction 69124
    //MUL
    t1.z = t4.y * _World2Object[2].x;
    //Instruction 69125
    //MUL
    t2.x = (-t4.x) * _World2Object[0].z;
    //Instruction 69126
    //MUL
    t2.y = (-t4.x) * _World2Object[1].z;
    //Instruction 69127
    //MUL
    t2.z = (-t4.x) * _World2Object[2].z;
    //Instruction 69128
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 69129
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 69130
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 69131
    //MUL
    t0.xyz = vec3(t25) * t1.xyz;
    //Instruction 69132
    //MUL
    t16_6.x = t0.y * t0.y;
    //Instruction 69133
    //MAD
    t16_6.x = t0.x * t0.x + (-t16_6.x);
    //Instruction 69134
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 69135
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 69136
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 69137
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 69138
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 69139
    //MOV
    t0.w = 1.0;
    //Instruction 69140
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 69141
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 69142
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 69143
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 69144
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 69145
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 68967
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 68968
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68969
    //MOV
    t1.x = t16_0.x;
    //Instruction 68970
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68971
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68972
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 68973
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68974
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68975
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 68976
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68977
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68978
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68979
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68980
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68981
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68982
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 68983
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 68984
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 68985
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68986
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68987
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68988
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 68989
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 68990
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 68991
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 68992
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 68993
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 68994
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68995
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68996
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 278581
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_2;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_36);
  x2_35.y = dot (unity_SHBg, tmpvar_36);
  x2_35.z = dot (unity_SHBb, tmpvar_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_35 + (unity_SHC.xyz * (
    (normal_34.x * normal_34.x)
   - 
    (normal_34.y * normal_34.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec2 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 69167
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 69168
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 69169
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69170
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 69171
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 69172
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69173
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 69174
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69175
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 69176
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69177
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 69178
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 69179
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 69180
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69181
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 69182
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69183
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69184
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 69185
    //FTOU
    tu18 = uint(t18);
    //Instruction 69186
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 69187
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 69188
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69189
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69190
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 69191
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 69192
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69193
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 69194
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69195
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 69196
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 69197
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 69198
    //LOG
    t1.x = log2(t6);
    //Instruction 69199
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 69200
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 69201
    //NE
    tb7 = t6!=0.0;
    //Instruction 69202
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 69203
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 69204
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 69205
    //MOV
    t1.y = t2.w;
    //Instruction 69206
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 69207
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69208
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69209
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 69210
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 69211
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69212
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 69213
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 69214
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 69215
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 69216
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 69217
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 69218
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 69219
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 69220
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69221
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69222
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 69223
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69224
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69225
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 69226
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 69227
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69228
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69229
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 69230
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 69231
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 69232
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69233
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 69234
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 69235
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 69236
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 69237
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 69238
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 69239
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69240
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 69241
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 69242
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 69243
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69244
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69245
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69246
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69247
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69248
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 69249
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 69250
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69251
    //MUL
    t16_3 = t2.y * t2.y;
    //Instruction 69252
    //MAD
    t16_3 = t2.x * t2.x + (-t16_3);
    //Instruction 69253
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 69254
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 69255
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 69256
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 69257
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_3) + t16_5.xyz;
    //Instruction 69258
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69146
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69147
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69148
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69149
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 69150
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69151
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69152
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69153
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69154
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69155
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69156
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69157
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69158
    //MOV
    t16_0.w = 1.0;
    //Instruction 69159
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 69160
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 69161
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 69162
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 69163
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69164
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 69165
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69166
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_29;
  v_29.x = _World2Object[0].x;
  v_29.y = _World2Object[1].x;
  v_29.z = _World2Object[2].x;
  v_29.w = _World2Object[3].x;
  highp vec4 v_30;
  v_30.x = _World2Object[0].y;
  v_30.y = _World2Object[1].y;
  v_30.z = _World2Object[2].y;
  v_30.w = _World2Object[3].y;
  highp vec4 v_31;
  v_31.x = _World2Object[0].z;
  v_31.y = _World2Object[1].z;
  v_31.z = _World2Object[2].z;
  v_31.w = _World2Object[3].z;
  highp vec3 tmpvar_32;
  tmpvar_32 = normalize(((
    (v_29.xyz * _BillboardNormal.x)
   + 
    (v_30.xyz * _BillboardNormal.y)
  ) + (v_31.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_32;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_2;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_36);
  x2_35.y = dot (unity_SHBg, tmpvar_36);
  x2_35.z = dot (unity_SHBb, tmpvar_36);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_35 + (unity_SHC.xyz * (
    (normal_34.x * normal_34.x)
   - 
    (normal_34.y * normal_34.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec2 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 69279
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 69280
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 69281
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69282
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 69283
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 69284
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69285
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 69286
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69287
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 69288
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69289
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 69290
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 69291
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 69292
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69293
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 69294
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69295
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69296
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 69297
    //FTOU
    tu18 = uint(t18);
    //Instruction 69298
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 69299
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 69300
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69301
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69302
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 69303
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 69304
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69305
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 69306
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69307
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 69308
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 69309
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 69310
    //LOG
    t1.x = log2(t6);
    //Instruction 69311
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 69312
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 69313
    //NE
    tb7 = t6!=0.0;
    //Instruction 69314
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 69315
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 69316
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 69317
    //MOV
    t1.y = t2.w;
    //Instruction 69318
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 69319
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69320
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69321
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 69322
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 69323
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69324
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 69325
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 69326
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 69327
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 69328
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 69329
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 69330
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 69331
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 69332
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69333
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69334
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 69335
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69336
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69337
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 69338
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 69339
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69340
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69341
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 69342
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 69343
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 69344
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69345
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 69346
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 69347
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 69348
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 69349
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 69350
    //ADD
    vs_TEXCOORD1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 69351
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69352
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 69353
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 69354
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 69355
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69356
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69357
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69358
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69359
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69360
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 69361
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 69362
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69363
    //MUL
    t16_3 = t2.y * t2.y;
    //Instruction 69364
    //MAD
    t16_3 = t2.x * t2.x + (-t16_3);
    //Instruction 69365
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 69366
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 69367
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 69368
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 69369
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_3) + t16_5.xyz;
    //Instruction 69370
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69259
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69260
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69261
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69262
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 69263
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69264
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69265
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69266
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69267
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69268
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69269
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69270
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69271
    //MOV
    t16_0.w = 1.0;
    //Instruction 69272
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 69273
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 69274
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 69275
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 69276
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69277
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69278
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_33;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = worldNormal_2;
  mediump vec4 normal_35;
  normal_35 = tmpvar_34;
  mediump vec3 x2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_35.xyzz * normal_35.yzzx);
  x2_36.x = dot (unity_SHBr, tmpvar_37);
  x2_36.y = dot (unity_SHBg, tmpvar_37);
  x2_36.z = dot (unity_SHBb, tmpvar_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_36 + (unity_SHC.xyz * (
    (normal_35.x * normal_35.x)
   - 
    (normal_35.y * normal_35.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 69072
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 69073
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69074
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69075
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 69076
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 69077
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69078
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69079
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69080
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69081
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69082
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69083
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69084
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 69085
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69086
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 69087
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69088
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69089
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 69090
    //FTOU
    tu9 = uint(t9);
    //Instruction 69091
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 69092
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 69093
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69094
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 69095
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 69096
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 69097
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 69098
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 69099
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 69100
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 69101
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 69102
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 69103
    //LOG
    t14.x = log2(t7.x);
    //Instruction 69104
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 69105
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 69106
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 69107
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 69108
    //MUL
    t7.x = t7.x * t21;
    //Instruction 69109
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 69110
    //MOV
    t4.y = t3.w;
    //Instruction 69111
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 69112
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 69113
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 69114
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 69115
    //SQRT
    t22 = sqrt(t22);
    //Instruction 69116
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 69117
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 69118
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 69119
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 69120
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 69121
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 69122
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 69123
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 69124
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69125
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69126
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69127
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 69128
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69129
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69130
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 69131
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 69132
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69133
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69134
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 69135
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 69136
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 69137
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69138
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 69139
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 69140
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 69141
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 69142
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 69143
    //ADD
    vs_TEXCOORD1.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 69144
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69145
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 69146
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 69147
    //FRC
    t7.x = fract(t7.x);
    //Instruction 69148
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 69149
    //MOV
    vs_TEXCOORD3.z = t7.x;
    //Instruction 69150
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 69151
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 69152
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 69153
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 69154
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69155
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69156
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69157
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69158
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 69159
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69160
    //MUL
    t16_5 = t2.z * t2.z;
    //Instruction 69161
    //MAD
    t16_5 = t2.x * t2.x + (-t16_5);
    //Instruction 69162
    //MUL
    t16_0 = t2.zwwx * t2.xzww;
    //Instruction 69163
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 69164
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 69165
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 69166
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 69167
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69042
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69043
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69044
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69045
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69046
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69047
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69048
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69049
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69050
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69051
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69052
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69053
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69054
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69055
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69056
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69057
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69058
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69059
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69060
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69061
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69062
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69063
    //MOV
    t16_0.w = 1.0;
    //Instruction 69064
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 69065
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 69066
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 69067
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 69068
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69069
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 69070
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69071
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  tmpvar_4 = _Color;
  highp vec4 v_30;
  v_30.x = _World2Object[0].x;
  v_30.y = _World2Object[1].x;
  v_30.z = _World2Object[2].x;
  v_30.w = _World2Object[3].x;
  highp vec4 v_31;
  v_31.x = _World2Object[0].y;
  v_31.y = _World2Object[1].y;
  v_31.z = _World2Object[2].y;
  v_31.w = _World2Object[3].y;
  highp vec4 v_32;
  v_32.x = _World2Object[0].z;
  v_32.y = _World2Object[1].z;
  v_32.z = _World2Object[2].z;
  v_32.w = _World2Object[3].z;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(((
    (v_30.xyz * _BillboardNormal.x)
   + 
    (v_31.xyz * _BillboardNormal.y)
  ) + (v_32.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_33;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.xyz = worldNormal_2;
  mediump vec4 normal_35;
  normal_35 = tmpvar_34;
  mediump vec3 x2_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_35.xyzz * normal_35.yzzx);
  x2_36.x = dot (unity_SHBr, tmpvar_37);
  x2_36.y = dot (unity_SHBg, tmpvar_37);
  x2_36.z = dot (unity_SHBb, tmpvar_37);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_36 + (unity_SHC.xyz * (
    (normal_35.x * normal_35.x)
   - 
    (normal_35.y * normal_35.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t7;
bool tb7;
highp float t9;
highp uint tu9;
highp vec2 t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 69197
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 69198
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69199
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69200
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 69201
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 69202
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69203
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69204
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69205
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69206
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69207
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69208
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69209
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 69210
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69211
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 69212
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69213
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69214
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 69215
    //FTOU
    tu9 = uint(t9);
    //Instruction 69216
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 69217
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 69218
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69219
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 69220
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 69221
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 69222
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 69223
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 69224
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 69225
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 69226
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 69227
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 69228
    //LOG
    t14.x = log2(t7.x);
    //Instruction 69229
    //MUL
    t14.x = t14.x * _ST_WindGlobal.w;
    //Instruction 69230
    //EXP
    t14.x = exp2(t14.x);
    //Instruction 69231
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 69232
    //MOVC
    t7.x = (tb22) ? t14.x : t7.x;
    //Instruction 69233
    //MUL
    t7.x = t7.x * t21;
    //Instruction 69234
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 69235
    //MOV
    t4.y = t3.w;
    //Instruction 69236
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 69237
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 69238
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 69239
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 69240
    //SQRT
    t22 = sqrt(t22);
    //Instruction 69241
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 69242
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 69243
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 69244
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 69245
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 69246
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 69247
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 69248
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 69249
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69250
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69251
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69252
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 69253
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69254
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69255
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 69256
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 69257
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69258
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69259
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 69260
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 69261
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 69262
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69263
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 69264
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 69265
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 69266
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 69267
    //MAD
    t7.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 69268
    //ADD
    vs_TEXCOORD1.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 69269
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69270
    //ADD
    t7.x = t1.y + t1.x;
    //Instruction 69271
    //ADD
    t7.x = t1.z + t7.x;
    //Instruction 69272
    //FRC
    t7.x = fract(t7.x);
    //Instruction 69273
    //MUL
    t7.x = t7.x * _HueVariation.w;
    t7.x = clamp(t7.x, 0.0, 1.0);
    //Instruction 69274
    //MOV
    vs_TEXCOORD3.z = t7.x;
    //Instruction 69275
    //GE
    tb7 = t0.x>=(-t0.x);
    //Instruction 69276
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 69277
    //MOVC
    t0.x = (tb7) ? t0.x : (-t0.x);
    //Instruction 69278
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 69279
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69280
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69281
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69282
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69283
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 69284
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69285
    //MUL
    t16_5 = t2.z * t2.z;
    //Instruction 69286
    //MAD
    t16_5 = t2.x * t2.x + (-t16_5);
    //Instruction 69287
    //MUL
    t16_0 = t2.zwwx * t2.xzww;
    //Instruction 69288
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 69289
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 69290
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 69291
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 69292
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69168
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69169
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69170
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69171
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69172
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69173
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69174
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69175
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69176
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69177
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69178
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69179
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69180
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69181
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69182
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69183
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69184
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69185
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69186
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69187
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69188
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69189
    //MOV
    t16_0.w = 1.0;
    //Instruction 69190
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 69191
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 69192
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 69193
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 69194
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69195
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69196
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_3.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_3.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_3.z = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = worldN_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec2 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 69396
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 69397
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 69398
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69399
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 69400
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 69401
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69402
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 69403
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69404
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 69405
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69406
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 69407
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 69408
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 69409
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69410
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 69411
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69412
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69413
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 69414
    //FTOU
    tu24 = uint(t24);
    //Instruction 69415
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 69416
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 69417
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69418
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 69419
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 69420
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 69421
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 69422
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 69423
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 69424
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 69425
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 69426
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 69427
    //LOG
    t1.x = log2(t8);
    //Instruction 69428
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 69429
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 69430
    //NE
    tb9 = t8!=0.0;
    //Instruction 69431
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 69432
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 69433
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 69434
    //MOV
    t1.y = t2.w;
    //Instruction 69435
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 69436
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69437
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69438
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 69439
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 69440
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 69441
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 69442
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 69443
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 69444
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 69445
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 69446
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 69447
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 69448
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 69449
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 69450
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 69451
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 69452
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 69453
    //MOV
    vs_TEXCOORD0.w = t1.x;
    //Instruction 69454
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69455
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69456
    //MUL
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 69457
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69458
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69459
    //MUL
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 69460
    //ADD
    t2 = t2 + t3;
    //Instruction 69461
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69462
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69463
    //MUL
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 69464
    //ADD
    t2 = t2 + t3;
    //Instruction 69465
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 69466
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69467
    //MUL
    t2 = t0.xxxx * t2;
    //Instruction 69468
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 69469
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 69470
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 69471
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 69472
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 69473
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 69474
    //MUL
    t10_5.xyz = t2.wxy * t4.xyz;
    //Instruction 69475
    //MAD
    t10_5.xyz = t2.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 69476
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 69477
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 69478
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 69479
    //MOV
    vs_TEXCOORD1.w = t1.y;
    //Instruction 69480
    //MOV
    vs_TEXCOORD2.w = t1.z;
    //Instruction 69481
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 69482
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 69483
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 69484
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 69485
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 69486
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 69487
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69488
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 69489
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 69490
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 69491
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 69492
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69493
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69494
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69495
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69496
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t1.xy;
    //Instruction 69497
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 69498
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69499
    //MUL
    t16_6 = t2.y * t2.y;
    //Instruction 69500
    //MAD
    t16_6 = t2.x * t2.x + (-t16_6);
    //Instruction 69501
    //MUL
    t16_0 = t2.ywzx * t2;
    //Instruction 69502
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 69503
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 69504
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 69505
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 69506
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69371
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69372
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69373
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 69374
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 69375
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69376
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69377
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69378
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69379
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69380
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69381
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69382
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 69383
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 69384
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 69385
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69386
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69387
    //MOV
    t0.w = 1.0;
    //Instruction 69388
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 69389
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 69390
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 69391
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69392
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69393
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 69394
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69395
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_30;
  tmpvar_30 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_31;
  v_31.x = _World2Object[0].x;
  v_31.y = _World2Object[1].x;
  v_31.z = _World2Object[2].x;
  v_31.w = _World2Object[3].x;
  highp vec4 v_32;
  v_32.x = _World2Object[0].y;
  v_32.y = _World2Object[1].y;
  v_32.z = _World2Object[2].y;
  v_32.w = _World2Object[3].y;
  highp vec4 v_33;
  v_33.x = _World2Object[0].z;
  v_33.y = _World2Object[1].z;
  v_33.z = _World2Object[2].z;
  v_33.w = _World2Object[3].z;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(((
    (v_31.xyz * _BillboardNormal.x)
   + 
    (v_32.xyz * _BillboardNormal.y)
  ) + (v_33.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_34;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = _Object2World[0].xyz;
  tmpvar_35[1] = _Object2World[1].xyz;
  tmpvar_35[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35 * _BillboardTangent));
  worldTangent_3 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_38;
  tmpvar_38 = -(tmpvar_37);
  worldBinormal_2 = tmpvar_38;
  highp vec4 tmpvar_39;
  tmpvar_39.x = worldTangent_3.x;
  tmpvar_39.y = worldBinormal_2.x;
  tmpvar_39.z = worldNormal_4.x;
  tmpvar_39.w = tmpvar_30.x;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.y;
  tmpvar_40.y = worldBinormal_2.y;
  tmpvar_40.z = worldNormal_4.y;
  tmpvar_40.w = tmpvar_30.y;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.z;
  tmpvar_41.y = worldBinormal_2.z;
  tmpvar_41.z = worldNormal_4.z;
  tmpvar_41.w = tmpvar_30.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_4;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_39;
  xlv_TEXCOORD1 = tmpvar_40;
  xlv_TEXCOORD2 = tmpvar_41;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_44 + (unity_SHC.xyz * (
    (normal_43.x * normal_43.x)
   - 
    (normal_43.y * normal_43.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = worldN_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec2 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 71083
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 71084
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 71085
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71086
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 71087
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 71088
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71089
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 71090
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71091
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 71092
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71093
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 71094
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 71095
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 71096
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71097
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 71098
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71099
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 71100
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 71101
    //FTOU
    tu24 = uint(t24);
    //Instruction 71102
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 71103
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 71104
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71105
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 71106
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 71107
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 71108
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 71109
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 71110
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 71111
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 71112
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 71113
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 71114
    //LOG
    t1.x = log2(t8);
    //Instruction 71115
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 71116
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 71117
    //NE
    tb9 = t8!=0.0;
    //Instruction 71118
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 71119
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 71120
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 71121
    //MOV
    t1.y = t2.w;
    //Instruction 71122
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 71123
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71124
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 71125
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 71126
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 71127
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 71128
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 71129
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 71130
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 71131
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 71132
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 71133
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 71134
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 71135
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71136
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 71137
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 71138
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 71139
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 71140
    //MOV
    vs_TEXCOORD0.w = t1.x;
    //Instruction 71141
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71142
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71143
    //MUL
    t2.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 71144
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71145
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71146
    //MUL
    t3.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 71147
    //ADD
    t2 = t2 + t3;
    //Instruction 71148
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71149
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71150
    //MUL
    t3.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 71151
    //ADD
    t2 = t2 + t3;
    //Instruction 71152
    //DP3
    t0.x = dot(t2.xyw, t2.xyw);
    //Instruction 71153
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71154
    //MUL
    t2 = t0.xxxx * t2;
    //Instruction 71155
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 71156
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 71157
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 71158
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 71159
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71160
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 71161
    //MUL
    t10_5.xyz = t2.wxy * t4.xyz;
    //Instruction 71162
    //MAD
    t10_5.xyz = t2.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 71163
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 71164
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 71165
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 71166
    //MOV
    vs_TEXCOORD1.w = t1.y;
    //Instruction 71167
    //MOV
    vs_TEXCOORD2.w = t1.z;
    //Instruction 71168
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 71169
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 71170
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 71171
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 71172
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 71173
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 71174
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 71175
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 71176
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 71177
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 71178
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 71179
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71180
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71181
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71182
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71183
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t1.xy;
    //Instruction 71184
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 71185
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71186
    //MUL
    t16_6 = t2.y * t2.y;
    //Instruction 71187
    //MAD
    t16_6 = t2.x * t2.x + (-t16_6);
    //Instruction 71188
    //MUL
    t16_0 = t2.ywzx * t2;
    //Instruction 71189
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 71190
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 71191
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 71192
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 71193
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 71059
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 71060
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71061
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 71062
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 71063
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71064
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71065
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71066
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71067
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71068
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 71069
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 71070
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 71071
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 71072
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 71073
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71074
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 71075
    //MOV
    t0.w = 1.0;
    //Instruction 71076
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 71077
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 71078
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 71079
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 71080
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71081
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71082
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
bool tb8;
highp float t10;
highp uint tu10;
highp vec2 t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 69327
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 69328
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69329
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69330
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 69331
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 69332
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69333
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69334
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69335
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69336
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69337
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69338
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69339
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 69340
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69341
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 69342
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69343
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69344
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 69345
    //FTOU
    tu10 = uint(t10);
    //Instruction 69346
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 69347
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 69348
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69349
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 69350
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 69351
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 69352
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 69353
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 69354
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 69355
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 69356
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 69357
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 69358
    //LOG
    t16.x = log2(t8.x);
    //Instruction 69359
    //MUL
    t16.x = t16.x * _ST_WindGlobal.w;
    //Instruction 69360
    //EXP
    t16.x = exp2(t16.x);
    //Instruction 69361
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 69362
    //MOVC
    t8.x = (tb25) ? t16.x : t8.x;
    //Instruction 69363
    //MUL
    t8.x = t8.x * t24;
    //Instruction 69364
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 69365
    //MOV
    t4.y = t3.w;
    //Instruction 69366
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 69367
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69368
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 69369
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 69370
    //SQRT
    t25 = sqrt(t25);
    //Instruction 69371
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 69372
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 69373
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 69374
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 69375
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 69376
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 69377
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 69378
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 69379
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69380
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 69381
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 69382
    //MAD
    t8.xyz = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 69383
    //ADD
    t8.xyz = t8.xyz + _Object2World[3].xyz;
    //Instruction 69384
    //MOV
    vs_TEXCOORD0.w = t8.x;
    //Instruction 69385
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69386
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69387
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 69388
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69389
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69390
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 69391
    //ADD
    t3 = t3 + t4;
    //Instruction 69392
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69393
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69394
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 69395
    //ADD
    t3 = t3 + t4;
    //Instruction 69396
    //DP3
    t8.x = dot(t3.xyw, t3.xyw);
    //Instruction 69397
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69398
    //MUL
    t3 = t8.xxxx * t3;
    //Instruction 69399
    //MUL
    t2.xzw = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 69400
    //MAD
    t2.xzw = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xzw;
    //Instruction 69401
    //MAD
    t2.xzw = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xzw;
    //Instruction 69402
    //DP3
    t8.x = dot(t2.xzw, t2.xzw);
    //Instruction 69403
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69404
    //MUL
    t2.xzw = t8.xxx * t2.xzw;
    //Instruction 69405
    //MUL
    t10_6.xyz = t2.xzw * t3.wxy;
    //Instruction 69406
    //MAD
    t10_6.xyz = t3.ywx * t2.zwx + (-t10_6.xyz);
    //Instruction 69407
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 69408
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 69409
    //MOV
    vs_TEXCOORD0.x = t2.w;
    //Instruction 69410
    //MOV
    vs_TEXCOORD1.w = t8.y;
    //Instruction 69411
    //MOV
    vs_TEXCOORD2.w = t8.z;
    //Instruction 69412
    //MOV
    vs_TEXCOORD1.x = t2.x;
    //Instruction 69413
    //MOV
    vs_TEXCOORD2.x = t2.z;
    //Instruction 69414
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 69415
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 69416
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 69417
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 69418
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69419
    //ADD
    t8.x = t1.y + t1.x;
    //Instruction 69420
    //ADD
    t8.x = t1.z + t8.x;
    //Instruction 69421
    //FRC
    t8.x = fract(t8.x);
    //Instruction 69422
    //MUL
    t8.x = t8.x * _HueVariation.w;
    t8.x = clamp(t8.x, 0.0, 1.0);
    //Instruction 69423
    //MOV
    vs_TEXCOORD4.z = t8.x;
    //Instruction 69424
    //GE
    tb8 = t0.x>=(-t0.x);
    //Instruction 69425
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 69426
    //MOVC
    t0.x = (tb8) ? t0.x : (-t0.x);
    //Instruction 69427
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 69428
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69429
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69430
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69431
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69432
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t1.xy;
    //Instruction 69433
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69434
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 69435
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 69436
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 69437
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 69438
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 69439
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 69440
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 69441
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69293
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69294
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69295
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69296
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69297
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69298
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69299
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69300
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69301
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69302
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69303
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69304
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69305
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69306
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 69307
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69308
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69309
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69310
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69311
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69312
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69313
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 69314
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 69315
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 69316
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69317
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69318
    //MOV
    t0.w = 1.0;
    //Instruction 69319
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 69320
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 69321
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 69322
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69323
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69324
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 69325
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69326
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_32;
  v_32.x = _World2Object[0].x;
  v_32.y = _World2Object[1].x;
  v_32.z = _World2Object[2].x;
  v_32.w = _World2Object[3].x;
  highp vec4 v_33;
  v_33.x = _World2Object[0].y;
  v_33.y = _World2Object[1].y;
  v_33.z = _World2Object[2].y;
  v_33.w = _World2Object[3].y;
  highp vec4 v_34;
  v_34.x = _World2Object[0].z;
  v_34.y = _World2Object[1].z;
  v_34.z = _World2Object[2].z;
  v_34.w = _World2Object[3].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize(((
    (v_32.xyz * _BillboardNormal.x)
   + 
    (v_33.xyz * _BillboardNormal.y)
  ) + (v_34.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_35;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = _Object2World[0].xyz;
  tmpvar_36[1] = _Object2World[1].xyz;
  tmpvar_36[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize((tmpvar_36 * _BillboardTangent));
  worldTangent_3 = tmpvar_37;
  lowp vec3 tmpvar_38;
  tmpvar_38 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_39;
  tmpvar_39 = -(tmpvar_38);
  worldBinormal_2 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.x = worldTangent_3.x;
  tmpvar_40.y = worldBinormal_2.x;
  tmpvar_40.z = worldNormal_4.x;
  tmpvar_40.w = tmpvar_31.x;
  highp vec4 tmpvar_41;
  tmpvar_41.x = worldTangent_3.y;
  tmpvar_41.y = worldBinormal_2.y;
  tmpvar_41.z = worldNormal_4.y;
  tmpvar_41.w = tmpvar_31.y;
  highp vec4 tmpvar_42;
  tmpvar_42.x = worldTangent_3.z;
  tmpvar_42.y = worldBinormal_2.z;
  tmpvar_42.z = worldNormal_4.z;
  tmpvar_42.w = tmpvar_31.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_43;
  tmpvar_43.w = 1.0;
  tmpvar_43.xyz = worldNormal_4;
  mediump vec4 normal_44;
  normal_44 = tmpvar_43;
  mediump vec3 x2_45;
  mediump vec4 tmpvar_46;
  tmpvar_46 = (normal_44.xyzz * normal_44.yzzx);
  x2_45.x = dot (unity_SHBr, tmpvar_46);
  x2_45.y = dot (unity_SHBg, tmpvar_46);
  x2_45.z = dot (unity_SHBb, tmpvar_46);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_40;
  xlv_TEXCOORD1 = tmpvar_41;
  xlv_TEXCOORD2 = tmpvar_42;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_45 + (unity_SHC.xyz * (
    (normal_44.x * normal_44.x)
   - 
    (normal_44.y * normal_44.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
bool tb8;
highp float t10;
highp uint tu10;
highp vec2 t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 69540
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 69541
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69542
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69543
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 69544
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 69545
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69546
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69547
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69548
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69549
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69550
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69551
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69552
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 69553
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69554
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 69555
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69556
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69557
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 69558
    //FTOU
    tu10 = uint(t10);
    //Instruction 69559
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 69560
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 69561
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69562
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 69563
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 69564
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 69565
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 69566
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 69567
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 69568
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 69569
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 69570
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 69571
    //LOG
    t16.x = log2(t8.x);
    //Instruction 69572
    //MUL
    t16.x = t16.x * _ST_WindGlobal.w;
    //Instruction 69573
    //EXP
    t16.x = exp2(t16.x);
    //Instruction 69574
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 69575
    //MOVC
    t8.x = (tb25) ? t16.x : t8.x;
    //Instruction 69576
    //MUL
    t8.x = t8.x * t24;
    //Instruction 69577
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 69578
    //MOV
    t4.y = t3.w;
    //Instruction 69579
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 69580
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69581
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 69582
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 69583
    //SQRT
    t25 = sqrt(t25);
    //Instruction 69584
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 69585
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 69586
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 69587
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 69588
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 69589
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 69590
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 69591
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 69592
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69593
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 69594
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 69595
    //MAD
    t8.xyz = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 69596
    //ADD
    t8.xyz = t8.xyz + _Object2World[3].xyz;
    //Instruction 69597
    //MOV
    vs_TEXCOORD0.w = t8.x;
    //Instruction 69598
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 69599
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 69600
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 69601
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 69602
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 69603
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 69604
    //ADD
    t3 = t3 + t4;
    //Instruction 69605
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 69606
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 69607
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 69608
    //ADD
    t3 = t3 + t4;
    //Instruction 69609
    //DP3
    t8.x = dot(t3.xyw, t3.xyw);
    //Instruction 69610
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69611
    //MUL
    t3 = t8.xxxx * t3;
    //Instruction 69612
    //MUL
    t2.xzw = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 69613
    //MAD
    t2.xzw = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xzw;
    //Instruction 69614
    //MAD
    t2.xzw = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xzw;
    //Instruction 69615
    //DP3
    t8.x = dot(t2.xzw, t2.xzw);
    //Instruction 69616
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69617
    //MUL
    t2.xzw = t8.xxx * t2.xzw;
    //Instruction 69618
    //MUL
    t10_6.xyz = t2.xzw * t3.wxy;
    //Instruction 69619
    //MAD
    t10_6.xyz = t3.ywx * t2.zwx + (-t10_6.xyz);
    //Instruction 69620
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 69621
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 69622
    //MOV
    vs_TEXCOORD0.x = t2.w;
    //Instruction 69623
    //MOV
    vs_TEXCOORD1.w = t8.y;
    //Instruction 69624
    //MOV
    vs_TEXCOORD2.w = t8.z;
    //Instruction 69625
    //MOV
    vs_TEXCOORD1.x = t2.x;
    //Instruction 69626
    //MOV
    vs_TEXCOORD2.x = t2.z;
    //Instruction 69627
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 69628
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 69629
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 69630
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 69631
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69632
    //ADD
    t8.x = t1.y + t1.x;
    //Instruction 69633
    //ADD
    t8.x = t1.z + t8.x;
    //Instruction 69634
    //FRC
    t8.x = fract(t8.x);
    //Instruction 69635
    //MUL
    t8.x = t8.x * _HueVariation.w;
    t8.x = clamp(t8.x, 0.0, 1.0);
    //Instruction 69636
    //MOV
    vs_TEXCOORD4.z = t8.x;
    //Instruction 69637
    //GE
    tb8 = t0.x>=(-t0.x);
    //Instruction 69638
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 69639
    //MOVC
    t0.x = (tb8) ? t0.x : (-t0.x);
    //Instruction 69640
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 69641
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 69642
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 69643
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69644
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 69645
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t1.xy;
    //Instruction 69646
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69647
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 69648
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 69649
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 69650
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 69651
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 69652
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 69653
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 69654
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69507
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69508
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69509
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69510
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69511
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69512
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69513
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69514
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69515
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69516
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69517
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69518
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69519
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69520
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 69521
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69522
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69523
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69524
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69525
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69526
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69527
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 69528
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 69529
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 69530
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69531
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69532
    //MOV
    t0.w = 1.0;
    //Instruction 69533
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 69534
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 69535
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 69536
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69537
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69538
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69539
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 71215
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 71216
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 71217
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71218
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 71219
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71220
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 71221
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 71222
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 71223
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71224
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 71225
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71226
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 71227
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71228
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 71229
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 71230
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 71231
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71232
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 71233
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71234
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 71235
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 71236
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 71237
    //MUL
    t3.y = t0.y * t23;
    //Instruction 71238
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 71239
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 71240
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 71241
    //LOG
    t23 = log2(t9);
    //Instruction 71242
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 71243
    //EXP
    t23 = exp2(t23);
    //Instruction 71244
    //NE
    tb24 = t9!=0.0;
    //Instruction 71245
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 71246
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 71247
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71248
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 71249
    //MUL
    t9 = t0.x * t9;
    //Instruction 71250
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 71251
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 71252
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 71253
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 71254
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 71255
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 71256
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 71257
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 71258
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 71259
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 71260
    //MOV
    t4.y = t3.y;
    //Instruction 71261
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 71262
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 71263
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 71264
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 71265
    //SQRT
    t22 = sqrt(t22);
    //Instruction 71266
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 71267
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 71268
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 71269
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 71270
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 71271
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 71272
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 71273
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 71274
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 71275
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 71276
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 71277
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 71278
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 71279
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 71280
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 71281
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 71282
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 71283
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 71284
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 71285
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 71286
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 71287
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 71288
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71289
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 71290
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 71291
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 71292
    //MUL
    t1 = t1 * t22;
    //Instruction 71293
    //MUL
    t22 = t1 * t1;
    //Instruction 71294
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 71295
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 71296
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 71297
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 71298
    //MUL
    t2.x = t22 * t1;
    //Instruction 71299
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 71300
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 71301
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 71302
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 71303
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 71304
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 71305
    //ADD
    t1 = t22 + t1;
    //Instruction 71306
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 71307
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 71308
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 71309
    //LT
    tb15 = t22<(-t22);
    //Instruction 71310
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 71311
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 71312
    //LT
    tb8 = t1<0.0;
    //Instruction 71313
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 71314
    //ADD
    t1 = t8.x + t1;
    //Instruction 71315
    //ADD
    t1 = t0.z + t1;
    //Instruction 71316
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 71317
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 71318
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 71319
    //GE
    tb8 = t1>=(-t1);
    //Instruction 71320
    //FRC
    t1 = fract(abs(t1));
    //Instruction 71321
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 71322
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 71323
    //FTOU
    tu1 = uint(t1);
    //Instruction 71324
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 71325
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 71326
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 71327
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 71328
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71329
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71330
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 71331
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 71332
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 71333
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 71334
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 71335
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 71336
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 71337
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 71194
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71195
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71196
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71197
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 71198
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71199
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71200
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71201
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71202
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71203
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 71204
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71205
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 71206
    //MOV
    t16_0.w = 1.0;
    //Instruction 71207
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 71208
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 71209
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 71210
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 71211
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71212
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 71213
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71214
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_41;
  v_41.x = _World2Object[0].x;
  v_41.y = _World2Object[1].x;
  v_41.z = _World2Object[2].x;
  v_41.w = _World2Object[3].x;
  highp vec4 v_42;
  v_42.x = _World2Object[0].z;
  v_42.y = _World2Object[1].z;
  v_42.z = _World2Object[2].z;
  v_42.w = _World2Object[3].z;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(((v_41.xyz * tmpvar_17.z) + (v_42.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_43;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_44;
  tmpvar_44.w = 1.0;
  tmpvar_44.xyz = worldNormal_2;
  mediump vec4 normal_45;
  normal_45 = tmpvar_44;
  mediump vec3 x2_46;
  mediump vec4 tmpvar_47;
  tmpvar_47 = (normal_45.xyzz * normal_45.yzzx);
  x2_46.x = dot (unity_SHBr, tmpvar_47);
  x2_46.y = dot (unity_SHBg, tmpvar_47);
  x2_46.z = dot (unity_SHBb, tmpvar_47);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_46 + (unity_SHC.xyz * (
    (normal_45.x * normal_45.x)
   - 
    (normal_45.y * normal_45.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 69462
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 69463
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 69464
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69465
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69466
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69467
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 69468
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 69469
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69470
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69471
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69472
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69473
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69474
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69475
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69476
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69477
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69478
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69479
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 69480
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69481
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 69482
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 69483
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 69484
    //MUL
    t3.y = t0.y * t23;
    //Instruction 69485
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 69486
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 69487
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 69488
    //LOG
    t23 = log2(t9);
    //Instruction 69489
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 69490
    //EXP
    t23 = exp2(t23);
    //Instruction 69491
    //NE
    tb24 = t9!=0.0;
    //Instruction 69492
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 69493
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 69494
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69495
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 69496
    //MUL
    t9 = t0.x * t9;
    //Instruction 69497
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 69498
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 69499
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 69500
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69501
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 69502
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69503
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 69504
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 69505
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 69506
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69507
    //MOV
    t4.y = t3.y;
    //Instruction 69508
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 69509
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 69510
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 69511
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 69512
    //SQRT
    t22 = sqrt(t22);
    //Instruction 69513
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 69514
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69515
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69516
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69517
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69518
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69519
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69520
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 69521
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 69522
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 69523
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 69524
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 69525
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 69526
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 69527
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 69528
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69529
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 69530
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 69531
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69532
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 69533
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 69534
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 69535
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69536
    //MAX
    t1 = max(abs(t8.y), abs(t8.x));
    //Instruction 69537
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 69538
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 69539
    //MUL
    t1 = t1 * t22;
    //Instruction 69540
    //MUL
    t22 = t1 * t1;
    //Instruction 69541
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 69542
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 69543
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 69544
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 69545
    //MUL
    t2.x = t22 * t1;
    //Instruction 69546
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 69547
    //LT
    tb9 = abs(t8.y)<abs(t8.x);
    //Instruction 69548
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 69549
    //MAD
    t1 = t1 * t22 + t2.x;
    //Instruction 69550
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 69551
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 69552
    //ADD
    t1 = t22 + t1;
    //Instruction 69553
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 69554
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 69555
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 69556
    //LT
    tb15 = t22<(-t22);
    //Instruction 69557
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 69558
    //MOVC
    t1 = (ti8 != 0) ? (-t1) : t1;
    //Instruction 69559
    //LT
    tb8 = t1<0.0;
    //Instruction 69560
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 69561
    //ADD
    t1 = t8.x + t1;
    //Instruction 69562
    //ADD
    t1 = t0.z + t1;
    //Instruction 69563
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 69564
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 69565
    //DIV
    t1 = t1 / _TreeInfo[int(tu16) + 0].x;
    //Instruction 69566
    //GE
    tb8 = t1>=(-t1);
    //Instruction 69567
    //FRC
    t1 = fract(abs(t1));
    //Instruction 69568
    //MOVC
    t1 = (tb8) ? t1 : (-t1);
    //Instruction 69569
    //MAD
    t1 = t1 * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 69570
    //FTOU
    tu1 = uint(t1);
    //Instruction 69571
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69572
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69573
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69574
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t2.xy;
    //Instruction 69575
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 69576
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69577
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 69578
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 69579
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 69580
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 69581
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 69582
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 69583
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 69584
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69442
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69443
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69444
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69445
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 69446
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69447
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69448
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69449
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69450
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69451
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69452
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69453
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69454
    //MOV
    t16_0.w = 1.0;
    //Instruction 69455
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 69456
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 69457
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 69458
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 69459
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69460
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69461
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 69615
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 69616
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 69617
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 69618
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69619
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69620
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 69621
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 69622
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69623
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69624
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69625
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69626
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69627
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69628
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69629
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69630
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69631
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 69632
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69633
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 69634
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 69635
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69636
    //MUL
    t3.y = t0.y * t26;
    //Instruction 69637
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 69638
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 69639
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 69640
    //LOG
    t26 = log2(t10);
    //Instruction 69641
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 69642
    //EXP
    t26 = exp2(t26);
    //Instruction 69643
    //NE
    tb27 = t10!=0.0;
    //Instruction 69644
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 69645
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 69646
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69647
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 69648
    //MUL
    t10 = t0.x * t10;
    //Instruction 69649
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69650
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 69651
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 69652
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 69653
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69654
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 69655
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69656
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 69657
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 69658
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 69659
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69660
    //MOV
    t5.y = t3.y;
    //Instruction 69661
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 69662
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 69663
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 69664
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 69665
    //SQRT
    t27 = sqrt(t27);
    //Instruction 69666
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 69667
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69668
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69669
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69670
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69671
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69672
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69673
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 69674
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 69675
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 69676
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 69677
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 69678
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 69679
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 69680
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 69681
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69682
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 69683
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 69684
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69685
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 69686
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 69687
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 69688
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 69689
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 69690
    //ADD
    t1 = t9.z + t1;
    //Instruction 69691
    //FRC
    t1 = fract(t1);
    //Instruction 69692
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 69693
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 69694
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 69695
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 69696
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 69697
    //MUL
    t1 = t1 * t9.x;
    //Instruction 69698
    //MUL
    t9.x = t1 * t1;
    //Instruction 69699
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 69700
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 69701
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 69702
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 69703
    //MUL
    t17.x = t9.x * t1;
    //Instruction 69704
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 69705
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 69706
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 69707
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 69708
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 69709
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 69710
    //ADD
    t1 = t9.x + t1;
    //Instruction 69711
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 69712
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 69713
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 69714
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 69715
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 69716
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 69717
    //LT
    tb9 = t1<0.0;
    //Instruction 69718
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 69719
    //ADD
    t1 = t9.x + t1;
    //Instruction 69720
    //ADD
    t1 = t0.z + t1;
    //Instruction 69721
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69722
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 69723
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69724
    //GE
    tb9 = t1>=(-t1);
    //Instruction 69725
    //FRC
    t1 = fract(abs(t1));
    //Instruction 69726
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 69727
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69728
    //FTOU
    tu1 = uint(t1);
    //Instruction 69729
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69730
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69731
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69732
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 69733
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69734
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 69735
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 69736
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 69737
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 69738
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 69739
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 69740
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 69741
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69585
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69586
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69587
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69588
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69589
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69590
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69591
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69592
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69593
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69594
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69595
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69596
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69597
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69598
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69599
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69600
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69601
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69602
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69603
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69604
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69605
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69606
    //MOV
    t16_0.w = 1.0;
    //Instruction 69607
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 69608
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 69609
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 69610
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 69611
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69612
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 69613
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69614
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_4 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_44;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_45;
  tmpvar_45.w = 1.0;
  tmpvar_45.xyz = worldNormal_2;
  mediump vec4 normal_46;
  normal_46 = tmpvar_45;
  mediump vec3 x2_47;
  mediump vec4 tmpvar_48;
  tmpvar_48 = (normal_46.xyzz * normal_46.yzzx);
  x2_47.x = dot (unity_SHBr, tmpvar_48);
  x2_47.y = dot (unity_SHBg, tmpvar_48);
  x2_47.z = dot (unity_SHBb, tmpvar_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (x2_47 + (unity_SHC.xyz * (
    (normal_46.x * normal_46.x)
   - 
    (normal_46.y * normal_46.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 71367
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 71368
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 71369
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 71370
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71371
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71372
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 71373
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 71374
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71375
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 71376
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71377
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 71378
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71379
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 71380
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 71381
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 71382
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71383
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 71384
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71385
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 71386
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 71387
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 71388
    //MUL
    t3.y = t0.y * t26;
    //Instruction 71389
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 71390
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 71391
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 71392
    //LOG
    t26 = log2(t10);
    //Instruction 71393
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 71394
    //EXP
    t26 = exp2(t26);
    //Instruction 71395
    //NE
    tb27 = t10!=0.0;
    //Instruction 71396
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 71397
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 71398
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71399
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 71400
    //MUL
    t10 = t0.x * t10;
    //Instruction 71401
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 71402
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 71403
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 71404
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 71405
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 71406
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 71407
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 71408
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 71409
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 71410
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 71411
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 71412
    //MOV
    t5.y = t3.y;
    //Instruction 71413
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 71414
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71415
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 71416
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 71417
    //SQRT
    t27 = sqrt(t27);
    //Instruction 71418
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 71419
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 71420
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 71421
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 71422
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 71423
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 71424
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 71425
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 71426
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 71427
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 71428
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 71429
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 71430
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 71431
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 71432
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 71433
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 71434
    //MUL
    t3.xyz = vec3(t1) * t3.xyz;
    //Instruction 71435
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 71436
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 71437
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 71438
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 71439
    //ADD
    vs_TEXCOORD1.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 71440
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71441
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 71442
    //ADD
    t1 = t9.z + t1;
    //Instruction 71443
    //FRC
    t1 = fract(t1);
    //Instruction 71444
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 71445
    //MOV
    vs_TEXCOORD3.z = t1;
    //Instruction 71446
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 71447
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 71448
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 71449
    //MUL
    t1 = t1 * t9.x;
    //Instruction 71450
    //MUL
    t9.x = t1 * t1;
    //Instruction 71451
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 71452
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 71453
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 71454
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 71455
    //MUL
    t17.x = t9.x * t1;
    //Instruction 71456
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 71457
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 71458
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 71459
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 71460
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 71461
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 71462
    //ADD
    t1 = t9.x + t1;
    //Instruction 71463
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 71464
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 71465
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 71466
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 71467
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 71468
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 71469
    //LT
    tb9 = t1<0.0;
    //Instruction 71470
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 71471
    //ADD
    t1 = t9.x + t1;
    //Instruction 71472
    //ADD
    t1 = t0.z + t1;
    //Instruction 71473
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 71474
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 71475
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 71476
    //GE
    tb9 = t1>=(-t1);
    //Instruction 71477
    //FRC
    t1 = fract(abs(t1));
    //Instruction 71478
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 71479
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 71480
    //FTOU
    tu1 = uint(t1);
    //Instruction 71481
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 71482
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 71483
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 71484
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 71485
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71486
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 71487
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 71488
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 71489
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 71490
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 71491
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 71492
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 71493
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 71338
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71339
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71340
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 71341
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 71342
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 71343
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 71344
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71345
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 71346
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 71347
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 71348
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 71349
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 71350
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 71351
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71352
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71353
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71354
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71355
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71356
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 71357
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71358
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 71359
    //MOV
    t16_0.w = 1.0;
    //Instruction 71360
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 71361
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 71362
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 71363
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 71364
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71365
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71366
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_3.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_3.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_3.z = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = worldN_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    //Instruction 69680
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 69681
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 69682
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69683
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69684
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69685
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 69686
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 69687
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69688
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69689
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69690
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69691
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69692
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69693
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69694
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69695
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69696
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69697
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 69698
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69699
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 69700
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 69701
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69702
    //MUL
    t3.y = t0.y * t26;
    //Instruction 69703
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 69704
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 69705
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 69706
    //LOG
    t26 = log2(t10);
    //Instruction 69707
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 69708
    //EXP
    t26 = exp2(t26);
    //Instruction 69709
    //NE
    tb27 = t10!=0.0;
    //Instruction 69710
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 69711
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 69712
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69713
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 69714
    //MUL
    t10 = t0.x * t10;
    //Instruction 69715
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 69716
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 69717
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 69718
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69719
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 69720
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69721
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 69722
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 69723
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 69724
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69725
    //MOV
    t4.y = t3.y;
    //Instruction 69726
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 69727
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 69728
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 69729
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 69730
    //SQRT
    t25 = sqrt(t25);
    //Instruction 69731
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 69732
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69733
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69734
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69735
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69736
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69737
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69738
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69739
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 69740
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 69741
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 69742
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 69743
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 69744
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 69745
    //MUL
    t3.zw = t9.yy * _World2Object[2].xx;
    //Instruction 69746
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 69747
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 69748
    //MUL
    t4.zw = (-t9.xx) * _World2Object[2].zz;
    //Instruction 69749
    //ADD
    t3 = t3 + t4;
    //Instruction 69750
    //DP3
    t1 = dot(t3.xyw, t3.xyw);
    //Instruction 69751
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69752
    //MUL
    t3 = vec4(t1) * t3;
    //Instruction 69753
    //MUL
    t4.xyz = t9.yyy * _Object2World[2].yzx;
    //Instruction 69754
    //MAD
    t4.xyz = _Object2World[0].yzx * t9.xxx + t4.xyz;
    //Instruction 69755
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 69756
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69757
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 69758
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 69759
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 69760
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 69761
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 69762
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 69763
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 69764
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 69765
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 69766
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 69767
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 69768
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 69769
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 69770
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 69771
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69772
    //MAX
    t1 = max(abs(t9.y), abs(t9.x));
    //Instruction 69773
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 69774
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 69775
    //MUL
    t1 = t1 * t25;
    //Instruction 69776
    //MUL
    t25 = t1 * t1;
    //Instruction 69777
    //MAD
    t2.x = t25 * 0.020835 + -0.085133;
    //Instruction 69778
    //MAD
    t2.x = t25 * t2.x + 0.180141;
    //Instruction 69779
    //MAD
    t2.x = t25 * t2.x + -0.330299;
    //Instruction 69780
    //MAD
    t25 = t25 * t2.x + 0.999866;
    //Instruction 69781
    //MUL
    t2.x = t25 * t1;
    //Instruction 69782
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 69783
    //LT
    tb10 = abs(t9.y)<abs(t9.x);
    //Instruction 69784
    //AND
    t2.x = tb10 ? t2.x : float(0.0);
    //Instruction 69785
    //MAD
    t1 = t1 * t25 + t2.x;
    //Instruction 69786
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 69787
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 69788
    //ADD
    t1 = t25 + t1;
    //Instruction 69789
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 69790
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 69791
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 69792
    //LT
    tb17 = t25<(-t25);
    //Instruction 69793
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 69794
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 69795
    //LT
    tb9 = t1<0.0;
    //Instruction 69796
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 69797
    //ADD
    t1 = t9.x + t1;
    //Instruction 69798
    //ADD
    t1 = t0.z + t1;
    //Instruction 69799
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69800
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 69801
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69802
    //GE
    tb9 = t1>=(-t1);
    //Instruction 69803
    //FRC
    t1 = fract(abs(t1));
    //Instruction 69804
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 69805
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69806
    //FTOU
    tu1 = uint(t1);
    //Instruction 69807
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69808
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69809
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69810
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 69811
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 69812
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69813
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 69814
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 69815
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 69816
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 69817
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 69818
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 69819
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 69820
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69655
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69656
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69657
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 69658
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 69659
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69660
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69661
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69662
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69663
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69664
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69665
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69666
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 69667
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 69668
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 69669
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69670
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69671
    //MOV
    t0.w = 1.0;
    //Instruction 69672
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 69673
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 69674
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 69675
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69676
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69677
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 69678
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69679
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_43;
  v_43.x = _World2Object[0].x;
  v_43.y = _World2Object[1].x;
  v_43.z = _World2Object[2].x;
  v_43.w = _World2Object[3].x;
  highp vec4 v_44;
  v_44.x = _World2Object[0].z;
  v_44.y = _World2Object[1].z;
  v_44.z = _World2Object[2].z;
  v_44.w = _World2Object[3].z;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(((v_43.xyz * tmpvar_18.z) + (v_44.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_45;
  highp mat3 tmpvar_46;
  tmpvar_46[0] = _Object2World[0].xyz;
  tmpvar_46[1] = _Object2World[1].xyz;
  tmpvar_46[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_47;
  tmpvar_47 = normalize((tmpvar_46 * tmpvar_18));
  worldTangent_3 = tmpvar_47;
  lowp vec3 tmpvar_48;
  tmpvar_48 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_49;
  tmpvar_49 = -(tmpvar_48);
  worldBinormal_2 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.x = worldTangent_3.x;
  tmpvar_50.y = worldBinormal_2.x;
  tmpvar_50.z = worldNormal_4.x;
  tmpvar_50.w = tmpvar_42.x;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.y;
  tmpvar_51.y = worldBinormal_2.y;
  tmpvar_51.z = worldNormal_4.y;
  tmpvar_51.w = tmpvar_42.y;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.z;
  tmpvar_52.y = worldBinormal_2.z;
  tmpvar_52.z = worldNormal_4.z;
  tmpvar_52.w = tmpvar_42.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_4;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_50;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_52;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_55 + (unity_SHC.xyz * (
    (normal_54.x * normal_54.x)
   - 
    (normal_54.y * normal_54.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = worldN_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
bool tb10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
bool tb27;
void main()
{
    //Instruction 69845
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 69846
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 69847
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69848
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 69849
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69850
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 69851
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 69852
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69853
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69854
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69855
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69856
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69857
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69858
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69859
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69860
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69861
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69862
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 69863
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69864
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 69865
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 69866
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 69867
    //MUL
    t3.y = t0.y * t26;
    //Instruction 69868
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 69869
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 69870
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 69871
    //LOG
    t26 = log2(t10);
    //Instruction 69872
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 69873
    //EXP
    t26 = exp2(t26);
    //Instruction 69874
    //NE
    tb27 = t10!=0.0;
    //Instruction 69875
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 69876
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 69877
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69878
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 69879
    //MUL
    t10 = t0.x * t10;
    //Instruction 69880
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 69881
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 69882
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 69883
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69884
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 69885
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69886
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 69887
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 69888
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 69889
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69890
    //MOV
    t4.y = t3.y;
    //Instruction 69891
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 69892
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 69893
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 69894
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 69895
    //SQRT
    t25 = sqrt(t25);
    //Instruction 69896
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 69897
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69898
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69899
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69900
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69901
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69902
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69903
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69904
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 69905
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 69906
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 69907
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 69908
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 69909
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 69910
    //MUL
    t3.zw = t9.yy * _World2Object[2].xx;
    //Instruction 69911
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 69912
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 69913
    //MUL
    t4.zw = (-t9.xx) * _World2Object[2].zz;
    //Instruction 69914
    //ADD
    t3 = t3 + t4;
    //Instruction 69915
    //DP3
    t1 = dot(t3.xyw, t3.xyw);
    //Instruction 69916
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69917
    //MUL
    t3 = vec4(t1) * t3;
    //Instruction 69918
    //MUL
    t4.xyz = t9.yyy * _Object2World[2].yzx;
    //Instruction 69919
    //MAD
    t4.xyz = _Object2World[0].yzx * t9.xxx + t4.xyz;
    //Instruction 69920
    //DP3
    t1 = dot(t4.xyz, t4.xyz);
    //Instruction 69921
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69922
    //MUL
    t4.xyz = vec3(t1) * t4.xyz;
    //Instruction 69923
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 69924
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 69925
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 69926
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 69927
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 69928
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 69929
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 69930
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 69931
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 69932
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 69933
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 69934
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 69935
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 69936
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69937
    //MAX
    t1 = max(abs(t9.y), abs(t9.x));
    //Instruction 69938
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 69939
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 69940
    //MUL
    t1 = t1 * t25;
    //Instruction 69941
    //MUL
    t25 = t1 * t1;
    //Instruction 69942
    //MAD
    t2.x = t25 * 0.020835 + -0.085133;
    //Instruction 69943
    //MAD
    t2.x = t25 * t2.x + 0.180141;
    //Instruction 69944
    //MAD
    t2.x = t25 * t2.x + -0.330299;
    //Instruction 69945
    //MAD
    t25 = t25 * t2.x + 0.999866;
    //Instruction 69946
    //MUL
    t2.x = t25 * t1;
    //Instruction 69947
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 69948
    //LT
    tb10 = abs(t9.y)<abs(t9.x);
    //Instruction 69949
    //AND
    t2.x = tb10 ? t2.x : float(0.0);
    //Instruction 69950
    //MAD
    t1 = t1 * t25 + t2.x;
    //Instruction 69951
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 69952
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 69953
    //ADD
    t1 = t25 + t1;
    //Instruction 69954
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 69955
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 69956
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 69957
    //LT
    tb17 = t25<(-t25);
    //Instruction 69958
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 69959
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 69960
    //LT
    tb9 = t1<0.0;
    //Instruction 69961
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 69962
    //ADD
    t1 = t9.x + t1;
    //Instruction 69963
    //ADD
    t1 = t0.z + t1;
    //Instruction 69964
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 69965
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 69966
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 69967
    //GE
    tb9 = t1>=(-t1);
    //Instruction 69968
    //FRC
    t1 = fract(abs(t1));
    //Instruction 69969
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 69970
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 69971
    //FTOU
    tu1 = uint(t1);
    //Instruction 69972
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69973
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69974
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69975
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 69976
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 69977
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69978
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 69979
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 69980
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 69981
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 69982
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 69983
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 69984
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 69985
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 69821
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69822
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69823
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 69824
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 69825
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 69826
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69827
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69828
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69829
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69830
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69831
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69832
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 69833
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 69834
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 69835
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69836
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69837
    //MOV
    t0.w = 1.0;
    //Instruction 69838
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 69839
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 69840
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 69841
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69842
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69843
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69844
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_18));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    //Instruction 70020
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70021
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70022
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 70023
    //MOVC
    t0 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70024
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70025
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 70026
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 70027
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70028
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70029
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70030
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70031
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70032
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70033
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70034
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70035
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70036
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 70037
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70038
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 70039
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 70040
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 70041
    //MUL
    t3.y = t0.y * t29;
    //Instruction 70042
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 70043
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 70044
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 70045
    //LOG
    t29 = log2(t11);
    //Instruction 70046
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 70047
    //EXP
    t29 = exp2(t29);
    //Instruction 70048
    //NE
    tb30 = t11!=0.0;
    //Instruction 70049
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 70050
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 70051
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70052
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 70053
    //MUL
    t11 = t0.x * t11;
    //Instruction 70054
    //ADD
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70055
    //DP3
    t29 = dot(t4.xyz, t4.xyz);
    //Instruction 70056
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 70057
    //MUL
    t4.xy = vec2(t29) * t4.xz;
    //Instruction 70058
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70059
    //DP2
    t29 = dot(t4.xz, t4.xw);
    //Instruction 70060
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70061
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 70062
    //MUL
    t4.xy = vec2(t29) * t4.xy;
    //Instruction 70063
    //MUL
    t3.xz = vec2(t11) * t4.xy;
    //Instruction 70064
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70065
    //MOV
    t5.y = t3.y;
    //Instruction 70066
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 70067
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 70068
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 70069
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 70070
    //SQRT
    t30 = sqrt(t30);
    //Instruction 70071
    //MUL
    t2.xyw = t2.xyw * vec3(t30);
    //Instruction 70072
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70073
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70074
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70075
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70076
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70077
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70078
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70079
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 70080
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 70081
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 70082
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 70083
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 70084
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 70085
    //MUL
    t3.zw = t4.yy * _World2Object[2].xx;
    //Instruction 70086
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 70087
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 70088
    //MUL
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 70089
    //ADD
    t3 = t3 + t5;
    //Instruction 70090
    //DP3
    t1 = dot(t3.xyw, t3.xyw);
    //Instruction 70091
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 70092
    //MUL
    t3 = vec4(t1) * t3;
    //Instruction 70093
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 70094
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 70095
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 70096
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 70097
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 70098
    //MUL
    t10_6.xyz = t3.wxy * t5.xyz;
    //Instruction 70099
    //MAD
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 70100
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 70101
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 70102
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 70103
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 70104
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 70105
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 70106
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 70107
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 70108
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 70109
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 70110
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 70111
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70112
    //ADD
    t1 = t10.y + t10.x;
    //Instruction 70113
    //ADD
    t1 = t10.z + t1;
    //Instruction 70114
    //FRC
    t1 = fract(t1);
    //Instruction 70115
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 70116
    //MOV
    vs_TEXCOORD4.z = t1;
    //Instruction 70117
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 70118
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 70119
    //MIN
    t10.x = min(abs(t4.y), abs(t4.x));
    //Instruction 70120
    //MUL
    t1 = t1 * t10.x;
    //Instruction 70121
    //MUL
    t10.x = t1 * t1;
    //Instruction 70122
    //MAD
    t19.x = t10.x * 0.020835 + -0.085133;
    //Instruction 70123
    //MAD
    t19.x = t10.x * t19.x + 0.180141;
    //Instruction 70124
    //MAD
    t19.x = t10.x * t19.x + -0.330299;
    //Instruction 70125
    //MAD
    t10.x = t10.x * t19.x + 0.999866;
    //Instruction 70126
    //MUL
    t19.x = t10.x * t1;
    //Instruction 70127
    //MAD
    t19.x = t19.x * -2.000000 + 1.570796;
    //Instruction 70128
    //LT
    tb28 = abs(t4.y)<abs(t4.x);
    //Instruction 70129
    //AND
    t19.x = tb28 ? t19.x : float(0.0);
    //Instruction 70130
    //MAD
    t1 = t1 * t10.x + t19.x;
    //Instruction 70131
    //LT
    tb10 = t4.y<(-t4.y);
    //Instruction 70132
    //AND
    t10.x = tb10 ? -3.141593 : float(0.0);
    //Instruction 70133
    //ADD
    t1 = t10.x + t1;
    //Instruction 70134
    //MIN
    t10.x = min(t4.y, (-t4.x));
    //Instruction 70135
    //MAX
    t19.x = max(t4.y, (-t4.x));
    //Instruction 70136
    //GE
    tb19 = t19.x>=(-t19.x);
    //Instruction 70137
    //LT
    tb10 = t10.x<(-t10.x);
    //Instruction 70138
    //AND
    ti10 = int(uint(tb19) & uint(tb10));
    //Instruction 70139
    //MOVC
    t1 = (ti10 != 0) ? (-t1) : t1;
    //Instruction 70140
    //LT
    tb10 = t1<0.0;
    //Instruction 70141
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 70142
    //ADD
    t1 = t10.x + t1;
    //Instruction 70143
    //ADD
    t1 = t0.z + t1;
    //Instruction 70144
    //MAD
    t1 = t1 * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 70145
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 70146
    //DIV
    t1 = t1 / _TreeInfo[int(tu20) + 0].x;
    //Instruction 70147
    //GE
    tb10 = t1>=(-t1);
    //Instruction 70148
    //FRC
    t1 = fract(abs(t1));
    //Instruction 70149
    //MOVC
    t1 = (tb10) ? t1 : (-t1);
    //Instruction 70150
    //MAD
    t1 = t1 * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 70151
    //FTOU
    tu1 = uint(t1);
    //Instruction 70152
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70153
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70154
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70155
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t2.xy;
    //Instruction 70156
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70157
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 70158
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 70159
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 70160
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 70161
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 70162
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 70163
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 70164
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69986
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69987
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69988
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69989
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69990
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69991
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69992
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69993
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69994
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69995
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69996
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69997
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69998
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69999
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70000
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 70001
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70002
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70003
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70004
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70005
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70006
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 70007
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 70008
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 70009
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70010
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 70011
    //MOV
    t0.w = 1.0;
    //Instruction 70012
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 70013
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 70014
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 70015
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 70016
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 70017
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 70018
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70019
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  tmpvar_5 = _Color;
  highp vec3 tmpvar_43;
  tmpvar_43 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_44;
  v_44.x = _World2Object[0].x;
  v_44.y = _World2Object[1].x;
  v_44.z = _World2Object[2].x;
  v_44.w = _World2Object[3].x;
  highp vec4 v_45;
  v_45.x = _World2Object[0].z;
  v_45.y = _World2Object[1].z;
  v_45.z = _World2Object[2].z;
  v_45.w = _World2Object[3].z;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize(((v_44.xyz * tmpvar_18.z) + (v_45.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_46;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = _Object2World[0].xyz;
  tmpvar_47[1] = _Object2World[1].xyz;
  tmpvar_47[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize((tmpvar_47 * tmpvar_18));
  worldTangent_3 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_50;
  tmpvar_50 = -(tmpvar_49);
  worldBinormal_2 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51.x = worldTangent_3.x;
  tmpvar_51.y = worldBinormal_2.x;
  tmpvar_51.z = worldNormal_4.x;
  tmpvar_51.w = tmpvar_43.x;
  highp vec4 tmpvar_52;
  tmpvar_52.x = worldTangent_3.y;
  tmpvar_52.y = worldBinormal_2.y;
  tmpvar_52.z = worldNormal_4.y;
  tmpvar_52.w = tmpvar_43.y;
  highp vec4 tmpvar_53;
  tmpvar_53.x = worldTangent_3.z;
  tmpvar_53.y = worldBinormal_2.z;
  tmpvar_53.z = worldNormal_4.z;
  tmpvar_53.w = tmpvar_43.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_4;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_51;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_53;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    //Instruction 69775
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 69776
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 69777
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 69778
    //MOVC
    t0 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69779
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69780
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 69781
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 69782
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69783
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69784
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69785
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69786
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69787
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69788
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69789
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 69790
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69791
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 69792
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69793
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 69794
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 69795
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 69796
    //MUL
    t3.y = t0.y * t29;
    //Instruction 69797
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 69798
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 69799
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 69800
    //LOG
    t29 = log2(t11);
    //Instruction 69801
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 69802
    //EXP
    t29 = exp2(t29);
    //Instruction 69803
    //NE
    tb30 = t11!=0.0;
    //Instruction 69804
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 69805
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 69806
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 69807
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 69808
    //MUL
    t11 = t0.x * t11;
    //Instruction 69809
    //ADD
    t4.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 69810
    //DP3
    t29 = dot(t4.xyz, t4.xyz);
    //Instruction 69811
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 69812
    //MUL
    t4.xy = vec2(t29) * t4.xz;
    //Instruction 69813
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 69814
    //DP2
    t29 = dot(t4.xz, t4.xw);
    //Instruction 69815
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 69816
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 69817
    //MUL
    t4.xy = vec2(t29) * t4.xy;
    //Instruction 69818
    //MUL
    t3.xz = vec2(t11) * t4.xy;
    //Instruction 69819
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 69820
    //MOV
    t5.y = t3.y;
    //Instruction 69821
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 69822
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 69823
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 69824
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 69825
    //SQRT
    t30 = sqrt(t30);
    //Instruction 69826
    //MUL
    t2.xyw = t2.xyw * vec3(t30);
    //Instruction 69827
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 69828
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 69829
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 69830
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 69831
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 69832
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 69833
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 69834
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 69835
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 69836
    //ADD
    t2.xyw = t2.xyw + _Object2World[3].xyz;
    //Instruction 69837
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 69838
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 69839
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 69840
    //MUL
    t3.zw = t4.yy * _World2Object[2].xx;
    //Instruction 69841
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 69842
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 69843
    //MUL
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 69844
    //ADD
    t3 = t3 + t5;
    //Instruction 69845
    //DP3
    t1 = dot(t3.xyw, t3.xyw);
    //Instruction 69846
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69847
    //MUL
    t3 = vec4(t1) * t3;
    //Instruction 69848
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 69849
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 69850
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 69851
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 69852
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 69853
    //MUL
    t10_6.xyz = t3.wxy * t5.xyz;
    //Instruction 69854
    //MAD
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 69855
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 69856
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 69857
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 69858
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 69859
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 69860
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 69861
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 69862
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 69863
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 69864
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 69865
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 69866
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 69867
    //ADD
    t1 = t10.y + t10.x;
    //Instruction 69868
    //ADD
    t1 = t10.z + t1;
    //Instruction 69869
    //FRC
    t1 = fract(t1);
    //Instruction 69870
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 69871
    //MOV
    vs_TEXCOORD4.z = t1;
    //Instruction 69872
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 69873
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 69874
    //MIN
    t10.x = min(abs(t4.y), abs(t4.x));
    //Instruction 69875
    //MUL
    t1 = t1 * t10.x;
    //Instruction 69876
    //MUL
    t10.x = t1 * t1;
    //Instruction 69877
    //MAD
    t19.x = t10.x * 0.020835 + -0.085133;
    //Instruction 69878
    //MAD
    t19.x = t10.x * t19.x + 0.180141;
    //Instruction 69879
    //MAD
    t19.x = t10.x * t19.x + -0.330299;
    //Instruction 69880
    //MAD
    t10.x = t10.x * t19.x + 0.999866;
    //Instruction 69881
    //MUL
    t19.x = t10.x * t1;
    //Instruction 69882
    //MAD
    t19.x = t19.x * -2.000000 + 1.570796;
    //Instruction 69883
    //LT
    tb28 = abs(t4.y)<abs(t4.x);
    //Instruction 69884
    //AND
    t19.x = tb28 ? t19.x : float(0.0);
    //Instruction 69885
    //MAD
    t1 = t1 * t10.x + t19.x;
    //Instruction 69886
    //LT
    tb10 = t4.y<(-t4.y);
    //Instruction 69887
    //AND
    t10.x = tb10 ? -3.141593 : float(0.0);
    //Instruction 69888
    //ADD
    t1 = t10.x + t1;
    //Instruction 69889
    //MIN
    t10.x = min(t4.y, (-t4.x));
    //Instruction 69890
    //MAX
    t19.x = max(t4.y, (-t4.x));
    //Instruction 69891
    //GE
    tb19 = t19.x>=(-t19.x);
    //Instruction 69892
    //LT
    tb10 = t10.x<(-t10.x);
    //Instruction 69893
    //AND
    ti10 = int(uint(tb19) & uint(tb10));
    //Instruction 69894
    //MOVC
    t1 = (ti10 != 0) ? (-t1) : t1;
    //Instruction 69895
    //LT
    tb10 = t1<0.0;
    //Instruction 69896
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 69897
    //ADD
    t1 = t10.x + t1;
    //Instruction 69898
    //ADD
    t1 = t0.z + t1;
    //Instruction 69899
    //MAD
    t1 = t1 * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 69900
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 69901
    //DIV
    t1 = t1 / _TreeInfo[int(tu20) + 0].x;
    //Instruction 69902
    //GE
    tb10 = t1>=(-t1);
    //Instruction 69903
    //FRC
    t1 = fract(abs(t1));
    //Instruction 69904
    //MOVC
    t1 = (tb10) ? t1 : (-t1);
    //Instruction 69905
    //MAD
    t1 = t1 * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 69906
    //FTOU
    tu1 = uint(t1);
    //Instruction 69907
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 69908
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69909
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 69910
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t2.xy;
    //Instruction 69911
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69912
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 69913
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 69914
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 69915
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 69916
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 69917
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 69918
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 69919
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 69742
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 69743
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69744
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 69745
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 69746
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 69747
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 69748
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69749
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 69750
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 69751
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 69752
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 69753
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 69754
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 69755
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 69756
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 69757
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69758
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69759
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69760
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 69761
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 69762
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 69763
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 69764
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 69765
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69766
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 69767
    //MOV
    t0.w = 1.0;
    //Instruction 69768
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 69769
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 69770
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 69771
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69772
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 69773
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69774
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_2;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_41 + (unity_SHC.xyz * (
    (normal_40.x * normal_40.x)
   - 
    (normal_40.y * normal_40.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 71523
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 71524
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 71525
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71526
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 71527
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 71528
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71529
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 71530
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71531
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 71532
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71533
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 71534
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 71535
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 71536
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71537
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 71538
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71539
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 71540
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 71541
    //FTOU
    tu18 = uint(t18);
    //Instruction 71542
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 71543
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 71544
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71545
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 71546
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 71547
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 71548
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 71549
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 71550
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 71551
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 71552
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 71553
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 71554
    //LOG
    t1.x = log2(t6);
    //Instruction 71555
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 71556
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 71557
    //NE
    tb7 = t6!=0.0;
    //Instruction 71558
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 71559
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 71560
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 71561
    //MOV
    t1.y = t2.w;
    //Instruction 71562
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 71563
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71564
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 71565
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 71566
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 71567
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 71568
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 71569
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 71570
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 71571
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 71572
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 71573
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 71574
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 71575
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71576
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71577
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71578
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71579
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71580
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71581
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71582
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 71583
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71584
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71585
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71586
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 71587
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 71588
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71589
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 71590
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 71591
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 71592
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 71593
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 71594
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 71595
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71596
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 71597
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 71598
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 71599
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 71600
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71601
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71602
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71603
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71604
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t4.xy;
    //Instruction 71605
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71606
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 71607
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 71608
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 71609
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 71610
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 71611
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 71612
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 71613
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 71614
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 71615
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 71616
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 71617
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71618
    //MUL
    t16_3 = t2.y * t2.y;
    //Instruction 71619
    //MAD
    t16_3 = t2.x * t2.x + (-t16_3);
    //Instruction 71620
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 71621
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 71622
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 71623
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 71624
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_3) + t16_5.xyz;
    //Instruction 71625
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 71494
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 71495
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 71496
    //MOV
    t1.x = t16_0.x;
    //Instruction 71497
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 71498
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 71499
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 71500
    //LT
    tb1 = t16_1<0.0;
    //Instruction 71501
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71502
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71503
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71504
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71505
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 71506
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71507
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 71508
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71509
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71510
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71511
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 71512
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71513
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 71514
    //MOV
    t16_0.w = 1.0;
    //Instruction 71515
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 71516
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 71517
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 71518
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 71519
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 71520
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 71521
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71522
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_39;
  tmpvar_39.w = 1.0;
  tmpvar_39.xyz = worldNormal_2;
  mediump vec4 normal_40;
  normal_40 = tmpvar_39;
  mediump vec3 x2_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (normal_40.xyzz * normal_40.yzzx);
  x2_41.x = dot (unity_SHBr, tmpvar_42);
  x2_41.y = dot (unity_SHBg, tmpvar_42);
  x2_41.z = dot (unity_SHBb, tmpvar_42);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_30;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_41 + (unity_SHC.xyz * (
    (normal_40.x * normal_40.x)
   - 
    (normal_40.y * normal_40.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform