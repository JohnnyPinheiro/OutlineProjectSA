        t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56232
            //MUL
            t30 = t6.w * _ST_WindVector.w;
            //Instruction 56233
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 56234
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 56235
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56236
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56237
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 56238
        //ELSE
        } else {
            //Instruction 56239
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56240
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56241
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56242
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56243
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 56244
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 56245
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56246
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56247
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 56248
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56249
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56250
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56251
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 56252
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56253
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56254
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 56255
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56256
            //LT
            tb1 = t6.w<0.0;
            //Instruction 56257
            //MOV
            t6.y = (-t6.w);
            //Instruction 56258
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56259
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 56260
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 56261
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 56262
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 56263
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 56264
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 56265
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56266
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56267
            //MUL
            t30 = t30 * t5.x;
            //Instruction 56268
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 56269
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 56270
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56271
        //ENDIF
        }
        //Instruction 56272
    //ENDIF
    }
    //Instruction 56273
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 56274
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 56275
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56276
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 56277
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 56278
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 56279
    //NE
    tb30 = t29!=0.0;
    //Instruction 56280
    //LOG
    t4.x = log2(t29);
    //Instruction 56281
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 56282
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 56283
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 56284
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56285
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56286
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 56287
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 56288
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56289
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 56290
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56291
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 56292
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 56293
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 56294
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56295
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 56296
    //MUL
    t29 = t29 * t30;
    //Instruction 56297
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 56298
    //MOV
    t4.y = t3.y;
    //Instruction 56299
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 56300
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56301
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 56302
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 56303
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 56304
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56305
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 56306
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 56307
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 56308
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56309
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 56310
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 56311
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 56312
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 56313
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 56314
    //MUL
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56315
    //MOV
    t5.xyz = t10_8.xyz;
    //Instruction 56316
    //MOV
    ti28 = 0x0;
    //Instruction 56317
    //LOOP
    while(true){
        //Instruction 56318
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 56319
        //BREAKC
        if(tb29){break;}
        //Instruction 56320
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 56321
        //DP3
        t29 = dot(t6.xyz, t6.xyz);
        //Instruction 56322
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 56323
        //MUL
        t6.xyz = vec3(t30) * t6.xyz;
        //Instruction 56324
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 56325
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 56326
        //DP3
        t30 = dot(t6.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 56327
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56328
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 56329
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 56330
        //MUL
        t29 = t29 * t30;
        //Instruction 56331
        //DP3
        t30 = dot(t4.xyz, t6.xyz);
        //Instruction 56332
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56333
        //MUL
        t29 = t29 * t30;
        //Instruction 56334
        //MAD
        t5.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t5.xyz;
        //Instruction 56335
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 56336
    //ENDLOOP
    }
    //Instruction 56337
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56338
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56339
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56340
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56341
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56342
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 56343
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56344
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 56345
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 56346
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_3;
mediump float t16_13;
void main()
{
    //Instruction 56140
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56141
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 56142
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 56143
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 56144
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 56145
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 56146
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 56147
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 56148
    //DIV
    t16_13 = t16_2 / t16_13;
    //Instruction 56149
    //MAD
    t16_3 = t16_13 * 0.500000 + 0.500000;
    //Instruction 56150
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_3);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 56151
    //MUL
    t16_0.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56152
    //MOV
    SV_Target0 = t16_0;
    //Instruction 56153
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_7;
  tmpvar_7.xy = _glesMultiTexCoord2.zw;
  tmpvar_7.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_50;
  highp vec3 viewN_51;
  highp vec3 viewpos_52;
  viewpos_52 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_53[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_53[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_51 = normalize((tmpvar_53 * _glesNormal));
  lowp vec3 tmpvar_54;
  tmpvar_54 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_50 = tmpvar_54;
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_52 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_50 = (lightColor_50 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_51, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_52 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_50 = (lightColor_50 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_51, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_52 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_50 = (lightColor_50 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_51, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_52 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_50 = (lightColor_50 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_51, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_interpolator2 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_6;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    //Instruction 56356
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56357
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 56358
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 56359
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56360
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 56361
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 56362
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 56363
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 56364
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 56365
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 56366
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 56367
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 56368
    //GE
    tb25 = t16_24>=3.000000;
    //Instruction 56369
    //IF
    if(tb25){
        //Instruction 56370
        //EQ
        tb25 = t16_24==5.000000;
        //Instruction 56371
        //IF
        if(tb25){
            //Instruction 56372
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56373
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 56374
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 56375
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 56376
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 56377
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56378
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56379
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56380
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56381
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56382
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56383
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56384
            //ADD
            t5.x = t25 + in_TEXCOORD0.w;
            //Instruction 56385
            //MAD
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56386
            //MUL
            t26 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56387
            //MUL
            t5.z = t26 * 0.500000;
            //Instruction 56388
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 56389
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56390
            //FRC
            t5 = fract(t5);
            //Instruction 56391
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56392
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 56393
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56394
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56395
            //ADD
            t5 = t5 + t5;
            //Instruction 56396
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56397
            //LT
            tb26 = t6.w<0.0;
            //Instruction 56398
            //MOV
            t6.y = (-t6.w);
            //Instruction 56399
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56400
            //MOVC
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            //Instruction 56401
            //MAD
            t26 = (-t5.y) * t5.z + t6.x;
            //Instruction 56402
            //MAD
            t26 = t6.y * t26 + t6.w;
            //Instruction 56403
            //ADD
            t27 = (-t26) + t6.x;
            //Instruction 56404
            //MAD
            t26 = t6.y * t27 + t26;
            //Instruction 56405
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 56406
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56407
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56408
            //MUL
            t28 = t28 * t5.x;
            //Instruction 56409
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 56410
            //MAD
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56411
            //MUL
            t26 = t26 * t27;
            //Instruction 56412
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 56413
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56414
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56415
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56416
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56417
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 56418
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 56419
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56420
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 56421
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56422
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 56423
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 56424
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 56425
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 56426
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56427
            //MUL
            t26 = t5.w * _ST_WindVector.w;
            //Instruction 56428
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 56429
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 56430
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56431
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56432
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 56433
        //ELSE
        } else {
            //Instruction 56434
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56435
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56436
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56437
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56438
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56439
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56440
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56441
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56442
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56443
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 56444
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56445
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56446
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56447
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 56448
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56449
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56450
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 56451
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56452
            //LT
            tb25 = t5.w<0.0;
            //Instruction 56453
            //MOV
            t5.y = (-t5.w);
            //Instruction 56454
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56455
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 56456
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 56457
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 56458
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 56459
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 56460
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 56461
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56462
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56463
            //MUL
            t27 = t27 * t4.x;
            //Instruction 56464
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 56465
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56466
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56467
        //ENDIF
        }
        //Instruction 56468
    //ENDIF
    }
    //Instruction 56469
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 56470
    //SQRT
    t25 = sqrt(t25);
    //Instruction 56471
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56472
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 56473
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 56474
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 56475
    //NE
    tb3 = t26!=0.0;
    //Instruction 56476
    //LOG
    t11 = log2(t26);
    //Instruction 56477
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 56478
    //EXP
    t11 = exp2(t11);
    //Instruction 56479
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 56480
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56481
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56482
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 56483
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 56484
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56485
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 56486
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56487
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 56488
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 56489
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 56490
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56491
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 56492
    //MUL
    t26 = t26 * t3.x;
    //Instruction 56493
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 56494
    //MOV
    t3.y = t2.y;
    //Instruction 56495
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 56496
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 56497
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 56498
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 56499
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 56500
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56501
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 56502
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 56503
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 56504
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56505
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 56506
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 56507
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 56508
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 56509
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 56510
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56511
    //MOV
    t4.xyz = t10_7.xyz;
    //Instruction 56512
    //MOV
    ti25 = 0x0;
    //Instruction 56513
    //LOOP
    while(true){
        //Instruction 56514
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 56515
        //BREAKC
        if(tb26){break;}
        //Instruction 56516
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 56517
        //DP3
        t26 = dot(t5.xyz, t5.xyz);
        //Instruction 56518
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 56519
        //MUL
        t5.xyz = vec3(t27) * t5.xyz;
        //Instruction 56520
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 56521
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 56522
        //DP3
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 56523
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56524
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 56525
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 56526
        //MUL
        t26 = t26 * t27;
        //Instruction 56527
        //DP3
        t27 = dot(t3.xyz, t5.xyz);
        //Instruction 56528
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56529
        //MUL
        t26 = t26 * t27;
        //Instruction 56530
        //MAD
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        //Instruction 56531
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 56532
    //ENDLOOP
    }
    //Instruction 56533
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 56534
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56535
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56536
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56537
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56538
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 56539
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56540
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56541
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56542
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 56543
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 56544
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 56545
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 56347
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 56348
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56349
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 56350
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 56351
    //MUL
    t16_1.w = t10_1.w * _Color.w;
    //Instruction 56352
    //MAD
    t16_0.xyz = t16_0.xxx * t16_3.xyz + t10_2.xyz;
    //Instruction 56353
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56354
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56355
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_7;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_52;
  highp vec3 viewN_53;
  highp vec3 viewpos_54;
  viewpos_54 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_55;
  tmpvar_55[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_55[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_55[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_53 = normalize((tmpvar_55 * _glesNormal));
  lowp vec3 tmpvar_56;
  tmpvar_56 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_52 = tmpvar_56;
  highp vec3 toLight_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[0].xyz - (viewpos_54 * unity_LightPosition[0].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  toLight_57 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_52 = (lightColor_52 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_53, toLight_57))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_57, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[1].xyz - (viewpos_54 * unity_LightPosition[1].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  toLight_60 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_52 = (lightColor_52 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_53, toLight_60))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_60, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[2].xyz - (viewpos_54 * unity_LightPosition[2].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  toLight_63 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_52 = (lightColor_52 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_53, toLight_63))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_63, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[3].xyz - (viewpos_54 * unity_LightPosition[3].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  toLight_66 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_52 = (lightColor_52 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_53, toLight_66))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_66, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_interpolator2 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_2 = (diffuseColor_5.w * _Color.w);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_4 = tmpvar_7;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_5.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    //Instruction 56159
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56160
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 56161
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 56162
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 56163
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 56164
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 56165
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 56166
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 56167
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 56168
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 56169
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 56170
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56171
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 56172
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 56173
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 56174
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56175
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 56176
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 56177
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 56178
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 56179
    //GE
    tb29 = t16_27>=3.000000;
    //Instruction 56180
    //IF
    if(tb29){
        //Instruction 56181
        //EQ
        tb29 = t16_27==5.000000;
        //Instruction 56182
        //IF
        if(tb29){
            //Instruction 56183
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56184
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 56185
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 56186
            //DP3
            t29 = dot(t4.xyz, t4.xyz);
            //Instruction 56187
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 56188
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56189
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56190
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56191
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56192
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56193
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 56194
            //ADD
            t6.x = t29 + in_TEXCOORD0.w;
            //Instruction 56195
            //MAD
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56196
            //MUL
            t30 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56197
            //MUL
            t6.z = t30 * 0.500000;
            //Instruction 56198
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 56199
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56200
            //FRC
            t6 = fract(t6);
            //Instruction 56201
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56202
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 56203
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56204
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56205
            //ADD
            t6 = t6 + t6;
            //Instruction 56206
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56207
            //LT
            tb30 = t7.w<0.0;
            //Instruction 56208
            //MOV
            t7.y = (-t7.w);
            //Instruction 56209
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56210
            //MOVC
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            //Instruction 56211
            //MAD
            t30 = (-t6.y) * t6.z + t7.x;
            //Instruction 56212
            //MAD
            t30 = t7.y * t30 + t7.w;
            //Instruction 56213
            //ADD
            t31 = (-t30) + t7.x;
            //Instruction 56214
            //MAD
            t30 = t7.y * t31 + t30;
            //Instruction 56215
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 56216
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56217
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56218
            //MUL
            t32 = t32 * t6.x;
            //Instruction 56219
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 56220
            //MAD
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56221
            //MUL
            t30 = t30 * t31;
            //Instruction 56222
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 56223
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56224
            //MAD
            t6.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56225
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56226
            //MAD
            t6.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56227
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 56228
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 56229
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56230
            //MUL
            t7.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 56231
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56232
            //MAD
            t6.xy = t7.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 56233
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 56234
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 56235
            //MUL
            t29 = t6.x * t6.y;
            //Instruction 56236
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56237
            //MUL
            t30 = t6.w * _ST_WindVector.w;
            //Instruction 56238
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 56239
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 56240
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56241
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56242
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 56243
        //ELSE
        } else {
            //Instruction 56244
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56245
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56246
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56247
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56248
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 56249
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 56250
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56251
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56252
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 56253
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56254
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56255
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56256
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 56257
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56258
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56259
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 56260
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56261
            //LT
            tb1 = t6.w<0.0;
            //Instruction 56262
            //MOV
            t6.y = (-t6.w);
            //Instruction 56263
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56264
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 56265
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 56266
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 56267
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 56268
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 56269
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 56270
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56271
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56272
            //MUL
            t30 = t30 * t5.x;
            //Instruction 56273
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 56274
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 56275
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56276
        //ENDIF
        }
        //Instruction 56277
    //ENDIF
    }
    //Instruction 56278
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 56279
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 56280
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56281
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 56282
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 56283
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 56284
    //NE
    tb30 = t29!=0.0;
    //Instruction 56285
    //LOG
    t4.x = log2(t29);
    //Instruction 56286
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 56287
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 56288
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 56289
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56290
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56291
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 56292
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 56293
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56294
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 56295
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56296
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 56297
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 56298
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 56299
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56300
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 56301
    //MUL
    t29 = t29 * t30;
    //Instruction 56302
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 56303
    //MOV
    t4.y = t3.y;
    //Instruction 56304
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 56305
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56306
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 56307
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 56308
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 56309
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56310
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 56311
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 56312
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 56313
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56314
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 56315
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 56316
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 56317
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 56318
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 56319
    //MUL
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56320
    //MOV
    t5.xyz = t10_8.xyz;
    //Instruction 56321
    //MOV
    ti28 = 0x0;
    //Instruction 56322
    //LOOP
    while(true){
        //Instruction 56323
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 56324
        //BREAKC
        if(tb29){break;}
        //Instruction 56325
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 56326
        //DP3
        t29 = dot(t6.xyz, t6.xyz);
        //Instruction 56327
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 56328
        //MUL
        t6.xyz = vec3(t30) * t6.xyz;
        //Instruction 56329
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 56330
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 56331
        //DP3
        t30 = dot(t6.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 56332
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56333
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 56334
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 56335
        //MUL
        t29 = t29 * t30;
        //Instruction 56336
        //DP3
        t30 = dot(t4.xyz, t6.xyz);
        //Instruction 56337
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56338
        //MUL
        t29 = t29 * t30;
        //Instruction 56339
        //MAD
        t5.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t5.xyz;
        //Instruction 56340
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 56341
    //ENDLOOP
    }
    //Instruction 56342
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56343
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56344
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56345
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56346
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56347
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 56348
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56349
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 56350
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 56351
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 56352
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 56353
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 56354
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump float t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 56141
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 56142
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56143
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 56144
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 56145
    //MUL
    t16_1.w = t10_1.w * _Color.w;
    //Instruction 56146
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 56147
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 56148
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 56149
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 56150
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 56151
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 56152
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 56153
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 56154
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 56155
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 56156
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56157
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56158
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 == 5.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    highp float fOffset_18;
    fOffset_18 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_18 = 0.75;
    };
    highp vec4 tmpvar_19;
    tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_19.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_18);
    highp vec4 tmpvar_20;
    tmpvar_20 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    vPos_17 = (tmpvar_16 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_20 * tmpvar_20)
       * 
        (3.0 - (2.0 * tmpvar_20))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_8 = tmpvar_2;
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = FinalPosition_11;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (FinalPosition_11 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_9 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_11 = vPos_21;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_11;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_11 = vPos_46;
  };
  tmpvar_7.xyz = FinalPosition_11;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * tmpvar_8));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  toLight_65 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, toLight_65))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_65, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  toLight_68 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, toLight_68))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_68, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    //Instruction 56363
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56364
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 56365
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 56366
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56367
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 56368
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 56369
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 56370
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 56371
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 56372
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 56373
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 56374
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 56375
    //EQ
    tb25 = t16_24==5.000000;
    //Instruction 56376
    //LT
    tb26 = in_TEXCOORD0.x<0.500000;
    //Instruction 56377
    //AND
    t26 = tb26 ? 0.750000 : float(0.0);
    //Instruction 56378
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 56379
    //MAD
    t26 = t3.x * _ST_WindFrondRipple.z + t26;
    //Instruction 56380
    //ADD
    t26 = t26 + 0.500000;
    //Instruction 56381
    //FRC
    t26 = fract(t26);
    //Instruction 56382
    //MAD
    t26 = t26 * 2.000000 + -1.0;
    //Instruction 56383
    //MUL
    t3.x = abs(t26) * abs(t26);
    //Instruction 56384
    //MAD
    t26 = -abs(t26) * 2.000000 + 3.000000;
    //Instruction 56385
    //MAD
    t26 = t3.x * t26 + -0.500000;
    //Instruction 56386
    //MUL
    t26 = t26 * in_TEXCOORD2.y;
    //Instruction 56387
    //DP2
    t26 = dot(_ST_WindFrondRipple.yy, vec2(t26));
    //Instruction 56388
    //MAD
    t3.xyz = vec3(t26) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 56389
    //MOVC
    t2.xyz = (bool(tb25)) ? t3.xyz : t2.xyz;
    //Instruction 56390
    //GE
    tb26 = t16_24>=3.000000;
    //Instruction 56391
    //IF
    if(tb26){
        //Instruction 56392
        //IF
        if(tb25){
            //Instruction 56393
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56394
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 56395
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 56396
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 56397
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 56398
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56399
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56400
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56401
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56402
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56403
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56404
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56405
            //ADD
            t5.x = t25 + in_TEXCOORD0.w;
            //Instruction 56406
            //MAD
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56407
            //MUL
            t26 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56408
            //MUL
            t5.z = t26 * 0.500000;
            //Instruction 56409
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 56410
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56411
            //FRC
            t5 = fract(t5);
            //Instruction 56412
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56413
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 56414
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56415
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56416
            //ADD
            t5 = t5 + t5;
            //Instruction 56417
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56418
            //LT
            tb26 = t6.w<0.0;
            //Instruction 56419
            //MOV
            t6.y = (-t6.w);
            //Instruction 56420
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56421
            //MOVC
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            //Instruction 56422
            //MAD
            t26 = (-t5.y) * t5.z + t6.x;
            //Instruction 56423
            //MAD
            t26 = t6.y * t26 + t6.w;
            //Instruction 56424
            //ADD
            t27 = (-t26) + t6.x;
            //Instruction 56425
            //MAD
            t26 = t6.y * t27 + t26;
            //Instruction 56426
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 56427
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56428
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56429
            //MUL
            t28 = t28 * t5.x;
            //Instruction 56430
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 56431
            //MAD
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56432
            //MUL
            t26 = t26 * t27;
            //Instruction 56433
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 56434
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56435
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56436
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56437
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56438
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 56439
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 56440
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56441
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 56442
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56443
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 56444
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 56445
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 56446
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 56447
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56448
            //MUL
            t26 = t5.w * _ST_WindVector.w;
            //Instruction 56449
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 56450
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 56451
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56452
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56453
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 56454
        //ELSE
        } else {
            //Instruction 56455
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56456
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56457
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56458
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56459
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56460
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56461
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56462
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56463
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56464
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 56465
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56466
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56467
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56468
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 56469
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56470
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56471
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 56472
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56473
            //LT
            tb25 = t5.w<0.0;
            //Instruction 56474
            //MOV
            t5.y = (-t5.w);
            //Instruction 56475
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56476
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 56477
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 56478
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 56479
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 56480
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 56481
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 56482
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56483
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56484
            //MUL
            t27 = t27 * t4.x;
            //Instruction 56485
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 56486
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56487
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56488
        //ENDIF
        }
        //Instruction 56489
    //ENDIF
    }
    //Instruction 56490
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 56491
    //SQRT
    t25 = sqrt(t25);
    //Instruction 56492
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56493
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 56494
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 56495
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 56496
    //NE
    tb3 = t26!=0.0;
    //Instruction 56497
    //LOG
    t11 = log2(t26);
    //Instruction 56498
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 56499
    //EXP
    t11 = exp2(t11);
    //Instruction 56500
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 56501
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56502
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56503
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 56504
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 56505
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56506
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 56507
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56508
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 56509
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 56510
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 56511
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56512
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 56513
    //MUL
    t26 = t26 * t3.x;
    //Instruction 56514
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 56515
    //MOV
    t3.y = t2.y;
    //Instruction 56516
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 56517
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 56518
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 56519
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 56520
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 56521
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56522
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 56523
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 56524
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 56525
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56526
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 56527
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 56528
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 56529
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 56530
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 56531
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56532
    //MOV
    t4.xyz = t10_7.xyz;
    //Instruction 56533
    //MOV
    ti25 = 0x0;
    //Instruction 56534
    //LOOP
    while(true){
        //Instruction 56535
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 56536
        //BREAKC
        if(tb26){break;}
        //Instruction 56537
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 56538
        //DP3
        t26 = dot(t5.xyz, t5.xyz);
        //Instruction 56539
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 56540
        //MUL
        t5.xyz = vec3(t27) * t5.xyz;
        //Instruction 56541
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 56542
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 56543
        //DP3
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 56544
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56545
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 56546
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 56547
        //MUL
        t26 = t26 * t27;
        //Instruction 56548
        //DP3
        t27 = dot(t3.xyz, t5.xyz);
        //Instruction 56549
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56550
        //MUL
        t26 = t26 * t27;
        //Instruction 56551
        //MAD
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        //Instruction 56552
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 56553
    //ENDLOOP
    }
    //Instruction 56554
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 56555
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56556
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56557
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56558
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56559
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 56560
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56561
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56562
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56563
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    //Instruction 56355
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56356
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 56357
    //LT
    tb2 = t10_1<0.0;
    //Instruction 56358
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 56359
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 56360
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56361
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56362
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_18 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_14;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_14 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_12 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_14 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * tmpvar_11));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  toLight_67 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, toLight_67))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  toLight_70 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, toLight_70))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    //Instruction 56563
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56564
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 56565
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 56566
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 56567
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 56568
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 56569
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 56570
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 56571
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 56572
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 56573
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 56574
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56575
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 56576
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 56577
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 56578
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56579
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 56580
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 56581
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 56582
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 56583
    //EQ
    tb29 = t16_27==5.000000;
    //Instruction 56584
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 56585
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 56586
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 56587
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 56588
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 56589
    //FRC
    t30 = fract(t30);
    //Instruction 56590
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 56591
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 56592
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 56593
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 56594
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 56595
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 56596
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 56597
    //MOVC
    t3.xyz = (bool(tb29)) ? t4.xyz : t3.xyz;
    //Instruction 56598
    //GE
    tb30 = t16_27>=3.000000;
    //Instruction 56599
    //IF
    if(tb30){
        //Instruction 56600
        //IF
        if(tb29){
            //Instruction 56601
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56602
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 56603
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 56604
            //DP3
            t29 = dot(t4.xyz, t4.xyz);
            //Instruction 56605
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 56606
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56607
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56608
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56609
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56610
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56611
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 56612
            //ADD
            t6.x = t29 + in_TEXCOORD0.w;
            //Instruction 56613
            //MAD
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56614
            //MUL
            t30 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56615
            //MUL
            t6.z = t30 * 0.500000;
            //Instruction 56616
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 56617
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56618
            //FRC
            t6 = fract(t6);
            //Instruction 56619
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56620
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 56621
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56622
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56623
            //ADD
            t6 = t6 + t6;
            //Instruction 56624
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56625
            //LT
            tb30 = t7.w<0.0;
            //Instruction 56626
            //MOV
            t7.y = (-t7.w);
            //Instruction 56627
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56628
            //MOVC
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            //Instruction 56629
            //MAD
            t30 = (-t6.y) * t6.z + t7.x;
            //Instruction 56630
            //MAD
            t30 = t7.y * t30 + t7.w;
            //Instruction 56631
            //ADD
            t31 = (-t30) + t7.x;
            //Instruction 56632
            //MAD
            t30 = t7.y * t31 + t30;
            //Instruction 56633
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 56634
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56635
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56636
            //MUL
            t32 = t32 * t6.x;
            //Instruction 56637
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 56638
            //MAD
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56639
            //MUL
            t30 = t30 * t31;
            //Instruction 56640
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 56641
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56642
            //MAD
            t6.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56643
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56644
            //MAD
            t6.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56645
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 56646
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 56647
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56648
            //MUL
            t7.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 56649
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56650
            //MAD
            t6.xy = t7.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 56651
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 56652
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 56653
            //MUL
            t29 = t6.x * t6.y;
            //Instruction 56654
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56655
            //MUL
            t30 = t6.w * _ST_WindVector.w;
            //Instruction 56656
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 56657
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 56658
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56659
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56660
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 56661
        //ELSE
        } else {
            //Instruction 56662
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56663
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56664
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56665
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56666
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 56667
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 56668
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56669
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56670
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 56671
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56672
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56673
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56674
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 56675
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56676
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56677
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 56678
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56679
            //LT
            tb1 = t6.w<0.0;
            //Instruction 56680
            //MOV
            t6.y = (-t6.w);
            //Instruction 56681
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56682
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 56683
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 56684
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 56685
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 56686
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 56687
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 56688
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56689
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56690
            //MUL
            t30 = t30 * t5.x;
            //Instruction 56691
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 56692
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 56693
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56694
        //ENDIF
        }
        //Instruction 56695
    //ENDIF
    }
    //Instruction 56696
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 56697
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 56698
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56699
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 56700
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 56701
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 56702
    //NE
    tb30 = t29!=0.0;
    //Instruction 56703
    //LOG
    t4.x = log2(t29);
    //Instruction 56704
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 56705
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 56706
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 56707
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56708
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56709
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 56710
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 56711
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56712
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 56713
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56714
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 56715
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 56716
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 56717
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56718
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 56719
    //MUL
    t29 = t29 * t30;
    //Instruction 56720
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 56721
    //MOV
    t4.y = t3.y;
    //Instruction 56722
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 56723
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56724
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 56725
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 56726
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 56727
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56728
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 56729
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 56730
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 56731
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56732
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 56733
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 56734
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 56735
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 56736
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 56737
    //MUL
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56738
    //MOV
    t5.xyz = t10_8.xyz;
    //Instruction 56739
    //MOV
    ti28 = 0x0;
    //Instruction 56740
    //LOOP
    while(true){
        //Instruction 56741
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 56742
        //BREAKC
        if(tb29){break;}
        //Instruction 56743
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 56744
        //DP3
        t29 = dot(t6.xyz, t6.xyz);
        //Instruction 56745
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 56746
        //MUL
        t6.xyz = vec3(t30) * t6.xyz;
        //Instruction 56747
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 56748
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 56749
        //DP3
        t30 = dot(t6.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 56750
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56751
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 56752
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 56753
        //MUL
        t29 = t29 * t30;
        //Instruction 56754
        //DP3
        t30 = dot(t4.xyz, t6.xyz);
        //Instruction 56755
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56756
        //MUL
        t29 = t29 * t30;
        //Instruction 56757
        //MAD
        t5.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t5.xyz;
        //Instruction 56758
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 56759
    //ENDLOOP
    }
    //Instruction 56760
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56761
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56762
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56763
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56764
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56765
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 56766
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56767
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 56768
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 56769
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    //Instruction 56546
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56547
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 56548
    //LT
    tb2 = t10_1<0.0;
    //Instruction 56549
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 56550
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 56551
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 56552
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 56553
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 56554
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 56555
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 56556
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 56557
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 56558
    //MAD
    t16_2 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 56559
    //MUL
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 56560
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56561
    //MOV
    SV_Target0 = t16_0;
    //Instruction 56562
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18.x = tmpvar_4.w;
  tmpvar_18.y = tmpvar_5.x;
  tmpvar_18.z = tmpvar_5.y;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (FinalPosition_13, tmpvar_18, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_19;
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_15 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (tmpvar_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_12.zxy) - (tmpvar_30.zxy * vRotatedWindVector_12.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_12, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_10 = vDirection_24;
    FinalPosition_13 = vPos_23;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_13;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_13 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_11 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_13 = vPos_64;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_13;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_13 = vPos_89;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6.w = tmpvar_7.w;
  highp vec3 lightColor_97;
  highp vec3 viewN_98;
  highp vec3 viewpos_99;
  viewpos_99 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_100;
  tmpvar_100[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_100[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_100[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_98 = normalize((tmpvar_100 * tmpvar_10));
  lowp vec3 tmpvar_101;
  tmpvar_101 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_97 = tmpvar_101;
  highp vec3 toLight_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (unity_LightPosition[0].xyz - (viewpos_99 * unity_LightPosition[0].w));
  highp float tmpvar_104;
  tmpvar_104 = dot (tmpvar_103, tmpvar_103);
  toLight_102 = (tmpvar_103 * inversesqrt(tmpvar_104));
  lightColor_97 = (lightColor_97 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_98, toLight_102))
   * 
    ((1.0/((1.0 + (tmpvar_104 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_102, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (unity_LightPosition[1].xyz - (viewpos_99 * unity_LightPosition[1].w));
  highp float tmpvar_107;
  tmpvar_107 = dot (tmpvar_106, tmpvar_106);
  toLight_105 = (tmpvar_106 * inversesqrt(tmpvar_107));
  lightColor_97 = (lightColor_97 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_98, toLight_105))
   * 
    ((1.0/((1.0 + (tmpvar_107 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_105, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (unity_LightPosition[2].xyz - (viewpos_99 * unity_LightPosition[2].w));
  highp float tmpvar_110;
  tmpvar_110 = dot (tmpvar_109, tmpvar_109);
  toLight_108 = (tmpvar_109 * inversesqrt(tmpvar_110));
  lightColor_97 = (lightColor_97 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_98, toLight_108))
   * 
    ((1.0/((1.0 + (tmpvar_110 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_108, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (unity_LightPosition[3].xyz - (viewpos_99 * unity_LightPosition[3].w));
  highp float tmpvar_113;
  tmpvar_113 = dot (tmpvar_112, tmpvar_112);
  toLight_111 = (tmpvar_112 * inversesqrt(tmpvar_113));
  lightColor_97 = (lightColor_97 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_98, toLight_111))
   * 
    ((1.0/((1.0 + (tmpvar_113 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_111, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_6.xyz = (tmpvar_7.xyz * lightColor_97);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_6;
  xlv_Input_interpolator1 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
lowp vec3 t10_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
mediump float t16_45;
highp float t46;
highp int ti46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
void main()
{
    //Instruction 56128
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56129
    //MUL
    t16_45 = _WindEnabled * _WindQuality;
    //Instruction 56130
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_45)).xy;
    //Instruction 56131
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56132
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 56133
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 56134
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 56135
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 56136
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 56137
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 56138
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 56139
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 56140
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 56141
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 56142
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 56143
    //LT
    tb31 = t16_45<5.000000;
    //Instruction 56144
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 56145
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 56146
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 56147
        //EQ
        tb31 = t16_45==4.000000;
        //Instruction 56148
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 56149
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 56150
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 56151
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 56152
        //FRC
        t16.x = fract(t16.x);
        //Instruction 56153
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 56154
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 56155
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 56156
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 56157
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 56158
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 56159
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 56160
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 56161
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 56162
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 56163
        //IF
        if(tb31){
            //Instruction 56164
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 56165
            //FRC
            t4 = fract(t4);
            //Instruction 56166
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56167
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 56168
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 56169
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 56170
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 56171
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 56172
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 56173
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 56174
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56175
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 56176
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56177
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 56178
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 56179
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 56180
            //SQRT
            t47 = sqrt(t47);
            //Instruction 56181
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 56182
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 56183
            //MUL
            t48 = t48 * t5.x;
            //Instruction 56184
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 56185
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 56186
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 56187
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 56188
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 56189
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 56190
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 56191
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 56192
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 56193
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 56194
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 56195
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 56196
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 56197
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 56198
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 56199
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 56200
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 56201
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 56202
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 56203
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 56204
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 56205
            //SQRT
            t48 = sqrt(t48);
            //Instruction 56206
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 56207
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 56208
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 56209
            //MUL
            t35 = t48 * t5.x;
            //Instruction 56210
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 56211
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 56212
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 56213
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 56214
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 56215
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 56216
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 56217
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 56218
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 56219
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56220
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 56221
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56222
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 56223
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 56224
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 56225
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 56226
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 56227
            //LOG
            t46 = log2(t46);
            //Instruction 56228
            //MUL
            t31 = t46 * t16.y;
            //Instruction 56229
            //EXP
            t31 = exp2(t31);
            //Instruction 56230
            //MUL
            t46 = t5.y * t48;
            //Instruction 56231
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 56232
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 56233
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 56234
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 56235
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 56236
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 56237
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 56238
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 56239
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 56240
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 56241
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 56242
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 56243
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 56244
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 56245
            //MOV
            t10.z = t11.x;
            //Instruction 56246
            //MOV
            t10.w = t9.x;
            //Instruction 56247
            //MOV
            t12.z = t8.y;
            //Instruction 56248
            //MOV
            t12.w = t13.y;
            //Instruction 56249
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 56250
            //MOV
            t13.w = t12.y;
            //Instruction 56251
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 56252
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 56253
            //MOV
            t9.w = t10.y;
            //Instruction 56254
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 56255
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 56256
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 56257
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 56258
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 56259
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 56260
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 56261
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 56262
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 56263
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 56264
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 56265
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 56266
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 56267
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 56268
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 56269
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 56270
        //ELSE
        } else {
            //Instruction 56271
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 56272
        //ENDIF
        }
        //Instruction 56273
    //ELSE
    } else {
        //Instruction 56274
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 56275
    //ENDIF
    }
    //Instruction 56276
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 56277
    //GE
    tb17 = t16_45>=3.000000;
    //Instruction 56278
    //IF
    if(tb17){
        //Instruction 56279
        //EQ
        tb17 = t16_45==5.000000;
        //Instruction 56280
        //IF
        if(tb17){
            //Instruction 56281
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56282
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 56283
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 56284
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 56285
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 56286
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 56287
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56288
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56289
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56290
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56291
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56292
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 56293
            //ADD
            t6.x = t17.x + in_TEXCOORD0.w;
            //Instruction 56294
            //MAD
            t6.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56295
            //MUL
            t47 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56296
            //MUL
            t6.z = t47 * 0.500000;
            //Instruction 56297
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 56298
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56299
            //FRC
            t6 = fract(t6);
            //Instruction 56300
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56301
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 56302
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56303
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56304
            //ADD
            t6 = t6 + t6;
            //Instruction 56305
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56306
            //LT
            tb47 = t7.w<0.0;
            //Instruction 56307
            //MOV
            t7.y = (-t7.w);
            //Instruction 56308
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56309
            //MOVC
            t7.xy = (bool(tb47)) ? t7.xy : t7.zw;
            //Instruction 56310
            //MAD
            t47 = (-t6.y) * t6.z + t7.x;
            //Instruction 56311
            //MAD
            t47 = t7.y * t47 + t7.w;
            //Instruction 56312
            //ADD
            t48 = (-t47) + t7.x;
            //Instruction 56313
            //MAD
            t47 = t7.y * t48 + t47;
            //Instruction 56314
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 56315
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56316
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56317
            //MUL
            t49 = t49 * t6.x;
            //Instruction 56318
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 56319
            //MAD
            t48 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56320
            //MUL
            t47 = t47 * t48;
            //Instruction 56321
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 56322
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56323
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56324
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56325
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56326
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 56327
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 56328
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56329
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 56330
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56331
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 56332
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 56333
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 56334
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 56335
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56336
            //MUL
            t47 = t6.w * _ST_WindVector.w;
            //Instruction 56337
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 56338
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 56339
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56340
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 56341
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 56342
        //ELSE
        } else {
            //Instruction 56343
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56344
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56345
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56346
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56347
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56348
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 56349
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 56350
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56351
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56352
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 56353
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56354
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56355
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56356
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 56357
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56358
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56359
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 56360
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56361
            //LT
            tb17 = t6.w<0.0;
            //Instruction 56362
            //MOV
            t6.y = (-t6.w);
            //Instruction 56363
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56364
            //MOVC
            t17.xz = (bool(tb17)) ? t6.xy : t6.zw;
            //Instruction 56365
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 56366
            //MAD
            t48 = t17.z * t48 + t6.w;
            //Instruction 56367
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 56368
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 56369
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 56370
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56371
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56372
            //MUL
            t48 = t48 * t5.x;
            //Instruction 56373
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 56374
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 56375
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56376
        //ENDIF
        }
        //Instruction 56377
    //ENDIF
    }
    //Instruction 56378
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 56379
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 56380
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56381
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 56382
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 56383
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 56384
    //NE
    tb48 = t47!=0.0;
    //Instruction 56385
    //LOG
    t4.x = log2(t47);
    //Instruction 56386
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 56387
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 56388
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 56389
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56390
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56391
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 56392
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 56393
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56394
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 56395
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56396
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 56397
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 56398
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 56399
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56400
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 56401
    //MUL
    t47 = t47 * t48;
    //Instruction 56402
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 56403
    //MOV
    t4.y = t3.y;
    //Instruction 56404
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 56405
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 56406
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 56407
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 56408
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 56409
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56410
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 56411
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t3.xyz;
    //Instruction 56412
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 56413
    //MUL
    t4.xyz = t16.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56414
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t16.xxx + t4.xyz;
    //Instruction 56415
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * t16.zzz + t1.xyz;
    //Instruction 56416
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 56417
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 56418
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 56419
    //MUL
    t10_14.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56420
    //MOV
    t4.xyz = t10_14.xyz;
    //Instruction 56421
    //MOV
    ti46 = 0x0;
    //Instruction 56422
    //LOOP
    while(true){
        //Instruction 56423
        //IGE
        tb47 = ti46>=0x4;
        //Instruction 56424
        //BREAKC
        if(tb47){break;}
        //Instruction 56425
        //MAD
        t5.xyz = (-t3.xyz) * unity_LightPosition[ti46 + 0].www + unity_LightPosition[ti46 + 0].xyz;
        //Instruction 56426
        //DP3
        t47 = dot(t5.xyz, t5.xyz);
        //Instruction 56427
        //RSQ
        t48 = inversesqrt(t47);
        //Instruction 56428
        //MUL
        t5.xyz = vec3(t48) * t5.xyz;
        //Instruction 56429
        //MAD
        t47 = t47 * unity_LightAtten[ti46 + 0].z + 1.0;
        //Instruction 56430
        //DIV
        t47 = float(1.0) / t47;
        //Instruction 56431
        //DP3
        t48 = dot(t5.xyz, unity_SpotDirection[ti46 + 0].xyz);
        //Instruction 56432
        //MAX
        t48 = max(t48, 0.0);
        //Instruction 56433
        //ADD
        t48 = t48 + (-unity_LightAtten[ti46 + 0].x);
        //Instruction 56434
        //MUL
        t48 = t48 * unity_LightAtten[ti46 + 0].y;
        t48 = clamp(t48, 0.0, 1.0);
        //Instruction 56435
        //MUL
        t47 = t47 * t48;
        //Instruction 56436
        //DP3
        t48 = dot(t1.xyz, t5.xyz);
        //Instruction 56437
        //MAX
        t48 = max(t48, 0.0);
        //Instruction 56438
        //MUL
        t47 = t47 * t48;
        //Instruction 56439
        //MAD
        t4.xyz = unity_LightColor[ti46 + 0].xyz * vec3(t47) + t4.xyz;
        //Instruction 56440
        //IADD
        ti46 = ti46 + 0x1;
        //Instruction 56441
    //ENDLOOP
    }
    //Instruction 56442
    //MUL
    t1.xyz = t16_0.xyz * t4.xyz;
    //Instruction 56443
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 56444
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 56445
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 56446
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56447
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 56448
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56449
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56450
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56451
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    //Instruction 56120
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56121
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 56122
    //LT
    tb2 = t10_1<0.0;
    //Instruction 56123
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 56124
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 56125
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56126
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56127
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_16, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_15.zxy) - (tmpvar_32.zxy * vRotatedWindVector_15.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_15, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_13 = vDirection_26;
    FinalPosition_16 = vPos_25;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_16;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_16 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_14 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_16 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_16;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_16 = vPos_91;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6.w = tmpvar_7.w;
  highp vec3 lightColor_99;
  highp vec3 viewN_100;
  highp vec3 viewpos_101;
  viewpos_101 = (glstate_matrix_modelview0 * tmpvar_12).xyz;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_102[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_102[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_100 = normalize((tmpvar_102 * tmpvar_13));
  lowp vec3 tmpvar_103;
  tmpvar_103 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_99 = tmpvar_103;
  highp vec3 toLight_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[0].xyz - (viewpos_101 * unity_LightPosition[0].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  toLight_104 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_99 = (lightColor_99 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_100, toLight_104))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_104, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[1].xyz - (viewpos_101 * unity_LightPosition[1].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  toLight_107 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_99 = (lightColor_99 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_100, toLight_107))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_107, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[2].xyz - (viewpos_101 * unity_LightPosition[2].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  toLight_110 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_99 = (lightColor_99 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_100, toLight_110))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_110, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (unity_LightPosition[3].xyz - (viewpos_101 * unity_LightPosition[3].w));
  highp float tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_114);
  toLight_113 = (tmpvar_114 * inversesqrt(tmpvar_115));
  lightColor_99 = (lightColor_99 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_100, toLight_113))
   * 
    ((1.0/((1.0 + (tmpvar_115 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_113, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_6.xyz = (tmpvar_7.xyz * lightColor_99);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_Input_color = tmpvar_6;
  xlv_Input_interpolator1 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t17;
bvec2 tb17;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t33;
highp int ti33;
highp vec2 t37;
highp vec2 t39;
mediump float t16_48;
highp float t49;
highp int ti49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 56581
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56582
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 56583
    //ADD
    t17.x = t1.x + _Object2World[3].z;
    //Instruction 56584
    //ADD
    t33.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 56585
    //ADD
    t17.y = t33.x + in_NORMAL0.x;
    //Instruction 56586
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 56587
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 56588
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 56589
    //MUL
    t2.z = t17.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 56590
    //MUL
    t16_48 = _WindEnabled * _WindQuality;
    //Instruction 56591
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_48)).xy;
    //Instruction 56592
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56593
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 56594
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 56595
    //DP3
    t49 = dot(t3.xyz, t3.xyz);
    //Instruction 56596
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 56597
    //MUL
    t3.xyz = vec3(t49) * t3.xyz;
    //Instruction 56598
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 56599
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 56600
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 56601
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 56602
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 56603
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 56604
    //LT
    tb49 = t16_48<5.000000;
    //Instruction 56605
    //AND
    ti33 = int(uint(tb49) & uint(tb17.y));
    //Instruction 56606
    //IF
    if((uint(ti33))!=uint(0u)){
        //Instruction 56607
        //ADD
        t33.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 56608
        //EQ
        tb49 = t16_48==4.000000;
        //Instruction 56609
        //LT
        tb50 = 0.0<in_TEXCOORD2.w;
        //Instruction 56610
        //MOVC
        t5.xy = (bool(tb50)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 56611
        //ADD
        t33.x = t33.x + t5.x;
        //Instruction 56612
        //ADD
        t33.x = t33.x + 0.500000;
        //Instruction 56613
        //FRC
        t33.x = fract(t33.x);
        //Instruction 56614
        //MAD
        t33.x = t33.x * 2.000000 + -1.0;
        //Instruction 56615
        //MUL
        t51 = abs(t33.x) * abs(t33.x);
        //Instruction 56616
        //MAD
        t33.x = -abs(t33.x) * 2.000000 + 3.000000;
        //Instruction 56617
        //MAD
        t33.x = t51 * t33.x + -0.500000;
        //Instruction 56618
        //DP2
        t33.x = dot(t33.xx, t5.yy);
        //Instruction 56619
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 56620
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 56621
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 56622
        //MUL
        t5.xyz = t33.xxx * t5.xyz;
        //Instruction 56623
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 56624
        //IF
        if(tb49){
            //Instruction 56625
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 56626
            //FRC
            t5 = fract(t5);
            //Instruction 56627
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56628
            //MOVC
            t6 = (bool(tb50)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 56629
            //MOVC
            t7.xyz = (bool(tb50)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 56630
            //MUL
            t33.x = t5.w * 3.000000;
            //Instruction 56631
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 56632
            //MAD
            t8.x = t6.x * 0.750000 + (-t33.x);
            //Instruction 56633
            //ADD
            t33.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 56634
            //FRC
            t33.xy = fract(t33.xy);
            //Instruction 56635
            //MAD
            t33.xy = t33.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56636
            //MUL
            t8.xy = abs(t33.xy) * abs(t33.xy);
            //Instruction 56637
            //MAD
            t33.xy = -abs(t33.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56638
            //MAD
            t33.xy = t8.xy * t33.xy + vec2(-0.500000, -0.500000);
            //Instruction 56639
            //ADD
            t33.xy = t33.xy + t33.xy;
            //Instruction 56640
            //DP3
            t50 = dot(t4.xyz, t4.xyz);
            //Instruction 56641
            //SQRT
            t50 = sqrt(t50);
            //Instruction 56642
            //MAD
            t51 = t33.x * t33.x + t33.y;
            //Instruction 56643
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 56644
            //MUL
            t51 = t51 * t52;
            //Instruction 56645
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 56646
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 56647
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 56648
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 56649
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 56650
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 56651
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 56652
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 56653
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 56654
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 56655
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 56656
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 56657
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 56658
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 56659
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 56660
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 56661
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 56662
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 56663
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 56664
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 56665
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 56666
            //SQRT
            t51 = sqrt(t51);
            //Instruction 56667
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 56668
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 56669
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 56670
            //MUL
            t6.x = t51 * t52;
            //Instruction 56671
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 56672
            //LT
            tb19 = t19<(-t19);
            //Instruction 56673
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 56674
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 56675
            //MAD
            t33.x = (-t33.y) * t33.y + t33.x;
            //Instruction 56676
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 56677
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 56678
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 56679
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 56680
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56681
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 56682
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56683
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 56684
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 56685
            //MUL
            t49 = t6.z * t6.z;
            //Instruction 56686
            //MAD
            t49 = t49 * t6.x + 1.0;
            //Instruction 56687
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 56688
            //LOG
            t49 = log2(t49);
            //Instruction 56689
            //MUL
            t49 = t49 * t7.y;
            //Instruction 56690
            //EXP
            t49 = exp2(t49);
            //Instruction 56691
            //MUL
            t33.x = t6.y * t33.x;
            //Instruction 56692
            //MAD
            t33.x = t19 * t6.w + t33.x;
            //Instruction 56693
            //MAD
            t33.x = t7.x * t49 + t33.x;
            //Instruction 56694
            //MUL
            t33.x = t33.x * in_TEXCOORD2.x;
            //Instruction 56695
            //SINCOS
            t6.x = sin(t33.x);
            t7.x = cos(t33.x);
            //Instruction 56696
            //ADD
            t33.x = (-t7.x) + 1.0;
            //Instruction 56697
            //MUL
            t8 = vec4(t5.y * t33.x, t5.y * t33.x, t5.y * t33.x, t5.z * t33.x);
            //Instruction 56698
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 56699
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 56700
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 56701
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 56702
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 56703
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 56704
            //MUL
            t49 = t5.x * t5.x;
            //Instruction 56705
            //MAD
            t9.w = t49 * t33.x + t7.x;
            //Instruction 56706
            //MOV
            t11.z = t12.x;
            //Instruction 56707
            //MOV
            t11.w = t10.x;
            //Instruction 56708
            //MOV
            t13.z = t9.y;
            //Instruction 56709
            //MOV
            t13.w = t14.y;
            //Instruction 56710
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 56711
            //MOV
            t14.w = t13.y;
            //Instruction 56712
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 56713
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 56714
            //MOV
            t10.w = t11.y;
            //Instruction 56715
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 56716
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 56717
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 56718
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 56719
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 56720
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 56721
            //DP3
            t33.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 56722
            //DP3
            t33.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 56723
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 56724
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 56725
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 56726
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 56727
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 56728
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 56729
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 56730
            //MUL
            t4.xyz = vec3(t50) * t5.xyz;
            //Instruction 56731
        //ELSE
        } else {
            //Instruction 56732
            //MOV
            t33.xy = in_NORMAL0.xy;
            //Instruction 56733
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 56734
        //ENDIF
        }
        //Instruction 56735
    //ELSE
    } else {
        //Instruction 56736
        //MOV
        t33.xy = in_NORMAL0.xy;
        //Instruction 56737
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 56738
    //ENDIF
    }
    //Instruction 56739
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 56740
    //GE
    tb50 = t16_48>=3.000000;
    //Instruction 56741
    //IF
    if(tb50){
        //Instruction 56742
        //EQ
        tb50 = t16_48==5.000000;
        //Instruction 56743
        //IF
        if(tb50){
            //Instruction 56744
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56745
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 56746
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 56747
            //DP3
            t50 = dot(t5.xyz, t5.xyz);
            //Instruction 56748
            //RSQ
            t50 = inversesqrt(t50);
            //Instruction 56749
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 56750
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56751
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 56752
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56753
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 56754
            //ADD
            t50 = t1.x + _ST_WindBranch.x;
            //Instruction 56755
            //ADD
            t7.x = t50 + in_TEXCOORD0.w;
            //Instruction 56756
            //MAD
            t7.y = t50 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56757
            //MUL
            t51 = t7.x * _ST_WindBranchTwitch.y;
            //Instruction 56758
            //MUL
            t7.z = t51 * 0.500000;
            //Instruction 56759
            //ADD
            t7.w = t7.x + (-in_TEXCOORD0.z);
            //Instruction 56760
            //ADD
            t7 = t7 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56761
            //FRC
            t7 = fract(t7);
            //Instruction 56762
            //MAD
            t7 = t7 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56763
            //MUL
            t8 = abs(t7) * abs(t7);
            //Instruction 56764
            //MAD
            t7 = -abs(t7) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56765
            //MAD
            t7 = t8 * t7 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56766
            //ADD
            t7 = t7 + t7;
            //Instruction 56767
            //MUL
            t8.w = t7.z * t7.y;
            //Instruction 56768
            //LT
            tb51 = t8.w<0.0;
            //Instruction 56769
            //MOV
            t8.y = (-t8.w);
            //Instruction 56770
            //MOV
            t8.xz = vec2(-1.0, 1.0);
            //Instruction 56771
            //MOVC
            t8.xy = (bool(tb51)) ? t8.xy : t8.zw;
            //Instruction 56772
            //MAD
            t51 = (-t7.y) * t7.z + t8.x;
            //Instruction 56773
            //MAD
            t51 = t8.y * t51 + t8.w;
            //Instruction 56774
            //ADD
            t52 = (-t51) + t8.x;
            //Instruction 56775
            //MAD
            t51 = t8.y * t52 + t51;
            //Instruction 56776
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 56777
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56778
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56779
            //MUL
            t53 = t53 * t7.x;
            //Instruction 56780
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 56781
            //MAD
            t52 = t7.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56782
            //MUL
            t51 = t51 * t52;
            //Instruction 56783
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 56784
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 56785
            //MAD
            t7.x = t50 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56786
            //MUL
            t50 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56787
            //MAD
            t7.y = t50 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56788
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 56789
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 56790
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56791
            //MUL
            t8.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 56792
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56793
            //MAD
            t7.xy = t8.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 56794
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 56795
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 56796
            //MUL
            t50 = t7.x * t7.y;
            //Instruction 56797
            //MAD
            t50 = (-t50) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56798
            //MUL
            t51 = t7.w * _ST_WindVector.w;
            //Instruction 56799
            //MAD
            t50 = t51 * _ST_WindBranchWhip.x + t50;
            //Instruction 56800
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 56801
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56802
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 56803
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 56804
        //ELSE
        } else {
            //Instruction 56805
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56806
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56807
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56808
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56809
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 56810
            //ADD
            t6.x = t1.x + in_TEXCOORD0.w;
            //Instruction 56811
            //MAD
            t6.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56812
            //MUL
            t1.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56813
            //MUL
            t6.z = t1.x * 0.500000;
            //Instruction 56814
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56815
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 56816
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56817
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 56818
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56819
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56820
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 56821
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56822
            //LT
            tb1 = t7.w<0.0;
            //Instruction 56823
            //MOV
            t7.y = (-t7.w);
            //Instruction 56824
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56825
            //MOVC
            t7.xy = (bool(tb1)) ? t7.xy : t7.zw;
            //Instruction 56826
            //MAD
            t1.x = (-t6.y) * t6.z + t7.x;
            //Instruction 56827
            //MAD
            t1.x = t7.y * t1.x + t7.w;
            //Instruction 56828
            //ADD
            t50 = (-t1.x) + t7.x;
            //Instruction 56829
            //MAD
            t1.x = t7.y * t50 + t1.x;
            //Instruction 56830
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 56831
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56832
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56833
            //MUL
            t51 = t51 * t6.x;
            //Instruction 56834
            //MAD
            t1.x = t1.x * t50 + t51;
            //Instruction 56835
            //MUL
            t5.xyz = t1.xxx * t5.xyz;
            //Instruction 56836
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 56837
        //ENDIF
        }
        //Instruction 56838
    //ENDIF
    }
    //Instruction 56839
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 56840
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 56841
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56842
    //MAD
    t50 = (-t50) * 0.250000 + t4.y;
    //Instruction 56843
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 56844
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 56845
    //NE
    tb51 = t50!=0.0;
    //Instruction 56846
    //LOG
    t52 = log2(t50);
    //Instruction 56847
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 56848
    //EXP
    t52 = exp2(t52);
    //Instruction 56849
    //MOVC
    t50 = (tb51) ? t52 : t50;
    //Instruction 56850
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56851
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56852
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 56853
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 56854
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56855
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 56856
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56857
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 56858
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 56859
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 56860
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56861
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 56862
    //MUL
    t50 = t50 * t51;
    //Instruction 56863
    //MAD
    t5.xz = t3.xz * vec2(t50) + t4.xz;
    //Instruction 56864
    //MOV
    t5.y = t4.y;
    //Instruction 56865
    //DP3
    t50 = dot(t5.xyz, t5.xyz);
    //Instruction 56866
    //RSQ
    t50 = inversesqrt(t50);
    //Instruction 56867
    //MUL
    t3.xzw = vec3(t50) * t5.xyz;
    //Instruction 56868
    //MUL
    t3.xzw = t1.xxx * t3.xzw;
    //Instruction 56869
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 56870
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_modelview0[1].xyz;
    //Instruction 56871
    //MAD
    t4.xyz = glstate_matrix_modelview0[0].xyz * t3.xxx + t4.xyz;
    //Instruction 56872
    //MAD
    t4.xyz = glstate_matrix_modelview0[2].xyz * t3.www + t4.xyz;
    //Instruction 56873
    //MAD
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 56874
    //MUL
    t1.xyw = t33.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56875
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t33.xxx + t1.xyw;
    //Instruction 56876
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * vec3(t19) + t1.xyz;
    //Instruction 56877
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 56878
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 56879
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 56880
    //MUL
    t10_15.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56881
    //MOV
    t5.xyz = t10_15.xyz;
    //Instruction 56882
    //MOV
    ti49 = 0x0;
    //Instruction 56883
    //LOOP
    while(true){
        //Instruction 56884
        //IGE
        tb50 = ti49>=0x4;
        //Instruction 56885
        //BREAKC
        if(tb50){break;}
        //Instruction 56886
        //MAD
        t6.xyz = (-t4.xyz) * unity_LightPosition[ti49 + 0].www + unity_LightPosition[ti49 + 0].xyz;
        //Instruction 56887
        //DP3
        t50 = dot(t6.xyz, t6.xyz);
        //Instruction 56888
        //RSQ
        t19 = inversesqrt(t50);
        //Instruction 56889
        //MUL
        t6.xyz = vec3(t19) * t6.xyz;
        //Instruction 56890
        //MAD
        t50 = t50 * unity_LightAtten[ti49 + 0].z + 1.0;
        //Instruction 56891
        //DIV
        t50 = float(1.0) / t50;
        //Instruction 56892
        //DP3
        t19 = dot(t6.xyz, unity_SpotDirection[ti49 + 0].xyz);
        //Instruction 56893
        //MAX
        t19 = max(t19, 0.0);
        //Instruction 56894
        //ADD
        t19 = t19 + (-unity_LightAtten[ti49 + 0].x);
        //Instruction 56895
        //MUL
        t19 = t19 * unity_LightAtten[ti49 + 0].y;
        t19 = clamp(t19, 0.0, 1.0);
        //Instruction 56896
        //MUL
        t50 = t50 * t19;
        //Instruction 56897
        //DP3
        t19 = dot(t1.xyz, t6.xyz);
        //Instruction 56898
        //MAX
        t19 = max(t19, 0.0);
        //Instruction 56899
        //MUL
        t50 = t50 * t19;
        //Instruction 56900
        //MAD
        t5.xyz = unity_LightColor[ti49 + 0].xyz * vec3(t50) + t5.xyz;
        //Instruction 56901
        //IADD
        ti49 = ti49 + 0x1;
        //Instruction 56902
    //ENDLOOP
    }
    //Instruction 56903
    //MUL
    t1.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56904
    //MUL
    t0 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 56905
    //MAD
    t0 = glstate_matrix_mvp[0] * t3.xxxx + t0;
    //Instruction 56906
    //MAD
    t0 = glstate_matrix_mvp[2] * t3.wwww + t0;
    //Instruction 56907
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56908
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 56909
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56910
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 56911
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 56912
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    //Instruction 56564
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56565
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 56566
    //LT
    tb2 = t10_1<0.0;
    //Instruction 56567
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 56568
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 56569
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 56570
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 56571
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 56572
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 56573
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 56574
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 56575
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 56576
    //MAD
    t16_2 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 56577
    //MUL
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 56578
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56579
    //MOV
    SV_Target0 = t16_0;
    //Instruction 56580
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_10;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (_glesVertex.xyz + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((vRotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    FinalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = FinalPosition_9;
  highp vec4 hPos_48;
  hPos_48 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_49;
  highp vec4 o_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = (hPos_48 * 0.5);
  highp vec2 tmpvar_52;
  tmpvar_52.x = tmpvar_51.x;
  tmpvar_52.y = (tmpvar_51.y * _ProjectionParams.x);
  o_50.xy = (tmpvar_52 + tmpvar_51.w);
  o_50.zw = hPos_48.zw;
  highp vec3 tmpvar_53;
  tmpvar_53 = o_50.xyw;
  screenPos_49 = tmpvar_53;
  screenPos_49.xy = (screenPos_49.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * _glesNormal));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  toLight_65 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, toLight_65))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_65, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  toLight_68 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, toLight_68))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_68, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_ditherScreenPos = screenPos_49;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp float t11;
highp float t12;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
void main()
{
    //Instruction 56783
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56784
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 56785
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 56786
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56787
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 56788
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 56789
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 56790
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 56791
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 56792
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 56793
    //GE
    tb25 = t16_24>=3.000000;
    //Instruction 56794
    //IF
    if(tb25){
        //Instruction 56795
        //EQ
        tb25 = t16_24==5.000000;
        //Instruction 56796
        //IF
        if(tb25){
            //Instruction 56797
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56798
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 56799
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 56800
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 56801
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 56802
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 56803
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56804
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56805
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56806
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56807
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56808
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56809
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56810
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56811
            //MUL
            t26 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56812
            //MUL
            t4.z = t26 * 0.500000;
            //Instruction 56813
            //ADD
            t4.w = t4.x + (-in_TEXCOORD0.z);
            //Instruction 56814
            //ADD
            t4 = t4 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56815
            //FRC
            t4 = fract(t4);
            //Instruction 56816
            //MAD
            t4 = t4 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56817
            //MUL
            t5 = abs(t4) * abs(t4);
            //Instruction 56818
            //MAD
            t4 = -abs(t4) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56819
            //MAD
            t4 = t5 * t4 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56820
            //ADD
            t4 = t4 + t4;
            //Instruction 56821
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56822
            //LT
            tb26 = t5.w<0.0;
            //Instruction 56823
            //MOV
            t5.y = (-t5.w);
            //Instruction 56824
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56825
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 56826
            //MAD
            t26 = (-t4.y) * t4.z + t5.x;
            //Instruction 56827
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 56828
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 56829
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 56830
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 56831
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56832
            //ADD
            t12 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56833
            //MUL
            t4.x = t12 * t4.x;
            //Instruction 56834
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 56835
            //MAD
            t27 = t4.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56836
            //MUL
            t26 = t26 * t27;
            //Instruction 56837
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 56838
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 56839
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56840
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56841
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56842
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 56843
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 56844
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56845
            //MUL
            t5.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 56846
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56847
            //MAD
            t4.xy = t5.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 56848
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 56849
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 56850
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 56851
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56852
            //MUL
            t26 = t4.w * _ST_WindVector.w;
            //Instruction 56853
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 56854
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 56855
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56856
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 56857
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 56858
        //ELSE
        } else {
            //Instruction 56859
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56860
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56861
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56862
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56863
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56864
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56865
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56866
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56867
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56868
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 56869
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56870
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56871
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56872
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 56873
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56874
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56875
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 56876
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56877
            //LT
            tb25 = t5.w<0.0;
            //Instruction 56878
            //MOV
            t5.y = (-t5.w);
            //Instruction 56879
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56880
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 56881
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 56882
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 56883
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 56884
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 56885
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 56886
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56887
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56888
            //MUL
            t27 = t27 * t4.x;
            //Instruction 56889
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 56890
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56891
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 56892
        //ENDIF
        }
        //Instruction 56893
    //ELSE
    } else {
        //Instruction 56894
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 56895
    //ENDIF
    }
    //Instruction 56896
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 56897
    //SQRT
    t25 = sqrt(t25);
    //Instruction 56898
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56899
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 56900
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 56901
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 56902
    //NE
    tb3 = t26!=0.0;
    //Instruction 56903
    //LOG
    t11 = log2(t26);
    //Instruction 56904
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 56905
    //EXP
    t11 = exp2(t11);
    //Instruction 56906
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 56907
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56908
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56909
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 56910
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 56911
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56912
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 56913
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56914
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 56915
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 56916
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 56917
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56918
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 56919
    //MUL
    t26 = t26 * t3.x;
    //Instruction 56920
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 56921
    //MOV
    t3.y = t2.y;
    //Instruction 56922
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 56923
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 56924
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 56925
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 56926
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 56927
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 56928
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 56929
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 56930
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 56931
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 56932
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 56933
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 56934
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 56935
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 56936
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 56937
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56938
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 56939
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 56940
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 56941
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56942
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 56943
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 56944
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 56945
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 56946
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 56947
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56948
    //MOV
    t5.xyz = t10_6.xyz;
    //Instruction 56949
    //MOV
    ti25 = 0x0;
    //Instruction 56950
    //LOOP
    while(true){
        //Instruction 56951
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 56952
        //BREAKC
        if(tb26){break;}
        //Instruction 56953
        //MAD
        t7.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 56954
        //DP3
        t26 = dot(t7.xyz, t7.xyz);
        //Instruction 56955
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 56956
        //MUL
        t7.xyz = vec3(t27) * t7.xyz;
        //Instruction 56957
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 56958
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 56959
        //DP3
        t27 = dot(t7.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 56960
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56961
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 56962
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 56963
        //MUL
        t26 = t26 * t27;
        //Instruction 56964
        //DP3
        t27 = dot(t4.xyz, t7.xyz);
        //Instruction 56965
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56966
        //MUL
        t26 = t26 * t27;
        //Instruction 56967
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 56968
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 56969
    //ENDLOOP
    }
    //Instruction 56970
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56971
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56972
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56973
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56974
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56975
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 56976
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56977
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56978
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56979
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 56980
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 56770
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 56771
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 56772
    //MOV
    t1.x = t16_0.x;
    //Instruction 56773
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 56774
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 56775
    //ADD
    t16_1.x = t10_1 + -0.500000;
    //Instruction 56776
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 56777
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56778
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56779
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 56780
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56781
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56782
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _Object2World[3].x;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].y;
  tmpvar_6 = clamp (((
    fract(((tmpvar_7 + tmpvar_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_13;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_10 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_12 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_7 + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  toLight_67 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, toLight_67))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  toLight_70 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, toLight_70))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_ditherScreenPos = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_9 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  gl_FragData[0] = tmpvar_10;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t8;
highp vec2 t10;
bool tb10;
highp float t14;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
void main()
{
    //Instruction 56474
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56475
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 56476
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 56477
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 56478
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 56479
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 56480
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 56481
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 56482
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 56483
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 56484
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 56485
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56486
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 56487
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 56488
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 56489
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56490
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 56491
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 56492
    //GE
    tb29 = t16_27>=3.000000;
    //Instruction 56493
    //IF
    if(tb29){
        //Instruction 56494
        //EQ
        tb29 = t16_27==5.000000;
        //Instruction 56495
        //IF
        if(tb29){
            //Instruction 56496
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56497
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 56498
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 56499
            //DP3
            t29 = dot(t3.xyz, t3.xyz);
            //Instruction 56500
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 56501
            //MUL
            t3.xyz = vec3(t29) * t3.xyz;
            //Instruction 56502
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56503
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56504
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56505
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56506
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 56507
            //ADD
            t5.x = t29 + in_TEXCOORD0.w;
            //Instruction 56508
            //MAD
            t5.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56509
            //MUL
            t30 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56510
            //MUL
            t5.z = t30 * 0.500000;
            //Instruction 56511
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 56512
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56513
            //FRC
            t5 = fract(t5);
            //Instruction 56514
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56515
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 56516
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56517
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56518
            //ADD
            t5 = t5 + t5;
            //Instruction 56519
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56520
            //LT
            tb30 = t6.w<0.0;
            //Instruction 56521
            //MOV
            t6.y = (-t6.w);
            //Instruction 56522
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56523
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 56524
            //MAD
            t30 = (-t5.y) * t5.z + t6.x;
            //Instruction 56525
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 56526
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 56527
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 56528
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 56529
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56530
            //ADD
            t14 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56531
            //MUL
            t5.x = t14 * t5.x;
            //Instruction 56532
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 56533
            //MAD
            t31 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56534
            //MUL
            t30 = t30 * t31;
            //Instruction 56535
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 56536
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 56537
            //MAD
            t5.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56538
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56539
            //MAD
            t5.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56540
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 56541
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 56542
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56543
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 56544
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56545
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 56546
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 56547
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 56548
            //MUL
            t29 = t5.x * t5.y;
            //Instruction 56549
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56550
            //MUL
            t30 = t5.w * _ST_WindVector.w;
            //Instruction 56551
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 56552
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 56553
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56554
            //MUL
            t3.xyz = vec3(t29) * t3.xyz;
            //Instruction 56555
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 56556
        //ELSE
        } else {
            //Instruction 56557
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56558
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56559
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56560
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56561
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 56562
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 56563
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56564
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56565
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 56566
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56567
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56568
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56569
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 56570
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56571
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56572
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 56573
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56574
            //LT
            tb1 = t6.w<0.0;
            //Instruction 56575
            //MOV
            t6.y = (-t6.w);
            //Instruction 56576
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56577
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 56578
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 56579
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 56580
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 56581
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 56582
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 56583
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56584
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56585
            //MUL
            t30 = t30 * t5.x;
            //Instruction 56586
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 56587
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 56588
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 56589
        //ENDIF
        }
        //Instruction 56590
    //ELSE
    } else {
        //Instruction 56591
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 56592
    //ENDIF
    }
    //Instruction 56593
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 56594
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 56595
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56596
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 56597
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 56598
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 56599
    //NE
    tb30 = t29!=0.0;
    //Instruction 56600
    //LOG
    t4.x = log2(t29);
    //Instruction 56601
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 56602
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 56603
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 56604
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56605
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56606
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 56607
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 56608
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56609
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 56610
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56611
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 56612
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 56613
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 56614
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56615
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 56616
    //MUL
    t29 = t29 * t30;
    //Instruction 56617
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 56618
    //MOV
    t4.y = t3.y;
    //Instruction 56619
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 56620
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56621
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 56622
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 56623
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 56624
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 56625
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t3.xyz;
    //Instruction 56626
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t3.xyz;
    //Instruction 56627
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 56628
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 56629
    //MUL
    t28 = t3.y * _ProjectionParams.x;
    //Instruction 56630
    //MUL
    t4.w = t28 * 0.500000;
    //Instruction 56631
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 56632
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 56633
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 56634
    //MUL
    t4.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56635
    //MAD
    t4.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t4.xyz;
    //Instruction 56636
    //MAD
    t4.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t4.xyz;
    //Instruction 56637
    //MAD
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 56638
    //MUL
    t5.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56639
    //MAD
    t5.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 56640
    //MAD
    t5.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 56641
    //DP3
    t28 = dot(t5.xyz, t5.xyz);
    //Instruction 56642
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 56643
    //MUL
    t5.xyz = vec3(t28) * t5.xyz;
    //Instruction 56644
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56645
    //MOV
    t6.xyz = t10_7.xyz;
    //Instruction 56646
    //MOV
    ti28 = 0x0;
    //Instruction 56647
    //LOOP
    while(true){
        //Instruction 56648
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 56649
        //BREAKC
        if(tb29){break;}
        //Instruction 56650
        //MAD
        t8.xyz = (-t4.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 56651
        //DP3
        t29 = dot(t8.xyz, t8.xyz);
        //Instruction 56652
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 56653
        //MUL
        t8.xyz = vec3(t30) * t8.xyz;
        //Instruction 56654
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 56655
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 56656
        //DP3
        t30 = dot(t8.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 56657
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56658
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 56659
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 56660
        //MUL
        t29 = t29 * t30;
        //Instruction 56661
        //DP3
        t30 = dot(t5.xyz, t8.xyz);
        //Instruction 56662
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 56663
        //MUL
        t29 = t29 * t30;
        //Instruction 56664
        //MAD
        t6.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t6.xyz;
        //Instruction 56665
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 56666
    //ENDLOOP
    }
    //Instruction 56667
    //MUL
    t4.xyz = t16_0.xyz * t6.xyz;
    //Instruction 56668
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56669
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56670
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56671
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56672
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 56673
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56674
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 56675
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 56676
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 56677
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_4;
mediump float t16_14;
void main()
{
    //Instruction 56452
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 56453
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 56454
    //MOV
    t1.x = t16_0.x;
    //Instruction 56455
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 56456
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 56457
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 56458
    //LT
    tb1 = t16_1<0.0;
    //Instruction 56459
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56460
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56461
    //ADD
    t16_2.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 56462
    //MAD
    t16_2.xyz = vs_TEXCOORD2.zzz * t16_2.xyz + t10_0.xyz;
    //Instruction 56463
    //MAX
    t16_14 = max(t16_2.z, t16_2.y);
    //Instruction 56464
    //MAX
    t16_14 = max(t16_14, t16_2.x);
    //Instruction 56465
    //MAX
    t16_3 = max(t10_0.z, t10_0.y);
    //Instruction 56466
    //MAX
    t16_3 = max(t10_0.x, t16_3);
    //Instruction 56467
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 56468
    //DIV
    t16_14 = t16_3 / t16_14;
    //Instruction 56469
    //MAD
    t16_1 = t16_14 * 0.500000 + 0.500000;
    //Instruction 56470
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 56471
    //MUL
    t16_0.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56472
    //MOV
    SV_Target0 = t16_0;
    //Instruction 56473
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_7;
  tmpvar_7.xy = _glesMultiTexCoord2.zw;
  tmpvar_7.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * _glesNormal));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  toLight_67 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, toLight_67))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  toLight_70 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, toLight_70))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_interpolator2 = tmpvar_6;
  xlv_Input_ditherScreenPos = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_9;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10.xyz = tmpvar_1;
  tmpvar_10.w = tmpvar_2;
  gl_FragData[0] = tmpvar_10;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp float t11;
highp float t12;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
void main()
{
    //Instruction 56695
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56696
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 56697
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 56698
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56699
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 56700
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 56701
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 56702
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 56703
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 56704
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 56705
    //GE
    tb25 = t16_24>=3.000000;
    //Instruction 56706
    //IF
    if(tb25){
        //Instruction 56707
        //EQ
        tb25 = t16_24==5.000000;
        //Instruction 56708
        //IF
        if(tb25){
            //Instruction 56709
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56710
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 56711
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 56712
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 56713
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 56714
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 56715
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56716
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56717
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56718
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56719
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56720
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56721
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56722
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56723
            //MUL
            t26 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56724
            //MUL
            t4.z = t26 * 0.500000;
            //Instruction 56725
            //ADD
            t4.w = t4.x + (-in_TEXCOORD0.z);
            //Instruction 56726
            //ADD
            t4 = t4 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56727
            //FRC
            t4 = fract(t4);
            //Instruction 56728
            //MAD
            t4 = t4 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56729
            //MUL
            t5 = abs(t4) * abs(t4);
            //Instruction 56730
            //MAD
            t4 = -abs(t4) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56731
            //MAD
            t4 = t5 * t4 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56732
            //ADD
            t4 = t4 + t4;
            //Instruction 56733
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56734
            //LT
            tb26 = t5.w<0.0;
            //Instruction 56735
            //MOV
            t5.y = (-t5.w);
            //Instruction 56736
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56737
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 56738
            //MAD
            t26 = (-t4.y) * t4.z + t5.x;
            //Instruction 56739
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 56740
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 56741
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 56742
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 56743
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56744
            //ADD
            t12 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56745
            //MUL
            t4.x = t12 * t4.x;
            //Instruction 56746
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 56747
            //MAD
            t27 = t4.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56748
            //MUL
            t26 = t26 * t27;
            //Instruction 56749
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 56750
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 56751
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56752
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56753
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56754
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 56755
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 56756
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56757
            //MUL
            t5.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 56758
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56759
            //MAD
            t4.xy = t5.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 56760
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 56761
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 56762
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 56763
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56764
            //MUL
            t26 = t4.w * _ST_WindVector.w;
            //Instruction 56765
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 56766
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 56767
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56768
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 56769
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 56770
        //ELSE
        } else {
            //Instruction 56771
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56772
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56773
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56774
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56775
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56776
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56777
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56778
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56779
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56780
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 56781
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56782
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56783
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56784
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 56785
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56786
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56787
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 56788
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56789
            //LT
            tb25 = t5.w<0.0;
            //Instruction 56790
            //MOV
            t5.y = (-t5.w);
            //Instruction 56791
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56792
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 56793
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 56794
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 56795
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 56796
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 56797
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 56798
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56799
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56800
            //MUL
            t27 = t27 * t4.x;
            //Instruction 56801
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 56802
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56803
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 56804
        //ENDIF
        }
        //Instruction 56805
    //ELSE
    } else {
        //Instruction 56806
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 56807
    //ENDIF
    }
    //Instruction 56808
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 56809
    //SQRT
    t25 = sqrt(t25);
    //Instruction 56810
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56811
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 56812
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 56813
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 56814
    //NE
    tb3 = t26!=0.0;
    //Instruction 56815
    //LOG
    t11 = log2(t26);
    //Instruction 56816
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 56817
    //EXP
    t11 = exp2(t11);
    //Instruction 56818
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 56819
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56820
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56821
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 56822
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 56823
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56824
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 56825
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56826
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 56827
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 56828
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 56829
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56830
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 56831
    //MUL
    t26 = t26 * t3.x;
    //Instruction 56832
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 56833
    //MOV
    t3.y = t2.y;
    //Instruction 56834
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 56835
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 56836
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 56837
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 56838
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 56839
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 56840
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 56841
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 56842
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 56843
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 56844
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 56845
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 56846
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 56847
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 56848
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 56849
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56850
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 56851
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 56852
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 56853
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56854
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 56855
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 56856
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 56857
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 56858
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 56859
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56860
    //MOV
    t5.xyz = t10_6.xyz;
    //Instruction 56861
    //MOV
    ti25 = 0x0;
    //Instruction 56862
    //LOOP
    while(true){
        //Instruction 56863
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 56864
        //BREAKC
        if(tb26){break;}
        //Instruction 56865
        //MAD
        t7.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 56866
        //DP3
        t26 = dot(t7.xyz, t7.xyz);
        //Instruction 56867
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 56868
        //MUL
        t7.xyz = vec3(t27) * t7.xyz;
        //Instruction 56869
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 56870
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 56871
        //DP3
        t27 = dot(t7.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 56872
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56873
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 56874
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 56875
        //MUL
        t26 = t26 * t27;
        //Instruction 56876
        //DP3
        t27 = dot(t4.xyz, t7.xyz);
        //Instruction 56877
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56878
        //MUL
        t26 = t26 * t27;
        //Instruction 56879
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 56880
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 56881
    //ENDLOOP
    }
    //Instruction 56882
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56883
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56884
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56885
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56886
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56887
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 56888
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56889
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56890
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56891
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 56892
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 56893
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 56894
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 56895
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 56678
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 56679
    //FRC
    t16_3.x = fract(t16_0.y);
    //Instruction 56680
    //MOV
    t1.x = t16_0.x;
    //Instruction 56681
    //MAD
    t1.y = t16_3.x * 0.062500 + unity_LODFade.y;
    //Instruction 56682
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 56683
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 56684
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 56685
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56686
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 56687
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56688
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 56689
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 56690
    //MUL
    t16_1.w = t10_1.w * _Color.w;
    //Instruction 56691
    //MAD
    t16_0.xyz = t16_0.xxx * t16_3.xyz + t10_2.xyz;
    //Instruction 56692
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56693
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56694
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_7;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_58;
  highp vec3 viewN_59;
  highp vec3 viewpos_60;
  viewpos_60 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_61[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_61[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_59 = normalize((tmpvar_61 * _glesNormal));
  lowp vec3 tmpvar_62;
  tmpvar_62 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_58 = tmpvar_62;
  highp vec3 toLight_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[0].xyz - (viewpos_60 * unity_LightPosition[0].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  toLight_63 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_58 = (lightColor_58 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_59, toLight_63))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_63, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[1].xyz - (viewpos_60 * unity_LightPosition[1].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  toLight_66 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_58 = (lightColor_58 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_59, toLight_66))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_66, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (unity_LightPosition[2].xyz - (viewpos_60 * unity_LightPosition[2].w));
  highp float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_70);
  toLight_69 = (tmpvar_70 * inversesqrt(tmpvar_71));
  lightColor_58 = (lightColor_58 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_59, toLight_69))
   * 
    ((1.0/((1.0 + (tmpvar_71 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_69, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (unity_LightPosition[3].xyz - (viewpos_60 * unity_LightPosition[3].w));
  highp float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_73);
  toLight_72 = (tmpvar_73 * inversesqrt(tmpvar_74));
  lightColor_58 = (lightColor_58 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_59, toLight_72))
   * 
    ((1.0/((1.0 + (tmpvar_74 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_72, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_interpolator2 = tmpvar_6;
  xlv_Input_ditherScreenPos = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_2 = (diffuseColor_5.w * _Color.w);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_4 = tmpvar_10;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_5.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12.xyz = tmpvar_1;
  tmpvar_12.w = tmpvar_2;
  gl_FragData[0] = tmpvar_12;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t8;
highp vec2 t10;
bool tb10;
highp float t14;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
void main()
{
    //Instruction 57007
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57008
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 57009
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 57010
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 57011
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 57012
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 57013
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 57014
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 57015
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 57016
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 57017
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 57018
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 57019
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 57020
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 57021
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 57022
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 57023
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 57024
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 57025
    //GE
    tb29 = t16_27>=3.000000;
    //Instruction 57026
    //IF
    if(tb29){
        //Instruction 57027
        //EQ
        tb29 = t16_27==5.000000;
        //Instruction 57028
        //IF
        if(tb29){
            //Instruction 57029
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 57030
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 57031
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 57032
            //DP3
            t29 = dot(t3.xyz, t3.xyz);
            //Instruction 57033
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 57034
            //MUL
            t3.xyz = vec3(t29) * t3.xyz;
            //Instruction 57035
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57036
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 57037
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57038
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 57039
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 57040
            //ADD
            t5.x = t29 + in_TEXCOORD0.w;
            //Instruction 57041
            //MAD
            t5.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57042
            //MUL
            t30 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 57043
            //MUL
            t5.z = t30 * 0.500000;
            //Instruction 57044
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 57045
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 57046
            //FRC
            t5 = fract(t5);
            //Instruction 57047
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 57048
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 57049
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 57050
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 57051
            //ADD
            t5 = t5 + t5;
            //Instruction 57052
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 57053
            //LT
            tb30 = t6.w<0.0;
            //Instruction 57054
            //MOV
            t6.y = (-t6.w);
            //Instruction 57055
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 57056
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 57057
            //MAD
            t30 = (-t5.y) * t5.z + t6.x;
            //Instruction 57058
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 57059
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 57060
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 57061
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 57062
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57063
            //ADD
            t14 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57064
            //MUL
            t5.x = t14 * t5.x;
            //Instruction 57065
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 57066
            //MAD
            t31 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 57067
            //MUL
            t30 = t30 * t31;
            //Instruction 57068
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 57069
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 57070
            //MAD
            t5.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57071
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 57072
            //MAD
            t5.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57073
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 57074
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 57075
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57076
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 57077
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57078
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 57079
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 57080
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 57081
            //MUL
            t29 = t5.x * t5.y;
            //Instruction 57082
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 57083
            //MUL
            t30 = t5.w * _ST_WindVector.w;
            //Instruction 57084
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 57085
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 57086
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 57087
            //MUL
            t3.xyz = vec3(t29) * t3.xyz;
            //Instruction 57088
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 57089
        //ELSE
        } else {
            //Instruction 57090
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57091
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 57092
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57093
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 57094
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 57095
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 57096
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57097
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 57098
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 57099
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 57100
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 57101
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57102
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 57103
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 57104
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 57105
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 57106
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 57107
            //LT
            tb1 = t6.w<0.0;
            //Instruction 57108
            //MOV
            t6.y = (-t6.w);
            //Instruction 57109
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 57110
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 57111
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 57112
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 57113
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 57114
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 57115
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 57116
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57117
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57118
            //MUL
            t30 = t30 * t5.x;
            //Instruction 57119
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 57120
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 57121
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 57122
        //ENDIF
        }
        //Instruction 57123
    //ELSE
    } else {
        //Instruction 57124
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 57125
    //ENDIF
    }
    //Instruction 57126
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 57127
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 57128
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 57129
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 57130
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 57131
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 57132
    //NE
    tb30 = t29!=0.0;
    //Instruction 57133
    //LOG
    t4.x = log2(t29);
    //Instruction 57134
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 57135
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 57136
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 57137
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 57138
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 57139
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 57140
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 57141
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 57142
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 57143
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 57144
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 57145
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 57146
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 57147
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 57148
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 57149
    //MUL
    t29 = t29 * t30;
    //Instruction 57150
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 57151
    //MOV
    t4.y = t3.y;
    //Instruction 57152
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 57153
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 57154
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 57155
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 57156
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 57157
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 57158
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t3.xyz;
    //Instruction 57159
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t3.xyz;
    //Instruction 57160
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 57161
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 57162
    //MUL
    t28 = t3.y * _ProjectionParams.x;
    //Instruction 57163
    //MUL
    t4.w = t28 * 0.500000;
    //Instruction 57164
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 57165
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 57166
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 57167
    //MUL
    t4.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 57168
    //MAD
    t4.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t4.xyz;
    //Instruction 57169
    //MAD
    t4.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t4.xyz;
    //Instruction 57170
    //MAD
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 57171
    //MUL
    t5.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 57172
    //MAD
    t5.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 57173
    //MAD
    t5.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 57174
    //DP3
    t28 = dot(t5.xyz, t5.xyz);
    //Instruction 57175
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 57176
    //MUL
    t5.xyz = vec3(t28) * t5.xyz;
    //Instruction 57177
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 57178
    //MOV
    t6.xyz = t10_7.xyz;
    //Instruction 57179
    //MOV
    ti28 = 0x0;
    //Instruction 57180
    //LOOP
    while(true){
        //Instruction 57181
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 57182
        //BREAKC
        if(tb29){break;}
        //Instruction 57183
        //MAD
        t8.xyz = (-t4.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 57184
        //DP3
        t29 = dot(t8.xyz, t8.xyz);
        //Instruction 57185
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 57186
        //MUL
        t8.xyz = vec3(t30) * t8.xyz;
        //Instruction 57187
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 57188
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 57189
        //DP3
        t30 = dot(t8.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 57190
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 57191
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 57192
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 57193
        //MUL
        t29 = t29 * t30;
        //Instruction 57194
        //DP3
        t30 = dot(t5.xyz, t8.xyz);
        //Instruction 57195
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 57196
        //MUL
        t29 = t29 * t30;
        //Instruction 57197
        //MAD
        t6.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t6.xyz;
        //Instruction 57198
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 57199
    //ENDLOOP
    }
    //Instruction 57200
    //MUL
    t4.xyz = t16_0.xyz * t6.xyz;
    //Instruction 57201
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 57202
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 57203
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 57204
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57205
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 57206
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 57207
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 57208
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 57209
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 57210
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 57211
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 57212
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 57213
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
mediump float t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 56981
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 56982
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 56983
    //MOV
    t1.x = t16_0.x;
    //Instruction 56984
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 56985
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 56986
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 56987
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 56988
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56989
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 56990
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56991
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 56992
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 56993
    //MUL
    t16_1.w = t10_1.w * _Color.w;
    //Instruction 56994
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 56995
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 56996
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 56997
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 56998
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 56999
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 57000
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 57001
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 57002
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 57003
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 57004
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 57005
    //MOV
    SV_Target0 = t16_1;
    //Instruction 57006
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 == 5.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    highp float fOffset_18;
    fOffset_18 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_18 = 0.75;
    };
    highp vec4 tmpvar_19;
    tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_19.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_18);
    highp vec4 tmpvar_20;
    tmpvar_20 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    vPos_17 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_20 * tmpvar_20)
       * 
        (3.0 - (2.0 * tmpvar_20))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_8 = tmpvar_2;
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_11;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = FinalPosition_11;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (FinalPosition_11 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_9 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_11 = vPos_21;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_11;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_11 = vPos_46;
  };
  tmpvar_7.xyz = FinalPosition_11;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_60;
  highp vec3 viewN_61;
  highp vec3 viewpos_62;
  viewpos_62 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_63[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_63[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_61 = normalize((tmpvar_63 * tmpvar_8));
  lowp vec3 tmpvar_64;
  tmpvar_64 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_60 = tmpvar_64;
  highp vec3 toLight_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[0].xyz - (viewpos_62 * unity_LightPosition[0].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  toLight_65 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_60 = (lightColor_60 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_61, toLight_65))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_65, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[1].xyz - (viewpos_62 * unity_LightPosition[1].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  toLight_68 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_60 = (lightColor_60 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_61, toLight_68))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_68, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (unity_LightPosition[2].xyz - (viewpos_62 * unity_LightPosition[2].w));
  highp float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_72);
  toLight_71 = (tmpvar_72 * inversesqrt(tmpvar_73));
  lightColor_60 = (lightColor_60 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_61, toLight_71))
   * 
    ((1.0/((1.0 + (tmpvar_73 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_71, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (unity_LightPosition[3].xyz - (viewpos_62 * unity_LightPosition[3].w));
  highp float tmpvar_76;
  tmpvar_76 = dot (tmpvar_75, tmpvar_75);
  toLight_74 = (tmpvar_75 * inversesqrt(tmpvar_76));
  lightColor_60 = (lightColor_60 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_61, toLight_74))
   * 
    ((1.0/((1.0 + (tmpvar_76 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_74, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
  xlv_Input_ditherScreenPos = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_2 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    //Instruction 56929
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56930
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 56931
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 56932
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56933
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 56934
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 56935
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 56936
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 56937
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 56938
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 56939
    //EQ
    tb25 = t16_24==5.000000;
    //Instruction 56940
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 56941
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 56942
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 56943
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 56944
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 56945
    //FRC
    t2.x = fract(t2.x);
    //Instruction 56946
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 56947
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 56948
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 56949
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 56950
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 56951
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 56952
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 56953
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 56954
    //GE
    tb26 = t16_24>=3.000000;
    //Instruction 56955
    //IF
    if(tb26){
        //Instruction 56956
        //IF
        if(tb25){
            //Instruction 56957
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56958
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 56959
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 56960
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 56961
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 56962
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56963
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56964
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56965
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56966
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 56967
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56968
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56969
            //ADD
            t5.x = t25 + in_TEXCOORD0.w;
            //Instruction 56970
            //MAD
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56971
            //MUL
            t26 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 56972
            //MUL
            t5.z = t26 * 0.500000;
            //Instruction 56973
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 56974
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56975
            //FRC
            t5 = fract(t5);
            //Instruction 56976
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56977
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 56978
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56979
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56980
            //ADD
            t5 = t5 + t5;
            //Instruction 56981
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 56982
            //LT
            tb26 = t6.w<0.0;
            //Instruction 56983
            //MOV
            t6.y = (-t6.w);
            //Instruction 56984
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 56985
            //MOVC
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            //Instruction 56986
            //MAD
            t26 = (-t5.y) * t5.z + t6.x;
            //Instruction 56987
            //MAD
            t26 = t6.y * t26 + t6.w;
            //Instruction 56988
            //ADD
            t27 = (-t26) + t6.x;
            //Instruction 56989
            //MAD
            t26 = t6.y * t27 + t26;
            //Instruction 56990
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 56991
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56992
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56993
            //MUL
            t28 = t28 * t5.x;
            //Instruction 56994
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 56995
            //MAD
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56996
            //MUL
            t26 = t26 * t27;
            //Instruction 56997
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 56998
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56999
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57000
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 57001
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57002
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 57003
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 57004
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57005
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 57006
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57007
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 57008
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 57009
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 57010
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 57011
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 57012
            //MUL
            t26 = t5.w * _ST_WindVector.w;
            //Instruction 57013
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 57014
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 57015
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 57016
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 57017
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 57018
        //ELSE
        } else {
            //Instruction 57019
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57020
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 57021
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57022
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 57023
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 57024
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 57025
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 57026
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57027
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 57028
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 57029
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 57030
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 57031
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57032
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 57033
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 57034
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 57035
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 57036
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 57037
            //LT
            tb25 = t5.w<0.0;
            //Instruction 57038
            //MOV
            t5.y = (-t5.w);
            //Instruction 57039
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 57040
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 57041
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 57042
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 57043
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 57044
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 57045
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 57046
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57047
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57048
            //MUL
            t27 = t27 * t4.x;
            //Instruction 57049
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 57050
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 57051
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 57052
        //ENDIF
        }
        //Instruction 57053
    //ENDIF
    }
    //Instruction 57054
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 57055
    //SQRT
    t25 = sqrt(t25);
    //Instruction 57056
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 57057
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 57058
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 57059
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 57060
    //NE
    tb3 = t26!=0.0;
    //Instruction 57061
    //LOG
    t11 = log2(t26);
    //Instruction 57062
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 57063
    //EXP
    t11 = exp2(t11);
    //Instruction 57064
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 57065
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 57066
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 57067
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 57068
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 57069
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 57070
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 57071
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 57072
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 57073
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 57074
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 57075
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 57076
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 57077
    //MUL
    t26 = t26 * t3.x;
    //Instruction 57078
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 57079
    //MOV
    t3.y = t2.y;
    //Instruction 57080
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 57081
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 57082
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 57083
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 57084
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 57085
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 57086
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 57087
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 57088
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 57089
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 57090
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 57091
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 57092
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 57093
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 57094
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 57095
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 57096
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 57097
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 57098
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 57099
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 57100
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 57101
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 57102
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 57103
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 57104
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 57105
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 57106
    //MOV
    t5.xyz = t10_7.xyz;
    //Instruction 57107
    //MOV
    ti25 = 0x0;
    //Instruction 57108
    //LOOP
    while(true){
        //Instruction 57109
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 57110
        //BREAKC
        if(tb26){break;}
        //Instruction 57111
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 57112
        //DP3
        t26 = dot(t6.xyz, t6.xyz);
        //Instruction 57113
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 57114
        //MUL
        t6.xyz = vec3(t27) * t6.xyz;
        //Instruction 57115
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 57116
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 57117
        //DP3
        t27 = dot(t6.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 57118
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 57119
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 57120
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 57121
        //MUL
        t26 = t26 * t27;
        //Instruction 57122
        //DP3
        t27 = dot(t4.xyz, t6.xyz);
        //Instruction 57123
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 57124
        //MUL
        t26 = t26 * t27;
        //Instruction 57125
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 57126
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 57127
    //ENDLOOP
    }
    //Instruction 57128
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 57129
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 57130
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 57131
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 57132
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57133
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 57134
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 57135
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 57136
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 57137
    //MOV
    vs_TEXCOORD3.xyz = t2.xyz;
    //Instruction 57138
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 56913
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 56914
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 56915
    //MOV
    t1.x = t16_0.x;
    //Instruction 56916
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 56917
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 56918
    //ADD
    t16_1.x = t10_1 + -0.500000;
    //Instruction 56919
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 56920
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56921
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56922
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 56923
    //LT
    tb1 = t10_2<0.0;
    //Instruction 56924
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56925
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 56926
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56927
    //MOV
    SV_Target0 = t16_1;
    //Instruction 56928
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_14;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_14 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_12 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_14 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_62;
  highp vec3 viewN_63;
  highp vec3 viewpos_64;
  viewpos_64 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_65[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_65[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_63 = normalize((tmpvar_65 * tmpvar_11));
  lowp vec3 tmpvar_66;
  tmpvar_66 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_62 = tmpvar_66;
  highp vec3 toLight_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[0].xyz - (viewpos_64 * unity_LightPosition[0].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  toLight_67 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_62 = (lightColor_62 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_63, toLight_67))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_67, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[1].xyz - (viewpos_64 * unity_LightPosition[1].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  toLight_70 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_62 = (lightColor_62 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_63, toLight_70))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_70, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (unity_LightPosition[2].xyz - (viewpos_64 * unity_LightPosition[2].w));
  highp float tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_74);
  toLight_73 = (tmpvar_74 * inversesqrt(tmpvar_75));
  lightColor_62 = (lightColor_62 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_63, toLight_73))
   * 
    ((1.0/((1.0 + (tmpvar_75 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_73, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (unity_LightPosition[3].xyz - (viewpos_64 * unity_LightPosition[3].w));
  highp float tmpvar_78;
  tmpvar_78 = dot (tmpvar_77, tmpvar_77);
  toLight_76 = (tmpvar_77 * inversesqrt(tmpvar_78));
  lightColor_62 = (lightColor_62 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_63, toLight_76))
   * 
    ((1.0/((1.0 + (tmpvar_78 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_76, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
  xlv_Input_ditherScreenPos = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_2 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_10 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = tmpvar_1;
  tmpvar_11.w = tmpvar_2;
  gl_FragData[0] = tmpvar_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp float t12;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    //Instruction 56921
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56922
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 56923
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 56924
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 56925
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 56926
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 56927
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 56928
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 56929
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 56930
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 56931
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 56932
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56933
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 56934
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 56935
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 56936
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56937
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 56938
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 56939
    //EQ
    tb29 = t16_27==5.000000;
    //Instruction 56940
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 56941
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 56942
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 56943
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 56944
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 56945
    //FRC
    t3.x = fract(t3.x);
    //Instruction 56946
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 56947
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 56948
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 56949
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 56950
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 56951
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 56952
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 56953
    //MOVC
    t3.xyz = (bool(tb29)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 56954
    //GE
    tb30 = t16_27>=3.000000;
    //Instruction 56955
    //IF
    if(tb30){
        //Instruction 56956
        //IF
        if(tb29){
            //Instruction 56957
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56958
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 56959
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 56960
            //DP3
            t29 = dot(t4.xyz, t4.xyz);
            //Instruction 56961
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 56962
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56963
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56964
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56965
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56966
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56967
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 56968
            //ADD
            t6.x = t29 + in_TEXCOORD0.w;
            //Instruction 56969
            //MAD
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56970
            //MUL
            t30 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56971
            //MUL
            t6.z = t30 * 0.500000;
            //Instruction 56972
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 56973
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56974
            //FRC
            t6 = fract(t6);
            //Instruction 56975
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56976
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 56977
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56978
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56979
            //ADD
            t6 = t6 + t6;
            //Instruction 56980
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56981
            //LT
            tb30 = t7.w<0.0;
            //Instruction 56982
            //MOV
            t7.y = (-t7.w);
            //Instruction 56983
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56984
            //MOVC
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            //Instruction 56985
            //MAD
            t30 = (-t6.y) * t6.z + t7.x;
            //Instruction 56986
            //MAD
            t30 = t7.y * t30 + t7.w;
            //Instruction 56987
            //ADD
            t31 = (-t30) + t7.x;
            //Instruction 56988
            //MAD
            t30 = t7.y * t31 + t30;
            //Instruction 56989
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 56990
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56991
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56992
            //MUL
            t32 = t32 * t6.x;
            //Instruction 56993
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 56994
            //MAD
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56995
            //MUL
            t30 = t30 * t31;
            //Instruction 56996
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 56997
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56998
            //MAD
            t6.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56999
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 57000
            //MAD
            t6.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57001
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 57002
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 57003
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57004
            //MUL
            t7.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 57005
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57006
            //MAD
            t6.xy = t7.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 57007
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 57008
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 57009
            //MUL
            t29 = t6.x * t6.y;
            //Instruction 57010
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 57011
            //MUL
            t30 = t6.w * _ST_WindVector.w;
            //Instruction 57012
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 57013
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 57014
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 57015
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 57016
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 57017
        //ELSE
        } else {
            //Instruction 57018
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57019
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 57020
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57021
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 57022
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 57023
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 57024
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57025
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 57026
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 57027
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 57028
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 57029
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57030
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 57031
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 57032
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 57033
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 57034
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 57035
            //LT
            tb1 = t6.w<0.0;
            //Instruction 57036
            //MOV
            t6.y = (-t6.w);
            //Instruction 57037
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 57038
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 57039
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 57040
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 57041
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 57042
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 57043
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 57044
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57045
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57046
            //MUL
            t30 = t30 * t5.x;
            //Instruction 57047
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 57048
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 57049
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 57050
        //ENDIF
        }
        //Instruction 57051
    //ENDIF
    }
    //Instruction 57052
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 57053
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 57054
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 57055
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 57056
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 57057
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 57058
    //NE
    tb30 = t29!=0.0;
    //Instruction 57059
    //LOG
    t4.x = log2(t29);
    //Instruction 57060
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 57061
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 57062
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 57063
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 57064
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 57065
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 57066
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 57067
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 57068
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 57069
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 57070
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 57071
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 57072
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 57073
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 57074
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 57075
    //MUL
    t29 = t29 * t30;
    //Instruction 57076
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 57077
    //MOV
    t4.y = t3.y;
    //Instruction 57078
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 57079
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 57080
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 57081
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 57082
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 57083
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 57084
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t3.xyz;
    //Instruction 57085
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t3.xyz;
    //Instruction 57086
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 57087
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 57088
    //MUL
    t28 = t3.y * _ProjectionParams.x;
    //Instruction 57089
    //MUL
    t4.w = t28 * 0.500000;
    //Instruction 57090
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 57091
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 57092
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 57093
    //MUL
    t4.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 57094
    //MAD
    t4.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t4.xyz;
    //Instruction 57095
    //MAD
    t4.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t4.xyz;
    //Instruction 57096
    //MAD
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 57097
    //MUL
    t5.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 57098
    //MAD
    t5.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 57099
    //MAD
    t5.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 57100
    //DP3
    t28 = dot(t5.xyz, t5.xyz);
    //Instruction 57101
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 57102
    //MUL
    t5.xyz = vec3(t28) * t5.xyz;
    //Instruction 57103
    //MUL
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 57104
    //MOV
    t6.xyz = t10_8.xyz;
    //Instruction 57105
    //MOV
    ti28 = 0x0;
    //Instruction 57106
    //LOOP
    while(true){
        //Instruction 57107
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 57108
        //BREAKC
        if(tb29){break;}
        //Instruction 57109
        //MAD
        t7.xyz = (-t4.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 57110
        //DP3
        t29 = dot(t7.xyz, t7.xyz);
        //Instruction 57111
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 57112
        //MUL
        t7.xyz = vec3(t30) * t7.xyz;
        //Instruction 57113
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 57114
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 57115
        //DP3
        t30 = dot(t7.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 57116
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 57117
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 57118
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 57119
        //MUL
        t29 = t29 * t30;
        //Instruction 57120
        //DP3
        t30 = dot(t5.xyz, t7.xyz);
        //Instruction 57121
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 57122
        //MUL
        t29 = t29 * t30;
        //Instruction 57123
        //MAD
        t6.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t6.xyz;
        //Instruction 57124
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 57125
    //ENDLOOP
    }
    //Instruction 57126
    //MUL
    t4.xyz = t16_0.xyz * t6.xyz;
    //Instruction 57127
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 57128
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 57129
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 57130
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57131
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 57132
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 57133
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 57134
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 57135
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 57136
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 56896
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 56897
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 56898
    //MOV
    t1.x = t16_0.x;
    //Instruction 56899
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 56900
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 56901
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 56902
    //LT
    tb1 = t16_1<0.0;
    //Instruction 56903
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56904
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 56905
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 56906
    //LT
    tb1 = t10_2<0.0;
    //Instruction 56907
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 56908
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 56909
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 56910
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 56911
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 56912
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 56913
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 56914
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 56915
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 56916
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 56917
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 56918
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 56919
    //MOV
    SV_Target0 = t16_0;
    //Instruction 56920
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_11 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_13 > 1.0) && (tmpvar_13 < 5.0))) {
    highp float tmpvar_16;
    tmpvar_16 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_17;
    isBestWind_17 = (tmpvar_13 == 4.0);
    bool bLeaf2_18;
    bLeaf2_18 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_11;
    highp vec3 vDirection_20;
    vDirection_20 = tmpvar_2;
    highp float tmpvar_21;
    if (bLeaf2_18) {
      tmpvar_21 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_22;
    if (bLeaf2_18) {
      tmpvar_22 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_23;
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (tmpvar_21 + tmpvar_16);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (FinalPosition_11 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_22 * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_20 = tmpvar_2;
    vPos_19 = vPos_23;
    if (isBestWind_17) {
      highp vec3 tmpvar_26;
      tmpvar_26 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_27;
      if (bLeaf2_18) {
        tmpvar_27 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_28;
      if (bLeaf2_18) {
        tmpvar_28 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_29;
      if (bLeaf2_18) {
        tmpvar_29 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_30;
      if (bLeaf2_18) {
        tmpvar_30 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_31;
      if (bLeaf2_18) {
        tmpvar_31 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_31 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_32;
      if (bLeaf2_18) {
        tmpvar_32 = bool(1);
      } else {
        tmpvar_32 = bool(1);
      };
      highp float fTwitch_33;
      highp vec3 vAxis_34;
      highp float fOsc_35;
      highp vec3 vOriginPos_36;
      highp vec3 tmpvar_37;
      tmpvar_37 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_38;
      tmpvar_38 = ((tmpvar_37.x + tmpvar_37.y) + tmpvar_37.z);
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_27 + tmpvar_38);
      tmpvar_39.y = ((tmpvar_27 * 0.75) - tmpvar_38);
      tmpvar_39.z = ((tmpvar_27 * 0.01) + tmpvar_38);
      tmpvar_39.w = (tmpvar_27 + tmpvar_38);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      vOriginPos_36 = vPos_23;
      highp float tmpvar_42;
      tmpvar_42 = sqrt(dot (vPos_23, vPos_23));
      highp float fAngle_43;
      fAngle_43 = ((_glesMultiTexCoord2.x * tmpvar_29) * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y)));
      highp vec2 vSinCos_44;
      vSinCos_44.x = sin(fAngle_43);
      vSinCos_44.y = cos(fAngle_43);
      highp float tmpvar_45;
      tmpvar_45 = (1.0 - vSinCos_44.y);
      highp mat3 tmpvar_46;
      tmpvar_46[0].x = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.x) + vSinCos_44.y);
      tmpvar_46[0].y = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.y) + (vSinCos_44.x * tmpvar_26.z));
      tmpvar_46[0].z = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.z) - (vSinCos_44.x * tmpvar_26.y));
      tmpvar_46[1].x = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.y) - (vSinCos_44.x * tmpvar_26.z));
      tmpvar_46[1].y = (((tmpvar_45 * tmpvar_26.y) * tmpvar_26.y) + vSinCos_44.y);
      tmpvar_46[1].z = (((tmpvar_45 * tmpvar_26.y) * tmpvar_26.z) + (vSinCos_44.x * tmpvar_26.x));
      tmpvar_46[2].x = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.z) + (vSinCos_44.x * tmpvar_26.y));
      tmpvar_46[2].y = (((tmpvar_45 * tmpvar_26.y) * tmpvar_26.z) - (vSinCos_44.x * tmpvar_26.x));
      tmpvar_46[2].z = (((tmpvar_45 * tmpvar_26.z) * tmpvar_26.z) + vSinCos_44.y);
      highp vec3 tmpvar_47;
      tmpvar_47 = ((tmpvar_26.yzx * vRotatedWindVector_10.zxy) - (tmpvar_26.zxy * vRotatedWindVector_10.yzx));
      vAxis_34.xz = tmpvar_47.xz;
      highp float tmpvar_48;
      tmpvar_48 = clamp (dot (vRotatedWindVector_10, tmpvar_26), -1.0, 1.0);
      vAxis_34.y = (tmpvar_47.y + tmpvar_48);
      highp vec3 tmpvar_49;
      tmpvar_49 = normalize(vAxis_34);
      vAxis_34 = tmpvar_49;
      highp float tmpvar_50;
      tmpvar_50 = (1.570796 - (sign(tmpvar_48) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_48))) * (1.570796 + (abs(tmpvar_48) * (-0.2146018 + 
          (abs(tmpvar_48) * (0.08656672 + (abs(tmpvar_48) * -0.03102955)))
        ))))
      )));
      fOsc_35 = (tmpvar_40.y - (tmpvar_40.x * tmpvar_40.x));
      fTwitch_33 = 0.0;
      if (tmpvar_32) {
        highp float fTime_51;
        fTime_51 = (tmpvar_31.z + tmpvar_38);
        highp vec4 tmpvar_52;
        tmpvar_52.zw = vec2(0.0, 0.0);
        tmpvar_52.x = fTime_51;
        tmpvar_52.y = (0.87 * fTime_51);
        highp vec4 tmpvar_53;
        highp vec4 tmpvar_54;
        tmpvar_54 = abs(((
          fract((tmpvar_52 + 0.5))
         * 2.0) - 1.0));
        tmpvar_53 = (((
          (tmpvar_54 * tmpvar_54)
         * 
          (3.0 - (2.0 * tmpvar_54))
        ) - 0.5) * 2.0);
        fTwitch_33 = (tmpvar_31.x * pow (clamp (
          ((((tmpvar_53.x * tmpvar_53.y) * tmpvar_53.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_31.y));
      };
      highp float fAngle_55;
      fAngle_55 = (_glesMultiTexCoord2.x * ((
        (tmpvar_50 * tmpvar_30)
       + 
        (fOsc_35 * tmpvar_28)
      ) + fTwitch_33));
      highp vec2 vSinCos_56;
      vSinCos_56.x = sin(fAngle_55);
      vSinCos_56.y = cos(fAngle_55);
      highp float tmpvar_57;
      tmpvar_57 = (1.0 - vSinCos_56.y);
      highp mat3 tmpvar_58;
      tmpvar_58[0].x = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.x) + vSinCos_56.y);
      tmpvar_58[0].y = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.y) + (vSinCos_56.x * tmpvar_49.z));
      tmpvar_58[0].z = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.z) - (vSinCos_56.x * tmpvar_49.y));
      tmpvar_58[1].x = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.y) - (vSinCos_56.x * tmpvar_49.z));
      tmpvar_58[1].y = (((tmpvar_57 * tmpvar_49.y) * tmpvar_49.y) + vSinCos_56.y);
      tmpvar_58[1].z = (((tmpvar_57 * tmpvar_49.y) * tmpvar_49.z) + (vSinCos_56.x * tmpvar_49.x));
      tmpvar_58[2].x = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.z) + (vSinCos_56.x * tmpvar_49.y));
      tmpvar_58[2].y = (((tmpvar_57 * tmpvar_49.y) * tmpvar_49.z) - (vSinCos_56.x * tmpvar_49.x));
      tmpvar_58[2].z = (((tmpvar_57 * tmpvar_49.z) * tmpvar_49.z) + vSinCos_56.y);
      highp mat3 tmpvar_59;
      tmpvar_59 = (tmpvar_46 * tmpvar_58);
      vOriginPos_36 = (normalize((tmpvar_59 * vPos_23)) * tmpvar_42);
      vDirection_20 = (tmpvar_59 * _glesNormal);
      vPos_19 = vOriginPos_36;
    };
    tmpvar_8 = vDirection_20;
    FinalPosition_11 = vPos_19;
  };
  FinalPosition_11 = (FinalPosition_11 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_60;
    vPos_60 = FinalPosition_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_61;
      vPos_61 = FinalPosition_11;
      highp float fTime_62;
      highp float fAdherenceScale_63;
      highp vec3 vWindVector_64;
      vWindVector_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_62 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_65;
      highp float fOscillation_66;
      fOscillation_66 = 1.0;
      highp float fAmount_67;
      highp float fTarget_68;
      highp vec4 tmpvar_69;
      tmpvar_69.x = (fTime_62 + _glesMultiTexCoord0.w);
      tmpvar_69.y = ((fTime_62 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_69.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_62 + _glesMultiTexCoord0.w));
      tmpvar_69.w = ((fTime_62 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_70;
      tmpvar_70 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      vOscillations_65 = (((
        (tmpvar_70 * tmpvar_70)
       * 
        (3.0 - (2.0 * tmpvar_70))
      ) - 0.5) * 2.0);
      highp float tmpvar_71;
      tmpvar_71 = (vOscillations_65.y * vOscillations_65.z);
      fTarget_68 = 1.0;
      fAmount_67 = tmpvar_71;
      if ((tmpvar_71 < 0.0)) {
        fTarget_68 = -1.0;
        fAmount_67 = -(tmpvar_71);
      };
      fOscillation_66 = (((
        mix (mix (tmpvar_71, fTarget_68, fAmount_67), fTarget_68, fAmount_67)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_65.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_66 = (fOscillation_66 * (1.0 + (vOscillations_65.w * _ST_WindBranchWhip.x)));
      vPos_61 = (FinalPosition_11 + ((vWindVector_64 * fOscillation_66) * _ST_WindBranch.y));
      highp vec4 tmpvar_72;
      tmpvar_72.zw = vec2(0.0, 0.0);
      tmpvar_72.x = ((fTime_62 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_72.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_73;
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      tmpvar_73 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((tmpvar_73.x * tmpvar_73.y) * (
        (tmpvar_73.x * tmpvar_73.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_65.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_61 = (vPos_61 + ((
        ((vRotatedBranchAnchor_9 - vPos_61) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_60 = vPos_61;
    } else {
      highp vec3 vPos_75;
      vPos_75 = vPos_60;
      highp float fTime_76;
      highp vec3 vWindVector_77;
      vWindVector_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_76 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_78;
      highp float fOscillation_79;
      fOscillation_79 = 1.0;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (fTime_76 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((fTime_76 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_76 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_78 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_78.y * vOscillations_78.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      fOscillation_79 = (((
        mix (mix (tmpvar_84, fTarget_81, fAmount_80), fTarget_81, fAmount_80)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_78.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_75 = (vPos_60 + ((vWindVector_77 * fOscillation_79) * _ST_WindBranch.y));
      vPos_60 = vPos_75;
    };
    FinalPosition_11 = vPos_60;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = FinalPosition_11;
    highp float fMoveAmount_86;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_89;
    tmpvar_89 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    fMoveAmount_86 = ((_ST_WindGlobal.y * (tmpvar_91.x + 
      (tmpvar_91.y * tmpvar_91.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_86 = (fMoveAmount_86 * fAdjust_87);
    vPos_85.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_86));
    vPos_85 = (normalize(vPos_85) * fLength_88);
    FinalPosition_11 = vPos_85;
  };
  tmpvar_7.xyz = FinalPosition_11;
  highp vec4 hPos_93;
  hPos_93 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_94;
  highp vec4 o_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (hPos_93 * 0.5);
  highp vec2 tmpvar_97;
  tmpvar_97.x = tmpvar_96.x;
  tmpvar_97.y = (tmpvar_96.y * _ProjectionParams.x);
  o_95.xy = (tmpvar_97 + tmpvar_96.w);
  o_95.zw = hPos_93.zw;
  highp vec3 tmpvar_98;
  tmpvar_98 = o_95.xyw;
  screenPos_94 = tmpvar_98;
  screenPos_94.xy = (screenPos_94.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_99;
  highp vec3 viewN_100;
  highp vec3 viewpos_101;
  viewpos_101 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_102[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_102[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_100 = normalize((tmpvar_102 * tmpvar_8));
  lowp vec3 tmpvar_103;
  tmpvar_103 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_99 = tmpvar_103;
  highp vec3 toLight_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[0].xyz - (viewpos_101 * unity_LightPosition[0].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  toLight_104 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_99 = (lightColor_99 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_100, toLight_104))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_104, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[1].xyz - (viewpos_101 * unity_LightPosition[1].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  toLight_107 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_99 = (lightColor_99 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_100, toLight_107))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_107, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (unity_LightPosition[2].xyz - (viewpos_101 * unity_LightPosition[2].w));
  highp float tmpvar_112;
  tmpvar_112 = dot (tmpvar_111, tmpvar_111);
  toLight_110 = (tmpvar_111 * inversesqrt(tmpvar_112));
  lightColor_99 = (lightColor_99 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_100, toLight_110))
   * 
    ((1.0/((1.0 + (tmpvar_112 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_110, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_113;
  highp vec3 tmpvar_114;
  tmpvar_114 = (unity_LightPosition[3].xyz - (viewpos_101 * unity_LightPosition[3].w));
  highp float tmpvar_115;
  tmpvar_115 = dot (tmpvar_114, tmpvar_114);
  toLight_113 = (tmpvar_114 * inversesqrt(tmpvar_115));
  lightColor_99 = (lightColor_99 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_100, toLight_113))
   * 
    ((1.0/((1.0 + (tmpvar_115 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_113, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_99);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
  xlv_Input_ditherScreenPos = screenPos_94;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_2 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
lowp vec3 t10_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
mediump float t16_45;
highp float t46;
highp int ti46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
void main()
{
    //Instruction 57230
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57231
    //MUL
    t16_45 = _WindEnabled * _WindQuality;
    //Instruction 57232
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_45)).xy;
    //Instruction 57233
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 57234
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 57235
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 57236
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 57237
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 57238
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 57239
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 57240
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 57241
    //LT
    tb31 = t16_45<5.000000;
    //Instruction 57242
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 57243
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 57244
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 57245
        //EQ
        tb31 = t16_45==4.000000;
        //Instruction 57246
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 57247
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 57248
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 57249
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 57250
        //FRC
        t16.x = fract(t16.x);
        //Instruction 57251
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 57252
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 57253
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 57254
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 57255
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 57256
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 57257
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 57258
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 57259
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 57260
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 57261
        //IF
        if(tb31){
            //Instruction 57262
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 57263
            //FRC
            t4 = fract(t4);
            //Instruction 57264
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57265
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 57266
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 57267
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 57268
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 57269
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 57270
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 57271
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 57272
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57273
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 57274
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57275
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 57276
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 57277
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 57278
            //SQRT
            t47 = sqrt(t47);
            //Instruction 57279
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 57280
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 57281
            //MUL
            t48 = t48 * t5.x;
            //Instruction 57282
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 57283
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 57284
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 57285
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 57286
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 57287
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 57288
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 57289
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 57290
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 57291
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 57292
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 57293
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 57294
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 57295
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 57296
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 57297
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 57298
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 57299
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 57300
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 57301
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 57302
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 57303
            //SQRT
            t48 = sqrt(t48);
            //Instruction 57304
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 57305
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 57306
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 57307
            //MUL
            t35 = t48 * t5.x;
            //Instruction 57308
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 57309
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 57310
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 57311
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 57312
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 57313
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 57314
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 57315
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 57316
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 57317
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57318
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 57319
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57320
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 57321
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 57322
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 57323
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 57324
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 57325
            //LOG
            t46 = log2(t46);
            //Instruction 57326
            //MUL
            t31 = t46 * t16.y;
            //Instruction 57327
            //EXP
            t31 = exp2(t31);
            //Instruction 57328
            //MUL
            t46 = t5.y * t48;
            //Instruction 57329
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 57330
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 57331
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 57332
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 57333
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 57334
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 57335
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 57336
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 57337
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 57338
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 57339
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 57340
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 57341
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 57342
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 57343
            //MOV
            t10.z = t11.x;
            //Instruction 57344
            //MOV
            t10.w = t9.x;
            //Instruction 57345
            //MOV
            t12.z = t8.y;
            //Instruction 57346
            //MOV
            t12.w = t13.y;
            //Instruction 57347
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 57348
            //MOV
            t13.w = t12.y;
            //Instruction 57349
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 57350
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 57351
            //MOV
            t9.w = t10.y;
            //Instruction 57352
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 57353
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 57354
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 57355
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 57356
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 57357
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 57358
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 57359
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 57360
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 57361
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 57362
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 57363
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 57364
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 57365
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 57366
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 57367
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 57368
        //ELSE
        } else {
            //Instruction 57369
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 57370
        //ENDIF
        }
        //Instruction 57371
    //ELSE
    } else {
        //Instruction 57372
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 57373
    //ENDIF
    }
    //Instruction 57374
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 57375
    //GE
    tb17 = t16_45>=3.000000;
    //Instruction 57376
    //IF
    if(tb17){
        //Instruction 57377
        //EQ
        tb17 = t16_45==5.000000;
        //Instruction 57378
        //IF
        if(tb17){
            //Instruction 57379
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 57380
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 57381
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 57382
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 57383
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 57384
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 57385
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57386
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 57387
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57388
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 57389
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 57390
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 57391
            //ADD
            t6.x = t17.x + in_TEXCOORD0.w;
            //Instruction 57392
            //MAD
            t6.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57393
            //MUL
            t47 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 57394
            //MUL
            t6.z = t47 * 0.500000;
            //Instruction 57395
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 57396
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 57397
            //FRC
            t6 = fract(t6);
            //Instruction 57398
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 57399
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 57400
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 57401
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 57402
            //ADD
            t6 = t6 + t6;
            //Instruction 57403
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 57404
            //LT
            tb47 = t7.w<0.0;
            //Instruction 57405
            //MOV
            t7.y = (-t7.w);
            //Instruction 57406
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 57407
            //MOVC
            t7.xy = (bool(tb47)) ? t7.xy : t7.zw;
            //Instruction 57408
            //MAD
            t47 = (-t6.y) * t6.z + t7.x;
            //Instruction 57409
            //MAD
            t47 = t7.y * t47 + t7.w;
            //Instruction 57410
            //ADD
            t48 = (-t47) + t7.x;
            //Instruction 57411
            //MAD
            t47 = t7.y * t48 + t47;
            //Instruction 57412
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 57413
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57414
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57415
            //MUL
            t49 = t49 * t6.x;
            //Instruction 57416
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 57417
            //MAD
            t48 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 57418
            //MUL
            t47 = t47 * t48;
            //Instruction 57419
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 57420
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 57421
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57422
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 57423
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57424
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 57425
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 57426
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57427
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 57428
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57429
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 57430
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 57431
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 57432
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 57433
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 57434
            //MUL
            t47 = t6.w * _ST_WindVector.w;
            //Instruction 57435
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 57436
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 57437
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 57438
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 57439
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 57440
        //ELSE
        } else {
            //Instruction 57441
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57442
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 57443
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57444
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 57445
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 57446
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 57447
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 57448
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57449
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 57450
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 57451
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 57452
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 57453
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57454
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 57455
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 57456
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 57457
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 57458
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 57459
            //LT
            tb17 = t6.w<0.0;
            //Instruction 57460
            //MOV
            t6.y = (-t6.w);
            //Instruction 57461
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 57462
            //MOVC
            t17.xz = (bool(tb17)) ? t6.xy : t6.zw;
            //Instruction 57463
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 57464
            //MAD
            t48 = t17.z * t48 + t6.w;
            //Instruction 57465
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 57466
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 57467
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 57468
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57469
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57470
            //MUL
            t48 = t48 * t5.x;
            //Instruction 57471
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 57472
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 57473
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 57474
        //ENDIF
        }
        //Instruction 57475
    //ENDIF
    }
    //Instruction 57476
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 57477
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 57478
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 57479
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 57480
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 57481
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 57482
    //NE
    tb48 = t47!=0.0;
    //Instruction 57483
    //LOG
    t4.x = log2(t47);
    //Instruction 57484
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 57485
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 57486
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 57487
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 57488
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 57489
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 57490
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 57491
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 57492
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 57493
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 57494
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 57495
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 57496
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 57497
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 57498
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 57499
    //MUL
    t47 = t47 * t48;
    //Instruction 57500
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 57501
    //MOV
    t4.y = t3.y;
    //Instruction 57502
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 57503
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 57504
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 57505
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 57506
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 57507
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 57508
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 57509
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 57510
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 57511
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 57512
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 57513
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 57514
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 57515
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 57516
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 57517
    //MUL
    t4.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 57518
    //MAD
    t4.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t4.xyz;
    //Instruction 57519
    //MAD
    t4.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t4.xyz;
    //Instruction 57520
    //MAD
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 57521
    //MUL
    t5.xyz = t16.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 57522
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t16.xxx + t5.xyz;
    //Instruction 57523
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * t16.zzz + t1.xyz;
    //Instruction 57524
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 57525
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 57526
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 57527
    //MUL
    t10_14.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 57528
    //MOV
    t5.xyz = t10_14.xyz;
    //Instruction 57529
    //MOV
    ti46 = 0x0;
    //Instruction 57530
    //LOOP
    while(true){
        //Instruction 57531
        //IGE
        tb47 = ti46>=0x4;
        //Instruction 57532
        //BREAKC
        if(tb47){break;}
        //Instruction 57533
        //MAD
        t6.xyz = (-t4.xyz) * unity_LightPosition[ti46 + 0].www + unity_LightPosition[ti46 + 0].xyz;
        //Instruction 57534
        //DP3
        t47 = dot(t6.xyz, t6.xyz);
        //Instruction 57535
        //RSQ
        t48 = inversesqrt(t47);
        //Instruction 57536
        //MUL
        t6.xyz = vec3(t48) * t6.xyz;
        //Instruction 57537
        //MAD
        t47 = t47 * unity_LightAtten[ti46 + 0].z + 1.0;
        //Instruction 57538
        //DIV
        t47 = float(1.0) / t47;
        //Instruction 57539
        //DP3
        t48 = dot(t6.xyz, unity_SpotDirection[ti46 + 0].xyz);
        //Instruction 57540
        //MAX
        t48 = max(t48, 0.0);
        //Instruction 57541
        //ADD
        t48 = t48 + (-unity_LightAtten[ti46 + 0].x);
        //Instruction 57542
        //MUL
        t48 = t48 * unity_LightAtten[ti46 + 0].y;
        t48 = clamp(t48, 0.0, 1.0);
        //Instruction 57543
        //MUL
        t47 = t47 * t48;
        //Instruction 57544
        //DP3
        t48 = dot(t1.xyz, t6.xyz);
        //Instruction 57545
        //MAX
        t48 = max(t48, 0.0);
        //Instruction 57546
        //MUL
        t47 = t47 * t48;
        //Instruction 57547
        //MAD
        t5.xyz = unity_LightColor[ti46 + 0].xyz * vec3(t47) + t5.xyz;
        //Instruction 57548
        //IADD
        ti46 = ti46 + 0x1;
        //Instruction 57549
    //ENDLOOP
    }
    //Instruction 57550
    //MUL
    t1.xyz = t16_0.xyz * t5.xyz;
    //Instruction 57551
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 57552
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 57553
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 57554
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57555
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57556
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 57557
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 57558
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 57559
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 57560
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 57214
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 57215
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 57216
    //MOV
    t1.x = t16_0.x;
    //Instruction 57217
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 57218
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 57219
    //ADD
    t16_1.x = t10_1 + -0.500000;
    //Instruction 57220
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 57221
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 57222
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 57223
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57224
    //LT
    tb1 = t10_2<0.0;
    //Instruction 57225
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 57226
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 57227
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 57228
    //MOV
    SV_Target0 = t16_1;
    //Instruction 57229
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_14;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_13.zxy) - (tmpvar_28.zxy * vRotatedWindVector_13.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_11 = vDirection_22;
    FinalPosition_14 = vPos_21;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_14;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_14 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_12 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_14 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_14;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_14 = vPos_87;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_101;
  highp vec3 viewN_102;
  highp vec3 viewpos_103;
  viewpos_103 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_104[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_104[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_102 = normalize((tmpvar_104 * tmpvar_11));
  lowp vec3 tmpvar_105;
  tmpvar_105 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_101 = tmpvar_105;
  highp vec3 toLight_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[0].xyz - (viewpos_103 * unity_LightPosition[0].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  toLight_106 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_101 = (lightColor_101 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_102, toLight_106))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_106, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_109;
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[1].xyz - (viewpos_103 * unity_LightPosition[1].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  toLight_109 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_101 = (lightColor_101 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_102, toLight_109))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_109, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (unity_LightPosition[2].xyz - (viewpos_103 * unity_LightPosition[2].w));
  highp float tmpvar_114;
  tmpvar_114 = dot (tmpvar_113, tmpvar_113);
  toLight_112 = (tmpvar_113 * inversesqrt(tmpvar_114));
  lightColor_101 = (lightColor_101 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_102, toLight_112))
   * 
    ((1.0/((1.0 + (tmpvar_114 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_112, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (unity_LightPosition[3].xyz - (viewpos_103 * unity_LightPosition[3].w));
  highp float tmpvar_117;
  tmpvar_117 = dot (tmpvar_116, tmpvar_116);
  toLight_115 = (tmpvar_116 * inversesqrt(tmpvar_117));
  lightColor_101 = (lightColor_101 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_102, toLight_115))
   * 
    ((1.0/((1.0 + (tmpvar_117 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_115, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_101);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
  xlv_Input_ditherScreenPos = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_2 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_10 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = tmpvar_1;
  tmpvar_11.w = tmpvar_2;
  gl_FragData[0] = tmpvar_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t17;
bvec2 tb17;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t33;
highp int ti33;
highp vec2 t37;
highp vec2 t39;
mediump float t16_48;
highp float t49;
highp int ti49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 57164
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57165
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 57166
    //ADD
    t17.x = t1.x + _Object2World[3].z;
    //Instruction 57167
    //ADD
    t33.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 57168
    //ADD
    t17.y = t33.x + in_NORMAL0.x;
    //Instruction 57169
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 57170
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 57171
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 57172
    //MUL
    t2.z = t17.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 57173
    //MUL
    t16_48 = _WindEnabled * _WindQuality;
    //Instruction 57174
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_48)).xy;
    //Instruction 57175
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 57176
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 57177
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 57178
    //DP3
    t49 = dot(t3.xyz, t3.xyz);
    //Instruction 57179
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 57180
    //MUL
    t3.xyz = vec3(t49) * t3.xyz;
    //Instruction 57181
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 57182
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 57183
    //LT
    tb49 = t16_48<5.000000;
    //Instruction 57184
    //AND
    ti33 = int(uint(tb49) & uint(tb17.y));
    //Instruction 57185
    //IF
    if((uint(ti33))!=uint(0u)){
        //Instruction 57186
        //ADD
        t33.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 57187
        //EQ
        tb49 = t16_48==4.000000;
        //Instruction 57188
        //LT
        tb50 = 0.0<in_TEXCOORD2.w;
        //Instruction 57189
        //MOVC
        t5.xy = (bool(tb50)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 57190
        //ADD
        t33.x = t33.x + t5.x;
        //Instruction 57191
        //ADD
        t33.x = t33.x + 0.500000;
        //Instruction 57192
        //FRC
        t33.x = fract(t33.x);
        //Instruction 57193
        //MAD
        t33.x = t33.x * 2.000000 + -1.0;
        //Instruction 57194
        //MUL
        t51 = abs(t33.x) * abs(t33.x);
        //Instruction 57195
        //MAD
        t33.x = -abs(t33.x) * 2.000000 + 3.000000;
        //Instruction 57196
        //MAD
        t33.x = t51 * t33.x + -0.500000;
        //Instruction 57197
        //DP2
        t33.x = dot(t33.xx, t5.yy);
        //Instruction 57198
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 57199
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 57200
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 57201
        //MUL
        t5.xyz = t33.xxx * t5.xyz;
        //Instruction 57202
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 57203
        //IF
        if(tb49){
            //Instruction 57204
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 57205
            //FRC
            t5 = fract(t5);
            //Instruction 57206
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57207
            //MOVC
            t6 = (bool(tb50)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 57208
            //MOVC
            t7.xyz = (bool(tb50)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 57209
            //MUL
            t33.x = t5.w * 3.000000;
            //Instruction 57210
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 57211
            //MAD
            t8.x = t6.x * 0.750000 + (-t33.x);
            //Instruction 57212
            //ADD
            t33.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 57213
            //FRC
            t33.xy = fract(t33.xy);
            //Instruction 57214
            //MAD
            t33.xy = t33.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57215
            //MUL
            t8.xy = abs(t33.xy) * abs(t33.xy);
            //Instruction 57216
            //MAD
            t33.xy = -abs(t33.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57217
            //MAD
            t33.xy = t8.xy * t33.xy + vec2(-0.500000, -0.500000);
            //Instruction 57218
            //ADD
            t33.xy = t33.xy + t33.xy;
            //Instruction 57219
            //DP3
            t50 = dot(t4.xyz, t4.xyz);
            //Instruction 57220
            //SQRT
            t50 = sqrt(t50);
            //Instruction 57221
            //MAD
            t51 = t33.x * t33.x + t33.y;
            //Instruction 57222
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 57223
            //MUL
            t51 = t51 * t52;
            //Instruction 57224
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 57225
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 57226
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 57227
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 57228
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 57229
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 57230
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 57231
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 57232
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 57233
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 57234
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 57235
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 57236
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 57237
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 57238
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 57239
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 57240
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 57241
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 57242
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 57243
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 57244
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 57245
            //SQRT
            t51 = sqrt(t51);
            //Instruction 57246
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 57247
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 57248
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 57249
            //MUL
            t6.x = t51 * t52;
            //Instruction 57250
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 57251
            //LT
            tb19 = t19<(-t19);
            //Instruction 57252
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 57253
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 57254
            //MAD
            t33.x = (-t33.y) * t33.y + t33.x;
            //Instruction 57255
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 57256
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 57257
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 57258
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 57259
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57260
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 57261
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57262
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 57263
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 57264
            //MUL
            t49 = t6.z * t6.z;
            //Instruction 57265
            //MAD
            t49 = t49 * t6.x + 1.0;
            //Instruction 57266
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 57267
            //LOG
            t49 = log2(t49);
            //Instruction 57268
            //MUL
            t49 = t49 * t7.y;
            //Instruction 57269
            //EXP
            t49 = exp2(t49);
            //Instruction 57270
            //MUL
            t33.x = t6.y * t33.x;
            //Instruction 57271
            //MAD
            t33.x = t19 * t6.w + t33.x;
            //Instruction 57272
            //MAD
            t33.x = t7.x * t49 + t33.x;
            //Instruction 57273
            //MUL
            t33.x = t33.x * in_TEXCOORD2.x;
            //Instruction 57274
            //SINCOS
            t6.x = sin(t33.x);
            t7.x = cos(t33.x);
            //Instruction 57275
            //ADD
            t33.x = (-t7.x) + 1.0;
            //Instruction 57276
            //MUL
            t8 = vec4(t5.y * t33.x, t5.y * t33.x, t5.y * t33.x, t5.z * t33.x);
            //Instruction 57277
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 57278
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 57279
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 57280
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 57281
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 57282
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 57283
            //MUL
            t49 = t5.x * t5.x;
            //Instruction 57284
            //MAD
            t9.w = t49 * t33.x + t7.x;
            //Instruction 57285
            //MOV
            t11.z = t12.x;
            //Instruction 57286
            //MOV
            t11.w = t10.x;
            //Instruction 57287
            //MOV
            t13.z = t9.y;
            //Instruction 57288
            //MOV
            t13.w = t14.y;
            //Instruction 57289
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 57290
            //MOV
            t14.w = t13.y;
            //Instruction 57291
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 57292
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 57293
            //MOV
            t10.w = t11.y;
            //Instruction 57294
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 57295
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 57296
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 57297
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 57298
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 57299
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 57300
            //DP3
            t33.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 57301
            //DP3
            t33.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 57302
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 57303
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 57304
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 57305
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 57306
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 57307
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 57308
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 57309
            //MUL
            t4.xyz = vec3(t50) * t5.xyz;
            //Instruction 57310
        //ELSE
        } else {
            //Instruction 57311
            //MOV
            t33.xy = in_NORMAL0.xy;
            //Instruction 57312
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 57313
        //ENDIF
        }
        //Instruction 57314
    //ELSE
    } else {
        //Instruction 57315
        //MOV
        t33.xy = in_NORMAL0.xy;
        //Instruction 57316
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 57317
    //ENDIF
    }
    //Instruction 57318
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 57319
    //GE
    tb50 = t16_48>=3.000000;
    //Instruction 57320
    //IF
    if(tb50){
        //Instruction 57321
        //EQ
        tb50 = t16_48==5.000000;
        //Instruction 57322
        //IF
        if(tb50){
            //Instruction 57323
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 57324
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 57325
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 57326
            //DP3
            t50 = dot(t5.xyz, t5.xyz);
            //Instruction 57327
            //RSQ
            t50 = inversesqrt(t50);
            //Instruction 57328
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 57329
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57330
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 57331
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57332
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 57333
            //ADD
            t50 = t1.x + _ST_WindBranch.x;
            //Instruction 57334
            //ADD
            t7.x = t50 + in_TEXCOORD0.w;
            //Instruction 57335
            //MAD
            t7.y = t50 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57336
            //MUL
            t51 = t7.x * _ST_WindBranchTwitch.y;
            //Instruction 57337
            //MUL
            t7.z = t51 * 0.500000;
            //Instruction 57338
            //ADD
            t7.w = t7.x + (-in_TEXCOORD0.z);
            //Instruction 57339
            //ADD
            t7 = t7 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 57340
            //FRC
            t7 = fract(t7);
            //Instruction 57341
            //MAD
            t7 = t7 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 57342
            //MUL
            t8 = abs(t7) * abs(t7);
            //Instruction 57343
            //MAD
            t7 = -abs(t7) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 57344
            //MAD
            t7 = t8 * t7 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 57345
            //ADD
            t7 = t7 + t7;
            //Instruction 57346
            //MUL
            t8.w = t7.z * t7.y;
            //Instruction 57347
            //LT
            tb51 = t8.w<0.0;
            //Instruction 57348
            //MOV
            t8.y = (-t8.w);
            //Instruction 57349
            //MOV
            t8.xz = vec2(-1.0, 1.0);
            //Instruction 57350
            //MOVC
            t8.xy = (bool(tb51)) ? t8.xy : t8.zw;
            //Instruction 57351
            //MAD
            t51 = (-t7.y) * t7.z + t8.x;
            //Instruction 57352
            //MAD
            t51 = t8.y * t51 + t8.w;
            //Instruction 57353
            //ADD
            t52 = (-t51) + t8.x;
            //Instruction 57354
            //MAD
            t51 = t8.y * t52 + t51;
            //Instruction 57355
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 57356
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57357
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57358
            //MUL
            t53 = t53 * t7.x;
            //Instruction 57359
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 57360
            //MAD
            t52 = t7.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 57361
            //MUL
            t51 = t51 * t52;
            //Instruction 57362
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 57363
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 57364
            //MAD
            t7.x = t50 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57365
            //MUL
            t50 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 57366
            //MAD
            t7.y = t50 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 57367
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 57368
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 57369
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 57370
            //MUL
            t8.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 57371
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 57372
            //MAD
            t7.xy = t8.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 57373
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 57374
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 57375
            //MUL
            t50 = t7.x * t7.y;
            //Instruction 57376
            //MAD
            t50 = (-t50) * _ST_WindTurbulences.x + 1.0;
            //Instruction 57377
            //MUL
            t51 = t7.w * _ST_WindVector.w;
            //Instruction 57378
            //MAD
            t50 = t51 * _ST_WindBranchWhip.x + t50;
            //Instruction 57379
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 57380
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 57381
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 57382
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 57383
        //ELSE
        } else {
            //Instruction 57384
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 57385
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 57386
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57387
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 57388
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 57389
            //ADD
            t6.x = t1.x + in_TEXCOORD0.w;
            //Instruction 57390
            //MAD
            t6.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 57391
            //MUL
            t1.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 57392
            //MUL
            t6.z = t1.x * 0.500000;
            //Instruction 57393
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 57394
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 57395
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 57396
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 57397
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 57398
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 57399
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 57400
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 57401
            //LT
            tb1 = t7.w<0.0;
            //Instruction 57402
            //MOV
            t7.y = (-t7.w);
            //Instruction 57403
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 57404
            //MOVC
            t7.xy = (bool(tb1)) ? t7.xy : t7.zw;
            //Instruction 57405
            //MAD
            t1.x = (-t6.y) * t6.z + t7.x;
            //Instruction 57406
            //MAD
            t1.x = t7.y * t1.x + t7.w;
            //Instruction 57407
            //ADD
            t50 = (-t1.x) + t7.x;
            //Instruction 57408
            //MAD
            t1.x = t7.y * t50 + t1.x;
            //Instruction 57409
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 57410
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 57411
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 57412
            //MUL
            t51 = t51 * t6.x;
            //Instruction 57413
            //MAD
            t1.x = t1.x * t50 + t51;
            //Instruction 57414
            //MUL
            t5.xyz = t1.xxx * t5.xyz;
            //Instruction 57415
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 57416
        //ENDIF
        }
        //Instruction 57417
    //ENDIF
    }
    //Instruction 57418
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 57419
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 57420
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 57421
    //MAD
    t50 = (-t50) * 0.250000 + t4.y;
    //Instruction 57422
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 57423
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 57424
    //NE
    tb51 = t50!=0.0;
    //Instruction 57425
    //LOG
    t52 = log2(t50);
    //Instruction 57426
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 57427
    //EXP
    t52 = exp2(t52);
    //Instruction 57428
    //MOVC
    t50 = (tb51) ? t52 : t50;
    //Instruction 57429
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 57430
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 57431
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 57432
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 57433
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 57434
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 57435
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 57436
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 57437
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 57438
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 57439
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 57440
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 57441
    //MUL
    t50 = t50 * t51;
    //Instruction 57442
    //MAD
    t5.xz = t3.xz * vec2(t50) + t4.xz;
    //Instruction 57443
    //MOV
    t5.y = t4.y;
    //Instruction 57444
    //DP3
    t50 = dot(t5.xyz, t5.xyz);
    //Instruction 57445
    //RSQ
    t50 = inversesqrt(t50);
    //Instruction 57446
    //MUL
    t3.xzw = vec3(t50) * t5.xyz;
    //Instruction 57447
    //MUL
    t3.xzw = t1.xxx * t3.xzw;
    //Instruction 57448
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 57449
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 57450
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 57451
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 57452
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 57453
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 57454
    //MUL
    t1.x = t4.y * _ProjectionParams.x;
    //Instruction 57455
    //MUL
    t5.w = t1.x * 0.500000;
    //Instruction 57456
    //ADD
    t1.xy = t5.zz + t5.xw;
    //Instruction 57457
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 57458
    //MUL
    t4.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 57459
    //MUL
    t5.xyz = t3.zzz * glstate_matrix_modelview0[1].xyz;
    //Instruction 57460
    //MAD
    t5.xyz = glstate_matrix_modelview0[0].xyz * t3.xxx + t5.xyz;
    //Instruction 57461
    //MAD
    t5.xyz = glstate_matrix_modelview0[2].xyz * t3.www + t5.xyz;
    //Instruction 57462
    //MAD
    t5.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 57463
    //MUL
    t1.xyw = t33.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 57464
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t33.xxx + t1.xyw;
    //Instruction 57465
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * vec3(t19) + t1.xyz;
    //Instruction 57466
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 57467
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 57468
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 57469
    //MUL
    t10_15.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 57470
    //MOV
    t6.xyz = t10_15.xyz;
    //Instruction 57471
    //MOV
    ti49 = 0x0;
    //Instruction 57472
    //LOOP
    while(true){
        //Instruction 57473
        //IGE
        tb50 = ti49>=0x4;
        //Instruction 57474
        //BREAKC
        if(tb50){break;}
        //Instruction 57475
        //MAD
        t7.xyz = (-t5.xyz) * unity_LightPosition[ti49 + 0].www + unity_LightPosition[ti49 + 0].xyz;
        //Instruction 57476
        //DP3
        t50 = dot(t7.xyz, t7.xyz);
        //Instruction 57477
        //RSQ
        t19 = inversesqrt(t50);
        //Instruction 57478
        //MUL
        t7.xyz = vec3(t19) * t7.xyz;
        //Instruction 57479
        //MAD
        t50 = t50 * unity_LightAtten[ti49 + 0].z + 1.0;
        //Instruction 57480
        //DIV
        t50 = float(1.0) / t50;
        //Instruction 57481
        //DP3
        t19 = dot(t7.xyz, unity_SpotDirection[ti49 + 0].xyz);
        //Instruction 57482
        //MAX
        t19 = max(t19, 0.0);
        //Instruction 57483
        //ADD
        t19 = t19 + (-unity_LightAtten[ti49 + 0].x);
        //Instruction 57484
        //MUL
        t19 = t19 * unity_LightAtten[ti49 + 0].y;
        t19 = clamp(t19, 0.0, 1.0);
        //Instruction 57485
        //MUL
        t50 = t50 * t19;
        //Instruction 57486
        //DP3
        t19 = dot(t1.xyz, t7.xyz);
        //Instruction 57487
        //MAX
        t19 = max(t19, 0.0);
        //Instruction 57488
        //MUL
        t50 = t50 * t19;
        //Instruction 57489
        //MAD
        t6.xyz = unity_LightColor[ti49 + 0].xyz * vec3(t50) + t6.xyz;
        //Instruction 57490
        //IADD
        ti49 = ti49 + 0x1;
        //Instruction 57491
    //ENDLOOP
    }
    //Instruction 57492
    //MUL
    t1.xyz = t16_0.xyz * t6.xyz;
    //Instruction 57493
    //MUL
    t0 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 57494
    //MAD
    t0 = glstate_matrix_mvp[0] * t3.xxxx + t0;
    //Instruction 57495
    //MAD
    t0 = glstate_matrix_mvp[2] * t3.wwww + t0;
    //Instruction 57496
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57497
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57498
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 57499
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 57500
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 57501
    //MOV
    vs_TEXCOORD3.xyz = t4.xyz;
    //Instruction 57502
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 57139
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 57140
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 57141
    //MOV
    t1.x = t16_0.x;
    //Instruction 57142
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 57143
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 57144
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 57145
    //LT
    tb1 = t16_1<0.0;
    //Instruction 57146
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 57147
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 57148
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57149
    //LT
    tb1 = t10_2<0.0;
    //Instruction 57150
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 57151
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 57152
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 57153
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 57154
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 57155
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 57156
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 57157
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 57158
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 57159
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 57160
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 57161
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 57162
    //MOV
    SV_Target0 = t16_0;
    //Instruction 57163
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 400
 Tags { "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 463386
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_1.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_5;
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_10;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = worldNormal_2;
  mediump vec4 normal_12;
  normal_12 = tmpvar_11;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57147
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57148
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57149
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57150
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57151
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57152
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57153
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57154
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57155
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57156
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57157
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57158
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57159
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57160
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57161
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57162
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57163
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57164
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57165
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57166
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57167
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57168
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57169
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57170
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57171
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57172
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57173
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57174
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57175
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57176
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57177
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57178
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57179
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57180
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57181
    //MOV
    t0.w = 1.0;
    //Instruction 57182
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57183
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57184
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57185
    //ADD
    vs_TEXCOORD4.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57186
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 57137
    //DP3
    t16_0.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57138
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 57139
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57140
    //MUL
    t16_3.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57141
    //MUL
    t16_2.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 57142
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57143
    //MAD
    t16_0.xyz = t16_2.xyz * t16_0.xxx + t16_3.xyz;
    //Instruction 57144
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57145
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57146
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_6;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_11;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_2;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17 = (_Object2World * _glesVertex);
  tmpvar_5 = (unity_World2Shadow[0] * tmpvar_17);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_17.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_13 = tmpvar_14;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_13;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_8;
  tmpvar_8 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_12;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_2;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec3 lightColor0_18;
  lightColor0_18 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_19;
  lightColor1_19 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_20;
  lightColor2_20 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_21;
  lightColor3_21 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_22;
  lightAttenSq_22 = unity_4LightAtten0;
  highp vec3 normal_23;
  normal_23 = worldNormal_2;
  highp vec3 col_24;
  highp vec4 ndotl_25;
  highp vec4 lengthSq_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_26 = (tmpvar_27 * tmpvar_27);
  lengthSq_26 = (lengthSq_26 + (tmpvar_28 * tmpvar_28));
  lengthSq_26 = (lengthSq_26 + (tmpvar_29 * tmpvar_29));
  ndotl_25 = (tmpvar_27 * normal_23.x);
  ndotl_25 = (ndotl_25 + (tmpvar_28 * normal_23.y));
  ndotl_25 = (ndotl_25 + (tmpvar_29 * normal_23.z));
  highp vec4 tmpvar_30;
  tmpvar_30 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_25 * inversesqrt(lengthSq_26)));
  ndotl_25 = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_30 * (1.0/((1.0 + 
    (lengthSq_26 * lightAttenSq_22)
  ))));
  col_24 = (lightColor0_18 * tmpvar_31.x);
  col_24 = (col_24 + (lightColor1_19 * tmpvar_31.y));
  col_24 = (col_24 + (lightColor2_20 * tmpvar_31.z));
  col_24 = (col_24 + (lightColor3_21 * tmpvar_31.w));
  tmpvar_5 = (((x2_15 + 
    (unity_SHC.xyz * ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y)))
  ) + x1_16) + col_24);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_8;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57513
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57514
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57515
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57516
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57517
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57518
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57519
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57520
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57521
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57522
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57523
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57524
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57525
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57526
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57527
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57528
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57529
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57530
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57531
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57532
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57533
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57534
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57535
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57536
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57537
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57538
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57539
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57540
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57541
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57542
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57543
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 57544
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 57545
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 57546
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 57547
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 57548
    //MOV
    t0.w = 1.0;
    //Instruction 57549
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57550
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57551
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57552
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57553
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57554
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 57555
    //MUL
    t3 = t3 * t3;
    //Instruction 57556
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57557
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57558
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57559
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57560
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 57561
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 57562
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 57563
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57564
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57565
    //MUL
    t0 = t0 * t3;
    //Instruction 57566
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57567
    //MUL
    t0 = t1 * t0;
    //Instruction 57568
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57569
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57570
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57571
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57572
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 57573
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 57574
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 57503
    //DP3
    t16_0.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57504
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 57505
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57506
    //MUL
    t16_3.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57507
    //MUL
    t16_2.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 57508
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57509
    //MAD
    t16_0.xyz = t16_2.xyz * t16_0.xxx + t16_3.xyz;
    //Instruction 57510
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57511
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57512
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = worldNormal_2;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(lengthSq_27)));
  ndotl_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_31 * (1.0/((1.0 + 
    (lengthSq_27 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_32.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_32.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_32.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_32.w));
  tmpvar_5 = (((x2_16 + 
    (unity_SHC.xyz * ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y)))
  ) + x1_17) + col_25);
  tmpvar_6 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_13 = tmpvar_14;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_13;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_6;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_11;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_2;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17 = (_Object2World * _glesVertex);
  tmpvar_5 = (unity_World2Shadow[0] * tmpvar_17);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_17.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_13;
  shadow_13 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_14;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_14) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57589
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57590
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57591
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57592
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57593
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57594
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57595
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57596
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57597
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57598
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57599
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57600
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57601
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57602
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57603
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57604
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57605
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57606
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57607
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57608
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57609
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57610
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57611
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57612
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57613
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57614
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57615
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57616
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57617
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57618
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57619
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57620
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57621
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57622
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57623
    //MOV
    t0.w = 1.0;
    //Instruction 57624
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57625
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57626
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57627
    //ADD
    vs_TEXCOORD4.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57628
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57629
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57630
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57631
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57632
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57633
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57634
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57635
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57636
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 57637
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 57575
    //SAMPLE_C_LZ
    vec3 txVec53 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec53, 0.0);
    //Instruction 57576
    //ADD
    t16_3 = (-_LightShadowData.x) + 1.0;
    //Instruction 57577
    //MAD
    t16_0.x = t16_0.x * t16_3 + _LightShadowData.x;
    //Instruction 57578
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 57579
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57580
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57581
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 57582
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57583
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57584
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 57585
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_9) + t16_2.xyz;
    //Instruction 57586
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57587
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57588
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = worldNormal_2;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(lengthSq_27)));
  ndotl_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_31 * (1.0/((1.0 + 
    (lengthSq_27 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_32.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_32.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_32.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_32.w));
  tmpvar_5 = (((x2_16 + 
    (unity_SHC.xyz * ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y)))
  ) + x1_17) + col_25);
  tmpvar_6 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_13;
  shadow_13 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_14;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_14) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57652
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57653
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57654
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57655
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57656
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57657
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57658
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57659
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57660
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57661
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57662
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57663
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57664
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57665
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57666
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57667
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57668
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57669
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57670
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57671
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57672
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57673
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57674
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57675
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57676
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57677
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57678
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57679
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57680
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57681
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57682
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 57683
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 57684
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 57685
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 57686
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 57687
    //MOV
    t0.w = 1.0;
    //Instruction 57688
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57689
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57690
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57691
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57692
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57693
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 57694
    //MUL
    t3 = t3 * t3;
    //Instruction 57695
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57696
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57697
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57698
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57699
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 57700
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 57701
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 57702
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57703
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57704
    //MUL
    t0 = t0 * t3;
    //Instruction 57705
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57706
    //MUL
    t0 = t1 * t0;
    //Instruction 57707
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57708
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57709
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57710
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57711
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 57712
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 57713
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57714
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57715
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57716
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57717
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57718
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57719
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57720
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57721
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 57722
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 57638
    //SAMPLE_C_LZ
    vec3 txVec54 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec54, 0.0);
    //Instruction 57639
    //ADD
    t16_3 = (-_LightShadowData.x) + 1.0;
    //Instruction 57640
    //MAD
    t16_0.x = t16_0.x * t16_3 + _LightShadowData.x;
    //Instruction 57641
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 57642
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57643
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57644
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 57645
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57646
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57647
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 57648
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_9) + t16_2.xyz;
    //Instruction 57649
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57650
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57651
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_6.xy = tmpvar_1.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_8;
  tmpvar_8.xy = _glesMultiTexCoord2.zw;
  tmpvar_8.z = _glesMultiTexCoord1.w;
  tmpvar_7 = tmpvar_8;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_12;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_2;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57575
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57576
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57577
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57578
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57579
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57580
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57581
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57582
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57583
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57584
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57585
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57586
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57587
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57588
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57589
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57590
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57591
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57592
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57593
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57594
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57595
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57596
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57597
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57598
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57599
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57600
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57601
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57602
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 57603
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 57604
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 57605
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57606
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57607
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57608
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57609
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57610
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57611
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57612
    //MOV
    t0.w = 1.0;
    //Instruction 57613
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57614
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57615
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57616
    //ADD
    vs_TEXCOORD5.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57617
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 57561
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 57562
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57563
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 57564
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 57565
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 57566
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57567
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 57568
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD5.xyz;
    //Instruction 57569
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57570
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 57571
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 57572
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57573
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57574
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec4 tmpvar_19;
  tmpvar_19 = (_Object2World * _glesVertex);
  tmpvar_5 = (unity_World2Shadow[0] * tmpvar_19);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_19.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_17) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_14;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_2;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_2;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(lengthSq_28)));
  ndotl_27 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (lengthSq_28 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_33.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_33.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_33.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_33.w));
  tmpvar_5 = (((x2_17 + 
    (unity_SHC.xyz * ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y)))
  ) + x1_18) + col_26);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = (c_15.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57632
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57633
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57634
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57635
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57636
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57637
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57638
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57639
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57640
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57641
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57642
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57643
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57644
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57645
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57646
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57647
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57648
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57649
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57650
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57651
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57652
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57653
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57654
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57655
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57656
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57657
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57658
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57659
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57660
    //MOV
    t2.xy = in_TEXCOORD2.zw;
    //Instruction 57661
    //MOV
    t2.z = in_TEXCOORD1.w;
    //Instruction 57662
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 57663
    //MUL
    t16_3.x = t0.y * t0.y;
    //Instruction 57664
    //MAD
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    //Instruction 57665
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 57666
    //DP4
    t16_4.x = dot(unity_SHBr, t16_2);
    //Instruction 57667
    //DP4
    t16_4.y = dot(unity_SHBg, t16_2);
    //Instruction 57668
    //DP4
    t16_4.z = dot(unity_SHBb, t16_2);
    //Instruction 57669
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 57670
    //MOV
    t0.w = 1.0;
    //Instruction 57671
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 57672
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 57673
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 57674
    //ADD
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    //Instruction 57675
    //ADD
    t2 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57676
    //MUL
    t4 = t0.yyyy * t2;
    //Instruction 57677
    //MUL
    t2 = t2 * t2;
    //Instruction 57678
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57679
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57680
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57681
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57682
    //MAD
    t2 = t5 * t5 + t2;
    //Instruction 57683
    //MAD
    t1 = t1 * t1 + t2;
    //Instruction 57684
    //RSQ
    t2 = inversesqrt(t1);
    //Instruction 57685
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57686
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57687
    //MUL
    t0 = t0 * t2;
    //Instruction 57688
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57689
    //MUL
    t0 = t1 * t0;
    //Instruction 57690
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57691
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57692
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57693
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57694
    //ADD
    t0.xyz = t0.xyz + t16_3.xyz;
    //Instruction 57695
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 57696
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 57618
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 57619
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57620
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 57621
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 57622
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 57623
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57624
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 57625
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD5.xyz;
    //Instruction 57626
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57627
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 57628
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 57629
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57630
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57631
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_15;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_2;
  mediump vec4 normal_17;
  normal_17 = tmpvar_16;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_2;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_11.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  tmpvar_5 = (((x2_18 + 
    (unity_SHC.xyz * ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y)))
  ) + x1_19) + col_27);
  tmpvar_6 = (unity_World2Shadow[0] * tmpvar_11);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_11.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_9 * tmpvar_17) * diff_20);
  c_19.w = tmpvar_10;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec4 tmpvar_19;
  tmpvar_19 = (_Object2World * _glesVertex);
  tmpvar_5 = (unity_World2Shadow[0] * tmpvar_19);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_19.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57205
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57206
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57207
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57208
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57209
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57210
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57211
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57212
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57213
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57214
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57215
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57216
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57217
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57218
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57219
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57220
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57221
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57222
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57223
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57224
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57225
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57226
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57227
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57228
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57229
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57230
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57231
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57232
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 57233
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 57234
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 57235
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57236
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57237
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57238
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57239
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57240
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57241
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57242
    //MOV
    t0.w = 1.0;
    //Instruction 57243
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57244
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57245
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57246
    //ADD
    vs_TEXCOORD5.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57247
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57248
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57249
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57250
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57251
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57252
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57253
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57254
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57255
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 57256
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 57187
    //SAMPLE_C_LZ
    vec3 txVec61 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec61, 0.0);
    //Instruction 57188
    //ADD
    t16_4 = (-_LightShadowData.x) + 1.0;
    //Instruction 57189
    //MAD
    t16_0.x = t16_0.x * t16_4 + _LightShadowData.x;
    //Instruction 57190
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 57191
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 57192
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57193
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 57194
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 57195
    //MAD
    t16_3.xyz = vec3(t16_12) * t16_3.xyz + t10_2.xyz;
    //Instruction 57196
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57197
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 57198
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD5.xyz;
    //Instruction 57199
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57200
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 57201
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 57202
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57203
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57204
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_15;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_2;
  mediump vec4 normal_17;
  normal_17 = tmpvar_16;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_2;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_11.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  tmpvar_5 = (((x2_18 + 
    (unity_SHC.xyz * ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y)))
  ) + x1_19) + col_27);
  tmpvar_6 = (unity_World2Shadow[0] * tmpvar_11);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_11.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57275
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57276
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57277
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57278
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57279
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57280
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57281
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57282
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57283
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57284
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57285
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57286
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57287
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57288
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57289
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57290
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57291
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57292
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57293
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57294
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57295
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57296
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57297
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57298
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57299
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57300
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57301
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57302
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57303
    //MOV
    t2.xy = in_TEXCOORD2.zw;
    //Instruction 57304
    //MOV
    t2.z = in_TEXCOORD1.w;
    //Instruction 57305
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 57306
    //MUL
    t16_3.x = t0.y * t0.y;
    //Instruction 57307
    //MAD
    t16_3.x = t0.x * t0.x + (-t16_3.x);
    //Instruction 57308
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 57309
    //DP4
    t16_4.x = dot(unity_SHBr, t16_2);
    //Instruction 57310
    //DP4
    t16_4.y = dot(unity_SHBg, t16_2);
    //Instruction 57311
    //DP4
    t16_4.z = dot(unity_SHBb, t16_2);
    //Instruction 57312
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 57313
    //MOV
    t0.w = 1.0;
    //Instruction 57314
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 57315
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 57316
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 57317
    //ADD
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    //Instruction 57318
    //ADD
    t2 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57319
    //MUL
    t4 = t0.yyyy * t2;
    //Instruction 57320
    //MUL
    t2 = t2 * t2;
    //Instruction 57321
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57322
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57323
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57324
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57325
    //MAD
    t2 = t5 * t5 + t2;
    //Instruction 57326
    //MAD
    t1 = t1 * t1 + t2;
    //Instruction 57327
    //RSQ
    t2 = inversesqrt(t1);
    //Instruction 57328
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57329
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57330
    //MUL
    t0 = t0 * t2;
    //Instruction 57331
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57332
    //MUL
    t0 = t1 * t0;
    //Instruction 57333
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57334
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57335
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57336
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57337
    //ADD
    t0.xyz = t0.xyz + t16_3.xyz;
    //Instruction 57338
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 57339
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57340
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57341
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57342
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57343
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57344
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57345
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57346
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57347
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 57348
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 57257
    //SAMPLE_C_LZ
    vec3 txVec62 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec62, 0.0);
    //Instruction 57258
    //ADD
    t16_4 = (-_LightShadowData.x) + 1.0;
    //Instruction 57259
    //MAD
    t16_0.x = t16_0.x * t16_4 + _LightShadowData.x;
    //Instruction 57260
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 57261
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 57262
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 57263
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 57264
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 57265
    //MAD
    t16_3.xyz = vec3(t16_12) * t16_3.xyz + t10_2.xyz;
    //Instruction 57266
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57267
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 57268
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD5.xyz;
    //Instruction 57269
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57270
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 57271
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 57272
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 57273
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57274
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_1.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_5;
  highp vec4 v_7;
  v_7.x = _World2Object[0].x;
  v_7.y = _World2Object[1].x;
  v_7.z = _World2Object[2].x;
  v_7.w = _World2Object[3].x;
  highp vec4 v_8;
  v_8.x = _World2Object[0].y;
  v_8.y = _World2Object[1].y;
  v_8.z = _World2Object[2].y;
  v_8.w = _World2Object[3].y;
  highp vec4 v_9;
  v_9.x = _World2Object[0].z;
  v_9.y = _World2Object[1].z;
  v_9.z = _World2Object[2].z;
  v_9.w = _World2Object[3].z;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(((
    (v_7.xyz * _glesNormal.x)
   + 
    (v_8.xyz * _glesNormal.y)
  ) + (v_9.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_10;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = worldNormal_2;
  mediump vec4 normal_12;
  normal_12 = tmpvar_11;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, normal_12);
  x1_14.y = dot (unity_SHAg, normal_12);
  x1_14.z = dot (unity_SHAb, normal_12);
  mediump vec4 tmpvar_15;
  tmpvar_15 = (normal_12.xyzz * normal_12.yzzx);
  x2_13.x = dot (unity_SHBr, tmpvar_15);
  x2_13.y = dot (unity_SHBg, tmpvar_15);
  x2_13.z = dot (unity_SHBb, tmpvar_15);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_13 + (unity_SHC.xyz * 
    ((normal_12.x * normal_12.x) - (normal_12.y * normal_12.y))
  )) + x1_14);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57362
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57363
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57364
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57365
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57366
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57367
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57368
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57369
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57370
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57371
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57372
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57373
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57374
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57375
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57376
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57377
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57378
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57379
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57380
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57381
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57382
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57383
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57384
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57385
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57386
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57387
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57388
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57389
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57390
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57391
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57392
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57393
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57394
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57395
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57396
    //MOV
    t0.w = 1.0;
    //Instruction 57397
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57398
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57399
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57400
    //ADD
    vs_TEXCOORD4.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57401
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57349
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57350
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57351
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57352
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57353
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57354
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 57355
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57356
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57357
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57358
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57359
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57360
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57361
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_6;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_11;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_2;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17 = (_Object2World * _glesVertex);
  tmpvar_5 = (unity_World2Shadow[0] * tmpvar_17);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_17.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_8;
  tmpvar_8 = (_Object2World * _glesVertex).xyz;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_12;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_2;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  highp vec3 lightColor0_18;
  lightColor0_18 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_19;
  lightColor1_19 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_20;
  lightColor2_20 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_21;
  lightColor3_21 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_22;
  lightAttenSq_22 = unity_4LightAtten0;
  highp vec3 normal_23;
  normal_23 = worldNormal_2;
  highp vec3 col_24;
  highp vec4 ndotl_25;
  highp vec4 lengthSq_26;
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosX0 - tmpvar_8.x);
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosY0 - tmpvar_8.y);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosZ0 - tmpvar_8.z);
  lengthSq_26 = (tmpvar_27 * tmpvar_27);
  lengthSq_26 = (lengthSq_26 + (tmpvar_28 * tmpvar_28));
  lengthSq_26 = (lengthSq_26 + (tmpvar_29 * tmpvar_29));
  ndotl_25 = (tmpvar_27 * normal_23.x);
  ndotl_25 = (ndotl_25 + (tmpvar_28 * normal_23.y));
  ndotl_25 = (ndotl_25 + (tmpvar_29 * normal_23.z));
  highp vec4 tmpvar_30;
  tmpvar_30 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_25 * inversesqrt(lengthSq_26)));
  ndotl_25 = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (tmpvar_30 * (1.0/((1.0 + 
    (lengthSq_26 * lightAttenSq_22)
  ))));
  col_24 = (lightColor0_18 * tmpvar_31.x);
  col_24 = (col_24 + (lightColor1_19 * tmpvar_31.y));
  col_24 = (col_24 + (lightColor2_20 * tmpvar_31.z));
  col_24 = (col_24 + (lightColor3_21 * tmpvar_31.w));
  tmpvar_5 = (((x2_15 + 
    (unity_SHC.xyz * ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y)))
  ) + x1_16) + col_24);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_8;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57415
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57416
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57417
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57418
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57419
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57420
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57421
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57422
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57423
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57424
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57425
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57426
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57427
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57428
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57429
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57430
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57431
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57432
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57433
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57434
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57435
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57436
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57437
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57438
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57439
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57440
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57441
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57442
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57443
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57444
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57445
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 57446
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 57447
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 57448
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 57449
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 57450
    //MOV
    t0.w = 1.0;
    //Instruction 57451
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57452
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57453
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57454
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57455
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57456
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 57457
    //MUL
    t3 = t3 * t3;
    //Instruction 57458
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57459
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57460
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57461
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57462
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 57463
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 57464
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 57465
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57466
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57467
    //MUL
    t0 = t0 * t3;
    //Instruction 57468
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57469
    //MUL
    t0 = t1 * t0;
    //Instruction 57470
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57471
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57472
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57473
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57474
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 57475
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 57476
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57402
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57403
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57404
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57405
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57406
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57407
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 57408
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57409
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57410
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57411
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57412
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57413
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57414
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = worldNormal_2;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(lengthSq_27)));
  ndotl_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_31 * (1.0/((1.0 + 
    (lengthSq_27 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_32.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_32.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_32.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_32.w));
  tmpvar_5 = (((x2_16 + 
    (unity_SHC.xyz * ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y)))
  ) + x1_17) + col_25);
  tmpvar_6 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_6;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_11;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_2;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  highp vec4 tmpvar_17;
  tmpvar_17 = (_Object2World * _glesVertex);
  tmpvar_5 = (unity_World2Shadow[0] * tmpvar_17);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_17.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57714
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57715
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57716
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57717
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57718
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57719
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57720
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57721
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57722
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57723
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57724
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57725
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57726
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57727
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57728
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57729
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57730
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57731
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57732
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57733
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57734
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57735
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57736
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57737
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57738
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57739
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57740
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57741
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57742
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57743
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57744
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57745
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57746
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57747
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57748
    //MOV
    t0.w = 1.0;
    //Instruction 57749
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57750
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57751
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57752
    //ADD
    vs_TEXCOORD4.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57753
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57754
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57755
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57756
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57757
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57758
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57759
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57760
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57761
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 57762
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57697
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57698
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57699
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57700
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57701
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57702
    //SAMPLE_C_LZ
    vec3 txVec49 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec49, 0.0);
    //Instruction 57703
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 57704
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 57705
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 57706
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 57707
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57708
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57709
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57710
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57711
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57712
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57713
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = worldNormal_2;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(lengthSq_27)));
  ndotl_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_31 * (1.0/((1.0 + 
    (lengthSq_27 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_32.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_32.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_32.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_32.w));
  tmpvar_5 = (((x2_16 + 
    (unity_SHC.xyz * ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y)))
  ) + x1_17) + col_25);
  tmpvar_6 = (unity_World2Shadow[0] * tmpvar_9);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_9.xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57740
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57741
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57742
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57743
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57744
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57745
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57746
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57747
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57748
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57749
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57750
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57751
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57752
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57753
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57754
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57755
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57756
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57757
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57758
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57759
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57760
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57761
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57762
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57763
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57764
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57765
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57766
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57767
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57768
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57769
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57770
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 57771
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 57772
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 57773
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 57774
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 57775
    //MOV
    t0.w = 1.0;
    //Instruction 57776
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57777
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57778
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57779
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57780
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57781
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 57782
    //MUL
    t3 = t3 * t3;
    //Instruction 57783
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57784
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57785
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57786
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57787
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 57788
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 57789
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 57790
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57791
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57792
    //MUL
    t0 = t0 * t3;
    //Instruction 57793
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57794
    //MUL
    t0 = t1 * t0;
    //Instruction 57795
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57796
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57797
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57798
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57799
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 57800
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 57801
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57802
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57803
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57804
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57805
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57806
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57807
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57808
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57809
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 57810
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57723
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57724
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57725
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57726
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57727
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57728
    //SAMPLE_C_LZ
    vec3 txVec55 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec55, 0.0);
    //Instruction 57729
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 57730
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 57731
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 57732
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 57733
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57734
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57735
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57736
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57737
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57738
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57739
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_1.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  tmpvar_7.w = _glesVertex.w;
  highp vec3 FinalPosition_8;
  FinalPosition_8 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_8 = (FinalPosition_8 + _glesMultiTexCoord1.xyz);
  tmpvar_7.xyz = FinalPosition_8;
  tmpvar_4 = tmpvar_5;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_12;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_2;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_7).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec3 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57824
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57825
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57826
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57827
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57828
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57829
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57830
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57831
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57832
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57833
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57834
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57835
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57836
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57837
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57838
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57839
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57840
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57841
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57842
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57843
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57844
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57845
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57846
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57847
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57848
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57849
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57850
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57851
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57852
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57853
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57854
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57855
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57856
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57857
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57858
    //MOV
    t0.w = 1.0;
    //Instruction 57859
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57860
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57861
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57862
    //ADD
    vs_TEXCOORD4.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57863
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57811
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57812
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57813
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57814
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57815
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57816
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 57817
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57818
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57819
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57820
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57821
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57822
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57823
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8.w = _glesVertex.w;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_9 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  tmpvar_8.xyz = FinalPosition_9;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8.w = _glesVertex.w;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_9 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  tmpvar_8.xyz = FinalPosition_9;
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_14;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_2;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_2;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(lengthSq_28)));
  ndotl_27 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (lengthSq_28 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_33.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_33.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_33.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_33.w));
  tmpvar_5 = (((x2_17 + 
    (unity_SHC.xyz * ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y)))
  ) + x1_18) + col_26);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57877
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57878
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57879
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57880
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57881
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57882
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57883
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57884
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57885
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57886
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57887
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57888
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57889
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57890
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57891
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57892
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57893
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57894
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57895
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57896
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57897
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57898
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57899
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57900
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57901
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57902
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57903
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57904
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57905
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57906
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57907
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 57908
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 57909
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 57910
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 57911
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 57912
    //MOV
    t0.w = 1.0;
    //Instruction 57913
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57914
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57915
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57916
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57917
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57918
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 57919
    //MUL
    t3 = t3 * t3;
    //Instruction 57920
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 57921
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 57922
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 57923
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 57924
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 57925
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 57926
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 57927
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 57928
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 57929
    //MUL
    t0 = t0 * t3;
    //Instruction 57930
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 57931
    //MUL
    t0 = t1 * t0;
    //Instruction 57932
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 57933
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 57934
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 57935
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 57936
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 57937
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 57938
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57864
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57865
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57866
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57867
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57868
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57869
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 57870
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57871
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57872
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57873
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57874
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57875
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57876
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9.w = _glesVertex.w;
  highp vec3 FinalPosition_10;
  FinalPosition_10 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_10 = (FinalPosition_10 + _glesMultiTexCoord1.xyz);
  tmpvar_9.xyz = FinalPosition_10;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * tmpvar_9).xyz;
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_15;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_2;
  mediump vec4 normal_17;
  normal_17 = tmpvar_16;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_2;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_11.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  tmpvar_5 = (((x2_18 + 
    (unity_SHC.xyz * ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y)))
  ) + x1_19) + col_27);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8.w = _glesVertex.w;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_9 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  tmpvar_8.xyz = FinalPosition_9;
  tmpvar_4 = tmpvar_6;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_16 + (unity_SHC.xyz * 
    ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y))
  )) + x1_17);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 57494
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57495
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57496
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57497
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57498
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57499
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57500
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57501
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57502
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57503
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57504
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57505
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57506
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57507
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57508
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57509
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 57510
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 57511
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 57512
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57513
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57514
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57515
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57516
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57517
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57518
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57519
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57520
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57521
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57522
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57523
    //MUL
    t16_1 = t0.yzzx * t0.xyzz;
    //Instruction 57524
    //DP4
    t16_3.x = dot(unity_SHBr, t16_1);
    //Instruction 57525
    //DP4
    t16_3.y = dot(unity_SHBg, t16_1);
    //Instruction 57526
    //DP4
    t16_3.z = dot(unity_SHBb, t16_1);
    //Instruction 57527
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_3.xyz;
    //Instruction 57528
    //MOV
    t0.w = 1.0;
    //Instruction 57529
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57530
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57531
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57532
    //ADD
    vs_TEXCOORD4.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57533
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 57534
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 57535
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 57536
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 57537
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 57538
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 57539
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 57540
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 57541
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 57542
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57477
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57478
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57479
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57480
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57481
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57482
    //SAMPLE_C_LZ
    vec3 txVec63 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec63, 0.0);
    //Instruction 57483
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 57484
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 57485
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 57486
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 57487
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57488
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57489
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57490
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57491
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57492
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57493
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9.w = _glesVertex.w;
  highp vec3 FinalPosition_10;
  FinalPosition_10 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  FinalPosition_10 = (FinalPosition_10 + _glesMultiTexCoord1.xyz);
  tmpvar_9.xyz = FinalPosition_10;
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_Object2World * tmpvar_9).xyz;
  highp vec4 v_12;
  v_12.x = _World2Object[0].x;
  v_12.y = _World2Object[1].x;
  v_12.z = _World2Object[2].x;
  v_12.w = _World2Object[3].x;
  highp vec4 v_13;
  v_13.x = _World2Object[0].y;
  v_13.y = _World2Object[1].y;
  v_13.z = _World2Object[2].y;
  v_13.w = _World2Object[3].y;
  highp vec4 v_14;
  v_14.x = _World2Object[0].z;
  v_14.y = _World2Object[1].z;
  v_14.z = _World2Object[2].z;
  v_14.w = _World2Object[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(((
    (v_12.xyz * _glesNormal.x)
   + 
    (v_13.xyz * _glesNormal.y)
  ) + (v_14.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_15;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = worldNormal_2;
  mediump vec4 normal_17;
  normal_17 = tmpvar_16;
  mediump vec3 x2_18;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, normal_17);
  x1_19.y = dot (unity_SHAg, normal_17);
  x1_19.z = dot (unity_SHAb, normal_17);
  mediump vec4 tmpvar_20;
  tmpvar_20 = (normal_17.xyzz * normal_17.yzzx);
  x2_18.x = dot (unity_SHBr, tmpvar_20);
  x2_18.y = dot (unity_SHBg, tmpvar_20);
  x2_18.z = dot (unity_SHBb, tmpvar_20);
  highp vec3 lightColor0_21;
  lightColor0_21 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_22;
  lightColor1_22 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_23;
  lightColor2_23 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_24;
  lightColor3_24 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_25;
  lightAttenSq_25 = unity_4LightAtten0;
  highp vec3 normal_26;
  normal_26 = worldNormal_2;
  highp vec3 col_27;
  highp vec4 ndotl_28;
  highp vec4 lengthSq_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosX0 - tmpvar_11.x);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosY0 - tmpvar_11.y);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosZ0 - tmpvar_11.z);
  lengthSq_29 = (tmpvar_30 * tmpvar_30);
  lengthSq_29 = (lengthSq_29 + (tmpvar_31 * tmpvar_31));
  lengthSq_29 = (lengthSq_29 + (tmpvar_32 * tmpvar_32));
  ndotl_28 = (tmpvar_30 * normal_26.x);
  ndotl_28 = (ndotl_28 + (tmpvar_31 * normal_26.y));
  ndotl_28 = (ndotl_28 + (tmpvar_32 * normal_26.z));
  highp vec4 tmpvar_33;
  tmpvar_33 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_28 * inversesqrt(lengthSq_29)));
  ndotl_28 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (tmpvar_33 * (1.0/((1.0 + 
    (lengthSq_29 * lightAttenSq_25)
  ))));
  col_27 = (lightColor0_21 * tmpvar_34.x);
  col_27 = (col_27 + (lightColor1_22 * tmpvar_34.y));
  col_27 = (col_27 + (lightColor2_23 * tmpvar_34.z));
  col_27 = (col_27 + (lightColor3_24 * tmpvar_34.w));
  tmpvar_5 = (((x2_18 + 
    (unity_SHC.xyz * ((normal_17.x * normal_17.x) - (normal_17.y * normal_17.y)))
  ) + x1_19) + col_27);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 57956
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 57957
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 57958
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 57959
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 57960
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 57961
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 57962
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 57963
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 57964
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 57965
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 57966
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57967
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 57968
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 57969
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 57970
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 57971
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 57972
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 57973
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 57974
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 57975
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 57976
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 57977
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 57978
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 57979
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 57980
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 57981
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 57982
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 57983
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 57984
    //MUL
    t16_2.x = t0.y * t0.y;
    //Instruction 57985
    //MAD
    t16_2.x = t0.x * t0.x + (-t16_2.x);
    //Instruction 57986
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 57987
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 57988
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 57989
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 57990
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 57991
    //MOV
    t0.w = 1.0;
    //Instruction 57992
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 57993
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 57994
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 57995
    //ADD
    t16_2.xyz = t16_2.xyz + t16_3.xyz;
    //Instruction 57996
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 57997
    //MUL
    t4 = t0.yyyy * t3;
    //Instruction 57998
    //MUL
    t3 = t3 * t3;
    //Instruction 57999
    //ADD
    t5 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 58000
    //ADD
    t1 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 58001
    //MAD
    t4 = t5 * t0.xxxx + t4;
    //Instruction 58002
    //MAD
    t0 = t1 * t0.zzzz + t4;
    //Instruction 58003
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 58004
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 58005
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 58006
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 58007
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 58008
    //MUL
    t0 = t0 * t3;
    //Instruction 58009
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 58010
    //MUL
    t0 = t1 * t0;
    //Instruction 58011
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 58012
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 58013
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 58014
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 58015
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 58016
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 58017
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 58018
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 58019
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 58020
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 58021
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 58022
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 58023
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 58024
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 58025
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 58026
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 57939
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 57940
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 57941
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 57942
    //LT
    tb0 = t10_1<0.0;
    //Instruction 57943
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 57944
    //SAMPLE_C_LZ
    vec3 txVec56 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec56, 0.0);
    //Instruction 57945
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 57946
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 57947
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 57948
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 57949
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 57950
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 57951
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 57952
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 57953
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 57954
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 57955
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_1.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  tmpvar_7.w = _glesVertex.w;
  tmpvar_7.xyz = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  tmpvar_4 = tmpvar_5;
  highp vec4 v_8;
  v_8.x = _World2Object[0].x;
  v_8.y = _World2Object[1].x;
  v_8.z = _World2Object[2].x;
  v_8.w = _World2Object[3].x;
  highp vec4 v_9;
  v_9.x = _World2Object[0].y;
  v_9.y = _World2Object[1].y;
  v_9.z = _World2Object[2].y;
  v_9.w = _World2Object[3].y;
  highp vec4 v_10;
  v_10.x = _World2Object[0].z;
  v_10.y = _World2Object[1].z;
  v_10.z = _World2Object[2].z;
  v_10.w = _World2Object[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(((
    (v_8.xyz * _glesNormal.x)
   + 
    (v_9.xyz * _glesNormal.y)
  ) + (v_10.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_11;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = worldNormal_2;
  mediump vec4 normal_13;
  normal_13 = tmpvar_12;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, normal_13);
  x1_15.y = dot (unity_SHAg, normal_13);
  x1_15.z = dot (unity_SHAb, normal_13);
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_13.xyzz * normal_13.yzzx);
  x2_14.x = dot (unity_SHBr, tmpvar_16);
  x2_14.y = dot (unity_SHBg, tmpvar_16);
  x2_14.z = dot (unity_SHBb, tmpvar_16);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_7).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_14 + (unity_SHC.xyz * 
    ((normal_13.x * normal_13.x) - (normal_13.y * normal_13.y))
  )) + x1_15);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp vec3 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 58037
    //ADD
    t0.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 58038
    //MAD
    t0.xyz = unity_LODFade.xxx * t0.xyz + in_POSITION0.xyz;
    //Instruction 58039
    //MUL
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 58040
    //MAD
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    //Instruction 58041
    //MAD
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    //Instruction 58042
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t1;
    //Instruction 58043
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 58044
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 58045
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 58046
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 58047
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 58048
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 58049
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 58050
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 58051
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 58052
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 58053
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 58054
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 58055
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 58056
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 58057
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 58058
    //MUL
    t2.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 58059
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t2.xyz;
    //Instruction 58060
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 58061
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 58062
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 58063
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 58064
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 58065
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 58066
    //MUL
    t16_3.x = t1.y * t1.y;
    //Instruction 58067
    //MAD
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    //Instruction 58068
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 58069
    //DP4
    t16_4.x = dot(unity_SHBr, t16_0);
    //Instruction 58070
    //DP4
    t16_4.y = dot(unity_SHBg, t16_0);
    //Instruction 58071
    //DP4
    t16_4.z = dot(unity_SHBb, t16_0);
    //Instruction 58072
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 58073
    //MOV
    t1.w = 1.0;
    //Instruction 58074
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 58075
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 58076
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 58077
    //ADD
    vs_TEXCOORD4.xyz = t16_3.xyz + t16_4.xyz;
    //Instruction 58078
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 58027
    //DP3
    t16_0.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 58028
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 58029
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 58030
    //MUL
    t16_3.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 58031
    //MUL
    t16_2.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 58032
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 58033
    //MAD
    t16_0.xyz = t16_2.xyz * t16_0.xxx + t16_3.xyz;
    //Instruction 58034
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 58035
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 58036
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8.w = _glesVertex.w;
  tmpvar_8.xyz = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  tmpvar_4 = tmpvar_6;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_12;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_2;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_13 = tmpvar_14;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_13;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8.w = _glesVertex.w;
  tmpvar_8.xyz = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  tmpvar_4 = tmpvar_6;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_10;
  v_10.x = _World2Object[0].x;
  v_10.y = _World2Object[1].x;
  v_10.z = _World2Object[2].x;
  v_10.w = _World2Object[3].x;
  highp vec4 v_11;
  v_11.x = _World2Object[0].y;
  v_11.y = _World2Object[1].y;
  v_11.z = _World2Object[2].y;
  v_11.w = _World2Object[3].y;
  highp vec4 v_12;
  v_12.x = _World2Object[0].z;
  v_12.y = _World2Object[1].z;
  v_12.z = _World2Object[2].z;
  v_12.w = _World2Object[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(((
    (v_10.xyz * _glesNormal.x)
   + 
    (v_11.xyz * _glesNormal.y)
  ) + (v_12.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_13;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = worldNormal_2;
  mediump vec4 normal_15;
  normal_15 = tmpvar_14;
  mediump vec3 x2_16;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, normal_15);
  x1_17.y = dot (unity_SHAg, normal_15);
  x1_17.z = dot (unity_SHAb, normal_15);
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_15.xyzz * normal_15.yzzx);
  x2_16.x = dot (unity_SHBr, tmpvar_18);
  x2_16.y = dot (unity_SHBg, tmpvar_18);
  x2_16.z = dot (unity_SHBb, tmpvar_18);
  highp vec3 lightColor0_19;
  lightColor0_19 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_20;
  lightColor1_20 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_21;
  lightColor2_21 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_22;
  lightColor3_22 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_23;
  lightAttenSq_23 = unity_4LightAtten0;
  highp vec3 normal_24;
  normal_24 = worldNormal_2;
  highp vec3 col_25;
  highp vec4 ndotl_26;
  highp vec4 lengthSq_27;
  highp vec4 tmpvar_28;
  tmpvar_28 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_27 = (tmpvar_28 * tmpvar_28);
  lengthSq_27 = (lengthSq_27 + (tmpvar_29 * tmpvar_29));
  lengthSq_27 = (lengthSq_27 + (tmpvar_30 * tmpvar_30));
  ndotl_26 = (tmpvar_28 * normal_24.x);
  ndotl_26 = (ndotl_26 + (tmpvar_29 * normal_24.y));
  ndotl_26 = (ndotl_26 + (tmpvar_30 * normal_24.z));
  highp vec4 tmpvar_31;
  tmpvar_31 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_26 * inversesqrt(lengthSq_27)));
  ndotl_26 = tmpvar_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (tmpvar_31 * (1.0/((1.0 + 
    (lengthSq_27 * lightAttenSq_23)
  ))));
  col_25 = (lightColor0_19 * tmpvar_32.x);
  col_25 = (col_25 + (lightColor1_20 * tmpvar_32.y));
  col_25 = (col_25 + (lightColor2_21 * tmpvar_32.z));
  col_25 = (col_25 + (lightColor3_22 * tmpvar_32.w));
  tmpvar_5 = (((x2_16 + 
    (unity_SHC.xyz * ((normal_15.x * normal_15.x) - (normal_15.y * normal_15.y)))
  ) + x1_17) + col_25);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = (c_13.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 58089
    //ADD
    t0.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 58090
    //MAD
    t0.xyz = unity_LODFade.xxx * t0.xyz + in_POSITION0.xyz;
    //Instruction 58091
    //MUL
    t1 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 58092
    //MAD
    t1 = glstate_matrix_mvp[0] * t0.xxxx + t1;
    //Instruction 58093
    //MAD
    t1 = glstate_matrix_mvp[2] * t0.zzzz + t1;
    //Instruction 58094
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t1;
    //Instruction 58095
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 58096
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 58097
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 58098
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 58099
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 58100
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 58101
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 58102
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 58103
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 58104
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 58105
    //ADD
    t1.xyz = t1.xyz + t2.xyz;
    //Instruction 58106
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 58107
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 58108
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 58109
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 58110
    //MUL
    t2.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 58111
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t2.xyz;
    //Instruction 58112
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 58113
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 58114
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 58115
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 58116
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 58117
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 58118
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 58119
    //MUL
    t16_3.x = t1.y * t1.y;
    //Instruction 58120
    //MAD
    t16_3.x = t1.x * t1.x + (-t16_3.x);
    //Instruction 58121
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 58122
    //DP4
    t16_4.x = dot(unity_SHBr, t16_2);
    //Instruction 58123
    //DP4
    t16_4.y = dot(unity_SHBg, t16_2);
    //Instruction 58124
    //DP4
    t16_4.z = dot(unity_SHBb, t16_2);
    //Instruction 58125
    //MAD
    t16_3.xyz = unity_SHC.xyz * t16_3.xxx + t16_4.xyz;
    //Instruction 58126
    //MOV
    t1.w = 1.0;
    //Instruction 58127
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 58128
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 58129
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 58130
    //ADD
    t16_3.xyz = t16_3.xyz + t16_4.xyz;
    //Instruction 58131
    //ADD
    t2 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 58132
    //MUL
    t4 = t1.yyyy * t2;
    //Instruction 58133
    //MUL
    t2 = t2 * t2;
    //Instruction 58134
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 58135
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 58136
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 58137
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 58138
    //MAD
    t2 = t5 * t5 + t2;
    //Instruction 58139
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 58140
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 58141
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 58142
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 58143
    //MUL
    t1 = t1 * t2;
    //Instruction 58144
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 58145
    //MUL
    t0 = t0 * t1;
    //Instruction 58146
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 58147
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 58148
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 58149
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 58150
    //ADD
    t0.xyz = t0.xyz + t16_3.xyz;
    //Instruction 58151
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 58152
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 58079
    //DP3
    t16_0.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 58080
    //MAX
    t16_0.x = max(t16_0.x, 0.0);
    //Instruction 58081
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 58082
    //MUL
    t16_3.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 58083
    //MUL
    t16_2.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 58084
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 58085
    //MAD
    t16_0.xyz = t16_2.xyz * t16_0.xxx + t16_3.xyz;
    //Instruction 58086
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 58087
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 58088
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_1.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9.w = _glesVertex.w;
  tmpvar_9.xyz = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  tmpvar_4 = tmpvar_7;
  highp vec3 tmpvar_10;
  tmpvar_10 = (_Object2World * tmpvar_9).xyz;
  highp vec4 v_11;
  v_11.x = _World2Object[0].x;
  v_11.y = _World2Object[1].x;
  v_11.z = _World2Object[2].x;
  v_11.w = _World2Object[3].x;
  highp vec4 v_12;
  v_12.x = _World2Object[0].y;
  v_12.y = _World2Object[1].y;
  v_12.z = _World2Object[2].y;
  v_12.w = _World2Object[3].y;
  highp vec4 v_13;
  v_13.x = _World2Object[0].z;
  v_13.y = _World2Object[1].z;
  v_13.z = _World2Object[2].z;
  v_13.w = _World2Object[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(((
    (v_11.xyz * _glesNormal.x)
   + 
    (v_12.xyz * _glesNormal.y)
  ) + (v_13.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_14;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = worldNormal_2;
  mediump vec4 normal_16;
  normal_16 = tmpvar_15;
  mediump vec3 x2_17;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, normal_16);
  x1_18.y = dot (unity_SHAg, normal_16);
  x1_18.z = dot (unity_SHAb, normal_16);
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_16.xyzz * normal_16.yzzx);
  x2_17.x = dot (unity_SHBr, tmpvar_19);
  x2_17.y = dot (unity_SHBg, tmpvar_19);
  x2_17.z = dot (unity_SHBb, tmpvar_19);
  highp vec3 lightColor0_20;
  lightColor0_20 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_21;
  lightColor1_21 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_22;
  lightColor2_22 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_23;
  lightColor3_23 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_24;
  lightAttenSq_24 = unity_4LightAtten0;
  highp vec3 normal_25;
  normal_25 = worldNormal_2;
  highp vec3 col_26;
  highp vec4 ndotl_27;
  highp vec4 lengthSq_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_30;
  tmpvar_30 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_28 = (tmpvar_29 * tmpvar_29);
  lengthSq_28 = (lengthSq_28 + (tmpvar_30 * tmpvar_30));
  lengthSq_28 = (lengthSq_28 + (tmpvar_31 * tmpvar_31));
  ndotl_27 = (tmpvar_29 * normal_25.x);
  ndotl_27 = (ndotl_27 + (tmpvar_30 * normal_25.y));
  ndotl_27 = (ndotl_27 + (tmpvar_31 * normal_25.z));
  highp vec4 tmpvar_32;
  tmpvar_32 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_27 * inversesqrt(lengthSq_28)));
  ndotl_27 = tmpvar_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (tmpvar_32 * (1.0/((1.0 + 
    (lengthSq_28 * lightAttenSq_24)
  ))));
  col_26 = (lightColor0_20 * tmpvar_33.x);
  col_26 = (col_26 + (lightColor1_21 * tmpvar_33.y));
  col_26 = (col_26 + (lightColor2_22 * tmpvar_33.z));
  col_26 = (col_26 + (lightColor3_23 * tmpvar_33.w));
  tmpvar_5 = (((x2_17 + 
    (unity_SHC.xyz * ((normal_16.x * normal_16.x) - (normal_16.y * normal_16.y)))
  ) + x1_18) + col_26);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_13 = tmpvar_14;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_13;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_1.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8.w = _glesVertex.w;
  tmpvar_8.xyz = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  tmpvar_4 = tmpvar_6;
  highp vec4 v_9;
  v_9.x = _World2Object[0].x;
  v_9.y = _World2Object[1].x;
  v_9.z = _World2Object[2].x;
  v_9.w = _World2Object[3].x;
  highp vec4 v_10;
  v_10.x = _World2Object[0].y;
  v_10.y = _World2Object[1].y;
  v_10.z = _World2Object[2].y;
  v_10.w = _World2Object[3].y;
  highp vec4 v_11;
  v_11.x = _World2Object[0].z;
  v_11.y = _World2Object[1].z;
  v_11.z = _World2Object[2].z;
  v_11.w = _World2Object[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(((
    (v_9.xyz * _glesNormal.x)
   + 
    (v_10.xyz * _glesNormal.y)
  ) + (v_11.xyz * _glesNormal.z)));
  worldNormal_2 = tmpvar_12;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = worldNormal_2;
  mediump vec4 normal_14;
  normal_14 = tmpvar_13;
  mediump vec3 x2_15;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, normal_14);
  x1_16.y = dot (unity_SHAg, normal_14);
  x1_16.z = dot (unity_SHAb, normal_14);
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_14.xyzz * normal_14.yzzx);
  x2_15.x = dot (unity_SHBr, tmpvar_17);
  x2_15.y = dot (unity_SHBg, tmpvar_17);
  x2_15.z = dot (unity_SHBb, tmpvar_17);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_15 + (unity_SHC.xyz * 
    ((normal_14.x * normal_14.x) - (normal_14.y * normal_14.y))
  )) + x1_16);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_13;
  shadow_13 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_14;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_9 * tmpvar_14) * diff_17);
  c_16.w = tmpvar_10;
  c_15.w = c_16.w;
  c_15.xyz = (c_16.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_15.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4